<idl xmlns="http://thrift.apache.org/xml/idl" xmlns:idl="http://thrift.apache.org/xml/idl">
  <!-- 
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 -->
  <document name="tutorial" targetNamespace="http://thrift.apache.org/xml/ns/tutorial" xmlns:tutorial="http://thrift.apache.org/xml/ns/tutorial" doc="The first thing to know about are types. The available types in Thrift are:

 bool        Boolean, one byte
 i8 (byte)   Signed 8-bit integer
 i16         Signed 16-bit integer
 i32         Signed 32-bit integer
 i64         Signed 64-bit integer
 double      64-bit floating point value
 string      String
 binary      Blob (byte array)
 map&lt;t1,t2&gt;  Map from one type to another
 list&lt;t1&gt;    Ordered list of one type
 set&lt;t1&gt;     Set of unique elements of one type

Did you also notice that Thrift supports C style comments?">
    <include name="shared" />
    <namespace name="cpp" value="tutorial" />
    <namespace name="java" value="tutorial" />
    <namespace name="js" value="tutorial" />
    <namespace name="json" value="tutorial" />
    <namespace name="php" value="tutorial" />
    <namespace name="py" value="tutorial" />
    <namespace name="rs" value="tutorial" />
    <namespace name="xml" value="tutorial" />
    <const name="INT32CONSTANT" doc="Thrift also lets you define constants for use across languages. Complex
types and structs are specified using JSON notation." type="i32">
      <int>9853</int>
    </const>
    <const name="MAPCONSTANT" type="map">
      <keyType type="string" />
      <valueType type="string" />
      <map>
        <entry>
          <key>
            <string>goodnight</string>
          </key>
          <value>
            <string>moon</string>
          </value>
        </entry>
        <entry>
          <key>
            <string>hello</string>
          </key>
          <value>
            <string>world</string>
          </value>
        </entry>
      </map>
    </const>
    <typedef name="MyInteger" doc="Thrift lets you do typedefs to get pretty names for your types. Standard
C style here." type="i32" />
    <enum name="Operation" doc="You can define enums, which are just 32 bit integers. Values are optional
and start at 1 if not supplied, C style again.">
      <member name="ADD" value="1" />
      <member name="SUBTRACT" value="2" />
      <member name="MULTIPLY" value="3" />
      <member name="DIVIDE" value="4" />
    </enum>
    <struct name="Work" doc="Structs are the basic complex data structures. They are comprised of fields
which each have an integer identifier, a type, a symbolic name, and an
optional default value.

Fields can be declared &quot;optional&quot;, which ensures they will not be included
in the serialized output if they aren&apos;t set.  Note that this requires some
manual management in some languages.">
      <field name="num1" field-id="1" type="i32">
        <default>
          <int>0</int>
        </default>
      </field>
      <field name="num2" field-id="2" type="i32" />
      <field name="op" field-id="3" type="id" type-module="tutorial" type-id="Operation" />
      <field name="comment" field-id="4" required="optional" type="string" />
    </struct>
    <exception name="InvalidOperation" doc="Structs can also be exceptions, if they are nasty.">
      <field name="whatOp" field-id="1" type="i32" />
      <field name="why" field-id="2" type="string" />
    </exception>
    <service name="Calculator" targetNamespace="http://thrift.apache.org/xml/ns/tutorial/Calculator" xmlns:tns="http://thrift.apache.org/xml/ns/tutorial/Calculator" parent-module="shared" parent-id="SharedService" doc="Ahh, now onto the cool part, defining a service. Services just need a name
and can optionally inherit from another service using the extends keyword.">
      <method name="ping" doc="A method definition looks like C code. It has a return type, arguments,
and optionally a list of exceptions that it may throw. Note that argument
lists and exception lists are specified using the exact same syntax as
field lists in struct or exception definitions.">
        <returns type="void" />
      </method>
      <method name="add">
        <returns type="i32" />
        <arg name="num1" field-id="1" type="i32" />
        <arg name="num2" field-id="2" type="i32" />
      </method>
      <method name="calculate">
        <returns type="i32" />
        <arg name="logid" field-id="1" type="i32" />
        <arg name="w" field-id="2" type="id" type-module="tutorial" type-id="Work" />
        <throws name="ouch" field-id="1" type="id" type-module="tutorial" type-id="InvalidOperation" />
      </method>
      <method name="zip" oneway="true" doc="This method has a oneway modifier. That means the client only makes
a request and does not listen for any response at all. Oneway methods
must be void.">
        <returns type="void" />
      </method>
    </service>
  </document>
</idl>
