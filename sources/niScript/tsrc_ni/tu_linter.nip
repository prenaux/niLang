//
// cd $WORK/niLang && . hat
// # Run all the tests
// ham Run_Test_niScript_tu_linter
// # Run the tests matching the specified regex with lint tracing for that test
// ham Run_Test_niScript_tu_linter A0=-Dtest=linter_4 A1=-DlintTrace=1
//
// # Lint scripts/lang.ni
// ni -c "$WORK/niLang/scripts/lang.ni"
//
// TODO:
// - [ ] p1: Handle ImportModule(script)
// - [ ] p1: lang.ni fully lints with (this)_key_notfound_callk/getk
// - [ ] p1: Fully lint all tu_* test cases.
// - [ ] p2: Match types that are passed to function parameters, right now we only count the numbers of parameter passed
// - [ ] p2: Match table types, not just base types
// - [ ] p2: Check operator usages, -= with a string should fail, += is fine, "string" * int is dodgy, etc...
// - [ ] p2: Handle table<mytable> & table<::some.namespace.table_name> to define the shape of a table type
// - [ ] p2: if ("foo" in someTable) { scopeA; } should add "foo" for the duration of scopeA
// - [ ] p2: if (someTable.?foo) { scopeA; } should add "foo" for the duration of scopeA
// - [ ] p2: Implement basic operators for literal types for float, string & integers
// - [x] p0: 'safe' .?somefunc() access should not warn/error
// - [x] p0: 'safe' .?somekey access should not warn/error
// - [x] p0: Handle ImportScript(script)
// - [x] p1: Handle Import(script or NativeModule)
// - [x] p0: (this)_key_notfound_(get|getk|callk): ::Null not found in X should only be an explicit warning
// - [x] p0: Handle GetLangDelegate(type)
// - [x] p0: Handle ImportNative(NativeModule)
// - [x] p0: if (typeof(x) == "sometype") { scopeA; } should set the type of x to "sometype" for the duration of scopeA
// - [x] p0: switch (typeof(x)) { case "sometype": scopeA; break; } should set the type of x to "sometype" for the duration of scopeA
//
::Import("unittest.ni")
::Import("lang.ni")
::REGEX <- ::ImportModule("regex.ni")

testLinter <- {
  mTestFilter = null
  mLogs = []
  mLogsError = 0
  mLogsWarning = 0
  mFailedChecks = []
  mSucceededChecks = []
  mInLogSink = 0

  function GetThreadID() {
    return ::GetMainThreadID();
  }
  function HandleMessage(aMsg,aA,aB) {
    if (aMsg != ::eSystemMessage.Log)
      return;
    if (mInLogSink)
      return;
    mInLogSink = true
    try {
      local logType = aA
      local msg = aB
      if (msg.startswith("Lint:")) {
        if (msg.startswith("Lint: Error:")) {
          mLogsError++;
        }
        else if (msg.startswith("Lint: Warning:")) {
          mLogsWarning++;
        }
        mLogs.push(msg)
      }
    }
    catch (e) {
    }
    mInLogSink = false
  }

  function register() {
    mLogs = []
    mLogsError = 0
    mLogsWarning = 0
    ::gLang.system_message_handlers.AddSink(this)
  }

  function unregister() {
    ::gLang.system_message_handlers.RemoveSink(this)
  }

  function check(aName,afnTest) {
    if (mTestFilter && !mTestFilter.DoesMatch(aName)) {
      ::log("FILTER SKIPPED TEST:" aName)
      return
    }
    else {
      ::log("TEST:" aName)
    }

    register()
    local exc
    try {
      {
        local lintTrace = ::lang.getProperty("lintTrace")
        ::log("lintTrace:" lintTrace)
        if (lintTrace) {
          ::gLang.SetProperty("niScript.LintTrace", lintTrace);
        }
      }
      // This has for side effect to lint the file for now.
      // TODO: Move that in a cleaner more explicit API.
      ::Import(aName)
      ::EXPECT_LINT_OK(mLogs);
      afnTest.call(::getroottable(),mLogs,this)
    }
    catch (e) {
      mFailedChecks.push(aName)
      exc = e
      ::logError(::format("FAILED: %s, %d log(s)", aName, mLogs.size()));
    }
    if (!exc) {
      mSucceededChecks.push(aName)
      ::log(::format("SUCCEEDED: %s, %d log(s)", aName, mLogs.size()));
    }
    ::gLang.SetProperty("niScript.LintTrace", "0")
    unregister()
  }
}

// Takes `aLogs` explicitly so that it shows in a more readable manner in the
// failure stack.
function ::EXPECTED_LINT(aLogs,aExpectedCount,aMsg) {
  local pattern = ::REGEX.pcre(aMsg)
  local found = 0;
  foreach (l in aLogs) {
    if (l.contains(aMsg) || pattern.DoesMatch(l))
      ++found
  }
  ::CHECK_EQUAL(aExpectedCount,found,"Expected lint: '" + aMsg + "'")
}

function ::EXPECT_LINT_OK(aLogs) {
  ::EXPECTED_LINT(aLogs, 0, "Lint: Error: internal_");
  ::EXPECTED_LINT(aLogs, 0, "Lint: Warning: internal_");
}

function main() {
  local testProperty = ::lang.getProperty("test")
  if (testProperty) {
    testLinter.mTestFilter = ::REGEX.pcre(testProperty)
  }

  testLinter.check(
    "linter_01.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);
      ::CHECK_EQUAL(13,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(8,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_02_this_and_roottable.ni",
    function(aLogs) {
      ::CHECK_EQUAL(1,aLogs.size(),"Lints count.");
      EXPECTED_LINT(
        aLogs, 1,
        {[Lint: Error: Experimental: key_notfound_callk: "functionNotInRoot"]})
    })

  testLinter.check(
    "linter_03_this_set_key_notfound.ni",
    function(aLogs) {
      ::CHECK_EQUAL(1,aLogs.size(),"Lints count.");
      EXPECTED_LINT(
        aLogs, 1,
        {[Lint: Error: this_set_key_notfound: "_unknownkey"]})
    })

  testLinter.check(
    "linter_04_function_call.ni",
    function(aLogs) {
      EXPECTED_LINT(
        aLogs, 5,
        {[call_num_args: call_func: Incorrect number of arguments passed]})
      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_func: Incorrect number of arguments passed, expected 0 but got 1. Calling f0]})
      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_func: Incorrect number of arguments passed, expected 0 but got 2. Calling f0]})
      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_func: Incorrect number of arguments passed, expected 3 but got 4. Calling f3]})
      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_func: Incorrect number of arguments passed, expected 3 but got 2. Calling f3]})

      ::CHECK_EQUAL(5,aLogs.size(),"Lints count.");
    })

  testLinter.check(
    "linter_05_method_def_call.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_method: Incorrect number of arguments passed, expected 2 but got 3. Calling method_def<iMath,RandIntRange/2>.]});

      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_method: Incorrect number of arguments passed, expected 2 but got 1. Calling method_def<iMath,RandIntRange/2>.]});

      EXPECTED_LINT(
        aLogs, 1,
        {[call_num_args: call_method: Incorrect number of arguments passed, expected 1 but got 0. Calling method_def<iFile,WriteString/1>.]});

      EXPECTED_LINT(
        aLogs, 1,
        {[ret_type_cant_assign: Cant assign type 'interface' to return type 'string'. interface_def<iTime> -> resolved_type<string>.]})

      EXPECTED_LINT(
        aLogs, 1,
        "call_null: Attempting to call 'error_code<error_code_cant_find_method_def,Cant find method definition 'iMath::NotaMethod'>'");

      ::CHECK_EQUAL(5,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(1,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_06_query_interface.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        "call_null: Attempting to call 'error_code<error_code_cant_find_method_def,Cant find method definition 'iUnknown::RandIntRange'>'");

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_callk: "RandIntRange" not found in interface_def<iUnknown>]});

      ::CHECK_EQUAL(1,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(1,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_07_call_native_func.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_num_args: call_method: Incorrect number of arguments passed, expected 1 but got 2. Calling method_def<NULL,vmprintln/1>.");

      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_error: call_lint_func: CreateInstance/-1: too many arguments '4', expected at most 3.");
      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_error: call_lint_func: CreateInstance/-1: not enough arguments '0', expected at least 1.");

      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_error: call_lint_func: CreateGlobalInstance/-1: too many arguments '4', expected at most 3.");
      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_error: call_lint_func: CreateGlobalInstance/-1: not enough arguments '0', expected at least 1.");

      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_error: call_lint_func: CreateGlobalInstance/-1: Cant find object type 'niLang.TheUnknownHamster'.");

      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_num_args: call_nativeclosure: Incorrect number of arguments, expected 1 but got 2. Calling endswith/1.");
      EXPECTED_LINT(
        aLogs, 1,
        "Lint: Error: call_num_args: call_nativeclosure: Incorrect number of arguments, expected at least 1 but got 0. Calling find/-3.");

      ::CHECK_EQUAL(8,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(0,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_08_lint_assert_type.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_callk: "Log" not found in interface_def<iUnknown>]});

      ::CHECK_EQUAL(1,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(1,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_09_builtin_delegates.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<int>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<float>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<string>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<array>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<table>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<closure>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<Vec2>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<Vec3>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<Vec4>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<Matrix>]});
      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_callk: "thehamster" not found in resolved_type<UUID>]});

      EXPECTED_LINT(
        aLogs, 11,
        {[key_notfound_callk: "thehamster" not found in resolved_type]});

      ::CHECK_EQUAL(11, aLintResults.mLogsError, "Expected lint errors.");
      ::CHECK_EQUAL(11, aLintResults.mLogsWarning, "Expected lint warnings.");
    })

  testLinter.check(
    "linter_10_function_ret_type.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(aLogs, 1,
                    "ret_type_cant_assign: Cant assign type 'int' to return type 'string'");

      EXPECTED_LINT(aLogs, 1,
                    "ret_type_cant_assign: Cant assign type 'string' to return type 'int'");

      ::CHECK_EQUAL(2, aLintResults.mLogsError, "Expected lint errors.");
      ::CHECK_EQUAL(0, aLintResults.mLogsWarning, "Expected lint warnings.");
    })

  testLinter.check(
    "linter_11_property.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(aLogs, 1,
                    "Cant assign type 'interface' to return type 'int'. interface_def<iTime> -> resolved_type<int>");

      EXPECTED_LINT(aLogs, 1,
                    {[key_notfound_getk: "num_chars_hamster" not found in interface_def<iHStringCharIt>.*linter_11_property.ni:19:.*]})

      ::CHECK_EQUAL(2, aLintResults.mLogsError, "Expected lint errors.");
      ::CHECK_EQUAL(0, aLintResults.mLogsWarning, "Expected lint warnings.");
    })

  testLinter.check(
    "linter_12_lint_as_type.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_callk: "Log" not found in interface_def<iUnknown>]});

      EXPECTED_LINT(
        aLogs, 1,
        {[call_error: call_lint_func: LintAsType/2: Cant find interface definition 'iTheUnknownHamster']});

      ::CHECK_EQUAL(2,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(1,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_13_import_native.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_getk: "FluffyHamster" not found in enum_def<eDataTablePropertyType>]});

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_getk: "StartedHamster" not found in enum_def<eCURLMessage>]});

      ::CHECK_EQUAL(2,aLintResults.mLogsError,
                    "Expected lint errors.");
      ::CHECK_EQUAL(0,aLintResults.mLogsWarning,
                    "Expected lint warnings.");
    })

  testLinter.check(
    "linter_14_in_operator.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      // TODO
      // ::CHECK_EQUAL(2,aLintResults.mLogsError,
      //               "Expected lint errors.");
      // ::CHECK_EQUAL(0,aLintResults.mLogsWarning,
      //               "Expected lint warnings.");
    })

  testLinter.check(
    "linter_15_typeof_operator.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      // typeof_usage
      {
        EXPECTED_LINT(aLogs, 0, {[Lint: Error:.*\(in typeof_usage.*\)]});
        EXPECTED_LINT(aLogs, 9, {[Lint: Warning:.*\(in typeof_usage.*\)]});

        EXPECTED_LINT(aLogs, 2, {[typeof_usage: Redundant typeof with known value type.*\(in typeof_usage.*\)]});
        EXPECTED_LINT(aLogs, 3, {[typeof_usage: typeof_eq: Invalid typeof test type.*\(in typeof_usage.*\)]});
        EXPECTED_LINT(aLogs, 4, {[typeof_usage: typeof_eq: Typedef should be a literal string.*\(in typeof_usage.*\)]});
      }

      // typeof_t_append
      {
        EXPECTED_LINT(aLogs, 0, {[Lint: Error:.*\(in typeof_t_append.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in typeof_t_append.*\)]});
      }

      // typeof_switch1
      {
        EXPECTED_LINT(aLogs, 1, {[key_notfound_callk: "append" not found in error_code<error_code_dangling_type,typeof_end Switch.*>. \(in typeof_switch2.*\)]});

        EXPECTED_LINT(aLogs, 1, {[Lint: Error:.*\(in typeof_switch1.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in typeof_switch1.*\)]});
      }

      // typeof_switch2
      {
        EXPECTED_LINT(aLogs, 1, {[key_notfound_callk: "startswith" not found in resolved_type<array>. \(in typeof_switch2.*\)]});
        EXPECTED_LINT(aLogs, 2, {[key_notfound_callk: "startswith" not found in error_code<error_code_dangling_type,typeof_end Switch.*>. \(in typeof_switch2.*\)]});
        EXPECTED_LINT(aLogs, 1, {[key_notfound_callk: "append" not found in error_code<error_code_dangling_type,typeof_end Switch.*>. \(in typeof_switch2.*\)]});
        EXPECTED_LINT(aLogs, 1, {[key_notfound_callk: "append" not found in resolved_type<string>. \(in typeof_switch2.*\)]});

        EXPECTED_LINT(aLogs, 6, {[Lint: Error:.*\(in typeof_switch2.*\)]});
        EXPECTED_LINT(aLogs, 1, {[Lint: Warning:.*\(in typeof_switch2.*\)]});
      }

      // typeof_if_string_eq_t
      {
        EXPECTED_LINT(aLogs, 2, {[Lint: Error:.*\(in typeof_if_string_eq_t.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in typeof_if_string_eq_t.*\)]});

        EXPECTED_LINT(aLogs, 2, {[key_notfound_callk: "startswith" not found in error_code<error_code_dangling_type,typeof_end IfEnd>. \(in typeof_if_string_eq_t.*\)]});
      }

      // typeof_if_t_eq_string
      {
        EXPECTED_LINT(aLogs, 2, {[Lint: Error:.*\(in typeof_if_t_eq_string.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in typeof_if_t_eq_string.*\)]});

        EXPECTED_LINT(aLogs, 2, {[key_notfound_callk: "startswith" not found in error_code<error_code_dangling_type,typeof_end IfEnd>. \(in typeof_if_t_eq_string.*\)]});
      }

      // typeof_if_n_eq_string
      {
        EXPECTED_LINT(aLogs, 2, {[Lint: Error:.*\(in typeof_if_n_eq_string.*\)]});
        EXPECTED_LINT(aLogs, 1, {[Lint: Warning:.*\(in typeof_if_n_eq_string.*\)]});
      }

      // typeof_table_member
      {
        EXPECTED_LINT(aLogs, 1, {[Lint: Error:.*\(in typeof_table_member.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in typeof_table_member.*\)]});
      }

      // main
      {
        EXPECTED_LINT(aLogs, 4, {[Lint: Error:.*\(in main.*\)]});
        EXPECTED_LINT(aLogs, 0, {[Lint: Warning:.*\(in main.*\)]});
      }

      // all
      {
        ::CHECK_EQUAL(18,aLintResults.mLogsError,"Expected lint errors.");
        ::CHECK_EQUAL(11,aLintResults.mLogsWarning,"Expected lint warnings.");
      }
    })

  testLinter.check(
    "linter_16_import_script.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_getk: "FluffyHamster" not found in enum_def<eDataTablePropertyType>]});

      // TODO
      // ::CHECK_EQUAL(2,aLintResults.mLogsError, "Expected lint errors.");
      // ::CHECK_EQUAL(0,aLintResults.mLogsWarning, "Expected lint warnings.");
    })

  testLinter.check(
    "linter_17_import_script_in_table.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      // TODO
      // ::CHECK_EQUAL(2,aLintResults.mLogsError,
      //               "Expected lint errors.");
      // ::CHECK_EQUAL(0,aLintResults.mLogsWarning,
      //               "Expected lint warnings.");
    })

  testLinter.check(
    "linter_18_safe_get.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(
        aLogs, 1,
        {[Error: this_key_notfound_getk: "numfagiano" not found]});

      EXPECTED_LINT(
        aLogs, 1,
        {[this_key_notfound_callk: "cookfagiano" not found]});

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_getk: "hamster" not found in TABLE{foo]});

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_callk: "byebye" not found in TABLE{foo]});

      EXPECTED_LINT(
        aLogs, 1,
        {[key_notfound_getk: I32{10} not found in ARRAY{size:3]});

      ::CHECK_EQUAL(5,aLintResults.mLogsError,"Expected lint errors.");
      ::CHECK_EQUAL(0,aLintResults.mLogsWarning,"Expected lint warnings.");
    })

  testLinter.check(
    "linter_19_table_types.ni",
    function(aLogs, table:testLinter aLintResults) {
      ::EXPECT_LINT_OK(aLogs);

      EXPECTED_LINT(aLogs, 1, {[Error: param_type: Cant resolve type "table:tNotAType" of parameter[0] "t": Cant find table type 'table:tNotAType'. Single path element 'tNotAType' not found in TABLE{__moduleroot__]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "name" not found in resolved_type<table>.]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "not_a_field" not found in resolved_type<table>.]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "not_a_field" not found in TABLE{table:tThisFagiano]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "not_a_field" not found in TABLE{table:tSubThisLion]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "not_a_field" not found in TABLE{table:qoo.tSubThisLion]})
      EXPECTED_LINT(aLogs, 1, {[key_notfound_getk: "not_a_field" not found in TABLE{::foo.tGlobalSquirrel]})

      ::CHECK_EQUAL(7,aLintResults.mLogsError,"Expected lint errors.");
      ::CHECK_EQUAL(0,aLintResults.mLogsWarning,"Expected lint warnings.");
    })

  // Output failed tests
  if (!testLinter.mFailedChecks.empty()) {
    ::logError(::format("Linter test failed: %d",
                        testLinter.mFailedChecks.size()));
    foreach (n in testLinter.mFailedChecks) {
      ::println("- " + n);
    }
    ::gLang.Exit(1)
  }
  else {
    ::log(::format("All linter tests succeed: %d",
                   testLinter.mSucceededChecks.size()));
  }
}
