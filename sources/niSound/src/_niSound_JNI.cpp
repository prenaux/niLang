/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include "stdafx.h"

#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;



static const char *ni_classNames[12] = {
        "ni/niLang/IHString",
        "ni/niSound/ISoundBuffer",
        "ni/niSound/ISoundData",
        "ni/niSound/ISoundDataLoader",
        "ni/niSound/ISoundDriver",
        "ni/niSound/ISoundDriverBuffer",
        "ni/niSound/ISoundDriverBufferDataSink",
        "ni/niSound/ISoundFactory",
        "ni/niSound/ISoundFormat",
        "ni/niSound/ISoundMixer",
        "ni/niSound/ISoundMixer3D",
        "ni/niSound/ISoundSource" };
static jclass ni_classes[12] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

JNIEXPORT jint JNICALL JNI_OnLoad_niSound(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnLoad(vm, (void**)&e, JNI_VERSION_1_4) == 0) {
        fprintf(stderr, "niJVM_OnLoad() failed !");
        return 0;
    }
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload_niSound(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnUnload(vm, (void**)&e, JNI_VERSION_1_4) != JNI_OK) {
        fprintf(stderr, "niJVM_OnUnload() failed !");
        return;
    }
    for (int i = 0; i < 12; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}

#if !defined niLib
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    return JNI_OnLoad_niSound(vm,reserved);
}
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {
    JNI_OnUnload_niSound(vm,reserved);
}
#endif // defined niLib

/// Forward declarations ///
niExportFunc(ni::iSoundDriverBufferDataSink*) NewJNIWrapper_ni_iSoundDriverBufferDataSink(JNIEnv* e, jobject o);

/// Methods declarations ///

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundBuffer_createInstance(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateInstance();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundBuffer_getFormat(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSoundFormat rvalue = pointer->GetFormat();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundBuffer_getFrequency(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFrequency();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundBuffer_getIsInstance(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsInstance();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundBuffer_getIsStreamed(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsStreamed();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundBuffer_getStreamSoundData(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStreamSoundData();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundBuffer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundBuffer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundBuffer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundBuffer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundBuffer_readRaw(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadRaw((ni::tPtr)pointer0, p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundBuffer_resetPosition(JNIEnv *e, jobject o) {
    ni::iSoundBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ResetPosition();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundData_clone(JNIEnv *e, jobject o) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundData_getFormat(JNIEnv *e, jobject o) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSoundFormat rvalue = pointer->GetFormat();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundData_getFrequency(JNIEnv *e, jobject o) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFrequency();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundData_getLength(JNIEnv *e, jobject o) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLength();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundData_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundData>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundData_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundData>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundData_readRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadRaw((ni::tPtr)pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundData_reset(JNIEnv *e, jobject o) {
    ni::iSoundData* pointer = niJVM_GetIUnknown(e,o,ni::iSoundData);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDataLoader_loadSoundData(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundDataLoader* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDataLoader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadSoundData(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDataLoader_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundDataLoader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDataLoader>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iSoundDataLoader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDataLoader_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundDataLoader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDataLoader>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iSoundDataLoader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_getBuffer(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundDriverBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBuffer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iSoundDriverBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundDriver_getCaps(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetCaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_getMixer(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundMixer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMixer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iSoundMixer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_getMixer3D(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundMixer3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMixer3D();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iSoundMixer3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_getName(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriver>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iSoundDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriver_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriver>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iSoundDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriver_shutdown(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Shutdown();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriver_startup(JNIEnv *e, jobject o, jint p0, jint p1, jlong p2) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Startup((eSoundFormat)p0, p1, (ni::tIntPtr)p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriver_switchIn(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchIn();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriver_switchOut(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchOut();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundDriver_update(JNIEnv *e, jobject o) {
    ni::iSoundDriver* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Update();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBuffer_getSink(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundDriverBufferDataSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSink();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iSoundDriverBufferDataSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundDriverBuffer_getSize(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriverBuffer_play(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Play((eSoundFormat)p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBuffer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundDriverBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriverBuffer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iSoundDriverBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBuffer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundDriverBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriverBuffer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iSoundDriverBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundDriverBuffer_setSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iSoundDriverBufferDataSink* pointer0 = p0 == NULL ? NULL : (ni::iSoundDriverBufferDataSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSink(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriverBuffer_stop(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Stop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriverBuffer_switchIn(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchIn();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundDriverBuffer_switchOut(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchOut();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundDriverBuffer_updateBuffer(JNIEnv *e, jobject o) {
    ni::iSoundDriverBuffer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBuffer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateBuffer();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBufferDataSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iSoundDriverBufferDataSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iSoundDriverBufferDataSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iSoundDriverBufferDataSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundDriverBufferDataSink_onSoundDriverBufferDataSink(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iSoundDriverBufferDataSink* pointer = niJVM_GetIUnknown(e,o,ni::iSoundDriverBufferDataSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    NI_JVM_CPP_TRY {
        pointer->OnSoundDriverBufferDataSink((void*)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBufferDataSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundDriverBufferDataSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriverBufferDataSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iSoundDriverBufferDataSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundDriverBufferDataSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundDriverBufferDataSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundDriverBufferDataSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iSoundDriverBufferDataSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niSound.ISoundDriverBufferDataSinkImpl
// Implement JNI Wrapper for ni::iSoundDriverBufferDataSink
struct JNI_ni_iSoundDriverBufferDataSink : public ni::cIUnknownImpl<iSoundDriverBufferDataSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnSoundDriverBufferDataSink;

  JNI_ni_iSoundDriverBufferDataSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iSoundDriverBufferDataSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnSoundDriverBufferDataSink -> (Ljava/nio/Buffer;I)V
  virtual void __stdcall OnSoundDriverBufferDataSink(void* p0, ni::tU32 p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iSoundDriverBufferDataSink,OnSoundDriverBufferDataSink,onSoundDriverBufferDataSink,"(Ljava/nio/Buffer;I)V",;);
    jvalue args[2];
    jobject var_p0 = e->NewDirectByteBuffer(p0,p1);
    LocalJRef<jobject> jvar_p0(e,var_p0);
    args[0].l = jvar_p0.o;
    args[1].i = p1;
    e->CallVoidMethodA(mObject,mmOnSoundDriverBufferDataSink,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iSoundDriverBufferDataSink,OnSoundDriverBufferDataSink,onSoundDriverBufferDataSink,;);
  }
};
niExportFunc(ni::iSoundDriverBufferDataSink*) NewJNIWrapper_ni_iSoundDriverBufferDataSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iSoundDriverBufferDataSink,e,o);
  return niNew JNI_ni_iSoundDriverBufferDataSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_createSoundBuffer(JNIEnv *e, jobject o, jobject p0, jboolean p1, jobject p2) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateSoundBuffer(pointer0, p1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_createSoundBufferEx(JNIEnv *e, jobject o, jobject p0, jboolean p1, jobject p2) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSoundData* pointer0 = p0 == NULL ? NULL : (ni::iSoundData*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateSoundBufferEx(pointer0, p1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_createSoundBufferFromRes(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateSoundBufferFromRes(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_createSoundSource(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSoundBuffer* pointer0 = p0 == NULL ? NULL : (ni::iSoundBuffer*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundSource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateSoundSource(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iSoundSource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFactory_getActiveDriver(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetActiveDriver();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getBuffer(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundDriverBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBuffer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iSoundDriverBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getDriver(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDriver(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iSoundDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFactory_getDriverCaps(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDriverCaps(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFactory_getDriverIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDriverIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getDriverName(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDriverName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundFactory_getListenerDistanceScale(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerDistanceScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundFactory_getListenerDopplerScale(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerDopplerScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getListenerForward(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getListenerPosition(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundFactory_getListenerRolloffScale(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerRolloffScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getListenerUp(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getListenerVelocity(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getMixer(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundMixer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMixer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iSoundMixer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getMixer3D(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundMixer3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMixer3D();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iSoundMixer3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFactory_getNumDrivers(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumDrivers();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_getSoundBuffer(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSoundBuffer(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_loadSoundData(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundData* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadSoundData(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iSoundData), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_musicPlay(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSoundSource* pointer0 = p0 == NULL ? NULL : (ni::iSoundSource*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MusicPlay(pointer0, p1, p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_musicSpeed(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MusicSpeed(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_musicStop(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MusicStop(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_musicVolume(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MusicVolume(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundFactory* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundFactory>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iSoundFactory), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFactory_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundFactory* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundFactory>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iSoundFactory), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerDistanceScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerDistanceScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerDopplerScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerDopplerScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerForward(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerForward(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerRolloffScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerRolloffScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerUp(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerUp(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFactory_setListenerVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerVelocity(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_shutdownDriver(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ShutdownDriver();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_startupDriver(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jlong p3) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->StartupDriver(p0, (eSoundFormat)p1, p2, (ni::tIntPtr)p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_switchIn(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchIn();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_switchOut(JNIEnv *e, jobject o) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchOut();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundFactory_update(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundFactory* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFactory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFormat_getBaseFormat(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetBaseFormat();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niSound_ISoundFormat_getBits(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetBits();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niSound_ISoundFormat_getChannels(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetChannels();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niSound_ISoundFormat_getExtra(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->GetExtra();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFormat_getFormat(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFormat();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFormat_getFrameSize(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFrameSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundFormat_getSampleSize(JNIEnv *e, jobject o) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSampleSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFormat_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundFormat>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iSoundFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundFormat_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundFormat>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iSoundFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFormat_setBits(JNIEnv *e, jobject o, jbyte p0) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBits(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFormat_setChannels(JNIEnv *e, jobject o, jbyte p0) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannels(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundFormat_setExtra(JNIEnv *e, jobject o, jshort p0) {
    ni::iSoundFormat* pointer = niJVM_GetIUnknown(e,o,ni::iSoundFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetExtra(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getAmplification(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetAmplification();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer_getChannelBuffer(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChannelBuffer(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getChannelFrequency(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelFrequency(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_getChannelLoop(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetChannelLoop(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getChannelMasterPan(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelMasterPan(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getChannelMasterVolume(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelMasterVolume(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getChannelPan(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelPan(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_getChannelPause(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetChannelPause(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niSound_ISoundMixer_getChannelUserID(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetChannelUserID(p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getChannelVolume(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelVolume(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_getIsChannelBusy(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsChannelBusy(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getMasterVolume(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMasterVolume();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer_getNumChannels(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChannels();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_getReverseStereo(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetReverseStereo();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_getSaturationCheck(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetSaturationCheck();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundMixer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundMixer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iSoundMixer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundMixer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundMixer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iSoundMixer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setAmplification(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAmplification(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_setChannelBuffer(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSoundBuffer* pointer1 = p1 == NULL ? NULL : (ni::iSoundBuffer*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetChannelBuffer(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelFrequency(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelFrequency(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelLoop(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelLoop(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelMasterPan(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelMasterPan(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelMasterVolume(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelMasterVolume(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelPan(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelPan(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelPause(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelPause(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelUserID(JNIEnv *e, jobject o, jint p0, jlong p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelUserID(p0, (ni::tIntPtr)p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setChannelVolume(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelVolume(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setMasterVolume(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMasterVolume(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setReverseStereo(JNIEnv *e, jobject o, jboolean p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetReverseStereo(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_setSaturationCheck(JNIEnv *e, jobject o, jboolean p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSaturationCheck(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_startChannel(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->StartChannel(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer_stopAllChannels(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->StopAllChannels();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_stopChannel(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->StopChannel(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_switchIn(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchIn();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_switchOut(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchOut();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer_updateMixer(JNIEnv *e, jobject o) {
    ni::iSoundMixer* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateMixer();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getChannelConeDirection(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetChannelConeDirection(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getChannelConeInner(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetChannelConeInner(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getChannelConeOuter(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetChannelConeOuter(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer3D_getChannelConeOuterVolume(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChannelConeOuterVolume(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getChannelMaxDistance(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetChannelMaxDistance(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getChannelMinDistance(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetChannelMinDistance(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer3D_getChannelMode(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSoundMode rvalue = pointer->GetChannelMode(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getChannelPosition(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetChannelPosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getChannelVelocity(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetChannelVelocity(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundMixer3D_getFirst3DChannel(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFirst3DChannel();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer3D_getIsChannel3D(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsChannel3D(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getListenerDistanceScale(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerDistanceScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getListenerDopplerScale(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerDopplerScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getListenerForward(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getListenerPosition(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundMixer3D_getListenerRolloffScale(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetListenerRolloffScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getListenerUp(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_getListenerVelocity(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetListenerVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundMixer3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundMixer3D>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iSoundMixer3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundMixer3D_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundMixer3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundMixer3D>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iSoundMixer3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelConeDirection(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelConeDirection(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelConeInner(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelConeInner(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelConeOuter(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelConeOuter(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelConeOuterVolume(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelConeOuterVolume(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelMaxDistance(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelMaxDistance(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelMinDistance(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelMinDistance(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelMode(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelMode(p0, (eSoundMode)p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelPosition(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelPosition(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setChannelVelocity(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetChannelVelocity(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerDistanceScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerDistanceScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerDopplerScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerDopplerScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerForward(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerForward(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerRolloffScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerRolloffScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerUp(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerUp(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundMixer3D_setListenerVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetListenerVelocity(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundMixer3D_updateMixer3D(JNIEnv *e, jobject o) {
    ni::iSoundMixer3D* pointer = niJVM_GetIUnknown(e,o,ni::iSoundMixer3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateMixer3D();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_getIsPaused(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsPaused();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_getIsPlaying(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsPlaying();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_getLoop(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetLoop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundSource_getMaxDistance(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMaxDistance();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundSource_getMinDistance(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMinDistance();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niSound_ISoundSource_getMode(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSoundMode rvalue = pointer->GetMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundSource_getPan(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetPan();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundSource_getPosition(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundSource_getSoundBuffer(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSoundBuffer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSoundBuffer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iSoundBuffer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundSource_getSpeed(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundSource_getVelocity(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niSound_ISoundSource_getVolume(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetVolume();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_pause(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Pause();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_play(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Play();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_play2D(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Play2D(p0, p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_play3D(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jobject p2, jboolean p3, jfloat p4, jfloat p5) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Play3D(p0, p1, niJVM_GetVec3f(e,p2), p3, p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundSource_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSoundSource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundSource>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iSoundSource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niSound_ISoundSource_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSoundSource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSoundSource>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iSoundSource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setLoop(JNIEnv *e, jobject o, jboolean p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLoop(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setMaxDistance(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaxDistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setMinDistance(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMinDistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setMode(JNIEnv *e, jobject o, jint p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMode((eSoundMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setPan(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPan(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_setSoundBuffer(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSoundBuffer* pointer0 = p0 == NULL ? NULL : (ni::iSoundBuffer*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSoundBuffer(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVelocity(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niSound_ISoundSource_setVolume(JNIEnv *e, jobject o, jfloat p0) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVolume(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niSound_ISoundSource_stop(JNIEnv *e, jobject o) {
    ni::iSoundSource* pointer = niJVM_GetIUnknown(e,o,ni::iSoundSource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Stop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
