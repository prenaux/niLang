<niIDL>
	<namespace name="ni">
		<enum name="eGraphicsCaps">
			<comments desc="Graphics capabilites. "/>
			<value name="eGraphicsCaps_NumTextureUnits" value="0 ">
				<comments desc="Number of texture units. "/>
			</value>
			<value name="eGraphicsCaps_Resize" value="1 ">
				<comments desc="Return eTrue if the renderer support run-time window resize. "/>
			</value>
			<value name="eGraphicsCaps_MultiContext" value="2 ">
				<comments desc="Return eTrue if the renderer support the creation of more than one rendering context. "/>
			</value>
			<value name="eGraphicsCaps_Texture2DMaxSize" value="3 ">
				<comments desc="Maximum 2d texture size supported. Return 0 if textures are not supported. "/>
			</value>
			<value name="eGraphicsCaps_TextureCubeMaxSize" value="4 ">
				<comments desc="Maximum cube texture size supported. Return 0 if cube maps are not supported. "/>
			</value>
			<value name="eGraphicsCaps_Texture3DMaxSize" value="5 ">
				<comments desc="Maximum 3d texture size supported. . Return 0 if 3d textures are not supported. "/>
			</value>
			<value name="eGraphicsCaps_NumRenderTargetTextures" value="6 ">
				<comments desc="Return the number of simultaneous render target textures supported. ">
					<remark text="Return 0 if render target textures are not supported. "/>
				</comments>
			</value>
			<value name="eGraphicsCaps_DepthStencilTexture" value="7 ">
				<comments desc="Return eTrue if the renderer supports depth stencil as texture. "/>
			</value>
			<value name="eGraphicsCaps_StencilTwoSideded" value="8 ">
				<comments desc="Return eTrue if the renderer supports two sided stencil. "/>
			</value>
			<value name="eGraphicsCaps_StencilWrap" value="9 ">
				<comments desc="Return eTrue if the renderer supports Inc/Decr wrap stencil operation. "/>
			</value>
			<value name="eGraphicsCaps_OcclusionQueries" value="10 ">
				<comments desc="Return eTrue if the renderer supports occlusion queries. "/>
			</value>
			<value name="eGraphicsCaps_MaxPointSize" value="11 ">
				<comments desc="Return the maximum point size. (tF32) "/>
			</value>
			<value name="eGraphicsCaps_HardwareInstancing" value="12 ">
				<comments desc="Return wheter or not the hardware supports instancing. "/>
			</value>
			<value name="eGraphicsCaps_ScissorTest" value="13 ">
				<comments desc="Return wheter or not the hardware scissor test is supported. "/>
			</value>
			<value name="eGraphicsCaps_MaxVertexIndex" value="14 ">
				<comments desc="The maximum vertex index that can be used in an index array. "/>
			</value>
			<value name="eGraphicsCaps_OverlayTexture" value="15 ">
				<comments desc="Overlay textures supported. "/>
			</value>
			<value name="eGraphicsCaps_OrthoProjectionOffset" value="16 ">
				<comments desc="Get the orthogonal screen projection offset in screen pixel unit. (float) ">
					<remark text="Used to build a proper otho projection matrix that matches the screen pixels exactly. "/>
				</comments>
			</value>
			<value name="eGraphicsCaps_BlitBackBuffer" value="17 ">
				<comments desc="Whether we can blit the backbuffer to a texture with BlitTextureToTexture. "/>
			</value>
			<value name="eGraphicsCaps_Wireframe" value="18 ">
				<comments desc="Return whether or not the driver can do wireframe rendering. "/>
			</value>
			<value name="eGraphicsCaps_Last" value="19 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eClearBuffersFlags">
			<comments desc="Buffer clearing flags. "/>
			<value name="eClearBuffersFlags_Color" value="niBit ( 0 ) ">
				<comments desc="Clear color buffer. "/>
			</value>
			<value name="eClearBuffersFlags_Depth" value="niBit ( 1 ) ">
				<comments desc="Clear depth buffer. "/>
			</value>
			<value name="eClearBuffersFlags_Stencil" value="niBit ( 2 ) ">
				<comments desc="Clear stencil buffer. "/>
			</value>
			<value name="eClearBuffersFlags_ColorDepth" value="eClearBuffersFlags_Color|eClearBuffersFlags_Depth ">
				<comments desc="Clear the color and depth buffers. "/>
			</value>
			<value name="eClearBuffersFlags_ColorStencil" value="eClearBuffersFlags_Color|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the color and stencil buffers. "/>
			</value>
			<value name="eClearBuffersFlags_DepthStencil" value="eClearBuffersFlags_Depth|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the depth and stencil buffers. "/>
			</value>
			<value name="eClearBuffersFlags_ColorDepthStencil" value="eClearBuffersFlags_Color|eClearBuffersFlags_Depth|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the color, depth and stencil buffers. "/>
			</value>
		</enum>
		<enum name="eArrayUsage">
			<comments desc="Array usage. "/>
			<value name="eArrayUsage_Dynamic" value="0 ">
				<comments desc="Dynamic array, write only. "/>
			</value>
			<value name="eArrayUsage_DynamicReadWrite" value="1 ">
				<comments desc="Dynamic array, Read/Write. "/>
			</value>
			<value name="eArrayUsage_Static" value="2 ">
				<comments desc="Static array, write only. "/>
			</value>
			<value name="eArrayUsage_SystemMemory" value="3 ">
				<comments desc="System memory array. "/>
			</value>
		</enum>
		<enum name="eLock">
			<comments desc="Lock. "/>
			<value name="eLock_Normal" value="0 ">
				<comments desc="Normal behavior. "/>
			</value>
			<value name="eLock_Discard" value="niBit ( 0 ) ">
				<comments desc="The application overwrites (with a write-only operation) every location within the region being locked. This is a valid option when using dynamic textures, dynamic vertex arrays, and dynamic index arrays.  For vertex and index arrays, the application discards the entire buffer. A pointer to a new memory area is returned so that the dynamic memory access (DMA) and rendering from the previous area do not stall.  For textures, the application overwrites (with a write-only operation) every location within the region being locked. "/>
			</value>
			<value name="eLock_NoOverwrite" value="niBit ( 1 ) ">
				<comments desc="The application promises not to overwrite any data in the vertex and index arrays. Specifying this flag allows the driver to return immediately and continue rendering, using this array. If this flag is not used, the driver must finish rendering before returning from locking. "/>
			</value>
			<value name="eLock_ReadOnly" value="niBit ( 2 ) ">
				<comments desc="The application will not write to the buffer. "/>
			</value>
		</enum>
		<enum min_features="20" name="eShaderCompilerFlags">
			<comments desc="Shader compiler flags. "/>
			<value min_features="20" name="eShaderCompilerFlags_Debug" value="niBit ( 0 ) ">
				<comments desc="Insert debug filename, line numbers, and type and symbol information during shader compile. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_SkipValidation" value="niBit ( 1 ) ">
				<comments desc="Do not validate the generated code against known capabilities and constraints. This option is recommended only when compiling shaders that are known to work (that is, shaders that have compiled before without this option). Shaders are always validated by the runtime before they are set to the device. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_SkipOptimization" value="niBit ( 2 ) ">
				<comments desc="Instruct the compiler to skip optimization steps during code generation. Unless you are trying to isolate a problem in your code and you suspect the compiler, using this option is not recommended. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PackMatrixRowMajor" value="niBit ( 3 ) ">
				<comments desc="Unless explicitly specified, matrices will be packed in row-major order (each vector will be in a single row) when passed to or from the shader. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PackMatrixColumnMajor" value="niBit ( 4 ) ">
				<comments desc="Unless explicitly specified, matrices will be packed in column-major order (each vector will be in a single column) when passed to and from the shader. This is generally more efficient because it allows vector-matrix multiplication to be performed using a series of dot products. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PartialPrecision" value="niBit ( 5 ) ">
				<comments desc="Force all computations in the resulting shader to occur at partial precision. This may result in faster evaluation of shaders on some hardware. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_AvoidFlowControl" value="niBit ( 6 ) ">
				<comments desc="This is a hint to the compiler to avoid using flow-control instructions. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PreferFlowControl" value="niBit ( 7 ) ">
				<comments desc="This is a hint to the compiler to prefer using flow-control instructions. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_Save" value="niBit ( 8 ) ">
				<comments desc="This will instruct the compiler to keep the data necessary to serialize the shader to a file. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_KeepCode" value="niBit ( 9 ) ">
				<comments desc="This will instruct the driver to keep a copy of the source code used to compile the shader. That can be retrieved with ni::iShader::GetCode(). "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_DebugLog" value="niBit ( 10 ) ">
				<comments desc="This will instruct the driver to log the macros and other debugging informations when compiling. "/>
			</value>
		</enum>
		<enum name="eGraphicsPrimitiveType">
			<comments desc="Graphics primitive types "/>
			<value name="eGraphicsPrimitiveType_PointList" value="0 ">
				<comments desc="List of isolated points. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineList" value="1 ">
				<comments desc="List of isolated straight line segments. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineStrip" value="2 ">
				<comments desc="List of vertices as a single polyline. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleList" value="3 ">
				<comments desc="List of vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Culling is affected by the current culling rendering parameter. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleStrip" value="4 ">
				<comments desc="List of vertices as a triangle strip. The culling flag is automatically flipped on even-numbered triangles. "/>
			</value>
			<value name="eGraphicsPrimitiveType_Last" value="5 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGraphicsDriverImplFlags">
			<comments desc="Graphics driver implementation details. "/>
			<value name="eGraphicsDriverImplFlags_VertexArrayObject" value="niBit ( 0 ) ">
				<comments desc="Vertex array. "/>
			</value>
			<value name="eGraphicsDriverImplFlags_IndexArrayObject" value="niBit ( 1 ) ">
				<comments desc="Index array. "/>
			</value>
			<value name="eGraphicsDriverImplFlags_SystemMemoryTexture" value="niBit ( 3 ) ">
				<comments desc="Can render using system memory textures. "/>
			</value>
		</enum>
		<enum name="eSamplerFilter">
			<comments desc="Sampler filter. "/>
			<value name="eSamplerFilter_Smooth" value="0 ">
				<comments desc="Default, smooth filtering. "/>
			</value>
			<value name="eSamplerFilter_Point" value="1 ">
				<comments desc="Point filtering. "/>
			</value>
			<value name="eSamplerFilter_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eSamplerWrap">
			<comments desc="Texture wrapping modes. "/>
			<value name="eSamplerWrap_Repeat" value="0 ">
				<comments desc="The texture is repeated along the axis. default. "/>
			</value>
			<value name="eSamplerWrap_Clamp" value="1 ">
				<comments desc="The texture is clamped at the end and the rest of the polygon is filled with the content of the texture edge. "/>
			</value>
			<value name="eSamplerWrap_Mirror" value="2 ">
				<comments desc="Similar to eSamplerWrap_Repeat, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on. "/>
			</value>
			<value name="eSamplerWrap_Border" value="3 ">
				<comments desc="Border mode, the border color is used when outside of 0,1 range. "/>
			</value>
			<value name="eSamplerWrap_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGraphicsCompare">
			<comments desc="Graphics compare functions. "/>
			<value name="eGraphicsCompare_Never" value="0 ">
				<comments desc="Always fail the test. "/>
			</value>
			<value name="eGraphicsCompare_Equal" value="1 ">
				<comments desc="Accept the new pixel if its value equals the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_NotEqual" value="2 ">
				<comments desc="Accept the new pixel if its value does not equal the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Less" value="3 ">
				<comments desc="Accept the new pixel if its value is less than the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_LessEqual" value="4 ">
				<comments desc="Accept the new pixel if its value is less than or equal to the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Greater" value="5 ">
				<comments desc="Accept the new pixel if its value is greater than the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_GreaterEqual" value="6 ">
				<comments desc="Accept the new pixel if its value is greater than or equal to the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Always" value="7 ">
				<comments desc="Always pass the test. "/>
			</value>
			<value name="eGraphicsCompare_Last" value="8 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eStencilMode">
			<comments desc="Stencil mode. "/>
			<value name="eStencilMode_None" value="0 ">
				<comments desc="Disable the stencil. "/>
			</value>
			<value name="eStencilMode_OneSided" value="1 ">
				<comments desc="One sided stencil. "/>
			</value>
			<value name="eStencilMode_TwoSided" value="2 ">
				<comments desc="Two sided stencil. ">
					<remark text="Will fail if the renderer doesn&apos;t support two sided stencil. \see eRendererCaps "/>
				</comments>
			</value>
			<value name="eStencilMode_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eStencilOp">
			<comments desc="Stencil operations. "/>
			<value name="eStencilOp_Keep" value="0 ">
				<comments desc="Do not update the entry in the stencil buffer. This is the default value. "/>
			</value>
			<value name="eStencilOp_Zero" value="1 ">
				<comments desc="Set the stencil-buffer entry to 0. "/>
			</value>
			<value name="eStencilOp_Replace" value="2 ">
				<comments desc="Replace the stencil-buffer entry with a reference value. "/>
			</value>
			<value name="eStencilOp_IncrWrap" value="3 ">
				<comments desc="Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value. "/>
			</value>
			<value name="eStencilOp_DecrWrap" value="4 ">
				<comments desc="Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero. "/>
			</value>
			<value name="eStencilOp_IncrSat" value="5 ">
				<comments desc="Increment the stencil-buffer entry, clamping to the maximum value. "/>
			</value>
			<value name="eStencilOp_DecrSat" value="6 ">
				<comments desc="Increment the stencil-buffer entry, clamping to zero. "/>
			</value>
			<value name="eStencilOp_Invert" value="7 ">
				<comments desc="Invert the bits in the stencil-buffer entry. "/>
			</value>
			<value name="eStencilOp_Last" value="8 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eBlendMode">
			<comments desc="Blending mode A*SrcColor + B*DestColor ">
				<remark text="For material channel zero : SrcColor/Alpha is the channel 0 color, DestColor/Alpha is the color A "/>
				<remark text="For material channel &gt; zero : SrcColor/Alpha is the channel n color, DestColor/Alpha is the channel n-1 color "/>
			</comments>
			<value name="eBlendMode_NoBlending" value="0 ">
				<comments desc="Solid, no blending "/>
			</value>
			<value name="eBlendMode_ReplaceAlpha" value="1 ">
				<comments desc="Means that the current alpha will be replaced by the current stage&apos;s alpha. ">
					<remark text="For first stage only Final = Src*0 + Dest*SrcAlpha. "/>
				</comments>
			</value>
			<value name="eBlendMode_Additive" value="2 ">
				<comments desc="Additive blending ">
					<remark text="Final = Src*1 + Dest*1 "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate" value="3 ">
				<comments desc="Modulate ">
					<remark text="Final = Src*Dest + Dest*0 "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate2x" value="4 ">
				<comments desc="Modulate 2x ">
					<remark text="Final = (Src*Dest + Dest*Src) "/>
				</comments>
			</value>
			<value name="eBlendMode_Translucent" value="5 ">
				<comments desc="Translucent blending ">
					<remark text="Final = (Src*SrcAlpha + Dest*(1-SrcAlpha)) "/>
				</comments>
			</value>
			<value name="eBlendMode_TranslucentInvAlpha" value="6 ">
				<comments desc="Translucent blending with inverted alpha ">
					<remark text="Final = (Src*(1-SrcAlpha) + Dest*SrcAlpha) "/>
				</comments>
			</value>
			<value name="eBlendMode_TintedGlass" value="7 ">
				<comments desc="Tinted blending ">
					<remark text="Final = (Src*Src + Dest*(1-SrcColor)) "/>
				</comments>
			</value>
			<value name="eBlendMode_PreMulAlpha" value="8 ">
				<comments desc="Premultiplied alpha light blending. ">
					<remark text="Final = (Src*1 + Dest*(1-SrcAlpha)) "/>
				</comments>
			</value>
			<value name="eBlendMode_ModulateReplaceAlpha" value="9 ">
				<comments desc="Modulate RGB, replace alpha ">
					<remark text="Final.RGB = Src*Dest + Dest*0, Final.Alpha = Channel.Alpha "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate2xReplaceAlpha" value="10 ">
				<comments desc="Modulate RGB 2x, replace alpha ">
					<remark text="Final.RGB = (Src*Dest + Dest*Src), Final.Alpha = Channel.Alpha "/>
				</comments>
			</value>
			<value name="eBlendMode_Last" value="11 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eCullingMode">
			<comments desc="Culling mode "/>
			<value name="eCullingMode_None" value="0 ">
				<comments desc="Do not cull back faces. "/>
			</value>
			<value name="eCullingMode_CW" value="1 ">
				<comments desc="Cull back faces with clockwise vertices. "/>
			</value>
			<value name="eCullingMode_CCW" value="2 ">
				<comments desc="Cull back faces with counter clockwise vertices (default). "/>
			</value>
			<value name="eCullingMode_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eColorWriteMask">
			<comments desc="Color write mask. "/>
			<value name="eColorWriteMask_None" value="0x0 ">
				<comments desc="Disable writting in the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Alpha" value="0x1 ">
				<comments desc="Write only in the alpha buffer. "/>
			</value>
			<value name="eColorWriteMask_Red" value="0x2 ">
				<comments desc="Write only in the red channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Green" value="0x4 ">
				<comments desc="Write only in the green channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Blue" value="0x8 ">
				<comments desc="Write only in the blue channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_RGB" value="eColorWriteMask_Red|eColorWriteMask_Green|eColorWriteMask_Blue ">
				<comments desc="Write only in the rgb buffer. "/>
			</value>
			<value name="eColorWriteMask_All" value="eColorWriteMask_RGB|eColorWriteMask_Alpha ">
				<comments desc="Normal, write in all channels. "/>
			</value>
		</enum>
		<enum name="eGraphicsDisplayFlags">
			<comments desc="Graphics display flags "/>
			<value name="eGraphicsDisplayFlags_Skip" value="niBit ( 0 ) ">
				<comments desc="Flush all rendering but do not show the back buffer. "/>
			</value>
			<value name="eGraphicsDisplayFlags_DoNotWait" value="niBit ( 1 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_LinearContent" value="niBit ( 2 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_Transparent" value="niBit ( 3 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_Translucent" value="niBit ( 4 ) ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eCompiledStates">
			<comments desc="Graphics built-in compiled states. \see GetCompiledStates "/>
			<value name="eCompiledStates_Invalid" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_ColorWriteNone" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_Filled" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_Wireframe" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingColorWriteNone" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingFilled" value="5 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingWireframe" value="6 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingColorWriteNone" value="7 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingFilled" value="8 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingWireframe" value="9 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_NoDepthTest" value="101 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_DepthTestAndWrite" value="102 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_DepthTestOnly" value="103 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointRepeat" value="201 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointClamp" value="202 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointMirror" value="203 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointWhiteBorder" value="204 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothRepeat" value="205 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothClamp" value="206 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothMirror" value="207 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothWhiteBorder" value="208 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_Driver" value="1000 ">
				<comments desc="Driver compiled "/>
			</value>
		</enum>
	</namespace>
</niIDL>