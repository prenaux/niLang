<Shader ver="2" name="texture_alphatest_ps" exec="pixel" input_filename="texture_alphatest_ps.spv" input_digest="3x8dv4265r0v2aa4v0cpfnsk20">
	<Target target="vkgl45" src_digest="24v1veaqrrc70b9gtam88eehbg">
		<Inputs>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="0">
			<Output name="OUT_0_rval_color" type="vec4"/>
		</Outputs>
		<SeparateTextures>
			<SeparateTexture name="IN_1_aTexture" type="2D" deco_descriptor_set="0" deco_binding="1"/>
		</SeparateTextures>
		<SamplerStates>
			<SamplerState name="IN_1_aSS" deco_descriptor_set="0" deco_binding="2"/>
		</SamplerStates>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="32">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[#version 450

struct TestGpuFuncs_TestUniforms
{
    float alphaTest;
    float padding0;
    float padding1;
    float padding2;
    vec4 materialColor;
};

uniform vec4 UBO_TestGpuFuncs_TestUniforms[2];
layout(set = 0, binding = 1) uniform texture2D IN_1_aTexture;
layout(set = 0, binding = 2) uniform sampler IN_1_aSS;

layout(location = 1) in vec4 IN_1_aInput_color;
layout(location = 2) in vec2 IN_2_aInput_tex0;
layout(location = 0) out vec4 OUT_0_rval_color;

void main()
{
    vec4 _130 = texture(sampler2D(IN_1_aTexture, IN_1_aSS), IN_2_aInput_tex0);
    if (_130.w < TestGpuFuncs_TestUniforms(UBO_TestGpuFuncs_TestUniforms[0].x, UBO_TestGpuFuncs_TestUniforms[0].y, UBO_TestGpuFuncs_TestUniforms[0].z, UBO_TestGpuFuncs_TestUniforms[0].w, UBO_TestGpuFuncs_TestUniforms[1]).alphaTest)
    {
        discard;
    }
    OUT_0_rval_color = _130 * IN_1_aInput_color;
}

]]>
	</Target>
	<Target target="msl2_macos" src_digest="k32x9wwpjx8nztdj0wv85strtr">
		<Inputs>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="0">
			<Output name="OUT_0_rval_color" type="vec4"/>
		</Outputs>
		<SeparateTextures>
			<SeparateTexture name="IN_1_aTexture" type="2D" deco_descriptor_set="0" deco_binding="1"/>
		</SeparateTextures>
		<SamplerStates>
			<SamplerState name="IN_1_aSS" deco_descriptor_set="0" deco_binding="2"/>
		</SamplerStates>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="32">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct TestGpuFuncs_TestUniforms
{
    float alphaTest;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

struct UBO_TestGpuFuncs_TestUniforms
{
    TestGpuFuncs_TestUniforms v;
};

struct main0_out
{
    float4 OUT_0_rval_color [[color(0)]];
};

struct main0_in
{
    float4 IN_1_aInput_color [[user(locn1)]];
    float2 IN_2_aInput_tex0 [[user(locn2)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant UBO_TestGpuFuncs_TestUniforms& IN_1_aUniforms [[buffer(0)]], texture2d<float> IN_1_aTexture [[texture(0)]], sampler IN_1_aSS [[sampler(0)]])
{
    main0_out out = {};
    float4 _130 = IN_1_aTexture.sample(IN_1_aSS, in.IN_2_aInput_tex0);
    if (_130.w < IN_1_aUniforms.v.alphaTest)
    {
        discard_fragment();
    }
    out.OUT_0_rval_color = _130 * in.IN_1_aInput_color;
    return out;
}

]]>
	</Target>
	<Target target="hlsl5" src_digest="ez76e9hfb297027n74537tpkk8">
		<Inputs>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="0">
			<Output name="OUT_0_rval_color" type="vec4"/>
		</Outputs>
		<SeparateTextures>
			<SeparateTexture name="IN_1_aTexture" type="2D" deco_descriptor_set="0" deco_binding="1"/>
		</SeparateTextures>
		<SamplerStates>
			<SamplerState name="IN_1_aSS" deco_descriptor_set="0" deco_binding="2"/>
		</SamplerStates>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="32">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[struct TestGpuFuncs_TestUniforms
{
    float alphaTest;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

cbuffer UBO_TestGpuFuncs_TestUniforms : register(b0)
{
    TestGpuFuncs_TestUniforms IN_1_aUniforms_v : packoffset(c0);
};

Texture2D<float4> IN_1_aTexture : register(t1);
SamplerState IN_1_aSS : register(s2);

static float4 IN_1_aInput_color;
static float2 IN_2_aInput_tex0;
static float4 OUT_0_rval_color;

struct SPIRV_Cross_Input
{
    float4 IN_1_aInput_color : TEXCOORD1;
    float2 IN_2_aInput_tex0 : TEXCOORD2;
};

struct SPIRV_Cross_Output
{
    float4 OUT_0_rval_color : SV_Target0;
};

void frag_main()
{
    float4 _130 = IN_1_aTexture.Sample(IN_1_aSS, IN_2_aInput_tex0);
    if (_130.w < IN_1_aUniforms_v.alphaTest)
    {
        discard;
    }
    OUT_0_rval_color = _130 * IN_1_aInput_color;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    IN_1_aInput_color = stage_input.IN_1_aInput_color;
    IN_2_aInput_tex0 = stage_input.IN_2_aInput_tex0;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.OUT_0_rval_color = OUT_0_rval_color;
    return stage_output;
}
]]>
	</Target>
</Shader>