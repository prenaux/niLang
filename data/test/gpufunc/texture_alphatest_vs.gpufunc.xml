<Shader ver="2" name="texture_alphatest_vs" exec="vertex" input_filename="texture_alphatest_vs.spv" input_digest="sxc59ev8mtt6rp3c6rc7w6s24g">
	<Target target="vkgl45" src_digest="b656pfvas66hn6n0df976vrfrm">
		<Inputs>
			<Input name="IN_0_aInput_position" type="vec3" deco_location="0"/>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="2">
			<Output name="OUT_1_rval_color" type="vec4"/>
			<Output name="OUT_2_rval_tex0" type="vec2"/>
		</Outputs>
		<SeparateTextures/>
		<SamplerStates/>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="96">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[#version 450

struct TestGpuFuncs_TestUniforms
{
    mat4 mtxWVP;
    float alphaRef;
    float padding0;
    float padding1;
    float padding2;
    vec4 materialColor;
};

uniform vec4 UBO_TestGpuFuncs_TestUniforms[6];
layout(location = 0) in vec3 IN_0_aInput_position;
layout(location = 1) in vec4 IN_1_aInput_color;
layout(location = 2) in vec2 IN_2_aInput_tex0;
layout(location = 1) out vec4 OUT_1_rval_color;
layout(location = 2) out vec2 OUT_2_rval_tex0;

void main()
{
    TestGpuFuncs_TestUniforms _109 = TestGpuFuncs_TestUniforms(mat4(UBO_TestGpuFuncs_TestUniforms[0], UBO_TestGpuFuncs_TestUniforms[1], UBO_TestGpuFuncs_TestUniforms[2], UBO_TestGpuFuncs_TestUniforms[3]), UBO_TestGpuFuncs_TestUniforms[4].x, UBO_TestGpuFuncs_TestUniforms[4].y, UBO_TestGpuFuncs_TestUniforms[4].z, UBO_TestGpuFuncs_TestUniforms[4].w, UBO_TestGpuFuncs_TestUniforms[5]);
    gl_Position = _109.mtxWVP * vec4(IN_0_aInput_position, 1.0);
    OUT_1_rval_color = IN_1_aInput_color * _109.materialColor;
    OUT_2_rval_tex0 = IN_2_aInput_tex0;
}

]]>
	</Target>
	<Target target="msl2_macos" src_digest="r0xr1426ds16xqf4a76hgc4zb4">
		<Inputs>
			<Input name="IN_0_aInput_position" type="vec3" deco_location="0"/>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="2">
			<Output name="OUT_1_rval_color" type="vec4"/>
			<Output name="OUT_2_rval_tex0" type="vec2"/>
		</Outputs>
		<SeparateTextures/>
		<SamplerStates/>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="96">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct TestGpuFuncs_TestUniforms
{
    float4x4 mtxWVP;
    float alphaRef;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

struct UBO_TestGpuFuncs_TestUniforms
{
    TestGpuFuncs_TestUniforms v;
};

struct main0_out
{
    float4 OUT_1_rval_color [[user(locn1)]];
    float2 OUT_2_rval_tex0 [[user(locn2)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 IN_0_aInput_position [[attribute(0)]];
    float4 IN_1_aInput_color [[attribute(1)]];
    float2 IN_2_aInput_tex0 [[attribute(2)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant UBO_TestGpuFuncs_TestUniforms& IN_1_aUniforms [[buffer(0)]])
{
    main0_out out = {};
    out.gl_Position = IN_1_aUniforms.v.mtxWVP * float4(in.IN_0_aInput_position, 1.0);
    out.OUT_1_rval_color = in.IN_1_aInput_color * IN_1_aUniforms.v.materialColor;
    out.OUT_2_rval_tex0 = in.IN_2_aInput_tex0;
    return out;
}

]]>
	</Target>
	<Target target="hlsl5" src_digest="efmp7bv49zn3xfamaqfcjstz1w">
		<Inputs>
			<Input name="IN_0_aInput_position" type="vec3" deco_location="0"/>
			<Input name="IN_1_aInput_color" type="vec4" deco_location="1"/>
			<Input name="IN_2_aInput_tex0" type="vec2" deco_location="2"/>
		</Inputs>
		<Outputs deco_location="2">
			<Output name="OUT_1_rval_color" type="vec4"/>
			<Output name="OUT_2_rval_tex0" type="vec2"/>
		</Outputs>
		<SeparateTextures/>
		<SamplerStates/>
		<SampledTextures/>
		<ConstBuffs>
			<ConstBuff type="UBO_TestGpuFuncs_TestUniforms" name="IN_1_aUniforms" size="96">
				<Const name="v" type="struct" size="1" offset="0"/>
			</ConstBuff>
		</ConstBuffs>
		<![CDATA[struct TestGpuFuncs_TestUniforms
{
    row_major float4x4 mtxWVP;
    float alphaRef;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

cbuffer UBO_TestGpuFuncs_TestUniforms : register(b0)
{
    TestGpuFuncs_TestUniforms IN_1_aUniforms_v : packoffset(c0);
};


static float4 gl_Position;
static float3 IN_0_aInput_position;
static float4 IN_1_aInput_color;
static float2 IN_2_aInput_tex0;
static float4 OUT_1_rval_color;
static float2 OUT_2_rval_tex0;

struct SPIRV_Cross_Input
{
    float3 IN_0_aInput_position : TEXCOORD0;
    float4 IN_1_aInput_color : TEXCOORD1;
    float2 IN_2_aInput_tex0 : TEXCOORD2;
};

struct SPIRV_Cross_Output
{
    float4 OUT_1_rval_color : TEXCOORD1;
    float2 OUT_2_rval_tex0 : TEXCOORD2;
    float4 gl_Position : SV_Position;
};

void vert_main()
{
    gl_Position = mul(float4(IN_0_aInput_position, 1.0f), IN_1_aUniforms_v.mtxWVP);
    OUT_1_rval_color = IN_1_aInput_color * IN_1_aUniforms_v.materialColor;
    OUT_2_rval_tex0 = IN_2_aInput_tex0;
    gl_Position.z = (gl_Position.z + gl_Position.w) * 0.5;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    IN_0_aInput_position = stage_input.IN_0_aInput_position;
    IN_1_aInput_color = stage_input.IN_1_aInput_color;
    IN_2_aInput_tex0 = stage_input.IN_2_aInput_tex0;
    vert_main();
    SPIRV_Cross_Output stage_output;
    stage_output.gl_Position = gl_Position;
    stage_output.OUT_1_rval_color = OUT_1_rval_color;
    stage_output.OUT_2_rval_tex0 = OUT_2_rval_tex0;
    return stage_output;
}
]]>
	</Target>
</Shader>