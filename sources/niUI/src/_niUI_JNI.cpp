/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include "stdafx.h"
#include "niUI_JNI.h"

#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;



static const char *ni_classNames[111] = {
        "ni/niLang/ICallback",
        "ni/niLang/ICollection",
        "ni/niLang/IDataTable",
        "ni/niLang/IDeviceResourceManager",
        "ni/niLang/IExpression",
        "ni/niLang/IExpressionContext",
        "ni/niLang/IFile",
        "ni/niLang/IHString",
        "ni/niLang/IMessageHandler",
        "ni/niLang/IMutableCollection",
        "ni/niLang/IProfDraw",
        "ni/niLang/ISinkList",
        "ni/niUI/IBitmap2D",
        "ni/niUI/IBitmap3D",
        "ni/niUI/IBitmapBase",
        "ni/niUI/IBitmapCube",
        "ni/niUI/IBitmapFormat",
        "ni/niUI/IBitmapLoader",
        "ni/niUI/IBitmapSaver",
        "ni/niUI/IBoundingVolume",
        "ni/niUI/ICamera",
        "ni/niUI/ICanvas",
        "ni/niUI/IDampedSpring1",
        "ni/niUI/IDampedSpring2",
        "ni/niUI/IDampedSpring3",
        "ni/niUI/IDampedSpring4",
        "ni/niUI/IDampedSpringPosition1",
        "ni/niUI/IDampedSpringPosition2",
        "ni/niUI/IDampedSpringPosition3",
        "ni/niUI/IDampedSpringPosition4",
        "ni/niUI/IDepthStencilStates",
        "ni/niUI/IDrawOperation",
        "ni/niUI/IDrawOperationSet",
        "ni/niUI/IFixedStates",
        "ni/niUI/IFont",
        "ni/niUI/IFrustum",
        "ni/niUI/IGeometry",
        "ni/niUI/IGeometryModifier",
        "ni/niUI/IGeometrySubset",
        "ni/niUI/IGLShader",
        "ni/niUI/IGLTexture",
        "ni/niUI/IGraphics",
        "ni/niUI/IGraphicsContext",
        "ni/niUI/IGraphicsContextRT",
        "ni/niUI/IGraphicsDrawOpCapture",
        "ni/niUI/IGraphicsDriver",
        "ni/niUI/IImage",
        "ni/niUI/IImageMap",
        "ni/niUI/IIndexArray",
        "ni/niUI/IIntersection",
        "ni/niUI/IJpegReader",
        "ni/niUI/IJpegWriter",
        "ni/niUI/IMaterial",
        "ni/niUI/IMaterialLibrary",
        "ni/niUI/IMaterialLibrarySink",
        "ni/niUI/INUSpline",
        "ni/niUI/IOcclusionQuery",
        "ni/niUI/IOverlay",
        "ni/niUI/IPixelFormat",
        "ni/niUI/IRasterizerStates",
        "ni/niUI/ISamplerStates",
        "ni/niUI/ISearchable",
        "ni/niUI/ISearchContainer",
        "ni/niUI/IShader",
        "ni/niUI/IShaderConstants",
        "ni/niUI/ITextObject",
        "ni/niUI/ITextOccluder",
        "ni/niUI/ITexture",
        "ni/niUI/ITransform",
        "ni/niUI/IUIContext",
        "ni/niUI/IVertexArray",
        "ni/niUI/IVGGradientTable",
        "ni/niUI/IVGImage",
        "ni/niUI/IVGPaint",
        "ni/niUI/IVGPaintGradient",
        "ni/niUI/IVGPaintImage",
        "ni/niUI/IVGPath",
        "ni/niUI/IVGPathTesselatedRenderer",
        "ni/niUI/IVGPolygonTesselator",
        "ni/niUI/IVGStyle",
        "ni/niUI/IVGTransform",
        "ni/niUI/IVideoDecoder",
        "ni/niUI/IWidget",
        "ni/niUI/IWidgetButton",
        "ni/niUI/IWidgetCanvas",
        "ni/niUI/IWidgetColorPicker",
        "ni/niUI/IWidgetComboBox",
        "ni/niUI/IWidgetCommand",
        "ni/niUI/IWidgetDockable",
        "ni/niUI/IWidgetDockingManager",
        "ni/niUI/IWidgetEditBox",
        "ni/niUI/IWidgetForm",
        "ni/niUI/IWidgetGroup",
        "ni/niUI/IWidgetLabel",
        "ni/niUI/IWidgetListBox",
        "ni/niUI/IWidgetMenu",
        "ni/niUI/IWidgetMenuItem",
        "ni/niUI/IWidgetProgressBar",
        "ni/niUI/IWidgetPropertyBox",
        "ni/niUI/IWidgetScrollBar",
        "ni/niUI/IWidgetSearchBar",
        "ni/niUI/IWidgetSink",
        "ni/niUI/IWidgetSplitter",
        "ni/niUI/IWidgetTab",
        "ni/niUI/IWidgetText",
        "ni/niUI/IWidgetToolbar",
        "ni/niUI/IWidgetToolbarGroup",
        "ni/niUI/IWidgetTree",
        "ni/niUI/IWidgetTreeNode",
        "ni/types/IUnknown",
        "ni/types/Pointer" };
static jclass ni_classes[111] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

JNIEXPORT jint JNICALL JNI_OnLoad_niUI(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnLoad(vm, (void**)&e, JNI_VERSION_1_4) == 0) {
        fprintf(stderr, "niJVM_OnLoad() failed !");
        return 0;
    }
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload_niUI(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnUnload(vm, (void**)&e, JNI_VERSION_1_4) != JNI_OK) {
        fprintf(stderr, "niJVM_OnUnload() failed !");
        return;
    }
    for (int i = 0; i < 111; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}

#if !defined niLib
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    return JNI_OnLoad_niUI(vm,reserved);
}
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {
    JNI_OnUnload_niUI(vm,reserved);
}
#endif // defined niLib

/// Forward declarations ///
niExportFunc(ni::iBitmapLoader*) NewJNIWrapper_ni_iBitmapLoader(JNIEnv* e, jobject o);
niExportFunc(ni::iBitmapSaver*) NewJNIWrapper_ni_iBitmapSaver(JNIEnv* e, jobject o);
niExportFunc(ni::iMaterialLibrarySink*) NewJNIWrapper_ni_iMaterialLibrarySink(JNIEnv* e, jobject o);
niExportFunc(ni::iSearchable*) NewJNIWrapper_ni_iSearchable(JNIEnv* e, jobject o);
niExportFunc(ni::iVGPathTesselatedRenderer*) NewJNIWrapper_ni_iVGPathTesselatedRenderer(JNIEnv* e, jobject o);
niExportFunc(ni::iWidgetPropertyBox*) NewJNIWrapper_ni_iWidgetPropertyBox(JNIEnv* e, jobject o);
niExportFunc(ni::iWidgetSink*) NewJNIWrapper_ni_iWidgetSink(JNIEnv* e, jobject o);

/// Methods declarations ///

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap2D_beginUnpackPixels(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginUnpackPixels();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap2D_blit(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Blit(pointer0, p1, p2, p3, p4, p5, p6, (ePixelFormatBlit)p7);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap2D_blitAlpha(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jobject p8, jobject p9, jint p10) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitAlpha(pointer0, p1, p2, p3, p4, p5, p6, (ePixelFormatBlit)p7, niJVM_GetVec4f(e,p8), niJVM_GetVec4f(e,p9), (eBlendMode)p10);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap2D_blitAlphaStretch(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jobject p9, jobject p10, jint p11) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitAlphaStretch(pointer0, p1, p2, p3, p4, p5, p6, p7, p8, niJVM_GetVec4f(e,p9), niJVM_GetVec4f(e,p10), (eBlendMode)p11);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap2D_blitStretch(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitStretch(pointer0, p1, p2, p3, p4, p5, p6, p7, p8);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap2D_clearf(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clearf(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap2D_clearRectf(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearRectf(niJVM_GetVec4i(e,p0), niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_createCubeBitmap(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2, jobject p3, jint p4, jobject p5, jint p6, jobject p7, jint p8, jobject p9, jint p10, jobject p11, jint p12) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateCubeBitmap(p0, niJVM_GetVec2i(e,p1), (ePixelFormatBlit)p2, niJVM_GetVec2i(e,p3), (ePixelFormatBlit)p4, niJVM_GetVec2i(e,p5), (ePixelFormatBlit)p6, niJVM_GetVec2i(e,p7), (ePixelFormatBlit)p8, niJVM_GetVec2i(e,p9), (ePixelFormatBlit)p10, niJVM_GetVec2i(e,p11), (ePixelFormatBlit)p12);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_createCubeBitmapCross(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateCubeBitmapCross();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_createResized(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateResized(p0, p1);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_createResizedEx(JNIEnv *e, jobject o, jint p0, jint p1, jboolean p2) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateResizedEx(p0, p1, p2);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap2D_endUnpackPixels(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->EndUnpackPixels();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_getData(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetData();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_getLevel(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLevel(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_getMipMap(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMipMap(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmap2D_getPitch(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPitch();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_getPixelf(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetPixelf(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmap2D_getSize(JNIEnv *e, jobject o) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap2D_putPixelf(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2) {
    ni::iBitmap2D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap2D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PutPixelf(p0, p1, niJVM_GetVec4f(e,p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmap2D>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap2D_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmap2D>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap3D_beginUnpackPixels(JNIEnv *e, jobject o) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginUnpackPixels();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmap3D_blit(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap3D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap3D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Blit(pointer0, niJVM_GetVec3i(e,p1), niJVM_GetVec3i(e,p2), niJVM_GetVec3i(e,p3));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap3D_clearBoxf(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearBoxf(niJVM_GetVec3i(e,p0), niJVM_GetVec3i(e,p1), niJVM_GetVec4f(e,p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap3D_clearf(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clearf(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_createResized(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateResized(p0, p1, p2);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap3D_endUnpackPixels(JNIEnv *e, jobject o) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->EndUnpackPixels();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_getLevel(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLevel(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_getMipMap(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMipMap(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_getPixelf(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetPixelf(niJVM_GetVec3i(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmap3D_getRowPitch(JNIEnv *e, jobject o) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetRowPitch();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmap3D_getSize(JNIEnv *e, jobject o) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmap3D_getSlicePitch(JNIEnv *e, jobject o) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSlicePitch();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmap3D_putPixelf(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iBitmap3D* pointer = niJVM_GetIUnknown(e,o,ni::iBitmap3D);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PutPixelf(niJVM_GetVec3i(e,p0), niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmap3D>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmap3D_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmap3D>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_clone(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone((ePixelFormatBlit)p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_createConvertedFormat(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer0 = p0 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateConvertedFormat(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_createGammaCorrected(JNIEnv *e, jobject o, jfloat p0) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGammaCorrected(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmapBase_createMipMaps(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CreateMipMaps(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmapBase_gammaCorrect(JNIEnv *e, jobject o, jfloat p0) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GammaCorrect(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapBase_getDepth(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDepth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapBase_getHeight(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapBase_getNumMipMaps(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMipMaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_getPixelFormat(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPixelFormat();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapBase_getType(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBitmapType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapBase_getWidth(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapBase>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapBase_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapBase>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapBase_removeMipMaps(JNIEnv *e, jobject o) {
    ni::iBitmapBase* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RemoveMipMaps();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapCube_createResized(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapCube* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapCube);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateResized(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapCube_getFace(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapCube* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapCube);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFace((eBitmapCubeFace)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapCube_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapCube>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapCube_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapCube>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapFormat_clone(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmapFormat_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmapFormat* pointer0 = p0 == NULL ? NULL : (ni::iBitmapFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapFormat_getDepth(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDepth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapFormat_getHeight(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapFormat_getNumMipMaps(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMipMaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapFormat_getPixelFormat(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPixelFormat();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapFormat_getType(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBitmapType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBitmapFormat_getWidth(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapFormat_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapFormat>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapFormat_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapFormat>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_reset(JNIEnv *e, jobject o) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setDepth(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDepth(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setHeight(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHeight(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setNumMipMaps(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumMipMaps(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setPixelFormat(JNIEnv *e, jobject o, jobject p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer0 = p0 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetPixelFormat(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setType(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetType((eBitmapType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBitmapFormat_setWidth(JNIEnv *e, jobject o, jint p0) {
    ni::iBitmapFormat* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWidth(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapLoader_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iBitmapLoader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iBitmapLoader(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iBitmapLoader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapLoader_loadBitmap(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iBitmapLoader* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapLoader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphics* pointer0 = p0 == NULL ? NULL : (ni::iGraphics*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadBitmap(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapLoader_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmapLoader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapLoader>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iBitmapLoader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapLoader_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapLoader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapLoader>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iBitmapLoader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IBitmapLoaderImpl
// Implement JNI Wrapper for ni::iBitmapLoader
struct JNI_ni_iBitmapLoader : public ni::cIUnknownImpl<iBitmapLoader> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmLoadBitmap;

  JNI_ni_iBitmapLoader(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iBitmapLoader() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: LoadBitmap -> (Lni/niUI/IGraphics;Lni/niLang/IFile;)Lni/niUI/IBitmapBase;
  virtual ni::iBitmapBase* __stdcall LoadBitmap(ni::iGraphics* p0, ni::iFile* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iBitmapLoader,LoadBitmap,loadBitmap,"(Lni/niUI/IGraphics;Lni/niLang/IFile;)Lni/niUI/IBitmapBase;",(ni::iBitmapBase*)NULL);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iFile), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    jobject r = e->CallObjectMethodA(mObject,mmLoadBitmap,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iBitmapLoader,LoadBitmap,loadBitmap,(ni::iBitmapBase*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iBitmapBase);
  }
};
niExportFunc(ni::iBitmapLoader*) NewJNIWrapper_ni_iBitmapLoader(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iBitmapLoader,e,o);
  return niNew JNI_ni_iBitmapLoader(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapSaver_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iBitmapSaver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iBitmapSaver(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iBitmapSaver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapSaver_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBitmapSaver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapSaver>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iBitmapSaver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBitmapSaver_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapSaver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBitmapSaver>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iBitmapSaver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBitmapSaver_saveBitmap(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jint p3) {
    ni::iBitmapSaver* pointer = niJVM_GetIUnknown(e,o,ni::iBitmapSaver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphics* pointer0 = p0 == NULL ? NULL : (ni::iGraphics*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iBitmapBase* pointer2 = p2 == NULL ? NULL : (ni::iBitmapBase*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SaveBitmap(pointer0, pointer1, pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IBitmapSaverImpl
// Implement JNI Wrapper for ni::iBitmapSaver
struct JNI_ni_iBitmapSaver : public ni::cIUnknownImpl<iBitmapSaver> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmSaveBitmap;

  JNI_ni_iBitmapSaver(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iBitmapSaver() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: SaveBitmap -> (Lni/niUI/IGraphics;Lni/niLang/IFile;Lni/niUI/IBitmapBase;I)Z
  virtual ni::tBool __stdcall SaveBitmap(ni::iGraphics* p0, ni::iFile* p1, ni::iBitmapBase* p2, ni::tU32 p3) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iBitmapSaver,SaveBitmap,saveBitmap,"(Lni/niUI/IGraphics;Lni/niLang/IFile;Lni/niUI/IBitmapBase;I)Z",ni::eFalse);
    jvalue args[4];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iFile), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    jobject iu_p2 = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), p2);
    LocalJRef<jobject> jiu_p2(e,iu_p2);
    args[2].l = jiu_p2.o;
    args[3].i = p3;
    jboolean r = e->CallBooleanMethodA(mObject,mmSaveBitmap,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iBitmapSaver,SaveBitmap,saveBitmap,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iBitmapSaver*) NewJNIWrapper_ni_iBitmapSaver(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iBitmapSaver,e,o);
  return niNew JNI_ni_iBitmapSaver(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_addPoint(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddPoint(niJVM_GetVec3f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_begin(JNIEnv *e, jobject o, jboolean p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Begin(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_clone(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBoundingVolume* pointer0 = p0 == NULL ? NULL : (ni::iBoundingVolume*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_end(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->End();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_getCenter(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCenter());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_getExtents(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetExtents());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_getMax(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetMax());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_getMin(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetMin());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IBoundingVolume_getRadius(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetRadius();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_getSize(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBoundingVolume_getType(JNIEnv *e, jobject o) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBoundingVolumeType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_inflate(JNIEnv *e, jobject o, jfloat p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Inflate(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBoundingVolume_intersectAABB(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iIntersection* pointer0 = p0 == NULL ? NULL : (ni::iIntersection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        eIntersectionResult rvalue = pointer->IntersectAABB(pointer0, niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBoundingVolume_intersectFrustum(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iIntersection* pointer0 = p0 == NULL ? NULL : (ni::iIntersection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFrustum* pointer1 = p1 == NULL ? NULL : (ni::iFrustum*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        eIntersectionResult rvalue = pointer->IntersectFrustum(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBoundingVolume_intersectPoint(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iIntersection* pointer0 = p0 == NULL ? NULL : (ni::iIntersection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        eIntersectionResult rvalue = pointer->IntersectPoint(pointer0, niJVM_GetVec3f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IBoundingVolume_intersectRay(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iIntersection* pointer0 = p0 == NULL ? NULL : (ni::iIntersection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        eIntersectionResult rvalue = pointer->IntersectRay(pointer0, niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBoundingVolume>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IBoundingVolume_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBoundingVolume>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_rotate(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Rotate(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_setCenter(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetCenter(niJVM_GetVec3f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_setExtents(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetExtents(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_setMax(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMax(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_setMin(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMin(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_setRadius(JNIEnv *e, jobject o, jfloat p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRadius(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IBoundingVolume_setSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSize(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_transform(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Transform(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IBoundingVolume_translate(JNIEnv *e, jobject o, jobject p0) {
    ni::iBoundingVolume* pointer = niJVM_GetIUnknown(e,o,ni::iBoundingVolume);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Translate(niJVM_GetVec3f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_addPitch(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddPitch(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_addRoll(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddRoll(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_addYaw(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddYaw(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_clone(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCamera* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iCamera), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iCamera* pointer0 = p0 == NULL ? NULL : (ni::iCamera*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Copy(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getAbsoluteAspect(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAbsoluteAspect();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getAspect(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAspect();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getFarClipPlane(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFarClipPlane();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getForward(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getFov(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFov();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getFrustum(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFrustum* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFrustum();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iFrustum), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getMove(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetMove());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ICamera_getMoveType(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eCameraMoveType rvalue = pointer->GetMoveType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getNearClipPlane(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetNearClipPlane();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getOrthoSize(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetOrthoSize();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getPosition(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getPositionDistance(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetPositionDistance();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ICamera_getProjection(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eCameraProjectionType rvalue = pointer->GetProjection();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getRay(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jobject p2) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRay(p0, p1, niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getRayStart(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRayStart());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getRight(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRight());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getScreenPosition(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetScreenPosition(niJVM_GetVec3f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getTarget(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetTarget());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getTargetDirection(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetTargetDirection());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICamera_getTargetDistance(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetTargetDistance();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getTargetUp(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetTargetUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getUp(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getViewMatrix(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetViewMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getViewport(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetViewport());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_getWorldMatrix(JNIEnv *e, jobject o) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetWorldMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_moveForward(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveForward(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_moveSidewards(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveSidewards(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_moveUp(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveUp(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_orbitSidewards(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OrbitSidewards(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_orbitUp(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OrbitUp(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCamera* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCamera>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iCamera), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICamera_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCamera* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCamera>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iCamera), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_rotateTarget(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RotateTarget(niJVM_GetVec3f(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_rotateTargetUp(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RotateTargetUp(niJVM_GetVec3f(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setAspect(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAspect(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setFarClipPlane(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFarClipPlane(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setFov(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFov(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setFromWorldMatrix(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFromWorldMatrix(niJVM_GetMatrixf(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setMove(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMove(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setMoveType(JNIEnv *e, jobject o, jint p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMoveType((eCameraMoveType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setNearClipPlane(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNearClipPlane(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setOrthoSize(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetOrthoSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setPositionDistance(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPositionDistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setProjection(JNIEnv *e, jobject o, jint p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetProjection((eCameraProjectionType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setProjectionMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetProjectionMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setTarget(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTarget(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setTargetDirection(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTargetDirection(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setTargetDistance(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTargetDistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setTargetUp(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTargetUp(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setViewMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetViewMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICamera_setViewport(JNIEnv *e, jobject o, jobject p0) {
    ni::iCamera* pointer = niJVM_GetIUnknown(e,o,ni::iCamera);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetViewport(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitFill(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitFill(niJVM_GetVec4f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitFillAlpha(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitFillAlpha(niJVM_GetVec4f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitLine(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitLine(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitLineAlpha(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitLineAlpha(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitOverlay(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer1 = p1 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitOverlay(niJVM_GetVec4f(e,p0), pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitOverlayFrame(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer1 = p1 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitOverlayFrame(niJVM_GetVec4f(e,p0), pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitRect(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitRect(niJVM_GetVec4f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitRectAlpha(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitRectAlpha(niJVM_GetVec4f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitStretch(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitStretch(niJVM_GetVec4f(e,p0), pointer1, niJVM_GetVec4f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitStretchAlpha(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitStretchAlpha(niJVM_GetVec4f(e,p0), pointer1, niJVM_GetVec4f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_blitStretchAlpha1(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jfloat p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitStretchAlpha1(niJVM_GetVec4f(e,p0), pointer1, niJVM_GetVec4f(e,p2), p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_blitText(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jstring p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->BlitText(pointer0, niJVM_GetVec4f(e,p1), p2, pointer3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_drawPath(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->DrawPath(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_flush(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Flush();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_frame(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Frame(p0, niJVM_GetVec4f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_frameA(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2, jobject p3, jfloat p4, jint p5) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FrameA(p0, niJVM_GetVec4f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_frameT(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jfloat p6) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FrameT(p0, niJVM_GetVec4f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), niJVM_GetVec2f(e,p4), niJVM_GetVec2f(e,p5), p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_frameTA(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jfloat p6, jint p7) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FrameTA(p0, niJVM_GetVec4f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), niJVM_GetVec2f(e,p4), niJVM_GetVec2f(e,p5), p6, p7);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_frameTA2(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jfloat p6, jint p7, jint p8, jint p9, jint p10) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FrameTA2(p0, niJVM_GetVec4f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), niJVM_GetVec2f(e,p4), niJVM_GetVec2f(e,p5), p6, p7, p8, p9, p10);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ICanvas_getBillboard(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetBillboard();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getBillboardCenter(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetBillboardCenter());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getBillboardRight(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetBillboardRight());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getBillboardUp(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetBillboardUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ICanvas_getColorA(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetColorA();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICanvas_getContentsScale(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetContentsScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getDrawOperation(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDrawOperation();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getGraphicsContext(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphicsContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_getHasVertices(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasVertices();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_getLineConstantScreenSize(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetLineConstantScreenSize();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ICanvas_getLineSize(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetLineSize();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getMaterial(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getMatrix(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getNormal(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetNormal());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getVGMaterial(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetVGMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getVGStyle(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGStyle* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetVGStyle();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getVGTransform(JNIEnv *e, jobject o, jint p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetVGTransform((eVGTransform)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 80), &niGetInterfaceUUID(ni::iVGTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_getViewport(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetViewport());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_line(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Line(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_lineA(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->LineA(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_lineEx(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jint p3, jobject p4, jobject p5, jfloat p6, jint p7) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->LineEx(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), p2, p3, niJVM_GetVec3f(e,p4), niJVM_GetVec2f(e,p5), p6, p7);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_lineGridXY(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jint p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LineGridXY(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_lineGridXZ(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jint p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LineGridXZ(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quad(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Quad(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadA(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jint p4) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadA(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadA2(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3, jobject p4, jint p5, jobject p6, jint p7) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadA2(niJVM_GetVec3f(e,p0), p1, niJVM_GetVec3f(e,p2), p3, niJVM_GetVec3f(e,p4), p5, niJVM_GetVec3f(e,p6), p7);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadEx(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jint p3, jobject p4, jobject p5, jobject p6, jint p7, jobject p8, jobject p9, jobject p10, jint p11, jobject p12, jobject p13, jobject p14, jint p15) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadEx(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec2f(e,p2), p3, niJVM_GetVec3f(e,p4), niJVM_GetVec3f(e,p5), niJVM_GetVec2f(e,p6), p7, niJVM_GetVec3f(e,p8), niJVM_GetVec3f(e,p9), niJVM_GetVec2f(e,p10), p11, niJVM_GetVec3f(e,p12), niJVM_GetVec3f(e,p13), niJVM_GetVec2f(e,p14), p15);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadT(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jobject p6, jobject p7) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadT(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec2f(e,p3), niJVM_GetVec3f(e,p4), niJVM_GetVec2f(e,p5), niJVM_GetVec3f(e,p6), niJVM_GetVec2f(e,p7));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadTA(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jobject p6, jobject p7, jint p8) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadTA(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec2f(e,p3), niJVM_GetVec3f(e,p4), niJVM_GetVec2f(e,p5), niJVM_GetVec3f(e,p6), niJVM_GetVec2f(e,p7), p8);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_quadTA2(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jobject p4, jint p5, jobject p6, jobject p7, jint p8, jobject p9, jobject p10, jint p11) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuadTA2(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), p2, niJVM_GetVec3f(e,p3), niJVM_GetVec2f(e,p4), p5, niJVM_GetVec3f(e,p6), niJVM_GetVec2f(e,p7), p8, niJVM_GetVec3f(e,p9), niJVM_GetVec2f(e,p10), p11);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCanvas>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ICanvas_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCanvas>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_rect(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Rect(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_rectA(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RectA(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_rectT(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RectT(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_rectTA(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4, jint p5) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RectTA(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_rectTA2(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4, jint p5, jint p6, jint p7, jint p8) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RectTA2(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4, p5, p6, p7, p8);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_resetStates(JNIEnv *e, jobject o) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ResetStates();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setBillboard(JNIEnv *e, jobject o, jint p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBillboard(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setBillboardCenter(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBillboardCenter(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setBillboardRight(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBillboardRight(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setBillboardUp(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBillboardUp(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setColorA(JNIEnv *e, jobject o, jint p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetColorA(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setContentsScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetContentsScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setDefaultMaterial(JNIEnv *e, jobject o, jobject p0, jint p1, jlong p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDefaultMaterial(pointer0, (eBlendMode)p1, (ni::tIntPtr)p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setLineConstantScreenSize(JNIEnv *e, jobject o, jboolean p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLineConstantScreenSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setLineSize(JNIEnv *e, jobject o, jfloat p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLineSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetMaterial(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ICanvas_setNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNormal(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexP(JNIEnv *e, jobject o, jobject p0) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexP(niJVM_GetVec3f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexPN(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexPN(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexPNT(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexPNT(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec2f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexPNTA(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexPNTA(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec2f(e,p2), p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexPT(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexPT(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_vertexPTA(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->VertexPTA(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeAABB(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeAABB(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeCircle(JNIEnv *e, jobject o, jobject p0, jfloat p1, jint p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeCircle(niJVM_GetVec3f(e,p0), p1, p2, (ePlaneType)p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeCone(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jint p3, jint p4) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeCone(niJVM_GetVec3f(e,p0), p1, p2, p3, (ePlaneType)p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeEllipse(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeEllipse(niJVM_GetVec3f(e,p0), niJVM_GetVec2f(e,p1), p2, (ePlaneType)p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeEllipsoid(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeEllipsoid(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeEllipsoidEx(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3, jint p4, jint p5) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeEllipsoidEx(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2, p3, p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeSphere(JNIEnv *e, jobject o, jobject p0, jfloat p1, jint p2) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeSphere(niJVM_GetVec3f(e,p0), p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ICanvas_wireframeSphereEx(JNIEnv *e, jobject o, jobject p0, jfloat p1, jint p2, jint p3, jint p4, jint p5) {
    ni::iCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WireframeSphereEx(niJVM_GetVec3f(e,p0), p1, p2, p3, p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring1_computeAcceleration(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputeAcceleration(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring1_getDampingRatio(JNIEnv *e, jobject o) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDampingRatio();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring1_getKd(JNIEnv *e, jobject o) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKd();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring1_getKs(JNIEnv *e, jobject o) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKs();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring1_getVelocity(JNIEnv *e, jobject o) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetVelocity();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring1_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpring1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring1>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iDampedSpring1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring1_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpring1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring1>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iDampedSpring1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_setDampingRatio(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDampingRatio(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_setKd(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_setKs(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_setStiffnessAndDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStiffnessAndDampingRatio(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_setVelocity(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVelocity(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_updateVelocity(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocity(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring1_updateVelocityWithAcceleration(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocityWithAcceleration(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring2_computeAcceleration(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->ComputeAcceleration(niJVM_GetVec2f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring2_getDampingRatio(JNIEnv *e, jobject o) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDampingRatio();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring2_getKd(JNIEnv *e, jobject o) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKd();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring2_getKs(JNIEnv *e, jobject o) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKs();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring2_getVelocity(JNIEnv *e, jobject o) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring2_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpring2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring2>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iDampedSpring2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring2_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpring2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring2>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iDampedSpring2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_setDampingRatio(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDampingRatio(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_setKd(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_setKs(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_setStiffnessAndDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStiffnessAndDampingRatio(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_setVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVelocity(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_updateVelocity(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocity(p0, niJVM_GetVec2f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring2_updateVelocityWithAcceleration(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocityWithAcceleration(p0, niJVM_GetVec2f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring3_computeAcceleration(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ComputeAcceleration(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring3_getDampingRatio(JNIEnv *e, jobject o) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDampingRatio();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring3_getKd(JNIEnv *e, jobject o) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKd();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring3_getKs(JNIEnv *e, jobject o) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKs();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring3_getVelocity(JNIEnv *e, jobject o) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring3_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpring3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring3>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iDampedSpring3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring3_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpring3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring3>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iDampedSpring3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_setDampingRatio(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDampingRatio(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_setKd(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_setKs(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_setStiffnessAndDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStiffnessAndDampingRatio(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_setVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVelocity(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_updateVelocity(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocity(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring3_updateVelocityWithAcceleration(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocityWithAcceleration(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring4_computeAcceleration(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ComputeAcceleration(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring4_getDampingRatio(JNIEnv *e, jobject o) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDampingRatio();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring4_getKd(JNIEnv *e, jobject o) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKd();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpring4_getKs(JNIEnv *e, jobject o) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKs();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring4_getVelocity(JNIEnv *e, jobject o) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVelocity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring4_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpring4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring4>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 25), &niGetInterfaceUUID(ni::iDampedSpring4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpring4_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpring4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpring4>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 25), &niGetInterfaceUUID(ni::iDampedSpring4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_setDampingRatio(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDampingRatio(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_setKd(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_setKs(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_setStiffnessAndDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStiffnessAndDampingRatio(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_setVelocity(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVelocity(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_updateVelocity(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocity(p0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpring4_updateVelocityWithAcceleration(JNIEnv *e, jobject o, jfloat p0, jobject p1) {
    ni::iDampedSpring4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpring4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateVelocityWithAcceleration(p0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_getCurrentPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetCurrentPosition();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_getEndThreshold(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetEndThreshold();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_getIdealPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetIdealPosition();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDampedSpringPosition1_getIsEnded(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEnded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_getSpeed(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_getStep(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStep();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition1_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpringPosition1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition1>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iDampedSpringPosition1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition1_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpringPosition1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition1>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iDampedSpringPosition1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition1_setCurrentPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCurrentPosition(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition1_setEndThreshold(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEndThreshold(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition1_setIdealPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIdealPosition(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition1_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition1_setStep(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStep(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition1_updatePosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition1* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition1);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->UpdatePosition(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition2_getCurrentPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetCurrentPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition2_getEndThreshold(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetEndThreshold();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition2_getIdealPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetIdealPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDampedSpringPosition2_getIsEnded(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEnded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition2_getSpeed(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition2_getStep(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStep();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition2_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpringPosition2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition2>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iDampedSpringPosition2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition2_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpringPosition2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition2>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iDampedSpringPosition2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition2_setCurrentPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCurrentPosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition2_setEndThreshold(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEndThreshold(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition2_setIdealPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIdealPosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition2_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition2_setStep(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStep(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition2_updatePosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition2* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition2);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->UpdatePosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition3_getCurrentPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCurrentPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition3_getEndThreshold(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetEndThreshold();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition3_getIdealPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetIdealPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDampedSpringPosition3_getIsEnded(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEnded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition3_getSpeed(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition3_getStep(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStep();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition3_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpringPosition3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition3>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iDampedSpringPosition3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition3_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpringPosition3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition3>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iDampedSpringPosition3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition3_setCurrentPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCurrentPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition3_setEndThreshold(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEndThreshold(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition3_setIdealPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIdealPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition3_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition3_setStep(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStep(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition3_updatePosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition3* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition3);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->UpdatePosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition4_getCurrentPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCurrentPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition4_getEndThreshold(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetEndThreshold();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition4_getIdealPosition(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetIdealPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDampedSpringPosition4_getIsEnded(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEnded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition4_getSpeed(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IDampedSpringPosition4_getStep(JNIEnv *e, jobject o) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStep();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition4_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDampedSpringPosition4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition4>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iDampedSpringPosition4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition4_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDampedSpringPosition4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDampedSpringPosition4>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iDampedSpringPosition4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition4_setCurrentPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCurrentPosition(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition4_setEndThreshold(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEndThreshold(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition4_setIdealPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIdealPosition(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition4_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDampedSpringPosition4_setStep(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStep(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDampedSpringPosition4_updatePosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iDampedSpringPosition4* pointer = niJVM_GetIUnknown(e,o,ni::iDampedSpringPosition4);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->UpdatePosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDepthStencilStates_clone(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDepthStencilStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iDepthStencilStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDepthStencilStates* pointer0 = p0 == NULL ? NULL : (ni::iDepthStencilStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_getDepthTest(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDepthTest();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getDepthTestCompare(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGraphicsCompare rvalue = pointer->GetDepthTestCompare();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_getDepthTestWrite(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDepthTestWrite();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDepthStencilStates_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_getIsCompiled(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCompiled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilBackCompare(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGraphicsCompare rvalue = pointer->GetStencilBackCompare();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilBackFail(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilBackFail();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilBackPassDepthFail(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilBackPassDepthFail();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilBackPassDepthPass(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilBackPassDepthPass();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilFrontCompare(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGraphicsCompare rvalue = pointer->GetStencilFrontCompare();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilFrontFail(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilFrontFail();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilFrontPassDepthFail(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilFrontPassDepthFail();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilFrontPassDepthPass(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilOp rvalue = pointer->GetStencilFrontPassDepthPass();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilMask(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetStencilMask();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilMode(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStencilMode rvalue = pointer->GetStencilMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDepthStencilStates_getStencilRef(JNIEnv *e, jobject o) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetStencilRef();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDepthStencilStates_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDepthStencilStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDepthStencilStates>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iDepthStencilStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDepthStencilStates_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDepthStencilStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDepthStencilStates>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iDepthStencilStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setDepthTest(JNIEnv *e, jobject o, jboolean p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthTest(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setDepthTestCompare(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthTestCompare((eGraphicsCompare)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setDepthTestWrite(JNIEnv *e, jobject o, jboolean p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthTestWrite(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilBackCompare(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilBackCompare((eGraphicsCompare)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilBackFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilBackFail((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilBackPassDepthFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilBackPassDepthFail((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilBackPassDepthPass(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilBackPassDepthPass((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilFrontCompare(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilFrontCompare((eGraphicsCompare)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilFrontFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilFrontFail((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilFrontPassDepthFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilFrontPassDepthFail((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilFrontPassDepthPass(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilFrontPassDepthPass((eStencilOp)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilMask(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilMask(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilMode(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilMode((eStencilMode)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDepthStencilStates_setStencilRef(JNIEnv *e, jobject o, jint p0) {
    ni::iDepthStencilStates* pointer = niJVM_GetIUnknown(e,o,ni::iDepthStencilStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStencilRef(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_clone(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDrawOperation_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDrawOperation* pointer0 = p0 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getBaseVertexIndex(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetBaseVertexIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getBoundingVolume(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBoundingVolume();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getCenter(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCenter());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getFirstIndex(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFirstIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getFVF(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFVF();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getIndexArray(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIndexArray();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDrawOperation_getIsCompiled(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCompiled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getLocalBoundingVolume(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocalBoundingVolume();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getMaterial(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getMatrix(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getNumIndices(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumIndices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getPrimitiveType(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGraphicsPrimitiveType rvalue = pointer->GetPrimitiveType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperation_getPriority(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPriority();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_getVertexArray(JNIEnv *e, jobject o) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetVertexArray();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDrawOperation>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperation_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDrawOperation>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setBaseVertexIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBaseVertexIndex(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setFirstIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFirstIndex(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setIndexArray(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iIndexArray* pointer0 = p0 == NULL ? NULL : (ni::iIndexArray*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIndexArray(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setLocalBoundingVolume(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iBoundingVolume* pointer0 = p0 == NULL ? NULL : (ni::iBoundingVolume*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetLocalBoundingVolume(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetMaterial(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setNumIndices(JNIEnv *e, jobject o, jint p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumIndices(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setPrimitiveType(JNIEnv *e, jobject o, jint p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPrimitiveType((eGraphicsPrimitiveType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setPriority(JNIEnv *e, jobject o, jint p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPriority(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperation_setVertexArray(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperation* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperation);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVertexArray* pointer0 = p0 == NULL ? NULL : (ni::iVertexArray*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetVertexArray(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_begin(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Begin();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IDrawOperationSet_clear(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperationSet_draw(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsContext* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsContext*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFrustum* pointer1 = p1 == NULL ? NULL : (ni::iFrustum*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Draw(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_getCurrent(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCurrent();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDrawOperationSet_getIsEmpty(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEmpty();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperationSet_getNumDrawOperations(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumDrawOperations();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_insert(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDrawOperation* pointer0 = p0 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Insert(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDrawOperationSet_insertSet(JNIEnv *e, jobject o, jobject p0) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDrawOperationSet* pointer0 = p0 == NULL ? NULL : (ni::iDrawOperationSet*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->InsertSet(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IDrawOperationSet_isEnd(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsEnd();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_next(JNIEnv *e, jobject o) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Next();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDrawOperationSet* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDrawOperationSet>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iDrawOperationSet), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IDrawOperationSet_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDrawOperationSet* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDrawOperationSet>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iDrawOperationSet), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IDrawOperationSet_xdraw(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iDrawOperationSet* pointer = niJVM_GetIUnknown(e,o,ni::iDrawOperationSet);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsContext* pointer1 = p1 == NULL ? NULL : (ni::iGraphicsContext*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iFrustum* pointer2 = p2 == NULL ? NULL : (ni::iFrustum*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->XDraw(niJVM_GetMatrixf(e,p0), pointer1, pointer2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_clone(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFixedStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iFixedStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFixedStates_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFixedStates* pointer0 = p0 == NULL ? NULL : (ni::iFixedStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraInvProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraInvProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraInvViewMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraInvViewMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraInvViewProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraInvViewProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraViewMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraViewMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getCameraViewProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetCameraViewProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getInvProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetInvProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getInvViewMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetInvViewMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getInvViewProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetInvViewProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getViewMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetViewMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_getViewProjectionMatrix(JNIEnv *e, jobject o) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetViewProjectionMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFixedStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFixedStates>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iFixedStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFixedStates_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFixedStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFixedStates>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iFixedStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFixedStates_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setCameraProjectionMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCameraProjectionMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setCameraViewMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCameraViewMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setLookAtMatrices(JNIEnv *e, jobject o, jboolean p0, jobject p1, jobject p2, jobject p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLookAtMatrices(p0, niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), p4, p5, p6, p7);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setOnlyCameraProjectionMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetOnlyCameraProjectionMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setOnlyCameraViewMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetOnlyCameraViewMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setOrthoMatrices(JNIEnv *e, jobject o, jboolean p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetOrthoMatrices(p0, niJVM_GetVec4f(e,p1), p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setProjectionMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetProjectionMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFixedStates_setViewMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iFixedStates* pointer = niJVM_GetIUnknown(e,o,ni::iFixedStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetViewMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_blitChar(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->BlitChar(pointer0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_blitCharEx(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->BlitCharEx(pointer0, p1, p2, p3, p4, p5, (eBlendMode)p6));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_blitCharStretch(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->BlitCharStretch(pointer0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_cacheRange(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CacheRange(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_cacheText(JNIEnv *e, jobject o, jstring p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CacheText(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_clearCache(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearCache();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_computeTextSize(JNIEnv *e, jobject o, jobject p0, jstring p1, jint p2) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ComputeTextSize(niJVM_GetVec4f(e,p0), pointer1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_createFontInstance(JNIEnv *e, jobject o, jobject p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFontInstance(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_drawText(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jstring p3, jint p4) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->DrawText(pointer0, niJVM_GetVec4f(e,p1), p2, pointer3, p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_enumGlyphs(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<tU32CMap> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->EnumGlyphs();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(tU32CMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getAdvance(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAdvance(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getAscent(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAscent();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getAverageCharHeight(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAverageCharHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getAverageCharWidth(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAverageCharWidth();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getBlendMode(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBlendMode rvalue = pointer->GetBlendMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IFont_getCacheID(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetCacheID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getCharBitmap(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCharBitmap(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getCharHeight(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetCharHeight(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getCharTexCoo(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCharTexCoo(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getCharTexture(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCharTexture(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getCharWidth(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetCharWidth(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getColor(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetColor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getDescent(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDescent();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_getDistanceField(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDistanceField();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getFamilyName(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFamilyName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getFilePath(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFilePath();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_getFiltering(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFiltering();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getFirstChar(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFirstChar();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getGlyphCodePointFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGlyphCodePointFromName(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getGlyphIndexFromCodepoint(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGlyphIndexFromCodepoint(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getGlyphIndexFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGlyphIndexFromName(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IFont_getGlyphName(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetGlyphName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getGlyphPath(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jfloat p3) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetGlyphPath(pointer0, p1, niJVM_GetVec2f(e,p2), p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_getHasKerning(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasKerning();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getHeight(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_getIsFixedResolution(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsFixedResolution();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_getIsInstance(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsInstance();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getKerning(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetKerning(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getLastChar(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLastChar();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getLineHeight(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetLineHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getLineSpacing(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetLineSpacing();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getMaterial(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getMaxCharHeight(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMaxCharHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IFont_getMaxCharWidth(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMaxCharWidth();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getMaxResolution(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaxResolution();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getName(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getResolution(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetResolution();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getSize(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_getStyleName(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStyleName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFont_getTabSize(JNIEnv *e, jobject o) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTabSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFont>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFont_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFont>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setBlendMode(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBlendMode((eBlendMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setColor(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetColor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setDistanceField(JNIEnv *e, jobject o, jboolean p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDistanceField(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setFiltering(JNIEnv *e, jobject o, jboolean p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFiltering(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setLineSpacing(JNIEnv *e, jobject o, jfloat p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLineSpacing(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setSizeAndResolution(JNIEnv *e, jobject o, jobject p0, jint p1, jfloat p2) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSizeAndResolution(niJVM_GetVec2f(e,p0), p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFont_setTabSize(JNIEnv *e, jobject o, jint p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTabSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFont_updateMaterial(JNIEnv *e, jobject o, jboolean p0) {
    ni::iFont* pointer = niJVM_GetIUnknown(e,o,ni::iFont);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateMaterial(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFrustum_addPlane(JNIEnv *e, jobject o, jobject p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddPlane(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_clone(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFrustum* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iFrustum), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_computeScreenBoundingBox(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ComputeScreenBoundingBox(niJVM_GetMatrixf(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFrustum_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iFrustum* pointer0 = p0 == NULL ? NULL : (ni::iFrustum*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Copy(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFrustum_cullAABB(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eCullCode rvalue = pointer->CullAABB(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFrustum_cullSphere(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eCullCode rvalue = pointer->CullSphere(niJVM_GetVec3f(e,p0), p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFrustum_extractPlanes(JNIEnv *e, jobject o, jobject p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ExtractPlanes(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_getBoundingVolume(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBoundingVolume();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_getForward(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IFrustum_getNumPlanes(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumPlanes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_getPlane(JNIEnv *e, jobject o, jint p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetPlane(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_getRight(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRight());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_getUp(JNIEnv *e, jobject o) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFrustum_intersectAABB(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IntersectAABB(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFrustum_intersectSphere(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IntersectSphere(niJVM_GetVec3f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFrustum* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFrustum>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iFrustum), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IFrustum_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFrustum* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFrustum>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iFrustum), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFrustum_setBoundingVolume(JNIEnv *e, jobject o, jobject p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBoundingVolume* pointer0 = p0 == NULL ? NULL : (ni::iBoundingVolume*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetBoundingVolume(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IFrustum_setNumPlanes(JNIEnv *e, jobject o, jint p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumPlanes(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IFrustum_setPlane(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPlane(p0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IFrustum_transform(JNIEnv *e, jobject o, jobject p0) {
    ni::iFrustum* pointer = niJVM_GetIUnknown(e,o,ni::iFrustum);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Transform(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_addSubset(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometrySubset* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddSubset(p0, p1, p2, p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iGeometrySubset), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_clone(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone(p0, p1);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometry_generate(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Generate((eGeometryGenerate)p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_getIndexArray(JNIEnv *e, jobject o) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIndexArray();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometry_getNumFaces(JNIEnv *e, jobject o) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumFaces();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometry_getNumSubsets(JNIEnv *e, jobject o) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSubsets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_getSubset(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometrySubset* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSubset(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iGeometrySubset), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometry_getSubsetIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSubsetIndex(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometry_getType(JNIEnv *e, jobject o) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGeometryType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_getVertexArray(JNIEnv *e, jobject o) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetVertexArray();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometry_optimize(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Optimize(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometry>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometry_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometry>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometry_removeSubset(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSubset(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometry_setDrawOp(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDrawOperation* pointer0 = p0 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDrawOp(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGeometry_setFacesSubsetsIDs(JNIEnv *e, jobject o, jobject p0) {
    ni::iGeometry* pointer = niJVM_GetIUnknown(e,o,ni::iGeometry);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    int* pointer0 = (int*)lock_JBuffer0.dataPtr;
    NI_JVM_CPP_TRY {
        pointer->SetFacesSubsetsIDs((ni::tU32*)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometryModifier_getGeometry(JNIEnv *e, jobject o) {
    ni::iGeometryModifier* pointer = niJVM_GetIUnknown(e,o,ni::iGeometryModifier);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGeometry();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometryModifier_getModifiedGeometry(JNIEnv *e, jobject o) {
    ni::iGeometryModifier* pointer = niJVM_GetIUnknown(e,o,ni::iGeometryModifier);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetModifiedGeometry();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometryModifier_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGeometryModifier* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometryModifier>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iGeometryModifier), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometryModifier_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGeometryModifier* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometryModifier>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iGeometryModifier), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometryModifier_setGeometry(JNIEnv *e, jobject o, jobject p0) {
    ni::iGeometryModifier* pointer = niJVM_GetIUnknown(e,o,ni::iGeometryModifier);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGeometry* pointer0 = p0 == NULL ? NULL : (ni::iGeometry*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetGeometry(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGeometryModifier_update(JNIEnv *e, jobject o) {
    ni::iGeometryModifier* pointer = niJVM_GetIUnknown(e,o,ni::iGeometryModifier);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometrySubset_getFirstIndex(JNIEnv *e, jobject o) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFirstIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometrySubset_getID(JNIEnv *e, jobject o) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometrySubset_getMaterial(JNIEnv *e, jobject o) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaterial();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGeometrySubset_getNumIndices(JNIEnv *e, jobject o) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumIndices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometrySubset_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGeometrySubset* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometrySubset>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iGeometrySubset), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGeometrySubset_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGeometrySubset* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGeometrySubset>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iGeometrySubset), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGeometrySubset_setFirstIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFirstIndex(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGeometrySubset_setID(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetID(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGeometrySubset_setMaterial(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaterial(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGeometrySubset_setNumIndices(JNIEnv *e, jobject o, jint p0) {
    ni::iGeometrySubset* pointer = niJVM_GetIUnknown(e,o,ni::iGeometrySubset);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumIndices(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGLShader_afterDraw(JNIEnv *e, jobject o) {
    ni::iGLShader* pointer = niJVM_GetIUnknown(e,o,ni::iGLShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AfterDraw();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGLShader_beforeDraw(JNIEnv *e, jobject o) {
    ni::iGLShader* pointer = niJVM_GetIUnknown(e,o,ni::iGLShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeforeDraw();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGLShader_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGLShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGLShader>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iGLShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGLShader_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGLShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGLShader>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iGLShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGLTexture_getGLFBOHandle(JNIEnv *e, jobject o) {
    ni::iGLTexture* pointer = niJVM_GetIUnknown(e,o,ni::iGLTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGLFBOHandle();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGLTexture_getGLHandle(JNIEnv *e, jobject o) {
    ni::iGLTexture* pointer = niJVM_GetIUnknown(e,o,ni::iGLTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGLHandle();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGLTexture_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGLTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGLTexture>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iGLTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGLTexture_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGLTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGLTexture>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iGLTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_blitBitmap3DToTexture(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap3D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap3D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitBitmap3DToTexture(pointer0, pointer1, p2, niJVM_GetVec3i(e,p3), niJVM_GetVec3i(e,p4), niJVM_GetVec3i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_blitBitmapToTexture(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jobject p4, jint p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitBitmapToTexture(pointer0, pointer1, p2, niJVM_GetVec4i(e,p3), niJVM_GetVec4i(e,p4), (eTextureBlitFlags)p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_blitTextureToBitmap(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3, jobject p4, jint p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToBitmap(pointer0, p1, pointer2, niJVM_GetVec4i(e,p3), niJVM_GetVec4i(e,p4), (eTextureBlitFlags)p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_blitTextureToBitmap3D(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap3D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap3D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToBitmap3D(pointer0, p1, pointer2, niJVM_GetVec3i(e,p3), niJVM_GetVec3i(e,p4), niJVM_GetVec3i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_blitTextureToTexture(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer2 = p2 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToTexture(pointer0, p1, pointer2, p3, niJVM_GetVec4i(e,p4), niJVM_GetVec4i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_checkTextureFormat(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmapFormat* pointer0 = p0 == NULL ? NULL : (ni::iBitmapFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CheckTextureFormat(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_clearAllFontCaches(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearAllFontCaches();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorAdjustContrast(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorAdjustContrast(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorAdjustSaturation(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorAdjustSaturation(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorBlackWhite(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorBlackWhite(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorConvert(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ColorConvert((eColorSpace)p0, (eColorSpace)p1, niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorConvertEx(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jobject p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ColorConvertEx((eColorSpace)p0, (eColorSpace)p1, niJVM_GetVec4f(e,p2), niJVM_GetVec4f(e,p3)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorGammaCorrect(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorGammaCorrect(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorGrey(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorGrey(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphics_colorLuminance(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ColorLuminance(niJVM_GetVec3f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphics_colorLuminanceEx(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ColorLuminanceEx(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_colorNegative(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ColorNegative(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphics_compileDepthStencilStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDepthStencilStates* pointer0 = p0 == NULL ? NULL : (ni::iDepthStencilStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileDepthStencilStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphics_compileRasterizerStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRasterizerStates* pointer0 = p0 == NULL ? NULL : (ni::iRasterizerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileRasterizerStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphics_compileSamplerStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSamplerStates* pointer0 = p0 == NULL ? NULL : (ni::iSamplerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileSamplerStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphics_computeBitmapDiff(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jdouble p3, jboolean p4) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer1 = p1 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ComputeBitmapDiff(pointer0, pointer1, pointer2, p3, p4);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createAABB(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBoundingVolume* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateAABB();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iBoundingVolume), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap(JNIEnv *e, jobject o, jobject p0, jint p1, jstring p2, jint p3, jint p4, jint p5, jint p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap(pointer0, (eBitmapType)p1, pointer2, p3, p4, p5, p6);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap2D(JNIEnv *e, jobject o, jint p0, jint p1, jstring p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap2D(p0, p1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap2DEx(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer2 = p2 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap2DEx(p0, p1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap2DMemory(JNIEnv *e, jobject o, jint p0, jint p1, jstring p2, jint p3, jobject p4, jboolean p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    void* pointer4 = p4 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p4, _JVM->addressFieldID));
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap2DMemory(p0, p1, pointer2, p3, (ni::tPtr)pointer4, p5);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap2DMemoryEx(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jint p3, jobject p4, jboolean p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer2 = p2 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    void* pointer4 = p4 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p4, _JVM->addressFieldID));
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap2DMemoryEx(p0, p1, pointer2, p3, (ni::tPtr)pointer4, p5);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap3D(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jstring p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap3D(p0, p1, p2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap3DEx(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jobject p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer3 = p3 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap3DEx(p0, p1, p2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap3DMemory(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jstring p3, jint p4, jint p5, jobject p6, jboolean p7) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    void* pointer6 = p6 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p6, _JVM->addressFieldID));
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap3DMemory(p0, p1, p2, pointer3, p4, p5, (ni::tPtr)pointer6, p7);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmap3DMemoryEx(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jobject p3, jint p4, jint p5, jobject p6, jboolean p7) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer3 = p3 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    void* pointer6 = p6 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p6, _JVM->addressFieldID));
    jobject r = NULL;
    ni::iBitmap3D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmap3DMemoryEx(p0, p1, p2, pointer3, p4, p5, (ni::tPtr)pointer6, p7);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iBitmap3D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapCube(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapCube(p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapCubeEx(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer1 = p1 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapCube* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapCubeEx(p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iBitmapCube), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapEx(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3, jint p4, jint p5, jint p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iPixelFormat* pointer2 = p2 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapEx(pointer0, (eBitmapType)p1, pointer2, p3, p4, p5, p6);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapFormat(JNIEnv *e, jobject o, jint p0, jstring p1, jint p2, jint p3, jint p4, jint p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapFormat((eBitmapType)p0, pointer1, p2, p3, p4, p5);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapFormatEmpty(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapFormatEmpty();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapFormatEx(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2, jint p3, jint p4, jint p5) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer1 = p1 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapFormatEx((eBitmapType)p0, pointer1, p2, p3, p4, p5);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iBitmapFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createBitmapFromTexture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateBitmapFromTexture(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createCamera(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCamera* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateCamera();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iCamera), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createCanvas(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsContext* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsContext*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMaterial* pointer1 = p1 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateCanvas(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createContextForRenderTargets(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer2 = p2 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer3 = p3 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer4 = p4 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsContextRT* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateContextForRenderTargets(pointer0, pointer1, pointer2, pointer3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iGraphicsContextRT), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createContextForWindow(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2, jint p3, jint p4) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateContextForWindow(pointer0, pointer1, pointer2, p3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpring1(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpring1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpring1(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iDampedSpring1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpring2(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpring2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpring2(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iDampedSpring2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpring3(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpring3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpring3(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iDampedSpring3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpring4(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpring4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpring4(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 25), &niGetInterfaceUUID(ni::iDampedSpring4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpringPosition1(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpringPosition1* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpringPosition1(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iDampedSpringPosition1), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpringPosition2(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpringPosition2* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpringPosition2(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iDampedSpringPosition2), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpringPosition3(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpringPosition3* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpringPosition3(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iDampedSpringPosition3), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDampedSpringPosition4(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDampedSpringPosition4* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDampedSpringPosition4(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iDampedSpringPosition4), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDepthStencilStates(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDepthStencilStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDepthStencilStates();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iDepthStencilStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDrawOpCapture(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsDrawOpCapture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDrawOpCapture();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iGraphicsDrawOpCapture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDrawOperation(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDrawOperation();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createDrawOperationSet(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperationSet* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDrawOperationSet();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iDrawOperationSet), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createFixedStates(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFixedStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFixedStates();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iFixedStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createFont(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFont(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createFont8x8(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFont8x8(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createFontFromBitmap(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer1 = p1 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFontFromBitmap(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createFrustum(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFrustum* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFrustum();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iFrustum), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryModifier(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iGeometry* pointer1 = p1 == NULL ? NULL : (ni::iGeometry*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iUnknown* pointer2 = p2 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGeometryModifier* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryModifier(pointer0, pointer1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iGeometryModifier), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonal(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonal(p0, p1, p2, p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalCube(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jfloat p3, jboolean p4, jint p5, jobject p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalCube(p0, p1, niJVM_GetVec3f(e,p2), p3, p4, p5, niJVM_GetMatrixf(e,p6));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalCylinder(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jfloat p3, jfloat p4, jint p5, jint p6, jboolean p7, jint p8, jobject p9, jboolean p10, jboolean p11) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalCylinder(p0, p1, p2, p3, p4, p5, p6, p7, p8, niJVM_GetMatrixf(e,p9), p10, p11);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalDisk(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jfloat p3, jint p4, jint p5, jboolean p6, jint p7, jobject p8) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalDisk(p0, p1, p2, p3, p4, p5, p6, p7, niJVM_GetMatrixf(e,p8));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalDiskSweep(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jfloat p3, jint p4, jint p5, jfloat p6, jfloat p7, jboolean p8, jint p9, jobject p10) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalDiskSweep(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, niJVM_GetMatrixf(e,p10));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalEx(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVertexArray* pointer0 = p0 == NULL ? NULL : (ni::iVertexArray*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iIndexArray* pointer1 = p1 == NULL ? NULL : (ni::iIndexArray*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalEx(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalGeosphere(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jint p3, jboolean p4, jint p5, jobject p6) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalGeosphere(p0, p1, p2, p3, p4, p5, niJVM_GetMatrixf(e,p6));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalPlane(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jobject p3, jfloat p4, jfloat p5, jint p6, jboolean p7, jint p8, jobject p9) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalPlane(p0, p1, (ePlaneType)p2, niJVM_GetVec3f(e,p3), p4, p5, p6, p7, p8, niJVM_GetMatrixf(e,p9));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createGeometryPolygonalSphere(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jint p3, jint p4, jboolean p5, jint p6, jobject p7) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGeometry* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateGeometryPolygonalSphere(p0, p1, p2, p3, p4, p5, p6, niJVM_GetMatrixf(e,p7));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iGeometry), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImage(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImage(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageEx(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jobject p3, jobject p4) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer3 = p3 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer4 = p4 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageEx(p0, p1, pointer2, pointer3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageFromBitmap(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageFromBitmap(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageFromBitmapAndTexture(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageFromBitmapAndTexture(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageFromFile(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageFromFile(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageFromResource(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageFromResource(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageFromTexture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageFromTexture(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageGraphicsContext(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iImage* pointer0 = p0 == NULL ? NULL : (ni::iImage*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageGraphicsContext(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createImageMap(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iImageMap* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImageMap(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iImageMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createIndexArray(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateIndexArray((eGraphicsPrimitiveType)p0, p1, p2, (eArrayUsage)p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createIntersection(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIntersection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateIntersection();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iIntersection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createMaterial(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createMaterialLibrary(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterialLibrary* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateMaterialLibrary();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createNUSpline(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iNUSpline* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateNUSpline((eNUSplineType)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iNUSpline), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOcclusionQuery(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOcclusionQuery* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOcclusionQuery();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iOcclusionQuery), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOverlayColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOverlayColor(niJVM_GetVec4f(e,p0));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOverlayImage(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iImage* pointer0 = p0 == NULL ? NULL : (ni::iImage*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOverlayImage(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOverlayMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOverlayMaterial(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOverlayResource(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOverlayResource(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createOverlayTexture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOverlayTexture(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createPixelFormat(JNIEnv *e, jobject o, jstring p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreatePixelFormat(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createRasterizerStates(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iRasterizerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRasterizerStates();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iRasterizerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createSamplerStates(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSamplerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateSamplerStates();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iSamplerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createShader(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateShader(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createShaderConstants(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateShaderConstants(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createShaderFromRes(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateShaderFromRes(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createTextObject(JNIEnv *e, jobject o, jstring p0, jobject p1, jfloat p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iTextObject> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTextObject(pointer0, niJVM_GetVec2f(e,p1), p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iTextObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createTexture(JNIEnv *e, jobject o, jobject p0, jint p1, jstring p2, jint p3, jint p4, jint p5, jint p6, jint p7) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTexture(pointer0, (eBitmapType)p1, pointer2, p3, p4, p5, p6, p7);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createTextureFromBitmap(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmapBase* pointer1 = p1 == NULL ? NULL : (ni::iBitmapBase*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTextureFromBitmap(pointer0, pointer1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createTextureFromRes(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTextureFromRes(pointer0, pointer1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createTransform(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTransform();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVertexArray(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVertexArray(p0, p1, (eArrayUsage)p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGGradientTable(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGGradientTable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGGradientTable(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGGradientTableStops(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGGradientTable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGGradientTableStops((const tF32CVec *)pointer0, (const tVec4fCVec *)pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGGradientTableTwoColors(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGGradientTable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGGradientTableTwoColors(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImage(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImage(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImageFromBitmap(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImageFromBitmap(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImageFromBitmapAndTexture(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImageFromBitmapAndTexture(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImageFromFile(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImageFromFile(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImageFromResource(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImageFromResource(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGImageFromTexture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGImageFromTexture(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaint(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGPaint> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaint((eVGPaintType)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaintGradient(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGGradientTable* pointer1 = p1 == NULL ? NULL : (ni::iVGGradientTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGPaintGradient> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaintGradient((eVGGradientType)p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 74), &niGetInterfaceUUID(ni::iVGPaintGradient), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaintGradientStops(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer2 = p2 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGPaintGradient> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaintGradientStops((eVGGradientType)p0, (const tF32CVec *)pointer1, (const tVec4fCVec *)pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 74), &niGetInterfaceUUID(ni::iVGPaintGradient), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaintGradientTwoColors(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGPaintGradient> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaintGradientTwoColors((eVGGradientType)p0, niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 74), &niGetInterfaceUUID(ni::iVGPaintGradient), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaintImage(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGImage* pointer0 = p0 == NULL ? NULL : (ni::iVGImage*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iVGPaintImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaintImage(pointer0, (eVGImageFilter)p1, (eVGWrapType)p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 75), &niGetInterfaceUUID(ni::iVGPaintImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPaintSolid(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGPaint> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPaintSolid(niJVM_GetVec4f(e,p0));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPath(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGPath> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPath();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 76), &niGetInterfaceUUID(ni::iVGPath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGPolygonTesselator(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGPolygonTesselator> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGPolygonTesselator();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 78), &niGetInterfaceUUID(ni::iVGPolygonTesselator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGStyle(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGStyle> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGStyle();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVGTransform(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGTransform> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVGTransform();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 80), &niGetInterfaceUUID(ni::iVGTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_createVideoDecoder(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVideoDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVideoDecoder(pointer0, pointer1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 81), &niGetInterfaceUUID(ni::iVideoDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphics_dampedSpringAcceleration1(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->DampedSpringAcceleration1(p0, p1, p2, p3);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_dampedSpringAcceleration2(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->DampedSpringAcceleration2(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_dampedSpringAcceleration3(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->DampedSpringAcceleration3(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_dampedSpringAcceleration4(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->DampedSpringAcceleration4(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphics_dampedSpringComputeKdFromDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->DampedSpringComputeKdFromDampingRatio(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphics_dampedSpringGetDampingRatio(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->DampedSpringGetDampingRatio(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_enumOSFonts(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<tStringCMap> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->EnumOSFonts();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(tStringCMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphics_findColorName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->FindColorName(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_findFont(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindFont(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_fvffromString(JNIEnv *e, jobject o, jstring p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FVFFromString(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_fvfgetComponentOffset(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FVFGetComponentOffset(p0, (eFVF)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_fvfgetNumTexCoos(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FVFGetNumTexCoos(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_fvfgetStride(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FVFGetStride(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_fvfgetTexCooDim(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FVFGetTexCooDim(p0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphics_fvftoString(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->FVFToString(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getColor3FromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetColor3FromName(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getColor4FromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetColor4FromName(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getColor4FromNameA(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetColor4FromNameA(pointer0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getColorIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetColorIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphics_getColorName(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetColorName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getColorValue(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetColorValue(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCompiledDepthStencilStates(JNIEnv *e, jobject o, jlong p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDepthStencilStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCompiledDepthStencilStates((ni::tIntPtr)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iDepthStencilStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCompiledRasterizerStates(JNIEnv *e, jobject o, jlong p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iRasterizerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCompiledRasterizerStates((ni::tIntPtr)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iRasterizerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCompiledSamplerStates(JNIEnv *e, jobject o, jlong p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSamplerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCompiledSamplerStates((ni::tIntPtr)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iSamplerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCssColor3FromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCssColor3FromName(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCssColor4FromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCssColor4FromName(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getCssColor4FromNameA(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCssColor4FromNameA(pointer0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getDrawOpCapture(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsDrawOpCapture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDrawOpCapture();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iGraphicsDrawOpCapture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getDriver(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDriver();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iGraphicsDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getDriverCaps(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GetDriverCaps((eGraphicsCaps)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getFontCacheID(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFontCacheID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getFontFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFontFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getFontFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFontFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getGenericDeviceResourceManager(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGenericDeviceResourceManager();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_getIsDriverInitialized(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsDriverInitialized();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumFonts(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumFonts();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumNamedColors(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumNamedColors();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumShaderProfile(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumShaderProfile((eShaderUnit)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumShaders(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumShaders();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumSystemFonts(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSystemFonts();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphics_getNumTextures(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumTextures();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_getRecreateShaderWhenChanged(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetRecreateShaderWhenChanged();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_getRecreateTextureWhenChanged(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetRecreateTextureWhenChanged();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getShaderDeviceResourceManager(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderDeviceResourceManager();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getShaderFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getShaderFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getShaderProfile(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderProfile((eShaderUnit)p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getSystemFontFileName(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSystemFontFileName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getSystemFontFilePath(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSystemFontFilePath(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getSystemFontName(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSystemFontName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getTextureDeviceResourceManager(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTextureDeviceResourceManager();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getTextureFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTextureFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_getTextureFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTextureFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_initializeDriver(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->InitializeDriver(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_isVideoFile(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsVideoFile(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_loadBitmap(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadBitmap(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_loadBitmapEx(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadBitmapEx(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_loadBitmapFromRes(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmapBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadBitmapFromRes(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iBitmapBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_loadFont(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadFont(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_loadFontEx(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadFontEx(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_openBitmapFile(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->OpenBitmapFile(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphics>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphics_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphics>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_registerSystemFont(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iFont* pointer2 = p2 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RegisterSystemFont(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_registerSystemFonts(JNIEnv *e, jobject o) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RegisterSystemFonts();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_saveBitmap(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iBitmapBase* pointer1 = p1 == NULL ? NULL : (ni::iBitmapBase*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SaveBitmap(pointer0, pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_saveBitmapEx(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2, jint p3) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iBitmapBase* pointer2 = p2 == NULL ? NULL : (ni::iBitmapBase*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SaveBitmapEx(pointer0, pointer1, pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_serializeShaderConstants(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iShaderConstants* pointer0 = p0 == NULL ? NULL : (ni::iShaderConstants*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeShaderConstants(pointer0, pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_setDrawOpCapture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsDrawOpCapture* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsDrawOpCapture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDrawOpCapture(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_setRecreateShaderWhenChanged(JNIEnv *e, jobject o, jboolean p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRecreateShaderWhenChanged(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_setRecreateTextureWhenChanged(JNIEnv *e, jobject o, jboolean p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRecreateTextureWhenChanged(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsHemisphereHalton(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsHemisphereHalton((tVec3fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsHemisphereHaltonEx(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsHemisphereHaltonEx((tVec3fCVec *)pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsHemisphereHammersley(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsHemisphereHammersley((tVec3fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsHemisphereHammersleyEx(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsHemisphereHammersleyEx((tVec3fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsHemisphereRandom(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsHemisphereRandom((tVec3fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsPlaneHalton(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsPlaneHalton((tVec2fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsPlaneHaltonEx(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsPlaneHaltonEx((tVec2fCVec *)pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsPlaneHammersley(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsPlaneHammersley((tVec2fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsPlaneHammersleyEx(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsPlaneHammersleyEx((tVec2fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsPlaneRandom(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsPlaneRandom((tVec2fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsSphereHalton(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsSphereHalton((tVec3fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsSphereHaltonEx(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsSphereHaltonEx((tVec3fCVec *)pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsSphereHammersley(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsSphereHammersley((tVec3fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsSphereHammersleyEx(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsSphereHammersleyEx((tVec3fCVec *)pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphics_udpointsSphereRandom(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->UDPointsSphereRandom((tVec3fCVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphics_updateGeometryPolygonalDiskSweep(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jint p3, jint p4, jfloat p5, jfloat p6, jboolean p7, jint p8, jobject p9) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGeometry* pointer0 = p0 == NULL ? NULL : (ni::iGeometry*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateGeometryPolygonalDiskSweep(pointer0, p1, p2, p3, p4, p5, p6, p7, p8, niJVM_GetMatrixf(e,p9));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphics_urlfindBitmapFilePath(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iGraphics* pointer = niJVM_GetIUnknown(e,o,ni::iGraphics);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->URLFindBitmapFilePath(pointer0, pointer1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_captureFrontBuffer(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CaptureFrontBuffer();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsContext_clearBuffers(JNIEnv *e, jobject o, jint p0, jint p1, jfloat p2, jint p3) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearBuffers(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContext_display(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Display(p0, niJVM_GetVec4i(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContext_drawOperation(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDrawOperation* pointer0 = p0 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawOperation(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getDepthStencil(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDepthStencil();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getDriver(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDriver();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iGraphicsDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getFixedStates(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFixedStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFixedStates();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iFixedStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getGraphics(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsContext_getHeight(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getMaterial(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getRenderTarget(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRenderTarget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getScissorRect(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetScissorRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_getViewport(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetViewport());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsContext_getWidth(JNIEnv *e, jobject o) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsContext>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContext_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsContext>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContext_setFixedStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFixedStates* pointer0 = p0 == NULL ? NULL : (ni::iFixedStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFixedStates(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContext_setMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMaterial(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsContext_setScissorRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScissorRect(niJVM_GetVec4i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsContext_setViewport(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContext* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetViewport(niJVM_GetVec4i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContextRT_changeDepthStencil(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsContextRT* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContextRT);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ChangeDepthStencil(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsContextRT_changeRenderTarget(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iGraphicsContextRT* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsContextRT);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ChangeRenderTarget(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContextRT_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGraphicsContextRT* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsContextRT>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iGraphicsContextRT), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsContextRT_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsContextRT* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsContextRT>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iGraphicsContextRT), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_beginCapture(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginCapture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_beginCaptureDrawOp(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsContext* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsContext*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDrawOperation* pointer1 = p1 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginCaptureDrawOp(pointer0, pointer1, niJVM_GetVec4i(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_clearCapture(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearCapture();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_endCapture(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->EndCapture();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_endCaptureDrawOp(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsContext* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsContext*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDrawOperation* pointer1 = p1 == NULL ? NULL : (ni::iDrawOperation*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->EndCaptureDrawOp(pointer0, pointer1, niJVM_GetVec4i(e,p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCapturedClear(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetCapturedClear(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCapturedDrawOp(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDrawOperation* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCapturedDrawOp(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iDrawOperation), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCapturedDrawOpContext(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCapturedDrawOpContext(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCapturedDrawOpTime(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetCapturedDrawOpTime(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCaptureFlags(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetCaptureFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getCaptureStopAt(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetCaptureStopAt();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getIsCapturing(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCapturing();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_getNumCaptured(JNIEnv *e, jobject o) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumCaptured();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGraphicsDrawOpCapture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsDrawOpCapture>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iGraphicsDrawOpCapture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsDrawOpCapture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsDrawOpCapture>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iGraphicsDrawOpCapture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_setCaptureFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCaptureFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsDrawOpCapture_setCaptureStopAt(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDrawOpCapture* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDrawOpCapture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCaptureStopAt(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_blitBitmap3DToTexture(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap3D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap3D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitBitmap3DToTexture(pointer0, pointer1, p2, niJVM_GetVec3i(e,p3), niJVM_GetVec3i(e,p4), niJVM_GetVec3i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_blitBitmapToTexture(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jobject p4, jint p5) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmap2D* pointer0 = p0 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitBitmapToTexture(pointer0, pointer1, p2, niJVM_GetVec4i(e,p3), niJVM_GetVec4i(e,p4), (eTextureBlitFlags)p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_blitTextureToBitmap(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3, jobject p4, jint p5) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToBitmap(pointer0, p1, pointer2, niJVM_GetVec4i(e,p3), niJVM_GetVec4i(e,p4), (eTextureBlitFlags)p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_blitTextureToBitmap3D(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap3D* pointer2 = p2 == NULL ? NULL : (ni::iBitmap3D*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToBitmap3D(pointer0, p1, pointer2, niJVM_GetVec3i(e,p3), niJVM_GetVec3i(e,p4), niJVM_GetVec3i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_blitTextureToTexture(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3, jobject p4, jobject p5, jint p6) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer2 = p2 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitTextureToTexture(pointer0, p1, pointer2, p3, niJVM_GetVec4i(e,p4), niJVM_GetVec4i(e,p5), (eTextureBlitFlags)p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_checkTextureFormat(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBitmapFormat* pointer0 = p0 == NULL ? NULL : (ni::iBitmapFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CheckTextureFormat(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphicsDriver_compileDepthStencilStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDepthStencilStates* pointer0 = p0 == NULL ? NULL : (ni::iDepthStencilStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileDepthStencilStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphicsDriver_compileRasterizerStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRasterizerStates* pointer0 = p0 == NULL ? NULL : (ni::iRasterizerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileRasterizerStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IGraphicsDriver_compileSamplerStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSamplerStates* pointer0 = p0 == NULL ? NULL : (ni::iSamplerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->CompileSamplerStates(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createContextForRenderTargets(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer0 = p0 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer2 = p2 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer3 = p3 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iTexture* pointer4 = p4 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsContextRT* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateContextForRenderTargets(pointer0, pointer1, pointer2, pointer3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iGraphicsContextRT), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createContextForWindow(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2, jint p3, jint p4) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateContextForWindow(pointer0, pointer1, pointer2, p3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createIndexArray(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateIndexArray((eGraphicsPrimitiveType)p0, p1, p2, (eArrayUsage)p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createOcclusionQuery(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOcclusionQuery* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateOcclusionQuery();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iOcclusionQuery), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createShader(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateShader(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createShaderConstants(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateShaderConstants(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createTexture(JNIEnv *e, jobject o, jobject p0, jint p1, jstring p2, jint p3, jint p4, jint p5, jint p6, jint p7) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTexture(pointer0, (eBitmapType)p1, pointer2, p3, p4, p5, p6, p7);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_createVertexArray(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVertexArray(p0, p1, (eArrayUsage)p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDriver_getCaps(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GetCaps((eGraphicsCaps)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphicsDriver_getDesc(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDesc());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphicsDriver_getDeviceName(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDeviceName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_getDrawOpCapture(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsDrawOpCapture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDrawOpCapture();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iGraphicsDrawOpCapture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_getGraphics(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDriver_getGraphicsDriverImplFlags(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetGraphicsDriverImplFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IGraphicsDriver_getName(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IGraphicsDriver_getNumShaderProfile(JNIEnv *e, jobject o, jint p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumShaderProfile((eShaderUnit)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_getShaderProfile(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderProfile((eShaderUnit)p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGraphicsDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsDriver>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iGraphicsDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IGraphicsDriver_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGraphicsDriver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGraphicsDriver>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iGraphicsDriver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IGraphicsDriver_resetAllCaches(JNIEnv *e, jobject o) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ResetAllCaches();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IGraphicsDriver_setDrawOpCapture(JNIEnv *e, jobject o, jobject p0) {
    ni::iGraphicsDriver* pointer = niJVM_GetIUnknown(e,o,ni::iGraphicsDriver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iGraphicsDrawOpCapture* pointer0 = p0 == NULL ? NULL : (ni::iGraphicsDrawOpCapture*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDrawOpCapture(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_clone(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImage_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iImage* pointer0 = p0 == NULL ? NULL : (ni::iImage*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImage_getHasBitmap(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasBitmap();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImage_getHasDepthStencil(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasDepthStencil();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImage_getHasTexture(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasTexture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImage_getHeight(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_getSize(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImage_getWidth(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_grabBitmap(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GrabBitmap((eImageUsage)p0, niJVM_GetVec4i(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_grabTexture(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GrabTexture((eImageUsage)p0, niJVM_GetVec4i(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iImage>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImage_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iImage>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IImage_recomputeBitmapMipmapsBeforeCopyToTexture(JNIEnv *e, jobject o) {
    ni::iImage* pointer = niJVM_GetIUnknown(e,o,ni::iImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RecomputeBitmapMipmapsBeforeCopyToTexture();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_addImage(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer1 = p1 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddImage(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_addImageFromIconSet(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jint p3, jint p4) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddImageFromIconSet(pointer0, pointer1, pointer2, p3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_addImageFromResource(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddImageFromResource(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_clear(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImageMap_getComputeMipMapsPerPage(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetComputeMipMapsPerPage();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getDefaultImageBlendMode(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBlendMode rvalue = pointer->GetDefaultImageBlendMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImageMap_getDefaultImageFilter(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDefaultImageFilter();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_getImage(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetImage(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_getImageFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetImageFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getImageIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetImageIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getMaxNumPages(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaxNumPages();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getNumImages(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumImages();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getNumPages(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumPages();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_getPage(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPage(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_getPageFormat(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageFormat();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getPageMipMaps(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPageMipMaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IImageMap_getPageSize(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPageSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImageMap_getShouldSerialize(JNIEnv *e, jobject o) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetShouldSerialize();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iImageMap* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iImageMap>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iImageMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IImageMap_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iImageMap* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iImageMap>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iImageMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImageMap_removeImage(JNIEnv *e, jobject o, jobject p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveImage(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IImageMap_serialize(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Serialize(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setComputeMipMapsPerPage(JNIEnv *e, jobject o, jboolean p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetComputeMipMapsPerPage(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setDefaultImageBlendMode(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDefaultImageBlendMode((eBlendMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setDefaultImageFilter(JNIEnv *e, jobject o, jboolean p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDefaultImageFilter(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setMaxNumPages(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaxNumPages(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setPageFormat(JNIEnv *e, jobject o, jobject p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetPageFormat(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setPageMipMaps(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPageMipMaps(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IImageMap_setPageSize(JNIEnv *e, jobject o, jint p0) {
    ni::iImageMap* pointer = niJVM_GetIUnknown(e,o,ni::iImageMap);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPageSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IIndexArray_getIsLocked(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsLocked();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIndexArray_getMaxVertexIndex(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaxVertexIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIndexArray_getNumIndices(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumIndices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIndexArray_getPrimitiveType(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eGraphicsPrimitiveType rvalue = pointer->GetPrimitiveType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIndexArray_getUsage(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eArrayUsage rvalue = pointer->GetUsage();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIndexArray_lock(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Lock(p0, p1, (eLock)p2);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIndexArray_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIndexArray>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIndexArray_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iIndexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIndexArray>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iIndexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IIndexArray_unlock(JNIEnv *e, jobject o) {
    ni::iIndexArray* pointer = niJVM_GetIUnknown(e,o,ni::iIndexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Unlock();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIntersection_getBaryCentric(JNIEnv *e, jobject o) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetBaryCentric());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIntersection_getPolygonIndex(JNIEnv *e, jobject o) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPolygonIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIntersection_getPosition(JNIEnv *e, jobject o) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IIntersection_getResult(JNIEnv *e, jobject o) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eIntersectionResult rvalue = pointer->GetResult();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIntersection_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iIntersection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIntersection>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iIntersection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IIntersection_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iIntersection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIntersection>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iIntersection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IIntersection_setBaryCentric(JNIEnv *e, jobject o, jobject p0) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBaryCentric(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IIntersection_setPolygonIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPolygonIndex(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IIntersection_setPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IIntersection_setResult(JNIEnv *e, jobject o, jint p0) {
    ni::iIntersection* pointer = niJVM_GetIUnknown(e,o,ni::iIntersection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetResult((eIntersectionResult)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegReader_beginRead(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginRead();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegReader_discardBuffer(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DiscardBuffer();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegReader_endRead(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->EndRead();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IJpegReader_getColorSpace(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eColorSpace rvalue = pointer->GetColorSpace();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegReader_getFile(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFile();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IJpegReader_getHeight(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IJpegReader_getNumComponents(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumComponents();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IJpegReader_getWidth(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegReader_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iJpegReader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJpegReader>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 50), &niGetInterfaceUUID(ni::iJpegReader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegReader_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJpegReader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJpegReader>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 50), &niGetInterfaceUUID(ni::iJpegReader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegReader_readBitmap(JNIEnv *e, jobject o, jobject p0) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iGraphics* pointer0 = p0 == NULL ? NULL : (ni::iGraphics*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ReadBitmap(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegReader_readHeaderTables(JNIEnv *e, jobject o) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadHeaderTables();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegReader_readScanline(JNIEnv *e, jobject o, jobject p0) {
    ni::iJpegReader* pointer = niJVM_GetIUnknown(e,o,ni::iJpegReader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadScanline(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegWriter_beginWrite(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) {
    ni::iJpegWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJpegWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginWrite(pointer0, p1, p2, (eColorSpace)p3, p4, p5, p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegWriter_endWrite(JNIEnv *e, jobject o) {
    ni::iJpegWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJpegWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->EndWrite();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegWriter_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iJpegWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJpegWriter>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 51), &niGetInterfaceUUID(ni::iJpegWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IJpegWriter_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJpegWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJpegWriter>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 51), &niGetInterfaceUUID(ni::iJpegWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegWriter_writeBitmap(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3) {
    ni::iJpegWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJpegWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBitmap2D* pointer1 = p1 == NULL ? NULL : (ni::iBitmap2D*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteBitmap(pointer0, pointer1, p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IJpegWriter_writeScanline(JNIEnv *e, jobject o, jobject p0) {
    ni::iJpegWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJpegWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteScanline(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_clone(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_copyChannel(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer1 = p1 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CopyChannel((eMaterialChannel)p0, pointer1, (eMaterialChannel)p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getBlendMode(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBlendMode rvalue = pointer->GetBlendMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getChannelColor(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetChannelColor((eMaterialChannel)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IMaterial_getChannelSamplerStates(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetChannelSamplerStates((eMaterialChannel)p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getChannelTexture(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChannelTexture((eMaterialChannel)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getClassName(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetClass();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getDepth(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDepth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IMaterial_getDepthStencilStates(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetDepthStencilStates();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getExpression(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExpression((eMaterialExpression)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getExpressionObject(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpression* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExpressionObject((eMaterialExpression)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iExpression), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getExpressionValueMatrix(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetExpressionValueMatrix((eMaterialExpression)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getExpressionValueVector(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetExpressionValueVector((eMaterialExpression)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getFlags(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getGraphics(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_getHasShader(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasShader();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getHeight(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getName(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getNumUserdata(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumUserdata();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getPolygonOffset(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetPolygonOffset());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niUI_IMaterial_getRasterizerStates(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetRasterizerStates();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getShader(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShader((eShaderUnit)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getShaderConstants(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShaderConstants();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getUserdata(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetUserdata(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getUserdataFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetUserdataFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_getUserdataName(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetUserdataName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterial_getWidth(JNIEnv *e, jobject o) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_hasChannelTexture(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasChannelTexture((eMaterialChannel)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterial>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterial_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterial>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_serialize(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Serialize((eSerializeMode)p0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setBlendMode(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetBlendMode((eBlendMode)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setChannelColor(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetChannelColor((eMaterialChannel)p0, niJVM_GetVec4f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setChannelSamplerStates(JNIEnv *e, jobject o, jint p0, jlong p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetChannelSamplerStates((eMaterialChannel)p0, (ni::tIntPtr)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setChannelTexture(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTexture* pointer1 = p1 == NULL ? NULL : (ni::iTexture*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetChannelTexture((eMaterialChannel)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setClass(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetClass(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setDepthStencilStates(JNIEnv *e, jobject o, jlong p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthStencilStates((ni::tIntPtr)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setExpression(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetExpression((eMaterialExpression)p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setExpressionObject(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iExpression* pointer2 = p2 == NULL ? NULL : (ni::iExpression*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetExpressionObject((eMaterialExpression)p0, pointer1, pointer2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setName(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterial_setPolygonOffset(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPolygonOffset(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setRasterizerStates(JNIEnv *e, jobject o, jlong p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetRasterizerStates((ni::tIntPtr)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setShader(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iShader* pointer1 = p1 == NULL ? NULL : (ni::iShader*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetShader((eShaderUnit)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setShaderConstants(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iShaderConstants* pointer0 = p0 == NULL ? NULL : (ni::iShaderConstants*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetShaderConstants(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterial_setUserdata(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMaterial* pointer = niJVM_GetIUnknown(e,o,ni::iMaterial);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetUserdata(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_addMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddMaterial(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_clearMaterials(JNIEnv *e, jobject o) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearMaterials();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_clone(JNIEnv *e, jobject o, jboolean p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterialLibrary* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_copy(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterialLibrary* pointer0 = p0 == NULL ? NULL : (ni::iMaterialLibrary*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_getBasePath(JNIEnv *e, jobject o) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBasePath();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_getMaterial(JNIEnv *e, jobject o, jint p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_getMaterialFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterialFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterialLibrary_getMaterialIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaterialIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IMaterialLibrary_getNumMaterials(JNIEnv *e, jobject o) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMaterials();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_getSinkList(JNIEnv *e, jobject o) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tMaterialLibrarySinkLst * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSinkList();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(tMaterialLibrarySinkLst ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMaterialLibrary* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterialLibrary>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrary_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMaterialLibrary* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterialLibrary>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_removeMaterial(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMaterial* pointer0 = p0 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveMaterial(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IMaterialLibrary_serializeFile(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeFile(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterialLibrary_setBasePath(JNIEnv *e, jobject o, jobject p0) {
    ni::iMaterialLibrary* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrary);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetBasePath(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrarySink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iMaterialLibrarySink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iMaterialLibrarySink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 54), &niGetInterfaceUUID(ni::iMaterialLibrarySink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterialLibrarySink_onMaterialLibrarySink_1MaterialAdded(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMaterialLibrarySink* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrarySink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMaterialLibrary* pointer0 = p0 == NULL ? NULL : (ni::iMaterialLibrary*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMaterial* pointer1 = p1 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnMaterialLibrarySink_MaterialAdded(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IMaterialLibrarySink_onMaterialLibrarySink_1MaterialRemoved(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMaterialLibrarySink* pointer = niJVM_GetIUnknown(e,o,ni::iMaterialLibrarySink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMaterialLibrary* pointer0 = p0 == NULL ? NULL : (ni::iMaterialLibrary*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMaterial* pointer1 = p1 == NULL ? NULL : (ni::iMaterial*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnMaterialLibrarySink_MaterialRemoved(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrarySink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMaterialLibrarySink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterialLibrarySink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 54), &niGetInterfaceUUID(ni::iMaterialLibrarySink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IMaterialLibrarySink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMaterialLibrarySink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMaterialLibrarySink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 54), &niGetInterfaceUUID(ni::iMaterialLibrarySink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IMaterialLibrarySinkImpl
// Implement JNI Wrapper for ni::iMaterialLibrarySink
struct JNI_ni_iMaterialLibrarySink : public ni::cIUnknownImpl<iMaterialLibrarySink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnMaterialLibrarySink_MaterialAdded;
  mutable jmethodID mmOnMaterialLibrarySink_MaterialRemoved;

  JNI_ni_iMaterialLibrarySink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iMaterialLibrarySink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnMaterialLibrarySink_MaterialAdded -> (Lni/niUI/IMaterialLibrary;Lni/niUI/IMaterial;)V
  virtual void __stdcall OnMaterialLibrarySink_MaterialAdded(ni::iMaterialLibrary* p0, ni::iMaterial* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iMaterialLibrarySink,OnMaterialLibrarySink_MaterialAdded,onMaterialLibrarySink_MaterialAdded,"(Lni/niUI/IMaterialLibrary;Lni/niUI/IMaterial;)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    e->CallVoidMethodA(mObject,mmOnMaterialLibrarySink_MaterialAdded,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iMaterialLibrarySink,OnMaterialLibrarySink_MaterialAdded,onMaterialLibrarySink_MaterialAdded,;);
  }
  // Method: OnMaterialLibrarySink_MaterialRemoved -> (Lni/niUI/IMaterialLibrary;Lni/niUI/IMaterial;)V
  virtual void __stdcall OnMaterialLibrarySink_MaterialRemoved(ni::iMaterialLibrary* p0, ni::iMaterial* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iMaterialLibrarySink,OnMaterialLibrarySink_MaterialRemoved,onMaterialLibrarySink_MaterialRemoved,"(Lni/niUI/IMaterialLibrary;Lni/niUI/IMaterial;)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iMaterialLibrary), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    e->CallVoidMethodA(mObject,mmOnMaterialLibrarySink_MaterialRemoved,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iMaterialLibrarySink,OnMaterialLibrarySink_MaterialRemoved,onMaterialLibrarySink_MaterialRemoved,;);
  }
};
niExportFunc(ni::iMaterialLibrarySink*) NewJNIWrapper_ni_iMaterialLibrarySink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iMaterialLibrarySink,e,o);
  return niNew JNI_ni_iMaterialLibrarySink(e,o);
}

JNIEXPORT void JNICALL Java_ni_niUI_INUSpline_addNode(JNIEnv *e, jobject o, jobject p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddNode(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_INUSpline_clear(JNIEnv *e, jobject o) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_INUSpline_getLength(JNIEnv *e, jobject o) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetLength();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_INUSpline_getNode(JNIEnv *e, jobject o, jint p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetNode(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_INUSpline_getNodeDistance(JNIEnv *e, jobject o, jint p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetNodeDistance(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_INUSpline_getNumNodes(JNIEnv *e, jobject o) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumNodes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_INUSpline_getPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetPosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_INUSpline_getRelativePosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRelativePosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_INUSpline_getType(JNIEnv *e, jobject o) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eNUSplineType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_INUSpline_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iNUSpline* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iNUSpline>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iNUSpline), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_INUSpline_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iNUSpline* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iNUSpline>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iNUSpline), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_INUSpline_removeNode(JNIEnv *e, jobject o, jint p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveNode(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_INUSpline_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_INUSpline_setNode(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetNode(p0, niJVM_GetVec4f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_INUSpline_setType(JNIEnv *e, jobject o, jint p0) {
    ni::iNUSpline* pointer = niJVM_GetIUnknown(e,o,ni::iNUSpline);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetType((eNUSplineType)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOcclusionQuery_begin(JNIEnv *e, jobject o) {
    ni::iOcclusionQuery* pointer = niJVM_GetIUnknown(e,o,ni::iOcclusionQuery);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Begin();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOcclusionQuery_end(JNIEnv *e, jobject o) {
    ni::iOcclusionQuery* pointer = niJVM_GetIUnknown(e,o,ni::iOcclusionQuery);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->End();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IOcclusionQuery_getResult(JNIEnv *e, jobject o) {
    ni::iOcclusionQuery* pointer = niJVM_GetIUnknown(e,o,ni::iOcclusionQuery);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetResult();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IOcclusionQuery_getStatus(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOcclusionQuery* pointer = niJVM_GetIUnknown(e,o,ni::iOcclusionQuery);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eOcclusionQueryStatus rvalue = pointer->GetStatus(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOcclusionQuery_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOcclusionQuery* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOcclusionQuery>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iOcclusionQuery), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOcclusionQuery_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOcclusionQuery* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOcclusionQuery>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iOcclusionQuery), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_clone(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_computeFrameCenter(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ComputeFrameCenter(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOverlay_draw(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Draw(pointer0, niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOverlay_drawFrame(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawFrame(pointer0, p1, niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getBaseSize(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetBaseSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IOverlay_getBlendMode(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBlendMode rvalue = pointer->GetBlendMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getColor(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getCornerColor(JNIEnv *e, jobject o, jint p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCornerColor((eRectCorners)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOverlay_getFiltering(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFiltering();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getFrame(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetFrame());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getImage(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetImage();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IOverlay_getIsFrame(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsFrame();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getMapping(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetMapping());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getMaterial(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMaterial* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMaterial();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iMaterial), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getPivot(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetPivot());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_getSize(JNIEnv *e, jobject o) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOverlay>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IOverlay_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOverlay>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setBlendMode(JNIEnv *e, jobject o, jint p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBlendMode((eBlendMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetColor(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setCornerColor(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCornerColor((eRectCorners)p0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setFiltering(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFiltering(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setFrame(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFrame(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setMapping(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMapping(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setPivot(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPivot(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IOverlay_setSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iOverlay* pointer = niJVM_GetIUnknown(e,o,ni::iOverlay);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_beginUnpackPixels(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->BeginUnpackPixels((ni::tPtr)pointer0, p1, p2, p3, p4, p5);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_blit(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jobject p4, jint p5, jobject p6, jint p7, jint p8, jint p9, jint p10, jint p11) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer4 = p4 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p4, _JVM->addressFieldID));
    ni::iPixelFormat* pointer6 = p6 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p6, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Blit((ni::tPtr)pointer0, p1, p2, p3, (ni::tPtr)pointer4, p5, pointer6, p7, p8, p9, p10, (ePixelFormatBlit)p11);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_blitAlpha(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jobject p4, jint p5, jobject p6, jint p7, jint p8, jint p9, jint p10, jint p11, jobject p12, jobject p13, jint p14) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer4 = p4 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p4, _JVM->addressFieldID));
    ni::iPixelFormat* pointer6 = p6 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p6, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitAlpha((ni::tPtr)pointer0, p1, p2, p3, (ni::tPtr)pointer4, p5, pointer6, p7, p8, p9, p10, (ePixelFormatBlit)p11, niJVM_GetVec4f(e,p12), niJVM_GetVec4f(e,p13), (eBlendMode)p14);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_blitAlphaStretch(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jobject p8, jint p9, jobject p10, jint p11, jint p12, jint p13, jint p14, jobject p15, jobject p16, jint p17) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer8 = p8 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p8, _JVM->addressFieldID));
    ni::iPixelFormat* pointer10 = p10 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p10, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitAlphaStretch((ni::tPtr)pointer0, p1, p2, p3, p4, p5, p6, p7, (ni::tPtr)pointer8, p9, pointer10, p11, p12, p13, p14, niJVM_GetVec4f(e,p15), niJVM_GetVec4f(e,p16), (eBlendMode)p17);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_blitStretch(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jobject p8, jint p9, jobject p10, jint p11, jint p12, jint p13, jint p14) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer8 = p8 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p8, _JVM->addressFieldID));
    ni::iPixelFormat* pointer10 = p10 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p10, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BlitStretch((ni::tPtr)pointer0, p1, p2, p3, p4, p5, p6, p7, (ni::tPtr)pointer8, p9, pointer10, p11, p12, p13, p14);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_buildPixelf(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->BuildPixelf((ni::tPtr)pointer0, p1, p2, p3, p4);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_buildPixelub(JNIEnv *e, jobject o, jobject p0, jbyte p1, jbyte p2, jbyte p3, jbyte p4) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->BuildPixelub((ni::tPtr)pointer0, p1, p2, p3, p4);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_buildPixelul(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->BuildPixelul((ni::tPtr)pointer0, p1, p2, p3, p4);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_buildPixelus(JNIEnv *e, jobject o, jobject p0, jshort p1, jshort p2, jshort p3, jshort p4) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->BuildPixelus((ni::tPtr)pointer0, p1, p2, p3, p4);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_clear(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2, jint p3, jint p4, jint p5, jobject p6) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer6 = p6 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p6, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Clear((ni::tPtr)pointer0, p1, p2, p3, p4, p5, (ni::tPtr)pointer6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_clone(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IPixelFormat_endUnpackPixels(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->EndUnpackPixels();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getBitsPerPixel(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetBitsPerPixel();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getBytesPerPixel(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetBytesPerPixel();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getCaps(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePixelFormatCaps rvalue = pointer->GetCaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IPixelFormat_getFormat(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetFormat());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumABits(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumABits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumBBits(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumBBits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumComponents(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumComponents();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumGBits(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumGBits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumParameters(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumParameters();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getNumRBits(JNIEnv *e, jobject o) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumRBits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getParameter(JNIEnv *e, jobject o, jint p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetParameter(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IPixelFormat_getSize(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize(p0, p1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_isSamePixelFormat(JNIEnv *e, jobject o, jobject p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iPixelFormat* pointer0 = p0 == NULL ? NULL : (ni::iPixelFormat*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsSamePixelFormat(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iPixelFormat>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iPixelFormat>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IPixelFormat_setParameter(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetParameter(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_unpackPixelf(JNIEnv *e, jobject o, jobject p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->UnpackPixelf((ni::tPtr)pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_unpackPixelub(JNIEnv *e, jobject o, jobject p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewColor4ub(e,pointer->UnpackPixelub((ni::tPtr)pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_unpackPixelul(JNIEnv *e, jobject o, jobject p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->UnpackPixelul((ni::tPtr)pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IPixelFormat_unpackPixelus(JNIEnv *e, jobject o, jobject p0) {
    ni::iPixelFormat* pointer = niJVM_GetIUnknown(e,o,ni::iPixelFormat);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->UnpackPixelus((ni::tPtr)pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IRasterizerStates_clone(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iRasterizerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iRasterizerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRasterizerStates* pointer0 = p0 == NULL ? NULL : (ni::iRasterizerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IRasterizerStates_getColorWriteMask(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eColorWriteMask rvalue = pointer->GetColorWriteMask();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IRasterizerStates_getCullingMode(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eCullingMode rvalue = pointer->GetCullingMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IRasterizerStates_getDepthBiasFactor(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDepthBiasFactor();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IRasterizerStates_getDepthBiasUnitScale(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDepthBiasUnitScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IRasterizerStates_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_getIsCompiled(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCompiled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_getScissorTest(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetScissorTest();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_getWireframe(JNIEnv *e, jobject o) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetWireframe();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IRasterizerStates_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iRasterizerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRasterizerStates>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iRasterizerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IRasterizerStates_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iRasterizerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRasterizerStates>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iRasterizerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setColorWriteMask(JNIEnv *e, jobject o, jint p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColorWriteMask((eColorWriteMask)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setCullingMode(JNIEnv *e, jobject o, jint p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetCullingMode((eCullingMode)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setDepthBiasFactor(JNIEnv *e, jobject o, jfloat p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthBiasFactor(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setDepthBiasUnitScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDepthBiasUnitScale(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setScissorTest(JNIEnv *e, jobject o, jboolean p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetScissorTest(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IRasterizerStates_setWireframe(JNIEnv *e, jobject o, jboolean p0) {
    ni::iRasterizerStates* pointer = niJVM_GetIUnknown(e,o,ni::iRasterizerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetWireframe(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISamplerStates_clone(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSamplerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iSamplerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iSamplerStates* pointer0 = p0 == NULL ? NULL : (ni::iSamplerStates*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISamplerStates_getBorderColor(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetBorderColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISamplerStates_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ISamplerStates_getFilter(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSamplerFilter rvalue = pointer->GetFilter();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_getIsCompiled(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCompiled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ISamplerStates_getWrapR(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSamplerWrap rvalue = pointer->GetWrapR();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ISamplerStates_getWrapS(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSamplerWrap rvalue = pointer->GetWrapS();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ISamplerStates_getWrapT(JNIEnv *e, jobject o) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eSamplerWrap rvalue = pointer->GetWrapT();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISamplerStates_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSamplerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSamplerStates>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iSamplerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISamplerStates_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSamplerStates* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSamplerStates>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iSamplerStates), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_serializeDataTable(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_setBorderColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetBorderColor(niJVM_GetVec4f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_setFilter(JNIEnv *e, jobject o, jint p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFilter((eSamplerFilter)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_setWrapR(JNIEnv *e, jobject o, jint p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetWrapR((eSamplerWrap)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_setWrapS(JNIEnv *e, jobject o, jint p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetWrapS((eSamplerWrap)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ISamplerStates_setWrapT(JNIEnv *e, jobject o, jint p0) {
    ni::iSamplerStates* pointer = niJVM_GetIUnknown(e,o,ni::iSamplerStates);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetWrapT((eSamplerWrap)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ISearchable_getCorpus(JNIEnv *e, jobject o, jobject p0) {
    ni::iSearchable* pointer = niJVM_GetIUnknown(e,o,ni::iSearchable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iSearchContainer* pointer0 = p0 == NULL ? NULL : (ni::iSearchContainer*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->GetCorpus(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISearchable_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iSearchable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iSearchable(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iSearchable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ISearchable_onSelect(JNIEnv *e, jobject o, jint p0) {
    ni::iSearchable* pointer = niJVM_GetIUnknown(e,o,ni::iSearchable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnSelect(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISearchable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSearchable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSearchable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iSearchable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISearchable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSearchable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSearchable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iSearchable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.ISearchableImpl
// Implement JNI Wrapper for ni::iSearchable
struct JNI_ni_iSearchable : public ni::cIUnknownImpl<iSearchable> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetCorpus;
  mutable jmethodID mmOnSelect;

  JNI_ni_iSearchable(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iSearchable() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetCorpus -> (Lni/niUI/ISearchContainer;)V
  virtual void __stdcall GetCorpus(ni::iSearchContainer* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iSearchable,GetCorpus,getCorpus,"(Lni/niUI/ISearchContainer;)V",;);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 62), &niGetInterfaceUUID(ni::iSearchContainer), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    e->CallVoidMethodA(mObject,mmGetCorpus,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iSearchable,GetCorpus,getCorpus,;);
  }
  // Method: OnSelect -> (I)V
  virtual void __stdcall OnSelect(ni::tU32 p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iSearchable,OnSelect,onSelect,"(I)V",;);
    jvalue args[1];
    args[0].i = p0;
    e->CallVoidMethodA(mObject,mmOnSelect,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iSearchable,OnSelect,onSelect,;);
  }
};
niExportFunc(ni::iSearchable*) NewJNIWrapper_ni_iSearchable(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iSearchable,e,o);
  return niNew JNI_ni_iSearchable(e,o);
}

JNIEXPORT void JNICALL Java_ni_niUI_ISearchContainer_addResult(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iSearchContainer* pointer = niJVM_GetIUnknown(e,o,ni::iSearchContainer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->AddResult(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISearchContainer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSearchContainer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSearchContainer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 62), &niGetInterfaceUUID(ni::iSearchContainer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ISearchContainer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSearchContainer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSearchContainer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 62), &niGetInterfaceUUID(ni::iSearchContainer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_getCode(JNIEnv *e, jobject o) {
    ni::iShader* pointer = niJVM_GetIUnknown(e,o,ni::iShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCode();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_getConstants(JNIEnv *e, jobject o) {
    ni::iShader* pointer = niJVM_GetIUnknown(e,o,ni::iShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetConstants();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iShader* pointer = niJVM_GetIUnknown(e,o,ni::iShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_getProfile(JNIEnv *e, jobject o) {
    ni::iShader* pointer = niJVM_GetIUnknown(e,o,ni::iShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetProfile();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShader_getUnit(JNIEnv *e, jobject o) {
    ni::iShader* pointer = niJVM_GetIUnknown(e,o,ni::iShader);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eShaderUnit rvalue = pointer->GetUnit();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iShader>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShader_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShader* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iShader>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iShader), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_addConstant(JNIEnv *e, jobject o, jobject p0, jint p1, jint p2) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->AddConstant(pointer0, (eShaderRegisterType)p1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_clone(JNIEnv *e, jobject o) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getConstantIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetConstantIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getConstantMetadata(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetConstantMetadata(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getConstantName(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetConstantName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getConstantSize(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetConstantSize(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getConstantType(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eShaderRegisterType rvalue = pointer->GetConstantType(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getFloat(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetFloat(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getFloatMatrix(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetFloatMatrix(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getHwIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHwIndex(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_getInt(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetInt(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getMaxNumRegisters(JNIEnv *e, jobject o) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaxNumRegisters();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IShaderConstants_getNumConstants(JNIEnv *e, jobject o) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumConstants();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iShaderConstants>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IShaderConstants_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iShaderConstants* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iShaderConstants>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iShaderConstants), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IShaderConstants_setConstantMetadata(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetConstantMetadata(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setFloat(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFloat(p0, niJVM_GetVec4f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setFloatArray(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFloatArray(p0, (const tVec4fCVec *)pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setFloatMatrix(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFloatMatrix(p0, niJVM_GetMatrixf(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setFloatMatrixArray(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFloatMatrixArray(p0, (const tMatrixfCVec *)pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setHwIndex(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetHwIndex(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setInt(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetInt(p0, niJVM_GetVec4i(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IShaderConstants_setIntArray(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iShaderConstants* pointer = niJVM_GetIUnknown(e,o,ni::iShaderConstants);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetIntArray(p0, (const tVec4iCVec *)pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_addOccluder(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = NULL;
    ni::iTextOccluder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddOccluder(niJVM_GetVec4f(e,p0), var_1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iTextOccluder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_addText(JNIEnv *e, jobject o, jstring p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->AddText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_clearOccluders(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearOccluders();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_clearSelection(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearSelection();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITextObject_draw(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Draw(pointer0, niJVM_GetVec4f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITextObject_drawAt(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawAt(pointer0, niJVM_GetVec4f(e,p1), niJVM_GetVec3f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITextObject_findWordIndexFromPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FindWordIndexFromPosition(niJVM_GetVec2f(e,p0));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_ITextObject_getContentsScale(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetContentsScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getDefaultFont(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDefaultFont();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getExpressionContext(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExpressionContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getGraphics(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITextObject_getKerning(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetKerning();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getLoadFontCallback(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCallback* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLoadFontCallback();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iCallback), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITextObject_getNumOccluders(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumOccluders();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getOccluder(JNIEnv *e, jobject o, jint p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTextOccluder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetOccluder(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iTextOccluder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_ITextObject_getSelectedString(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSelectedString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getSelectionColor(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetSelectionColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getSize(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_ITextObject_getText(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetText());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_getTextSize(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetTextSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITextObject_getTrimLeadingSpaces(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetTrimLeadingSpaces();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITextObject_getTruncation(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eTextTruncation rvalue = pointer->GetTruncation();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_ITextObject_getTruncationText(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetTruncationText());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTextObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTextObject>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iTextObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextObject_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTextObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTextObject>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iTextObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITextObject_removeOccluder(JNIEnv *e, jobject o, jint p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveOccluder(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_selectRange(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SelectRange(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setContentsScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetContentsScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setDefaultFont(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDefaultFont(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setExpressionContext(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iExpressionContext* pointer0 = p0 == NULL ? NULL : (ni::iExpressionContext*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetExpressionContext(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setKerning(JNIEnv *e, jobject o, jboolean p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetKerning(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setLoadFontCallback(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iCallback* pointer0 = p0 == NULL ? NULL : (ni::iCallback*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetLoadFontCallback(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setSelectionColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSelectionColor(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setText(JNIEnv *e, jobject o, jstring p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setTrimLeadingSpaces(JNIEnv *e, jobject o, jboolean p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTrimLeadingSpaces(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setTruncation(JNIEnv *e, jobject o, jint p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTruncation((eTextTruncation)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_setTruncationText(JNIEnv *e, jobject o, jstring p0) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTruncationText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextObject_update(JNIEnv *e, jobject o) {
    ni::iTextObject* pointer = niJVM_GetIUnknown(e,o,ni::iTextObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Update();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextOccluder_getRect(JNIEnv *e, jobject o) {
    ni::iTextOccluder* pointer = niJVM_GetIUnknown(e,o,ni::iTextOccluder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextOccluder_getTextObject(JNIEnv *e, jobject o) {
    ni::iTextOccluder* pointer = niJVM_GetIUnknown(e,o,ni::iTextOccluder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iTextObject> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTextObject();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iTextObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextOccluder_getUserData(JNIEnv *e, jobject o) {
    ni::iTextOccluder* pointer = niJVM_GetIUnknown(e,o,ni::iTextOccluder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetUserData();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextOccluder_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTextOccluder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTextOccluder>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iTextOccluder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITextOccluder_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTextOccluder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTextOccluder>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iTextOccluder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextOccluder_setRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextOccluder* pointer = niJVM_GetIUnknown(e,o,ni::iTextOccluder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITextOccluder_setUserData(JNIEnv *e, jobject o, jobject p0) {
    ni::iTextOccluder* pointer = niJVM_GetIUnknown(e,o,ni::iTextOccluder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    NI_JVM_CPP_TRY {
        pointer->SetUserData(var_0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getDepth(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDepth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getFlags(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getHeight(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getNumMipMaps(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMipMaps();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITexture_getPixelFormat(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iPixelFormat* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPixelFormat();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iPixelFormat), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITexture_getSubTexture(JNIEnv *e, jobject o, jint p0) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSubTexture(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getType(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eBitmapType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_ITexture_getWidth(JNIEnv *e, jobject o) {
    ni::iTexture* pointer = niJVM_GetIUnknown(e,o,ni::iTexture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITexture_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTexture>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITexture_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTexture>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_clone(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_ITransform_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTransform* pointer0 = p0 == NULL ? NULL : (ni::iTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_createPostOffsetTransform(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreatePostOffsetTransform();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_createPreOffsetTransform(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreatePreOffsetTransform();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getDescStructPtr(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDescStructPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niUI_ITransform_getFlags(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->GetFlags();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getForward(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getInvForward(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetInvForward());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getInvRight(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetInvRight());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getInvUp(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetInvUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getLocalMatrix(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetLocalMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getLocalPosition(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetLocalPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getParent(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParent();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getRight(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRight());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getScale(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetScale());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niUI_ITransform_getSyncCounter(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->GetSyncCounter();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getUp(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetUp());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getWorldMatrix(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetWorldMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_getWorldPosition(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetWorldPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_identity(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Identity();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_lookAt(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LookAt(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_multiplyLocalMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MultiplyLocalMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_multiplyWorldMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MultiplyWorldMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_preMultiplyLocalMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreMultiplyLocalMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_preMultiplyWorldMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreMultiplyWorldMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_preRotate(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreRotate(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_preTranslate(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreTranslate(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTransform>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_ITransform_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTransform>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 68), &niGetInterfaceUUID(ni::iTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_rotate(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Rotate(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jshort JNICALL Java_ni_niUI_ITransform_setDirty(JNIEnv *e, jobject o) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->SetDirty();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setFlags(JNIEnv *e, jobject o, jshort p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setLocalMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLocalMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setLocalPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLocalPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setLocalRotation(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLocalRotation(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setParent(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTransform* pointer0 = p0 == NULL ? NULL : (ni::iTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetParent(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setScale(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScale(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setSyncCounter(JNIEnv *e, jobject o, jshort p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSyncCounter(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setWorldMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWorldMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setWorldPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWorldPosition(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_setWorldRotation(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWorldRotation(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_ITransform_translate(JNIEnv *e, jobject o, jobject p0) {
    ni::iTransform* pointer = niJVM_GetIUnknown(e,o,ni::iTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Translate(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_addShortcut(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->AddShortcut(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_addSkin(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSkin(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_addSkinFromRes(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSkinFromRes(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_applySkin(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ApplySkin(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_clearShortcuts(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearShortcuts();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_clearSkins(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearSkins();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createProfDraw(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFont* pointer1 = p1 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iProfDraw* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateProfDraw(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iProfDraw), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidget(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2, jint p3, jobject p4) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer4 = p4 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidget(pointer0, pointer1, niJVM_GetVec4f(e,p2), p3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetCommand(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetCommand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetCommand();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 87), &niGetInterfaceUUID(ni::iWidgetCommand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetFromDataTable(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetFromDataTable(pointer0, pointer1, pointer2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetFromResource(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetFromResource(pointer0, pointer1, pointer2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetRaw(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2, jint p3, jobject p4) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer4 = p4 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetRaw(pointer0, pointer1, niJVM_GetVec4f(e,p2), p3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetSink(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetSink(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_createWidgetSinkFromScript(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWidgetSinkFromScript(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_draw(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Draw();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_drawCursor(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->DrawCursor(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_drawTransformedWidget(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCanvas* pointer1 = p1 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawTransformedWidget(pointer0, pointer1, niJVM_GetMatrixf(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_drawWidget(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCanvas* pointer1 = p1 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawWidget(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_findSkinColor(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer4 = p4 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->FindSkinColor(niJVM_GetVec4f(e,p0), pointer1, pointer2, pointer3, pointer4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_findSkinCursor(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinCursor(pointer0, pointer1, pointer2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_findSkinElement(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinElement(pointer0, pointer1, pointer2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_findSkinFont(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinFont(pointer0, pointer1, pointer2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getActiveWidget(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActiveWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IUIContext_getContentsScale(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetContentsScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getCursor(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCursor();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getCursorPosition(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetCursorPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_getDebugDraw(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDebugDraw();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getDefaultInputSubmitFlags(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDefaultInputSubmitFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getDefaultSkin(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDefaultSkin();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getDragFingerStartDistance(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDragFingerStartDistance(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getDragStartDistance(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDragStartDistance();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_getDrawOpCapture(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDrawOpCapture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getErrorOverlay(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetErrorOverlay();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_getFingerDown(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFingerDown(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getFingerPosition(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetFingerPosition(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getFocusedWidget(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFocusedWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getGraphics(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getGraphicsContext(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphicsContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IUIContext_getHoverDelay(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetHoverDelay();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getHoverInputModifiers(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHoverInputModifiers();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getImageMap(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iImageMap* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetImageMap();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iImageMap), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getInputModifiers(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetInputModifiers();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_getKeyDown(JNIEnv *e, jobject o, jbyte p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetKeyDown(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getNumSkins(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSkins();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getNumWidgets(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumWidgets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getRootWidget(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRootWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getShortcutCommand(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetShortcutCommand(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getSkinDataTable(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSkinDataTable(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IUIContext_getSkinIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSkinIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getSkinName(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSkinName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getToolbar(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetToolbar();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_getWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_hasWidgetSinkClass(JNIEnv *e, jobject o, jstring p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasWidgetSinkClass(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_initializeDefaultToolbar(JNIEnv *e, jobject o) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InitializeDefaultToolbar();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputDoubleClick(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputDoubleClick((ePointerButton)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputFingerMove(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputFingerMove(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputFingerPress(JNIEnv *e, jobject o, jint p0, jobject p1, jboolean p2) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputFingerPress(p0, niJVM_GetVec3f(e,p1), p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputFingerRelativeMove(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputFingerRelativeMove(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputGameCtrl(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iGameCtrl* pointer0 = p0 == NULL ? NULL : (ni::iGameCtrl*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->InputGameCtrl(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputKeyChar(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputKeyChar(p0, (eKey)p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputKeyPress(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputKeyPress((eKey)p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputMouseWheel(JNIEnv *e, jobject o, jfloat p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputMouseWheel(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputPinch(JNIEnv *e, jobject o, jfloat p0, jint p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputPinch(p0, (const eGestureState)p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_inputRelativeMouseMove(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputRelativeMouseMove(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iUIContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iUIContext>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUIContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IUIContext_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUIContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iUIContext>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUIContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_removeShortcut(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RemoveShortcut(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_removeSkin(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSkin(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_resize(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Resize(niJVM_GetVec4f(e,p0), p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_sendCommand(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iWidgetCommand* pointer1 = p1 == NULL ? NULL : (ni::iWidgetCommand*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SendCommand(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_sendWindowMessage(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    NI_JVM_CPP_TRY {
        pointer->SendWindowMessage((eOSWindowMessage)p0, var_1, var_2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_serializeWidget(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iRegex* pointer3 = p3 == NULL ? NULL : (ni::iRegex*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeWidget(pointer0, pointer1, p2, pointer3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_setActiveWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActiveWidget(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_setCursor(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetCursor(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setDebugDraw(JNIEnv *e, jobject o, jboolean p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDebugDraw(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setDefaultInputSubmitFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDefaultInputSubmitFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_setDefaultSkin(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDefaultSkin(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setDragFingerStartDistance(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDragFingerStartDistance(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setDragStartDistance(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDragStartDistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setDrawOpCapture(JNIEnv *e, jobject o, jboolean p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDrawOpCapture(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_setErrorOverlay(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetErrorOverlay(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setHoverDelay(JNIEnv *e, jobject o, jfloat p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHoverDelay(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setHoverInputModifiers(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHoverInputModifiers(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setImageMap(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iImageMap* pointer0 = p0 == NULL ? NULL : (ni::iImageMap*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetImageMap(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IUIContext_setInputModifiers(JNIEnv *e, jobject o, jint p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetInputModifiers(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_setToolbar(JNIEnv *e, jobject o, jobject p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetToolbar(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IUIContext_update(JNIEnv *e, jobject o, jfloat p0) {
    ni::iUIContext* pointer = niJVM_GetIUnknown(e,o,ni::iUIContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVertexArray_getFVF(JNIEnv *e, jobject o) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFVF();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVertexArray_getIsLocked(JNIEnv *e, jobject o) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsLocked();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVertexArray_getNumVertices(JNIEnv *e, jobject o) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumVertices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVertexArray_getUsage(JNIEnv *e, jobject o) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eArrayUsage rvalue = pointer->GetUsage();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVertexArray_lock(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Lock(p0, p1, (eLock)p2);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 110));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVertexArray_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVertexArray>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVertexArray_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVertexArray* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVertexArray>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 70), &niGetInterfaceUUID(ni::iVertexArray), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVertexArray_unlock(JNIEnv *e, jobject o) {
    ni::iVertexArray* pointer = niJVM_GetIUnknown(e,o,ni::iVertexArray);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Unlock();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGGradientTable_clone(JNIEnv *e, jobject o) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGGradientTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGGradientTable_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGGradientTable* pointer0 = p0 == NULL ? NULL : (ni::iVGGradientTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGGradientTable_createImage(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jint p3, jint p4, jint p5, jint p6) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer2 = p2 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateImage((eVGGradientType)p0, (eVGWrapType)p1, pointer2, p3, p4, p5, p6);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGGradientTable_generateStops(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GenerateStops((const tF32CVec *)pointer0, (const tVec4fCVec *)pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGGradientTable_generateTwoColors(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->GenerateTwoColors(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGGradientTable_getColor(JNIEnv *e, jobject o, jint p0) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetColor(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGGradientTable_getSize(JNIEnv *e, jobject o) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGGradientTable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGGradientTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGGradientTable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGGradientTable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGGradientTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGGradientTable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGGradientTable_setColor(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColor(p0, niJVM_GetVec4f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGGradientTable_setColorRange(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2) {
    ni::iVGGradientTable* pointer = niJVM_GetIUnknown(e,o,ni::iVGGradientTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColorRange(p0, p1, niJVM_GetVec4f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_clone(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iVGImage> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGImage_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGImage* pointer0 = p0 == NULL ? NULL : (ni::iVGImage*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGImage_getHasBitmap(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasBitmap();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGImage_getHasDepthStencil(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasDepthStencil();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGImage_getHasTexture(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasTexture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGImage_getHeight(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_getSize(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGImage_getWidth(JNIEnv *e, jobject o) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_grabBitmap(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GrabBitmap((eVGImageUsage)p0, niJVM_GetVec4i(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_grabTexture(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GrabTexture((eVGImageUsage)p0, niJVM_GetVec4i(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGImage>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGImage_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGImage>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGImage_resize(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iVGImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Resize(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaint_clone(JNIEnv *e, jobject o) {
    ni::iVGPaint* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaint);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGPaint* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPaint_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaint* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaint);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPaint* pointer0 = p0 == NULL ? NULL : (ni::iVGPaint*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaint_getColor(JNIEnv *e, jobject o) {
    ni::iVGPaint* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaint);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaint_getType(JNIEnv *e, jobject o) {
    ni::iVGPaint* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaint);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPaintType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaint_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPaint* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaint>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaint_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPaint* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaint>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaint_setColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaint* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaint);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetColor(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintGradient_getA(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetA());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintGradient_getB(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetB());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintGradient_getD1(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetD1();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintGradient_getD2(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetD2();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintGradient_getGradientTable(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGGradientTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGradientTable();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 71), &niGetInterfaceUUID(ni::iVGGradientTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintGradient_getGradientType(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGGradientType rvalue = pointer->GetGradientType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGPaintGradient_getR(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetR();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintGradient_getUnits(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPaintUnits rvalue = pointer->GetUnits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintGradient_getWrapType(JNIEnv *e, jobject o) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGWrapType rvalue = pointer->GetWrapType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintGradient_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPaintGradient* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaintGradient>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 74), &niGetInterfaceUUID(ni::iVGPaintGradient), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintGradient_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPaintGradient* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaintGradient>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 74), &niGetInterfaceUUID(ni::iVGPaintGradient), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setA(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetA(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setB(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetB(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setD1(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetD1(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setD2(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetD2(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setGradientType(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetGradientType((eVGGradientType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setR(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetR(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setUnits(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUnits((eVGPaintUnits)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintGradient_setWrapType(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintGradient* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintGradient);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWrapType((eVGWrapType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPaintImage_getFilterNormalize(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFilterNormalize();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGPaintImage_getFilterRadius(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFilterRadius();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintImage_getFilterType(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGImageFilter rvalue = pointer->GetFilterType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintImage_getImage(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetImage();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 72), &niGetInterfaceUUID(ni::iVGImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintImage_getRectangle(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetRectangle());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintImage_getSource(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSource();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintImage_getSourceUnits(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPaintUnits rvalue = pointer->GetSourceUnits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintImage_getUnits(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPaintUnits rvalue = pointer->GetUnits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPaintImage_getWrapType(JNIEnv *e, jobject o) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGWrapType rvalue = pointer->GetWrapType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintImage_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPaintImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaintImage>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 75), &niGetInterfaceUUID(ni::iVGPaintImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPaintImage_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPaintImage* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPaintImage>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 75), &niGetInterfaceUUID(ni::iVGPaintImage), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setFilterNormalize(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFilterNormalize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setFilterRadius(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFilterRadius(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setFilterType(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFilterType((eVGImageFilter)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setRectangle(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRectangle(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setSource(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSource(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setSourceUnits(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSourceUnits((eVGPaintUnits)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setUnits(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUnits((eVGPaintUnits)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPaintImage_setWrapType(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPaintImage* pointer = niJVM_GetIUnknown(e,o,ni::iVGPaintImage);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWrapType((eVGWrapType)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_addPath(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddPath(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_addPolygonPath(JNIEnv *e, jobject o, jstring p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddPolygonPath(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_addPolylinePath(JNIEnv *e, jobject o, jstring p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddPolylinePath(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_addSVGPath(JNIEnv *e, jobject o, jstring p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSVGPath(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_addVertex(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVertex(niJVM_GetVec2f(e,p0), (eVGPathCommand)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_arcTo(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jboolean p3, jboolean p4, jfloat p5, jfloat p6) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ArcTo(p0, p1, p2, p3, p4, p5, p6);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_arcToRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jboolean p3, jboolean p4, jfloat p5, jfloat p6) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ArcToRel(p0, p1, p2, p3, p4, p5, p6);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_arrangeOrientations(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ArrangeOrientations(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_catrom(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Catrom(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_catromRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->CatromRel(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_circle(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Circle(p0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_clear(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_clone(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGPath* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 76), &niGetInterfaceUUID(ni::iVGPath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_closePolygon(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClosePolygon();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve3(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve3(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve3Prev(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve3Prev(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve3PrevRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve3PrevRel(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve3Rel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve3Rel(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4K(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4K(p0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4KRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4KRel(p0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4Prev(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4Prev(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4PrevRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4PrevRel(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_curve4Rel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Curve4Rel(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_ellipse(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Ellipse(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_flipX(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FlipX(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_flipY(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FlipY(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_getBoundingRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetBoundingRect(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPath_getCommand(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPathCommand rvalue = pointer->GetCommand(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPath_getNextIterator(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGPathCommand rvalue = pointer->GetNextIterator();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPath_getNumVertices(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumVertices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IVGPath_getSVGPath(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSVGPath());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_getVertex(JNIEnv *e, jobject o, jint p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVertex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_getVertexIterator(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVertexIterator());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_hermite(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Hermite(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_hermiteRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->HermiteRel(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_hlineTo(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->HLineTo(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_hlineToRel(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->HLineToRel(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_line(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Line(p0, p1, p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_lineTo(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LineTo(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_lineToRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LineToRel(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_moveTo(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveTo(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_moveToRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveToRel(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_polygon(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Polygon((const tVec2fCVec *)pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_polyline(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Polyline((const tVec2fCVec *)pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPath* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPath>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 76), &niGetInterfaceUUID(ni::iVGPath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPath_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPath* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPath>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 76), &niGetInterfaceUUID(ni::iVGPath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_rect(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Rect(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_rectCentered(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RectCentered(p0, p1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_renderTesselated(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPathTesselatedRenderer* pointer0 = p0 == NULL ? NULL : (ni::iVGPathTesselatedRenderer*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iVGTransform* pointer1 = p1 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iVGStyle* pointer2 = p2 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RenderTesselated(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_resetIterator(JNIEnv *e, jobject o) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ResetIterator();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_rotate(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Rotate(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_roundedRect(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RoundedRect(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_roundedRectCentered(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RoundedRectCentered(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_scale(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Scale(niJVM_GetVec2f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_setCommand(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetCommand(p0, (eVGPathCommand)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_setVertex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetVertex(p0, niJVM_GetVec2f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_speechBubbleRect(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8, jfloat p9) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SpeechBubbleRect(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_star(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jint p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Star(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_text(JNIEnv *e, jobject o, jobject p0, jobject p1, jstring p2) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Text(pointer0, niJVM_GetVec2f(e,p1), pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_textAlongOnePath(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jboolean p3, jfloat p4, jfloat p5, jfloat p6) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iVGPath* pointer2 = p2 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TextAlongOnePath(pointer0, pointer1, pointer2, p3, p4, p5, p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_textAlongTwoPaths(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jobject p3, jboolean p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iVGPath* pointer2 = p2 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iVGPath* pointer3 = p3 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TextAlongTwoPaths(pointer0, pointer1, pointer2, pointer3, p4, p5, p6, p7, p8);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_toBSpline(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ToBSpline(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_transform(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Transform(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_transformAlongOnePath(JNIEnv *e, jobject o, jobject p0, jboolean p1, jfloat p2, jfloat p3, jfloat p4) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TransformAlongOnePath(pointer0, p1, p2, p3, p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_transformAlongTwoPaths(JNIEnv *e, jobject o, jobject p0, jobject p1, jboolean p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPath* pointer0 = p0 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iVGPath* pointer1 = p1 == NULL ? NULL : (ni::iVGPath*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TransformAlongTwoPaths(pointer0, pointer1, p2, p3, p4, p5, p6);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPath_translate(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Translate(niJVM_GetVec2f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_ubspline(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UBSpline(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_ubsplineRel(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UBSplineRel(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_vlineTo(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->VLineTo(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPath_vlineToRel(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGPath* pointer = niJVM_GetIUnknown(e,o,ni::iVGPath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->VLineToRel(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_addPathPolygons(JNIEnv *e, jobject o, jobject p0, jobject p1, jboolean p2) {
    ni::iVGPathTesselatedRenderer* pointer = niJVM_GetIUnknown(e,o,ni::iVGPathTesselatedRenderer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGPolygonTesselator* pointer0 = p0 == NULL ? NULL : (ni::iVGPolygonTesselator*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iVGStyle* pointer1 = p1 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->AddPathPolygons(pointer0, pointer1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_beginAddPath(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iVGPathTesselatedRenderer* pointer = niJVM_GetIUnknown(e,o,ni::iVGPathTesselatedRenderer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGStyle* pointer0 = p0 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->BeginAddPath(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_endAddPath(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iVGPathTesselatedRenderer* pointer = niJVM_GetIUnknown(e,o,ni::iVGPathTesselatedRenderer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGStyle* pointer0 = p0 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->EndAddPath(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_getPathApproximationScale(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPathTesselatedRenderer* pointer = niJVM_GetIUnknown(e,o,ni::iVGPathTesselatedRenderer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGStyle* pointer0 = p0 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetPathApproximationScale(pointer0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iVGPathTesselatedRenderer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iVGPathTesselatedRenderer(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 77), &niGetInterfaceUUID(ni::iVGPathTesselatedRenderer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPathTesselatedRenderer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPathTesselatedRenderer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 77), &niGetInterfaceUUID(ni::iVGPathTesselatedRenderer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPathTesselatedRenderer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPathTesselatedRenderer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPathTesselatedRenderer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 77), &niGetInterfaceUUID(ni::iVGPathTesselatedRenderer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IVGPathTesselatedRendererImpl
// Implement JNI Wrapper for ni::iVGPathTesselatedRenderer
struct JNI_ni_iVGPathTesselatedRenderer : public ni::cIUnknownImpl<iVGPathTesselatedRenderer> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmAddPathPolygons;
  mutable jmethodID mmBeginAddPath;
  mutable jmethodID mmEndAddPath;
  mutable jmethodID mmGetPathApproximationScale;

  JNI_ni_iVGPathTesselatedRenderer(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iVGPathTesselatedRenderer() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: AddPathPolygons -> (Lni/niUI/IVGPolygonTesselator;Lni/niUI/IVGStyle;Z)V
  virtual void __stdcall AddPathPolygons(ni::iVGPolygonTesselator* p0, const ni::iVGStyle* p1, ni::tBool p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iVGPathTesselatedRenderer,AddPathPolygons,addPathPolygons,"(Lni/niUI/IVGPolygonTesselator;Lni/niUI/IVGStyle;Z)V",;);
    jvalue args[3];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 78), &niGetInterfaceUUID(ni::iVGPolygonTesselator), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    args[2].z = p2;
    e->CallVoidMethodA(mObject,mmAddPathPolygons,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iVGPathTesselatedRenderer,AddPathPolygons,addPathPolygons,;);
  }
  // Method: BeginAddPath -> (Lni/niUI/IVGStyle;Z)V
  virtual void __stdcall BeginAddPath(const ni::iVGStyle* p0, ni::tBool p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iVGPathTesselatedRenderer,BeginAddPath,beginAddPath,"(Lni/niUI/IVGStyle;Z)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].z = p1;
    e->CallVoidMethodA(mObject,mmBeginAddPath,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iVGPathTesselatedRenderer,BeginAddPath,beginAddPath,;);
  }
  // Method: EndAddPath -> (Lni/niUI/IVGStyle;Z)V
  virtual void __stdcall EndAddPath(const ni::iVGStyle* p0, ni::tBool p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iVGPathTesselatedRenderer,EndAddPath,endAddPath,"(Lni/niUI/IVGStyle;Z)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].z = p1;
    e->CallVoidMethodA(mObject,mmEndAddPath,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iVGPathTesselatedRenderer,EndAddPath,endAddPath,;);
  }
  // Method: GetPathApproximationScale -> (Lni/niUI/IVGStyle;)F
  virtual ni::tF32 __stdcall GetPathApproximationScale(const ni::iVGStyle* p0) const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iVGPathTesselatedRenderer,GetPathApproximationScale,getPathApproximationScale,"(Lni/niUI/IVGStyle;)F",0);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jfloat r = e->CallFloatMethodA(mObject,mmGetPathApproximationScale,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iVGPathTesselatedRenderer,GetPathApproximationScale,getPathApproximationScale,0);
    return r;
  }
};
niExportFunc(ni::iVGPathTesselatedRenderer*) NewJNIWrapper_ni_iVGPathTesselatedRenderer(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iVGPathTesselatedRenderer,e,o);
  return niNew JNI_ni_iVGPathTesselatedRenderer(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_addVertex(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVertex(niJVM_GetVec2f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_addVertexF32(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVertexF32(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_addVertexF64(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVertexF64(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_beginPolygon(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginPolygon(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_endPolygon(JNIEnv *e, jobject o) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->EndPolygon();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGPolygonTesselator_getNumVertices(JNIEnv *e, jobject o) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumVertices();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPolygonTesselator_getTesselatedVertices(JNIEnv *e, jobject o) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const tVec2fCVec * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTesselatedVertices();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(tVec2fCVec ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPolygonTesselator_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGPolygonTesselator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPolygonTesselator>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 78), &niGetInterfaceUUID(ni::iVGPolygonTesselator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGPolygonTesselator_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGPolygonTesselator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGPolygonTesselator>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 78), &niGetInterfaceUUID(ni::iVGPolygonTesselator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGPolygonTesselator_submitContour(JNIEnv *e, jobject o) {
    ni::iVGPolygonTesselator* pointer = niJVM_GetIUnknown(e,o,ni::iVGPolygonTesselator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SubmitContour();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_addDash(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AddDash(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_clearDashes(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearDashes();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_clone(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGStyle* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGStyle* pointer0 = p0 == NULL ? NULL : (ni::iVGStyle*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_getAntiAliasing(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetAntiAliasing();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getCurrentColor(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCurrentColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getDash(JNIEnv *e, jobject o, jint p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetDash(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getDashStart(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDashStart();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_getFill(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFill();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getFillColor(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetFillColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getFillColor4(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetFillColor4());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_getFillEvenOdd(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFillEvenOdd();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getFillExpand(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFillExpand();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getFillOpacity(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFillOpacity();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getFillPaint(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGPaint* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFillPaint();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGStyle_getInnerJoin(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGInnerJoin rvalue = pointer->GetInnerJoin();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGStyle_getLineCap(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGLineCap rvalue = pointer->GetLineCap();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGStyle_getLineJoin(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eVGLineJoin rvalue = pointer->GetLineJoin();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getMiterLimit(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMiterLimit();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVGStyle_getNumDashes(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumDashes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getOpacity(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetOpacity();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getRasterizerApproximationScale(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetRasterizerApproximationScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getSmooth(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSmooth();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_getStroke(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetStroke();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getStrokeColor(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetStrokeColor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getStrokeColor4(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetStrokeColor4());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getStrokeOpacity(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStrokeOpacity();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_getStrokePaint(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGPaint* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStrokePaint();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 73), &niGetInterfaceUUID(ni::iVGPaint), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_getStrokeTransformed(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetStrokeTransformed();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getStrokeWidth(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetStrokeWidth();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGStyle_getTesselatorApproximationScale(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetTesselatorApproximationScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_pop(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Pop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_push(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Push();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGStyle* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGStyle>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGStyle_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGStyle* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGStyle>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 79), &niGetInterfaceUUID(ni::iVGStyle), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_removeDash(JNIEnv *e, jobject o, jint p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveDash(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setAntiAliasing(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAntiAliasing(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setCurrentColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCurrentColor(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setDashStart(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDashStart(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setDefault(JNIEnv *e, jobject o) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDefault();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFill(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFill(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFillColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFillColor(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFillColor4(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFillColor4(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFillEvenOdd(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFillEvenOdd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFillExpand(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFillExpand(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setFillOpacity(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFillOpacity(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_setFillPaint(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPaint* pointer0 = p0 == NULL ? NULL : (ni::iVGPaint*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFillPaint(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setInnerJoin(JNIEnv *e, jobject o, jint p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetInnerJoin((eVGInnerJoin)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setLineCap(JNIEnv *e, jobject o, jint p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLineCap((eVGLineCap)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setLineJoin(JNIEnv *e, jobject o, jint p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLineJoin((eVGLineJoin)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setMiterLimit(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMiterLimit(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setOpacity(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetOpacity(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setRasterizerApproximationScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRasterizerApproximationScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setSmooth(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSmooth(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStroke(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStroke(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStrokeColor(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStrokeColor(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStrokeColor4(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStrokeColor4(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStrokeOpacity(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStrokeOpacity(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGStyle_setStrokePaint(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGPaint* pointer0 = p0 == NULL ? NULL : (ni::iVGPaint*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStrokePaint(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStrokeTransformed(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStrokeTransformed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setStrokeWidth(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStrokeWidth(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGStyle_setTesselatorApproximationScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGStyle* pointer = niJVM_GetIUnknown(e,o,ni::iVGStyle);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTesselatorApproximationScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_clone(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iVGTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 80), &niGetInterfaceUUID(ni::iVGTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGTransform_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_flipX(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FlipX();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_flipY(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FlipY();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGTransform_getDeterminant(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetDeterminant();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGTransform_getIsIdentity(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsIdentity();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_getMatrix(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGTransform_getRotation(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetRotation();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGTransform_getScale(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_getScaling(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetScaling());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_getTranslation(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetTranslation());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVGTransform_getValue(JNIEnv *e, jobject o, jint p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetValue((eVGTransformValue)p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_identity(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Identity();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_invert(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Invert();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGTransform_isEqual(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsEqual(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_lineSegment(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->LineSegment(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_multiply(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Multiply(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_multiplyMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MultiplyMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_multiplyValues(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MultiplyValues(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGTransform_pop(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Pop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preLineSegment(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreLineSegment(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preMultiply(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iVGTransform* pointer0 = p0 == NULL ? NULL : (ni::iVGTransform*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->PreMultiply(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preMultiplyMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreMultiplyMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preMultiplyValues(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreMultiplyValues(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preRotate(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreRotate(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preRotateAround(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreRotateAround(niJVM_GetVec2f(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preScaling(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreScaling(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preSkew(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreSkew(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_preTranslate(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->PreTranslate(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVGTransform_push(JNIEnv *e, jobject o) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Push();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVGTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGTransform>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 80), &niGetInterfaceUUID(ni::iVGTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVGTransform* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVGTransform>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 80), &niGetInterfaceUUID(ni::iVGTransform), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_rotate(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Rotate(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_rotateAround(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RotateAround(niJVM_GetVec2f(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_scaling(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Scaling(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_setMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_setValue(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetValue((eVGTransformValue)p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_setValues(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetValues(p0, p1, p2, p3, p4, p5);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_skew(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Skew(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_transform(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Transform(niJVM_GetVec2f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVGTransform_transformRotate(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->TransformRotate(niJVM_GetVec2f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVGTransform_translate(JNIEnv *e, jobject o, jobject p0) {
    ni::iVGTransform* pointer = niJVM_GetIUnknown(e,o,ni::iVGTransform);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Translate(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVideoDecoder_getFlags(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niUI_IVideoDecoder_getLength(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetLength();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVideoDecoder_getNumLoops(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumLoops();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IVideoDecoder_getNumSoundTracks(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSoundTracks();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVideoDecoder_getPause(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetPause();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVideoDecoder_getSoundTrackData(JNIEnv *e, jobject o, jint p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSoundTrackData(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IVideoDecoder_getSpeed(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSpeed();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVideoDecoder_getTargetBitmap(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBitmap2D* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTargetBitmap();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iBitmap2D), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVideoDecoder_getTargetTexture(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTexture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTargetTexture();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 67), &niGetInterfaceUUID(ni::iTexture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niUI_IVideoDecoder_getTime(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetTime();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVideoDecoder_getUpdateOnBind(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetUpdateOnBind();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IVideoDecoder_getVideoDecoderName(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetVideoDecoderName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niUI_IVideoDecoder_getVideoFps(JNIEnv *e, jobject o) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetVideoFps();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVideoDecoder_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iVideoDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVideoDecoder>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 81), &niGetInterfaceUUID(ni::iVideoDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IVideoDecoder_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iVideoDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iVideoDecoder>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 81), &niGetInterfaceUUID(ni::iVideoDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IVideoDecoder_setNumLoops(JNIEnv *e, jobject o, jint p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumLoops(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVideoDecoder_setPause(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPause(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVideoDecoder_setSpeed(JNIEnv *e, jobject o, jfloat p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSpeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVideoDecoder_setTime(JNIEnv *e, jobject o, jdouble p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTime(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IVideoDecoder_setUpdateOnBind(JNIEnv *e, jobject o, jboolean p0) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUpdateOnBind(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IVideoDecoder_update(JNIEnv *e, jobject o, jboolean p0, jfloat p1) {
    ni::iVideoDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iVideoDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_addClassPostSink(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddClassPostSink(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_addClassSink(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddClassSink(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_addPostSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetSink* pointer0 = p0 == NULL ? NULL : (ni::iWidgetSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddPostSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_addSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetSink* pointer0 = p0 == NULL ? NULL : (ni::iWidgetSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_applyDockStyle(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ApplyDockStyle((eWidgetDockStyle)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_broadcastMessage(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BroadcastMessage(p0, var_1, var_2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_computeAutoLayout(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ComputeAutoLayout(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_computeFitRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->ComputeFitRect(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_createDefaultHoverWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDefaultHoverWidget(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_destroy(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Destroy();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findLocalized(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindLocalized(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findSkinColor(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->FindSkinColor(niJVM_GetVec4f(e,p0), pointer1, pointer2, pointer3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findSkinCursor(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinCursor(pointer0, pointer1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findSkinElement(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinElement(pointer0, pointer1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findSkinFont(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindSkinFont(pointer0, pointer1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindWidget(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_findWidgetByPos(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindWidgetByPos(niJVM_GetVec2f(e,p0));
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getAbsoluteClippedClientRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetAbsoluteClippedClientRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getAbsoluteClippedRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetAbsoluteClippedRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getAbsolutePosition(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetAbsolutePosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getAbsoluteRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetAbsoluteRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getActiveLocale(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActiveLocale();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getAutoLayout(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetAutoLayout();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getCanvas(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCanvas();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getCapture(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCapture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getChildFromDrawOrder(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildFromDrawOrder(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getChildFromID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildFromID(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getChildFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildFromIndex(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getChildIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChildIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClassName(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetClassName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClientPosition(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetClientPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClientRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetClientRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClientSize(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetClientSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClippedClientRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetClippedClientRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getClippedRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetClippedRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getContextMenu(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetContextMenu();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getDockFillRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetDockFillRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getDockStyle(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eWidgetDockStyle rvalue = pointer->GetDockStyle();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getDragging(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDragging();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getDraggingSource(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDraggingSource();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getDrawOrder(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDrawOrder();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getEnabled(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetEnabled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getExclusive(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetExclusive();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getFingerCapture(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFingerCapture(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getFont(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFont* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFont();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iFont), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getGraphics(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphics* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphics();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iGraphics), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getGraphicsContext(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGraphicsContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphicsContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iGraphicsContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getHasFocus(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasFocus();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getHasMargin(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasMargin();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getHasPadding(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasPadding();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getHideChildren(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHideChildren();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getHoverText(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHoverText();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getHoverWidget(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHoverWidget();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getID(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getIgnoreInput(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIgnoreInput();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getInputSubmitFlags(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetInputSubmitFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getIsMouseOver(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsMouseOver();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getIsNcMouseOver(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsNcMouseOver();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getIsNcPressed(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsNcPressed();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getIsPressed(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsPressed();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getLocale(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocale();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getLocalizedText(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocalizedText();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getMargin(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetMargin());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getMaximumSize(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetMaximumSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getMinimumSize(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetMinimumSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getNumChildren(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChildren();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getPadding(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetPadding());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getParent(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParent();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getPosition(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getRelativePosition(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetRelativePosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getRelativeRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetRelativeRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getRelativeSize(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetRelativeSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getSize(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getSkin(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSkin();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getSkinClass(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSkinClass();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getStyle(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetStyle();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getText(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetText();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidget_getTimer(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetTimer(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getUIContext(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUIContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetUIContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUIContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_getVisible(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetVisible();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_getWidgetRect(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetWidgetRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidget_getZOrder(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eWidgetZOrder rvalue = pointer->GetZOrder();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_hasChild(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasChild(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_hasParent(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasParent(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_invalidateChildren(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InvalidateChildren();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_layout(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Layout(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_moveFocus(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MoveFocus(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_place(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Place(niJVM_GetVec4f(e,p0), (eWidgetDockStyle)p1, niJVM_GetVec4f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_popAt(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PopAt(pointer0, niJVM_GetVec2f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidget>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidget_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidget>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_redraw(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Redraw();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_removeSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iWidgetSink* pointer0 = p0 == NULL ? NULL : (ni::iWidgetSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->RemoveSink(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_resetHoverWidget(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ResetHoverWidget(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_sendCommand(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SendCommand(pointer0, p1, var_2, var_3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_sendMessage(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SendMessage(p0, var_1, var_2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_serializeChildren(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeChildren(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_serializeLayout(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeLayout(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setAbsolutePosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAbsolutePosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setAbsoluteRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAbsoluteRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setAutoLayout(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAutoLayout(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setCanvas(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iCanvas* pointer0 = p0 == NULL ? NULL : (ni::iCanvas*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetCanvas(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setCapture(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCapture(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setClientPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetClientPosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setClientRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetClientRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setClientSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetClientSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_setContextMenu(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetContextMenu(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_setDockStyle(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDockStyle((eWidgetDockStyle)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setEnabled(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEnabled(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setExclusive(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetExclusive(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setFingerCapture(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFingerCapture(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setFitRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFitRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setFitSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFitSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_setFocus(JNIEnv *e, jobject o) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFocus();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_setFont(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFont* pointer0 = p0 == NULL ? NULL : (ni::iFont*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFont(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setHideChildren(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHideChildren(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setHoverText(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetHoverText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetID(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setIgnoreInput(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIgnoreInput(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setInputSubmitFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetInputSubmitFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setLocale(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetLocale(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setMargin(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMargin(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setMaximumSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaximumSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setMinimumSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMinimumSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setPadding(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPadding(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setParent(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetParent(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setRelativePosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRelativePosition(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setRelativeRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRelativeRect(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setRelativeSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRelativeSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setSkin(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSkin(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setSkinClass(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSkinClass(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setStatus(JNIEnv *e, jobject o, jboolean p0, jboolean p1, jboolean p2) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStatus(p0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_setStyle(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetStyle(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setText(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setTimer(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTimer(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setVisible(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVisible(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setZOrder(JNIEnv *e, jobject o, jint p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetZOrder((eWidgetZOrder)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidget_setZOrderAbove(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetZOrderAbove(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_showHoverWidget(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ShowHoverWidget(pointer0, niJVM_GetVec2f(e,p1));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidget_snapInside(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iWidget* pointer = niJVM_GetIUnknown(e,o,ni::iWidget);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SnapInside(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetButton_getCheck(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCheck();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetButton_getDrawFrameFlags(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDrawFrameFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getGroupID(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGroupID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIcon(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIcon();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIconDrawRect(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetIconDrawRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIconHover(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIconHover();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIconMargin(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetIconMargin());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIconPressed(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIconPressed();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_getIconSize(JNIEnv *e, jobject o) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetIconSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetButton* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetButton>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 83), &niGetInterfaceUUID(ni::iWidgetButton), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetButton_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetButton* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetButton>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 83), &niGetInterfaceUUID(ni::iWidgetButton), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setCheck(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCheck(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setDrawFrameFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDrawFrameFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetButton_setGroupID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetGroupID(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setIcon(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIcon(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setIconHover(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIconHover(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setIconMargin(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIconMargin(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setIconPressed(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIconPressed(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetButton_setIconSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetButton* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetButton);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIconSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCanvas_getScrollH(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetScrollH();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetCanvas_getScrollMarginH(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScrollMarginH();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetCanvas_getScrollMarginV(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScrollMarginV();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetCanvas_getScrollStepH(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScrollStepH();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetCanvas_getScrollStepV(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScrollStepV();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCanvas_getScrollV(JNIEnv *e, jobject o) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetScrollV();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCanvas_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetCanvas>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 84), &niGetInterfaceUUID(ni::iWidgetCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCanvas_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetCanvas* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetCanvas>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 84), &niGetInterfaceUUID(ni::iWidgetCanvas), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCanvas_setScrollMarginH(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollMarginH(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCanvas_setScrollMarginV(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollMarginV(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCanvas_setScrollStepH(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollStepH(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCanvas_setScrollStepV(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetCanvas* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCanvas);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollStepV(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetColorPicker_getAlpha(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAlpha();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetColorPicker_getBrightness(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetBrightness();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetColorPicker_getColorName(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetColorName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_getExpression(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExpression();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_getHSV(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetHSV());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetColorPicker_getMaxBrightness(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetMaxBrightness();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_getRGB(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetRGB());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_getRGBA(JNIEnv *e, jobject o) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetRGBA());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetColorPicker* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetColorPicker>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 85), &niGetInterfaceUUID(ni::iWidgetColorPicker), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetColorPicker_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetColorPicker* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetColorPicker>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 85), &niGetInterfaceUUID(ni::iWidgetColorPicker), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setAlpha(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAlpha(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setBrightness(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBrightness(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetColorPicker_setColorName(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColorName(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetColorPicker_setExpression(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetExpression(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setHSV(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHSV(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setMaxBrightness(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaxBrightness(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setRGB(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRGB(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetColorPicker_setRGBA(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetColorPicker* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetColorPicker);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRGBA(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetComboBox_getDroppedWidget(JNIEnv *e, jobject o) {
    ni::iWidgetComboBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetComboBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDroppedWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetComboBox_getNumLines(JNIEnv *e, jobject o) {
    ni::iWidgetComboBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetComboBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumLines();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetComboBox_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetComboBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetComboBox>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 86), &niGetInterfaceUUID(ni::iWidgetComboBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetComboBox_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetComboBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetComboBox>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 86), &niGetInterfaceUUID(ni::iWidgetComboBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetComboBox_setDroppedWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetComboBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetComboBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDroppedWidget(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetComboBox_setNumLines(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetComboBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetComboBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumLines(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_clone(JNIEnv *e, jobject o) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetCommand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 87), &niGetInterfaceUUID(ni::iWidgetCommand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetCommand_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetCommand* pointer0 = p0 == NULL ? NULL : (ni::iWidgetCommand*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_getExtra1(JNIEnv *e, jobject o) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->GetExtra1();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_getExtra2(JNIEnv *e, jobject o) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->GetExtra2();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetCommand_getID(JNIEnv *e, jobject o) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_getSender(JNIEnv *e, jobject o) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSender();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetCommand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetCommand>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 87), &niGetInterfaceUUID(ni::iWidgetCommand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetCommand_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetCommand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetCommand>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 87), &niGetInterfaceUUID(ni::iWidgetCommand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCommand_setExtra1(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    NI_JVM_CPP_TRY {
        pointer->SetExtra1(var_0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCommand_setExtra2(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    NI_JVM_CPP_TRY {
        pointer->SetExtra2(var_0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetCommand_setID(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetID(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetCommand_setSender(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetCommand* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetCommand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSender(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetDockable_getDockName(JNIEnv *e, jobject o) {
    ni::iWidgetDockable* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDockName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetDockable_getIsDocked(JNIEnv *e, jobject o) {
    ni::iWidgetDockable* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsDocked();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetDockable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetDockable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 88), &niGetInterfaceUUID(ni::iWidgetDockable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetDockable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetDockable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 88), &niGetInterfaceUUID(ni::iWidgetDockable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_addDockArea(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2, jboolean p3) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->AddDockArea(p0, p1, niJVM_GetVec4f(e,p2), p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetDockingManager_cleanDockAreas(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->CleanDockAreas();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetDockingManager_clearDockAreas(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearDockAreas();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetDockingManager_dockWidget(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DockWidget(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockingManager_getDockArea(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDockArea(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_getDockAreaFromPageName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDockAreaFromPageName(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_getDockAreaHovered(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDockAreaHovered(niJVM_GetVec2f(e,p0));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockingManager_getDockAreaTabContextMenu(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDockAreaTabContextMenu();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockingManager_getDockedWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDockedWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_getFlags(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_getNumDockAreas(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumDockAreas();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetDockingManager_getNumDockedWidgets(JNIEnv *e, jobject o) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumDockedWidgets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockingManager_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetDockingManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetDockingManager>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 89), &niGetInterfaceUUID(ni::iWidgetDockingManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetDockingManager_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetDockingManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetDockingManager>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 89), &niGetInterfaceUUID(ni::iWidgetDockingManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetDockingManager_setDockAreaTabContextMenu(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetDockAreaTabContextMenu(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetDockingManager_setFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFlags(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetDockingManager_undockWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetDockingManager* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetDockingManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UndockWidget(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_addText(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->AddText(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_autoScroll(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AutoScroll();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetEditBox_getAllTextRange(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetAllTextRange());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetEditBox_getCursorColumn(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetCursorColumn();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetEditBox_getCursorLine(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetCursorLine();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetEditBox_getCursorPosition(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetCursorPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetEditBox_getReplaceChar(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetReplaceChar();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetEditBox_getSelection(JNIEnv *e, jobject o) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetSelection());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetEditBox_getTextInRange(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetTextInRange(niJVM_GetVec4i(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_moveCursor(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveCursor(niJVM_GetVec2i(e,p0), p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_moveCursorColumnDelta(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveCursorColumnDelta(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_moveCursorEnd(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveCursorEnd(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_moveCursorHome(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveCursorHome(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_moveCursorLineDelta(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->MoveCursorLineDelta(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetEditBox_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetEditBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetEditBox>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 90), &niGetInterfaceUUID(ni::iWidgetEditBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetEditBox_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetEditBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetEditBox>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 90), &niGetInterfaceUUID(ni::iWidgetEditBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_setReplaceChar(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetReplaceChar(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetEditBox_setSelection(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetEditBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetEditBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSelection(niJVM_GetVec4i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetForm_addTitleWidget(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddTitleWidget(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetForm_getFormFrameFlags(JNIEnv *e, jobject o) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFormFrameFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetForm_getNumTitleWidgets(JNIEnv *e, jobject o) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumTitleWidgets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetForm_getResizeBorderArea(JNIEnv *e, jobject o) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetResizeBorderArea();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetForm_getTitle(JNIEnv *e, jobject o) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetTitle());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetForm_getTitleWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTitleWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetForm_getTitleWidgetFromID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTitleWidgetFromID(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetForm_getTitleWidgetIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTitleWidgetIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetForm_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetForm* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetForm>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 91), &niGetInterfaceUUID(ni::iWidgetForm), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetForm_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetForm* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetForm>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 91), &niGetInterfaceUUID(ni::iWidgetForm), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetForm_setFormFrameFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFormFrameFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetForm_setResizeBorderArea(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetResizeBorderArea(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetForm_setTitle(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetForm* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetForm);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetTitle(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetGroup_getFolded(JNIEnv *e, jobject o) {
    ni::iWidgetGroup* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetGroup);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetFolded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetGroup_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetGroup* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetGroup>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 92), &niGetInterfaceUUID(ni::iWidgetGroup), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetGroup_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetGroup* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetGroup>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 92), &niGetInterfaceUUID(ni::iWidgetGroup), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetGroup_setFolded(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetGroup* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetGroup);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFolded(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetLabel_getFontFormatFlags(JNIEnv *e, jobject o) {
    ni::iWidgetLabel* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetLabel);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFontFormatFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetLabel_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetLabel* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetLabel>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 93), &niGetInterfaceUUID(ni::iWidgetLabel), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetLabel_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetLabel* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetLabel>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 93), &niGetInterfaceUUID(ni::iWidgetLabel), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetLabel_setFontFormatFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetLabel* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetLabel);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFontFormatFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_addColumn(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->AddColumn(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_addItem(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->AddItem(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_addSelectedItem(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSelectedItem(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_addSelection(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSelection(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_autoScroll(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->AutoScroll();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_clearItems(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearItems();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_clearSelection(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearSelection();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetListBox_getColumnName(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetColumnName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getColumnWidth(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetColumnWidth(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_getIsItemSelected(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsItemSelected(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_getItemData(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItemData(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getItemFromText(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetItemFromText(p0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetListBox_getItemHeight(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetItemHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_getItemIcon(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItemIcon(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetListBox_getItemText(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetItemText(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getItemTextColor(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetItemTextColor(p0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_getItemWidget(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItemWidget(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getMaxNumItems(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMaxNumItems();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getNumColumns(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumColumns();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getNumItems(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumItems();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getNumSelections(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSelections();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getSelected(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSelected();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetListBox_getSelectedItem(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSelectedItem(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetListBox_getSelectedItemText(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSelectedItemText(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_getSelectedItemWidget(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSelectedItemWidget(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getSelection(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSelection(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_getSortAscendant(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetSortAscendant();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetListBox_getSortKey(JNIEnv *e, jobject o) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSortKey();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetListBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetListBox>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 94), &niGetInterfaceUUID(ni::iWidgetListBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetListBox_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetListBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetListBox>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 94), &niGetInterfaceUUID(ni::iWidgetListBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_removeColumn(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveColumn(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_removeItem(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveItem(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_removeSelection(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSelection(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setColumn(JNIEnv *e, jobject o, jint p0, jstring p1, jint p2) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColumn(p0, pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setColumnName(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColumnName(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setColumnWidth(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetColumnWidth(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemData(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemData(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemHeight(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemHeight(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemIcon(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer1 = p1 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemIcon(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemText(JNIEnv *e, jobject o, jint p0, jint p1, jstring p2) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemText(p0, p1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemTextColor(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemTextColor(p0, p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setItemWidget(JNIEnv *e, jobject o, jint p0, jint p1, jobject p2) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer2 = p2 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetItemWidget(p0, p1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_setMaxNumItems(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMaxNumItems(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setSelected(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSelected(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setSelectedItem(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSelectedItem(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetListBox_setSortAscendant(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSortAscendant(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetListBox_setSortKey(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetListBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetListBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSortKey(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_addItem(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddItem(pointer0, pointer1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenu_clearItems(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearItems();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenu_close(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Close();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_getItem(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItem(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_getItemFromID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItemFromID(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_getItemFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetItemFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenu_getItemHeight(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetItemHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenu_getItemWidth(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetItemWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenu_getMenuHeight(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMenuHeight();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenu_getMenuWidth(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMenuWidth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenu_getNumItems(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumItems();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenu_open(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Open();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetMenu* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetMenu>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 95), &niGetInterfaceUUID(ni::iWidgetMenu), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenu_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetMenu* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetMenu>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 95), &niGetInterfaceUUID(ni::iWidgetMenu), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenu_removeItem(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetMenuItem* pointer0 = p0 == NULL ? NULL : (ni::iWidgetMenuItem*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveItem(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenu_sortItems(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SortItems();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetMenu_updateSizes(JNIEnv *e, jobject o) {
    ni::iWidgetMenu* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenu);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateSizes();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenuItem_getFlags(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_getGroupID(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGroupID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_getIcon(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIcon();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_getID(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetMenuItem_getKey(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eKey rvalue = pointer->GetKey();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_getMenu(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetMenu* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMenu();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 95), &niGetInterfaceUUID(ni::iWidgetMenu), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetMenuItem_getName(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_getSelected(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetSelected();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_getSubmenu(JNIEnv *e, jobject o) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSubmenu();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetMenuItem>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetMenuItem_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetMenuItem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetMenuItem>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 96), &niGetInterfaceUUID(ni::iWidgetMenuItem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFlags(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setGroupID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetGroupID(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setIcon(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetIcon(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetID(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setKey(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetKey((eKey)p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetName(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setSelected(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSelected(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetMenuItem_setSubmenu(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetMenuItem* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetMenuItem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSubmenu(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetProgressBar_getProgress(JNIEnv *e, jobject o) {
    ni::iWidgetProgressBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetProgressBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetProgress();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetProgressBar_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetProgressBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetProgressBar>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 97), &niGetInterfaceUUID(ni::iWidgetProgressBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetProgressBar_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetProgressBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetProgressBar>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 97), &niGetInterfaceUUID(ni::iWidgetProgressBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetProgressBar_setProgress(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetProgressBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetProgressBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetProgress(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetProgressBar_setRange(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iWidgetProgressBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetProgressBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRange(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetPropertyBox_getDataTable(JNIEnv *e, jobject o) {
    ni::iWidgetPropertyBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetPropertyBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDataTable();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetPropertyBox_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iWidgetPropertyBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iWidgetPropertyBox(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 98), &niGetInterfaceUUID(ni::iWidgetPropertyBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetPropertyBox_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetPropertyBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetPropertyBox>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 98), &niGetInterfaceUUID(ni::iWidgetPropertyBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetPropertyBox_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetPropertyBox* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetPropertyBox>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 98), &niGetInterfaceUUID(ni::iWidgetPropertyBox), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetPropertyBox_setDataTable(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetPropertyBox* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetPropertyBox);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDataTable(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IWidgetPropertyBoxImpl
// Implement JNI Wrapper for ni::iWidgetPropertyBox
struct JNI_ni_iWidgetPropertyBox : public ni::cIUnknownImpl<iWidgetPropertyBox> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetDataTable;
  mutable jmethodID mmSetDataTable;

  JNI_ni_iWidgetPropertyBox(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iWidgetPropertyBox() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetDataTable -> ()Lni/niLang/IDataTable;
  virtual ni::iDataTable* __stdcall GetDataTable() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iWidgetPropertyBox,GetDataTable,getDataTable,"()Lni/niLang/IDataTable;",(ni::iDataTable*)NULL);
    jvalue* args = NULL;
    jobject r = e->CallObjectMethodA(mObject,mmGetDataTable,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iWidgetPropertyBox,GetDataTable,getDataTable,(ni::iDataTable*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iDataTable);
  }
  // Method: SetDataTable -> (Lni/niLang/IDataTable;)V
  virtual void __stdcall SetDataTable(ni::iDataTable* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iWidgetPropertyBox,SetDataTable,setDataTable,"(Lni/niLang/IDataTable;)V",;);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    e->CallVoidMethodA(mObject,mmSetDataTable,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iWidgetPropertyBox,SetDataTable,setDataTable,;);
  }
};
niExportFunc(ni::iWidgetPropertyBox*) NewJNIWrapper_ni_iWidgetPropertyBox(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iWidgetPropertyBox,e,o);
  return niNew JNI_ni_iWidgetPropertyBox(e,o);
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetScrollBar_computeRoundedPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputeRoundedPosition(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetScrollBar_getNormalizedScrollPosition(JNIEnv *e, jobject o) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetNormalizedScrollPosition();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetScrollBar_getPageSize(JNIEnv *e, jobject o) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetPageSize();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetScrollBar_getScrollPosition(JNIEnv *e, jobject o) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetScrollPosition();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetScrollBar_getScrollRange(JNIEnv *e, jobject o) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetScrollRange());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetScrollBar_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetScrollBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetScrollBar>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 99), &niGetInterfaceUUID(ni::iWidgetScrollBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetScrollBar_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetScrollBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetScrollBar>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 99), &niGetInterfaceUUID(ni::iWidgetScrollBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetScrollBar_setNormalizedScrollPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNormalizedScrollPosition(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetScrollBar_setPageSize(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPageSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetScrollBar_setScrollPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollPosition(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetScrollBar_setScrollRange(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetScrollBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetScrollBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetScrollRange(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSearchBar_getSearchable(JNIEnv *e, jobject o) {
    ni::iWidgetSearchBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSearchBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iSearchable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSearchable();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iSearchable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSearchBar_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetSearchBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSearchBar>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 100), &niGetInterfaceUUID(ni::iWidgetSearchBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSearchBar_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetSearchBar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSearchBar>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 100), &niGetInterfaceUUID(ni::iWidgetSearchBar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSearchBar_setSearchable(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetSearchBar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSearchBar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iSearchable* pointer0 = p0 == NULL ? NULL : (ni::iSearchable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSearchable(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iWidgetSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSink_onWidgetSink(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iWidgetSink* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnWidgetSink(pointer0, p1, var_2, var_3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 101), &niGetInterfaceUUID(ni::iWidgetSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niUI.IWidgetSinkImpl
// Implement JNI Wrapper for ni::iWidgetSink
struct JNI_ni_iWidgetSink : public ni::cIUnknownImpl<iWidgetSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnWidgetSink;

  JNI_ni_iWidgetSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iWidgetSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnWidgetSink -> (Lni/niUI/IWidget;ILjava/lang/Object;Ljava/lang/Object;)Z
  virtual ni::tBool __stdcall OnWidgetSink(ni::iWidget* p0, ni::tU32 p1, const ni::Var& p2, const ni::Var& p3) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iWidgetSink,OnWidgetSink,onWidgetSink,"(Lni/niUI/IWidget;ILjava/lang/Object;Ljava/lang/Object;)Z",ni::eFalse);
    jvalue args[4];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].i = p1;
    jobject var_p2 = niJVM_NewVar(e, p2);
    LocalJRef<jobject> jvar_p2(e,var_p2);
    args[2].l = jvar_p2.o;
    jobject var_p3 = niJVM_NewVar(e, p3);
    LocalJRef<jobject> jvar_p3(e,var_p3);
    args[3].l = jvar_p3.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnWidgetSink,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iWidgetSink,OnWidgetSink,onWidgetSink,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iWidgetSink*) NewJNIWrapper_ni_iWidgetSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iWidgetSink,e,o);
  return niNew JNI_ni_iWidgetSink(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_addSplitterAfter(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSplitterAfter(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_addSplitterBack(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSplitterBack(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_addSplitterBefore(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSplitterBefore(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_addSplitterFront(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSplitterFront(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getNumSplitters(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSplitters();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getNumSplitterWidgets(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSplitterWidgets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterBorderSize(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSplitterBorderSize();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterFillerIndex(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSplitterFillerIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterFoldMode(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eWidgetSplitterFoldMode rvalue = pointer->GetSplitterFoldMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterMinPosition(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSplitterMinPosition();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterParentDockRectMinimumSize(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetSplitterParentDockRectMinimumSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterPosition(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSplitterPosition(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterResizableBorders(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSplitterResizableBorders();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterSize(JNIEnv *e, jobject o) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetSplitterSize();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSplitterWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetSplitter_getSplitterWidgetIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSplitterWidgetIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSplitter_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetSplitter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSplitter>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 102), &niGetInterfaceUUID(ni::iWidgetSplitter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetSplitter_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetSplitter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetSplitter>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 102), &niGetInterfaceUUID(ni::iWidgetSplitter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_removeSplitter(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSplitter(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_removeSplitterWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSplitterWidget(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterBorderSize(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSplitterBorderSize(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterFillerIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSplitterFillerIndex(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterFoldMode(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSplitterFoldMode((eWidgetSplitterFoldMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterMinPosition(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSplitterMinPosition(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterParentDockRectMinimumSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSplitterParentDockRectMinimumSize(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterPosition(JNIEnv *e, jobject o, jint p0, jfloat p1) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSplitterPosition(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterResizableBorders(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSplitterResizableBorders(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_setSplitterSize(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSplitterSize(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetSplitter_swapSplitterWidget(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iWidgetSplitter* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetSplitter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwapSplitterWidget(p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTab_addPage(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iWidget* pointer1 = p1 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->AddPage(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getActivePage(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActivePage();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getActivePageID(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActivePageID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTab_getActivePageIndex(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetActivePageIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getActivePageName(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActivePageName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_getForceActivated(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetForceActivated(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTab_getMinNumPagesToShowTabs(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMinNumPagesToShowTabs();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTab_getNumPages(JNIEnv *e, jobject o) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumPages();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getPage(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPage(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getPageButton(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageButton(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getPageFromID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageFromID(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getPageFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTab_getPageIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPageIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_getPageName(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_hasPage(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasPage(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_movePageLeft(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MovePageLeft(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_movePageRight(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MovePageRight(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetTab* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTab>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 103), &niGetInterfaceUUID(ni::iWidgetTab), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTab_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetTab* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTab>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 103), &niGetInterfaceUUID(ni::iWidgetTab), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_removePage(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemovePage(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setActivePage(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePage(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setActivePageID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePageID(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setActivePageIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePageIndex(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setActivePageName(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePageName(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTab_setForceActivated(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetForceActivated(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTab_setMinNumPagesToShowTabs(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMinNumPagesToShowTabs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setPageIndex(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetPageIndex(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTab_setPageName(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidgetTab* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTab);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetPageName(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetText_getTextObject(JNIEnv *e, jobject o) {
    ni::iWidgetText* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetText);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTextObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTextObject();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iTextObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetText_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetText* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetText>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 104), &niGetInterfaceUUID(ni::iWidgetText), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetText_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetText* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetText>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 104), &niGetInterfaceUUID(ni::iWidgetText), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_addGroup(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer3 = p3 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iMessageHandler* pointer4 = p4 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddGroup(pointer0, pointer1, pointer2, pointer3, pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_addTopWidget(JNIEnv *e, jobject o, jobject p0, jfloat p1, jobject p2) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMessageHandler* pointer2 = p2 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddTopWidget(pointer0, p1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getActivePageID(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetActivePageID();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetToolbar_getActivePageIndex(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetActivePageIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_getAutoHide(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetAutoHide();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_getAutoHideBackground(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetAutoHideBackground();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getBottomBar(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBottomBar();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getCommandDestination(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCommandDestination();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getGroup(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGroup(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niUI_IWidgetToolbar_getHeight(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetToolbar_getNumPages(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumPages();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetToolbar_getNumTopWidgets(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumTopWidgets();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_getPageEnabled(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetPageEnabled(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetToolbar_getPageIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPageIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getPageName(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getPageWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPageWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_getShowPage(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetShowPage();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getTopBar(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTopBar();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getTopWidget(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTopWidget(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getTopWidgetCommandDestination(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTopWidgetCommandDestination(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_getTopWidgetFromID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTopWidgetFromID(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetToolbar_getTopWidgetIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTopWidgetIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_hidePopup(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->HidePopup();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_initPage(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->InitPage(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetToolbar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetToolbar>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 105), &niGetInterfaceUUID(ni::iWidgetToolbar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbar_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetToolbar* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetToolbar>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 105), &niGetInterfaceUUID(ni::iWidgetToolbar), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_removeGroup(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveGroup(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_setActivePageID(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePageID(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_setActivePageIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetActivePageIndex(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_setAutoHide(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAutoHide(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_setAutoHideBackground(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAutoHideBackground(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_setCommandDestination(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetCommandDestination(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_setHeight(JNIEnv *e, jobject o, jfloat p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHeight(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_setPageEnabled(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetPageEnabled(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_setPageName(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetPageName(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_setShowPage(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetShowPage(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetToolbar_setTopWidgetCommandDestination(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer1 = p1 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetTopWidgetCommandDestination(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbar_updateToolbar(JNIEnv *e, jobject o) {
    ni::iWidgetToolbar* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbar);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateToolbar();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbarGroup_getCommandDestination(JNIEnv *e, jobject o) {
    ni::iWidgetToolbarGroup* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbarGroup);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCommandDestination();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbarGroup_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetToolbarGroup* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetToolbarGroup>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 106), &niGetInterfaceUUID(ni::iWidgetToolbarGroup), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetToolbarGroup_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetToolbarGroup* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetToolbarGroup>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 106), &niGetInterfaceUUID(ni::iWidgetToolbarGroup), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbarGroup_setCommandDestination(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetToolbarGroup* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbarGroup);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetCommandDestination(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetToolbarGroup_setWidthFromChildren(JNIEnv *e, jobject o) {
    ni::iWidgetToolbarGroup* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetToolbarGroup);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetWidthFromChildren();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_clear(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Clear();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_clearSelection(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearSelection();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getAttributeIcon(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetAttributeIcon(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getAttributeName(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetAttributeName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTree_getHoverNode(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetHoverNode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getNode(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetNode(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTree_getNodeDropMode(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetTreeNode* pointer0 = p0 == NULL ? NULL : (ni::iWidgetTreeNode*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        eWidgetTreeNodeDropMode rvalue = pointer->GetNodeDropMode(pointer0, niJVM_GetVec2f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getNodeFromPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetNodeFromPosition(niJVM_GetVec2f(e,p0));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTree_getNumNodes(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumNodes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTree_getNumSelectedNodes(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumSelectedNodes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTree_getNumVisibleAttributes(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumVisibleAttributes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getPivotSelection(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPivotSelection();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getRootNode(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRootNode();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getSecondarySelection(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSecondarySelection();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_getSelectedNode(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSelectedNode(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_loadTreeStates(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->LoadTreeStates(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_popStates(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PopStates(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_pushStates(JNIEnv *e, jobject o) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushStates();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetTree* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTree>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 107), &niGetInterfaceUUID(ni::iWidgetTree), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTree_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetTree* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTree>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 107), &niGetInterfaceUUID(ni::iWidgetTree), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_saveTreeStates(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SaveTreeStates(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTree_scrollToNode(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iWidgetTreeNode* pointer0 = p0 == NULL ? NULL : (ni::iWidgetTreeNode*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->ScrollToNode(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTree_setAttributeIcon(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer1 = p1 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetAttributeIcon(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTree_setAttributeName(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetAttributeName(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTree_setHoverNode(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetHoverNode(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTree_setNumVisibleAttributes(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumVisibleAttributes(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTree_setSecondarySelection(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTree* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTree);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iWidgetTreeNode* pointer0 = p0 == NULL ? NULL : (ni::iWidgetTreeNode*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetSecondarySelection(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_addChildNode(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddChildNode(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_addChildNodeBefore(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddChildNodeBefore(pointer0, p1);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_clear(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Clear();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_findNodeFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindNodeFromName(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_findNodeFromPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindNodeFromPosition(niJVM_GetVec2f(e,p0));
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_findNodeFromUserdata(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindNodeFromUserdata(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_findNodeFromWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindNodeFromWidget(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getAbove(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetAbove();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getAbsoluteNodeRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetAbsoluteNodeRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getAbsoluteTextRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetAbsoluteTextRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getAttributes(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetAttributes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getBelow(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBelow();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getChildNode(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildNode(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getChildNodeFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildNodeFromName(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getChildNodeIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetTreeNode* pointer0 = p0 == NULL ? NULL : (ni::iWidgetTreeNode*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChildNodeIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_getExpanded(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetExpanded();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getFlags(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getIcon(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOverlay* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIcon();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iOverlay), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getIndex(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niUI_IWidgetTreeNode_getName(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getNextSibling(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetNextSibling();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getNodeRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetNodeRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getNumChildNodes(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChildNodes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getParentNode(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParentNode();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getParentWidget(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParentWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getPrevSibling(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPrevSibling();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getRowColor(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetRowColor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getScrolledNodeRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetScrolledNodeRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getScrolledTextRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetScrolledTextRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_getSelected(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetSelected();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getTextBackColor(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTextBackColor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getTextColor(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTextColor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getTextRect(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetTextRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getTreeIndex(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTreeIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getUserdata(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetUserdata();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 109), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niUI_IWidgetTreeNode_getVisibleAttributesMask(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetVisibleAttributesMask();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_getWidget(JNIEnv *e, jobject o) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iWidget* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetWidget();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 82), &niGetInterfaceUUID(ni::iWidget), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTreeNode>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niUI_IWidgetTreeNode_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iWidgetTreeNode* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iWidgetTreeNode>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 108), &niGetInterfaceUUID(ni::iWidgetTreeNode), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_removeChildNode(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidgetTreeNode* pointer0 = p0 == NULL ? NULL : (ni::iWidgetTreeNode*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveChildNode(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTreeNode_setAttributes(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetAttributes(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setExpanded(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetExpanded(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFlags(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setIcon(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOverlay* pointer0 = p0 == NULL ? NULL : (ni::iOverlay*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetIcon(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setName(JNIEnv *e, jobject o, jstring p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetName(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTreeNode_setRowColor(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRowColor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setSelected(JNIEnv *e, jobject o, jboolean p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetSelected(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTreeNode_setTextBackColor(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTextBackColor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTreeNode_setTextColor(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTextColor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setUserdata(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetUserdata(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niUI_IWidgetTreeNode_setVisibleAttributesMask(JNIEnv *e, jobject o, jint p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVisibleAttributesMask(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niUI_IWidgetTreeNode_setWidget(JNIEnv *e, jobject o, jobject p0) {
    ni::iWidgetTreeNode* pointer = niJVM_GetIUnknown(e,o,ni::iWidgetTreeNode);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iWidget* pointer0 = p0 == NULL ? NULL : (ni::iWidget*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetWidget(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
