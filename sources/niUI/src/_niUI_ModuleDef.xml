<niIDL
	author="niLang Authors"
	copyright="(c) 2022 The niLang Authors"
	desc="UI module"
	initfunctions="no"
	interfacesheaderpath="niUI_ModuleDef.h"
	name="niUI"
	version="1,0,0">
	<dependencies>
		<dependency name="niLang"/>
	</dependencies>
	<objecttypes>
		<objecttype desc="Graphics Object" name="Graphics" type="ni::iGraphics"/>
		<objecttype desc="Jpeg Writer Object" name="JpegWriter" type="ni::iJpegWriter"/>
		<objecttype desc="Jpeg Reader Object" name="JpegReader" type="ni::iJpegReader"/>
		<objecttype desc="Intersection result" name="Intersection" type="ni::iIntersection"/>
		<objecttype desc="Camera" name="Camera" type="ni::iCamera"/>
		<objecttype desc="Non-uniform spline" name="NUSpline" type="ni::iNUSpline"/>
		<objecttype name="UIContext"/>
		<objecttype category="BitmapLoader" name="bmp" type="ni::iBitmapLoader"/>
		<objecttype category="BitmapSaver" name="bmp" type="ni::iBitmapSaver"/>
		<objecttype category="BitmapLoader" name="jpeg" type="ni::iBitmapLoader"/>
		<objecttype category="BitmapSaver" name="jpeg" type="ni::iBitmapSaver"/>
		<objecttype category="BitmapLoader" name="png" type="ni::iBitmapLoader"/>
		<objecttype category="BitmapSaver" name="png" type="ni::iBitmapSaver"/>
		<objecttype category="BitmapLoader" name="tga" type="ni::iBitmapLoader"/>
		<objecttype category="BitmapSaver" name="tga" type="ni::iBitmapSaver"/>
		<objecttype category="BitmapLoader" name="dds" type="ni::iBitmapLoader"/>
	</objecttypes>
	<includes>
		<include>niUI/src/_idl/Colors.h.idl.xml</include>
		<include>niUI/src/_idl/FVF.h.idl.xml</include>
		<include>niUI/src/_idl/GraphicsEnum.h.idl.xml</include>
		<include>niUI/src/_idl/IBitmap2D.h.idl.xml</include>
		<include>niUI/src/_idl/IBitmap3D.h.idl.xml</include>
		<include>niUI/src/_idl/IBitmapBase.h.idl.xml</include>
		<include>niUI/src/_idl/IBitmapCube.h.idl.xml</include>
		<include>niUI/src/_idl/IBoundingVolume.h.idl.xml</include>
		<include>niUI/src/_idl/ICamera.h.idl.xml</include>
		<include>niUI/src/_idl/ICanvas.h.idl.xml</include>
		<include>niUI/src/_idl/IDampedSpring.h.idl.xml</include>
		<include>niUI/src/_idl/IDrawOperation.h.idl.xml</include>
		<include>niUI/src/_idl/IDrawOperationSet.h.idl.xml</include>
		<include>niUI/src/_idl/IFont.h.idl.xml</include>
		<include>niUI/src/_idl/IFrustum.h.idl.xml</include>
		<include>niUI/src/_idl/IGeometry.h.idl.xml</include>
		<include>niUI/src/_idl/IGpu.h.idl.xml</include>
		<include>niUI/src/_idl/IGraphics.h.idl.xml</include>
		<include>niUI/src/_idl/IGraphicsContext.h.idl.xml</include>
		<include>niUI/src/_idl/IGraphicsDriver.h.idl.xml</include>
		<include>niUI/src/_idl/IGraphicsStates.h.idl.xml</include>
		<include>niUI/src/_idl/IImage.h.idl.xml</include>
		<include>niUI/src/_idl/IImageMap.h.idl.xml</include>
		<include>niUI/src/_idl/IIndexArray.h.idl.xml</include>
		<include>niUI/src/_idl/IIntersection.h.idl.xml</include>
		<include>niUI/src/_idl/IJpegReader.h.idl.xml</include>
		<include>niUI/src/_idl/IJpegWriter.h.idl.xml</include>
		<include>niUI/src/_idl/IMaterial.h.idl.xml</include>
		<include>niUI/src/_idl/IMaterialLibrary.h.idl.xml</include>
		<include>niUI/src/_idl/INUSpline.h.idl.xml</include>
		<include>niUI/src/_idl/IOcclusionQuery.h.idl.xml</include>
		<include>niUI/src/_idl/IOverlay.h.idl.xml</include>
		<include>niUI/src/_idl/IPixelFormat.h.idl.xml</include>
		<include>niUI/src/_idl/IShader.h.idl.xml</include>
		<include>niUI/src/_idl/ITextObject.h.idl.xml</include>
		<include>niUI/src/_idl/ITexture.h.idl.xml</include>
		<include>niUI/src/_idl/ITransform.h.idl.xml</include>
		<include>niUI/src/_idl/IUIContext.h.idl.xml</include>
		<include>niUI/src/_idl/IVertexArray.h.idl.xml</include>
		<include>niUI/src/_idl/IVGGradientTable.h.idl.xml</include>
		<include>niUI/src/_idl/IVGImage.h.idl.xml</include>
		<include>niUI/src/_idl/IVGPaint.h.idl.xml</include>
		<include>niUI/src/_idl/IVGPath.h.idl.xml</include>
		<include>niUI/src/_idl/IVGPolygonTesselator.h.idl.xml</include>
		<include>niUI/src/_idl/IVGStyle.h.idl.xml</include>
		<include>niUI/src/_idl/IVGTransform.h.idl.xml</include>
		<include>niUI/src/_idl/IVideoDecoder.h.idl.xml</include>
		<include>niUI/src/_idl/IWidget.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetButton.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetCanvas.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetColorPicker.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetComboBox.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetDock.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetEditBox.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetForm.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetGroup.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetLabel.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetListBox.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetMenu.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetProgressBar.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetPropertyBox.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetScrollBar.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetSearchBar.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetSplitter.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetTab.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetText.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetToolbar.h.idl.xml</include>
		<include>niUI/src/_idl/IWidgetTree.h.idl.xml</include>
		<include>niUI/src/_idl/UIMessages.h.idl.xml</include>
	</includes>
	<namespace name="ni" source="niUI/src/_idl/Colors.h.idl.xml">
		<enum name="eColorSpace">
			<comments desc="Color spaces "/>
			<value name="eColorSpace_RGB" value="0 ">
				<comments desc="RGB color space "/>
			</value>
			<value name="eColorSpace_CMY" value="1 ">
				<comments desc="CMY color space "/>
			</value>
			<value name="eColorSpace_CMYK" value="2 ">
				<comments desc="CMYK color space "/>
			</value>
			<value name="eColorSpace_HSV" value="3 ">
				<comments desc="HSV color space "/>
			</value>
			<value name="eColorSpace_HSL" value="4 ">
				<comments desc="HSL color space "/>
			</value>
			<value name="eColorSpace_XYZ" value="5 ">
				<comments desc="XYZ color space "/>
			</value>
			<value name="eColorSpace_Yxy" value="6 ">
				<comments desc="Yxy color space "/>
			</value>
			<value name="eColorSpace_HunterLab" value="7 ">
				<comments desc="Hunter lab color space "/>
			</value>
			<value name="eColorSpace_CIELab" value="8 ">
				<comments desc="CIE Lab color space "/>
			</value>
			<value name="eColorSpace_CIELCH" value="9 ">
				<comments desc="CIE LCH color space "/>
			</value>
			<value name="eColorSpace_CIELuv" value="10 ">
				<comments desc="CIE Luv color space "/>
			</value>
			<value name="eColorSpace_YIQ" value="11 ">
				<comments desc="YIQ color space (NTSC/USA TV). "/>
			</value>
			<value name="eColorSpace_YUV" value="12 ">
				<comments desc="YUV color space (PAL/Europe TV). "/>
			</value>
			<value name="eColorSpace_YCbCr" value="13 ">
				<comments desc="YCbCr color space. "/>
			</value>
			<value name="eColorSpace_YPbPr" value="14 ">
				<comments desc="YPbPr color space (HDTV). "/>
			</value>
			<value name="eColorSpace_YCoCg" value="15 ">
				<comments desc="YCoCg color space (H264 &amp; AVT). "/>
			</value>
			<value name="eColorSpace_Last" value="16 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eColor">
			<comments desc=""/>
			<value name="eColor_aliceblue" value="niBuildColor ( 240 , 248 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_antiquewhite" value="niBuildColor ( 250 , 235 , 215 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_aqua" value="niBuildColor ( 0 , 255 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_aquamarine" value="niBuildColor ( 127 , 255 , 212 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_azure" value="niBuildColor ( 240 , 255 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_beige" value="niBuildColor ( 245 , 245 , 220 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_bisque" value="niBuildColor ( 255 , 228 , 196 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_black" value="niBuildColor ( 0 , 0 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_blanchedalmond" value="niBuildColor ( 255 , 235 , 205 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_blue" value="niBuildColor ( 0 , 0 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_blueviolet" value="niBuildColor ( 138 , 43 , 226 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_brown" value="niBuildColor ( 165 , 42 , 42 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_burlywood" value="niBuildColor ( 222 , 184 , 135 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_cadetblue" value="niBuildColor ( 95 , 158 , 160 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_chartreuse" value="niBuildColor ( 127 , 255 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_chocolate" value="niBuildColor ( 210 , 105 , 30 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_coral" value="niBuildColor ( 255 , 127 , 80 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_cornflowerblue" value="niBuildColor ( 100 , 149 , 237 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_cornsilk" value="niBuildColor ( 255 , 248 , 220 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_crimson" value="niBuildColor ( 220 , 20 , 60 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_cyan" value="niBuildColor ( 0 , 255 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkblue" value="niBuildColor ( 0 , 0 , 139 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkcyan" value="niBuildColor ( 0 , 139 , 139 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkgoldenrod" value="niBuildColor ( 184 , 134 , 11 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkgray" value="niBuildColor ( 169 , 169 , 169 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkgreen" value="niBuildColor ( 0 , 100 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkgrey" value="niBuildColor ( 169 , 169 , 169 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkkhaki" value="niBuildColor ( 189 , 183 , 107 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkmagenta" value="niBuildColor ( 139 , 0 , 139 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkolivegreen" value="niBuildColor ( 85 , 107 , 47 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkorange" value="niBuildColor ( 255 , 140 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkorchid" value="niBuildColor ( 153 , 50 , 204 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkred" value="niBuildColor ( 139 , 0 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darksalmon" value="niBuildColor ( 233 , 150 , 122 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkseagreen" value="niBuildColor ( 143 , 188 , 143 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkslateblue" value="niBuildColor ( 72 , 61 , 139 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkslategray" value="niBuildColor ( 47 , 79 , 79 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkslategrey" value="niBuildColor ( 47 , 79 , 79 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkturquoise" value="niBuildColor ( 0 , 206 , 209 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_darkviolet" value="niBuildColor ( 148 , 0 , 211 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_deeppink" value="niBuildColor ( 255 , 20 , 147 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_deepskyblue" value="niBuildColor ( 0 , 191 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_dimgray" value="niBuildColor ( 105 , 105 , 105 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_dimgrey" value="niBuildColor ( 105 , 105 , 105 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_dodgerblue" value="niBuildColor ( 30 , 144 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_firebrick" value="niBuildColor ( 178 , 34 , 34 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_floralwhite" value="niBuildColor ( 255 , 250 , 240 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_forestgreen" value="niBuildColor ( 34 , 139 , 34 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_fuchsia" value="niBuildColor ( 255 , 0 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_gainsboro" value="niBuildColor ( 220 , 220 , 220 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_ghostwhite" value="niBuildColor ( 248 , 248 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_gold" value="niBuildColor ( 255 , 215 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_goldenrod" value="niBuildColor ( 218 , 165 , 32 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_gray" value="niBuildColor ( 128 , 128 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_green" value="niBuildColor ( 0 , 128 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_greenyellow" value="niBuildColor ( 173 , 255 , 47 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_grey" value="niBuildColor ( 128 , 128 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_honeydew" value="niBuildColor ( 240 , 255 , 240 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_hotpink" value="niBuildColor ( 255 , 105 , 180 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_indianred" value="niBuildColor ( 205 , 92 , 92 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_indigo" value="niBuildColor ( 75 , 0 , 130 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_ivory" value="niBuildColor ( 255 , 255 , 240 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_khaki" value="niBuildColor ( 240 , 230 , 140 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lavender" value="niBuildColor ( 230 , 230 , 250 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lavenderblush" value="niBuildColor ( 255 , 240 , 245 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lawngreen" value="niBuildColor ( 124 , 252 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lemonchiffon" value="niBuildColor ( 255 , 250 , 205 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightblue" value="niBuildColor ( 173 , 216 , 230 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightcoral" value="niBuildColor ( 240 , 128 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightcyan" value="niBuildColor ( 224 , 255 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightgoldenrodyellow" value="niBuildColor ( 250 , 250 , 210 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightgray" value="niBuildColor ( 211 , 211 , 211 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightgreen" value="niBuildColor ( 144 , 238 , 144 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightgrey" value="niBuildColor ( 211 , 211 , 211 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightpink" value="niBuildColor ( 255 , 182 , 193 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightsalmon" value="niBuildColor ( 255 , 160 , 122 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightseagreen" value="niBuildColor ( 32 , 178 , 170 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightskyblue" value="niBuildColor ( 135 , 206 , 250 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightslategray" value="niBuildColor ( 119 , 136 , 153 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightslategrey" value="niBuildColor ( 119 , 136 , 153 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightsteelblue" value="niBuildColor ( 176 , 196 , 222 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lightyellow" value="niBuildColor ( 255 , 255 , 224 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_lime" value="niBuildColor ( 0 , 255 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_limegreen" value="niBuildColor ( 50 , 205 , 50 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_linen" value="niBuildColor ( 250 , 240 , 230 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_magenta" value="niBuildColor ( 255 , 0 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_maroon" value="niBuildColor ( 128 , 0 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumaquamarine" value="niBuildColor ( 102 , 205 , 170 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumblue" value="niBuildColor ( 0 , 0 , 205 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumorchid" value="niBuildColor ( 186 , 85 , 211 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumpurple" value="niBuildColor ( 147 , 112 , 219 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumseagreen" value="niBuildColor ( 60 , 179 , 113 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumslateblue" value="niBuildColor ( 123 , 104 , 238 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumspringgreen" value="niBuildColor ( 0 , 250 , 154 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumturquoise" value="niBuildColor ( 72 , 209 , 204 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mediumvioletred" value="niBuildColor ( 199 , 21 , 133 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_midnightblue" value="niBuildColor ( 25 , 25 , 112 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mintcream" value="niBuildColor ( 245 , 255 , 250 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_mistyrose" value="niBuildColor ( 255 , 228 , 225 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_moccasin" value="niBuildColor ( 255 , 228 , 181 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_navajowhite" value="niBuildColor ( 255 , 222 , 173 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_navy" value="niBuildColor ( 0 , 0 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_oldlace" value="niBuildColor ( 253 , 245 , 230 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_olive" value="niBuildColor ( 128 , 128 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_olivedrab" value="niBuildColor ( 107 , 142 , 35 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_orange" value="niBuildColor ( 255 , 165 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_orangered" value="niBuildColor ( 255 , 69 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_orchid" value="niBuildColor ( 218 , 112 , 214 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_palegoldenrod" value="niBuildColor ( 238 , 232 , 170 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_palegreen" value="niBuildColor ( 152 , 251 , 152 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_paleturquoise" value="niBuildColor ( 175 , 238 , 238 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_palevioletred" value="niBuildColor ( 219 , 112 , 147 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_papayawhip" value="niBuildColor ( 255 , 239 , 213 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_peachpuff" value="niBuildColor ( 255 , 218 , 185 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_peru" value="niBuildColor ( 205 , 133 , 63 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_pink" value="niBuildColor ( 255 , 192 , 203 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_plum" value="niBuildColor ( 221 , 160 , 221 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_powderblue" value="niBuildColor ( 176 , 224 , 230 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_purple" value="niBuildColor ( 128 , 0 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_red" value="niBuildColor ( 255 , 0 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_rosybrown" value="niBuildColor ( 188 , 143 , 143 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_royalblue" value="niBuildColor ( 65 , 105 , 225 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_saddlebrown" value="niBuildColor ( 139 , 69 , 19 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_salmon" value="niBuildColor ( 250 , 128 , 114 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_sandybrown" value="niBuildColor ( 244 , 164 , 96 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_seagreen" value="niBuildColor ( 46 , 139 , 87 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_seashell" value="niBuildColor ( 255 , 245 , 238 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_sienna" value="niBuildColor ( 160 , 82 , 45 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_silver" value="niBuildColor ( 192 , 192 , 192 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_skyblue" value="niBuildColor ( 135 , 206 , 235 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_slateblue" value="niBuildColor ( 106 , 90 , 205 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_slategray" value="niBuildColor ( 112 , 128 , 144 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_slategrey" value="niBuildColor ( 112 , 128 , 144 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_snow" value="niBuildColor ( 255 , 250 , 250 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_springgreen" value="niBuildColor ( 0 , 255 , 127 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_steelblue" value="niBuildColor ( 70 , 130 , 180 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_tan" value="niBuildColor ( 210 , 180 , 140 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_teal" value="niBuildColor ( 0 , 128 , 128 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_thistle" value="niBuildColor ( 216 , 191 , 216 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_tomato" value="niBuildColor ( 255 , 99 , 71 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_turquoise" value="niBuildColor ( 64 , 224 , 208 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_violet" value="niBuildColor ( 238 , 130 , 238 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_wheat" value="niBuildColor ( 245 , 222 , 179 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_white" value="niBuildColor ( 255 , 255 , 255 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_whitesmoke" value="niBuildColor ( 245 , 245 , 245 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_yellow" value="niBuildColor ( 255 , 255 , 0 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_yellowgreen" value="niBuildColor ( 154 , 205 , 50 , 255 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_zzzzzzzzzzz" value="niBuildColor ( 0 , 0 , 0 , 0 ) ">
				<comments desc=""/>
			</value>
			<value name="eColor_zzzz" value="niBuildColor ( 0 , 0 , 0 , 0 ) ">
				<comments desc=""/>
			</value>
		</enum>
		<variable
			name="kcolXYZRef2D65"
			type="const sVec4f"
			typec="const sVec4f"
			typei="ni::eTypeFlags_Constant|ni::eType_Vec4f"
			value="{95.047f,100.0f,108.883f,0.0f}"/>
		<variable
			name="kvColorLuminanceR21G71B07"
			type="const sVec3f"
			typec="const sVec3f"
			typei="ni::eTypeFlags_Constant|ni::eType_Vec3f"
			value="{0.2125f,0.7154f,0.0721f}"/>
		<variable
			name="kvColorLuminanceR27G67B06"
			type="const sVec3f"
			typec="const sVec3f"
			typei="ni::eTypeFlags_Constant|ni::eType_Vec3f"
			value="{0.27f,0.67f,0.06f}"/>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/FVF.h.idl.xml">
		<variable
			name="kMaxVertexSize"
			type="const tU32"
			typec="const tU32"
			typei="ni::eTypeFlags_Constant|ni::eType_U32"
			value="256"/>
		<enum name="eFVF">
			<comments desc="FVF components "/>
			<value name="eFVF_Position" value="0x00000002 ">
				<comments desc="3D Position (float3). "/>
			</value>
			<value name="eFVF_PositionB1" value="0x00000006 ">
				<comments desc="3D Position (float3), and one weight (float1). "/>
			</value>
			<value name="eFVF_PositionB2" value="0x00000008 ">
				<comments desc="3D Position (float3), and two weights (float2). "/>
			</value>
			<value name="eFVF_PositionB3" value="0x0000000a ">
				<comments desc="3D Position (float3), and three weights (float3). "/>
			</value>
			<value name="eFVF_PositionB4" value="0x0000000c ">
				<comments desc="3D Position (float3), and four weights (float4). "/>
			</value>
			<value name="eFVF_Normal" value="0x00000010 ">
				<comments desc="3D Normal (float3). "/>
			</value>
			<value name="eFVF_PointSize" value="0x00000020 ">
				<comments desc="Point size (float). "/>
			</value>
			<value name="eFVF_ColorA" value="0x00000040 ">
				<comments desc="ColorA (ULColor). "/>
			</value>
			<value name="eFVF_Reserved1" value="0x00000080 ">
				<comments desc="Reserved (was ColorB). "/>
			</value>
			<value name="eFVF_Tex1" value="0x00000100 ">
				<comments desc="First texture coordinate (index 0). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex2" value="0x00000200 ">
				<comments desc="Second texture coordinate (index 1). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex3" value="0x00000300 ">
				<comments desc="Third texture coordinate (index 2). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex4" value="0x00000400 ">
				<comments desc="Fourth texture coordinate (index 3). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex5" value="0x00000500 ">
				<comments desc="Fifth texture coordinate (index 4). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex6" value="0x00000600 ">
				<comments desc="Sixth texture coordinate (index 5). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex7" value="0x00000700 ">
				<comments desc="Seventh texture coordinate (index 6). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Tex8" value="0x00000800 ">
				<comments desc="Eigth texture coordinate (index 7). ">
					<remark text="The number of dimensions of the texture coordinate can be specified with eFVF_TexCooSizeN. The default is 2 dimensions. "/>
				</comments>
			</value>
			<value name="eFVF_Indices" value="0x00001000 ">
				<comments desc="Indices (ULColor). "/>
			</value>
		</enum>
		<variable
			name="knFVFTexCountMask"
			type="const tU32"
			typec="const tU32"
			typei="ni::eTypeFlags_Constant|ni::eType_U32"
			value="0xf00"/>
		<variable
			name="knFVFTexCountShift"
			type="const tU32"
			typec="const tU32"
			typei="ni::eTypeFlags_Constant|ni::eType_U32"
			value="0xf00"/>
		<enum name="eVertexFormat">
			<comments desc=""/>
			<value name="eVertexFormat_P" value="eFVF_Position ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PA" value="eFVF_Position|eFVF_ColorA ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PAT1" value="eFVF_Position|eFVF_ColorA|eFVF_Tex1 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PN" value="eFVF_Position|eFVF_Normal ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PNA" value="eFVF_Position|eFVF_Normal|eFVF_ColorA ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PNT1" value="eFVF_Position|eFVF_Normal|eFVF_Tex1 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PNAT1" value="eFVF_Position|eFVF_Normal|eFVF_ColorA|eFVF_Tex1 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PNT2" value="eFVF_Position|eFVF_Normal|eFVF_Tex2 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PNAT2" value="eFVF_Position|eFVF_Normal|eFVF_ColorA|eFVF_Tex2 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PB4INT1" value="eFVF_PositionB4|eFVF_Indices|eFVF_Normal|eFVF_Tex1 ">
				<comments desc=""/>
			</value>
			<value name="eVertexFormat_PB4INAT1" value="eFVF_PositionB4|eFVF_Indices|eFVF_Normal|eFVF_ColorA|eFVF_Tex1 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eVertexStreamIndex">
			<comments desc=""/>
			<value name="eVertexStreamIndex_Position" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Weights" value="11 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Indices" value="12 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Normal" value="9 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_ColorA" value="10 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex1" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex2" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex3" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex4" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex5" value="5 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex6" value="6 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex7" value="7 ">
				<comments desc=""/>
			</value>
			<value name="eVertexStreamIndex_Tex8" value="8 ">
				<comments desc=""/>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/GraphicsEnum.h.idl.xml">
		<enum name="eGraphicsCaps">
			<comments desc="Graphics capabilites. "/>
			<value name="eGraphicsCaps_NumTextureUnits" value="0 ">
				<comments desc="Number of texture units. "/>
			</value>
			<value name="eGraphicsCaps_Resize" value="1 ">
				<comments desc="Return eTrue if the renderer support run-time window resize. "/>
			</value>
			<value name="eGraphicsCaps_MultiContext" value="2 ">
				<comments desc="Return eTrue if the renderer support the creation of more than one rendering context. "/>
			</value>
			<value name="eGraphicsCaps_Texture2DMaxSize" value="3 ">
				<comments desc="Maximum 2d texture size supported. Return 0 if textures are not supported. "/>
			</value>
			<value name="eGraphicsCaps_TextureCubeMaxSize" value="4 ">
				<comments desc="Maximum cube texture size supported. Return 0 if cube maps are not supported. "/>
			</value>
			<value name="eGraphicsCaps_Texture3DMaxSize" value="5 ">
				<comments desc="Maximum 3d texture size supported. . Return 0 if 3d textures are not supported. "/>
			</value>
			<value name="eGraphicsCaps_NumRenderTargetTextures" value="6 ">
				<comments desc="Return the number of simultaneous render target textures supported. ">
					<remark text="Return 0 if render target textures are not supported. "/>
				</comments>
			</value>
			<value name="eGraphicsCaps_DepthStencilTexture" value="7 ">
				<comments desc="Return eTrue if the renderer supports depth stencil as texture. "/>
			</value>
			<value name="eGraphicsCaps_StencilTwoSideded" value="8 ">
				<comments desc="Return eTrue if the renderer supports two sided stencil. "/>
			</value>
			<value name="eGraphicsCaps_StencilWrap" value="9 ">
				<comments desc="Return eTrue if the renderer supports Inc/Decr wrap stencil operation. "/>
			</value>
			<value name="eGraphicsCaps_OcclusionQueries" value="10 ">
				<comments desc="Return eTrue if the renderer supports occlusion queries. "/>
			</value>
			<value name="eGraphicsCaps_MaxPointSize" value="11 ">
				<comments desc="Return the maximum point size. (tF32) "/>
			</value>
			<value name="eGraphicsCaps_HardwareInstancing" value="12 ">
				<comments desc="Return wheter or not the hardware supports instancing. "/>
			</value>
			<value name="eGraphicsCaps_ScissorTest" value="13 ">
				<comments desc="Return wheter or not the hardware scissor test is supported. "/>
			</value>
			<value name="eGraphicsCaps_MaxVertexIndex" value="14 ">
				<comments desc="The maximum vertex index that can be used in an index array. "/>
			</value>
			<value name="eGraphicsCaps_OverlayTexture" value="15 ">
				<comments desc="Overlay textures supported. "/>
			</value>
			<value name="eGraphicsCaps_OrthoProjectionOffset" value="16 ">
				<comments desc="Get the orthogonal screen projection offset in screen pixel unit. (float) ">
					<remark text="Used to build a proper otho projection matrix that matches the screen pixels exactly. "/>
				</comments>
			</value>
			<value name="eGraphicsCaps_BlitBackBuffer" value="17 ">
				<comments desc="Whether we can blit the backbuffer to a texture with BlitTextureToTexture. "/>
			</value>
			<value name="eGraphicsCaps_Wireframe" value="18 ">
				<comments desc="Return whether or not the driver can do wireframe rendering. "/>
			</value>
			<value name="eGraphicsCaps_Last" value="19 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eClearBuffersFlags">
			<comments desc="Buffer clearing flags. "/>
			<value name="eClearBuffersFlags_Color" value="niBit ( 0 ) ">
				<comments desc="Clear color buffer. "/>
			</value>
			<value name="eClearBuffersFlags_Depth" value="niBit ( 1 ) ">
				<comments desc="Clear depth buffer. "/>
			</value>
			<value name="eClearBuffersFlags_Stencil" value="niBit ( 2 ) ">
				<comments desc="Clear stencil buffer. "/>
			</value>
			<value name="eClearBuffersFlags_ColorDepth" value="eClearBuffersFlags_Color|eClearBuffersFlags_Depth ">
				<comments desc="Clear the color and depth buffers. "/>
			</value>
			<value name="eClearBuffersFlags_ColorStencil" value="eClearBuffersFlags_Color|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the color and stencil buffers. "/>
			</value>
			<value name="eClearBuffersFlags_DepthStencil" value="eClearBuffersFlags_Depth|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the depth and stencil buffers. "/>
			</value>
			<value name="eClearBuffersFlags_ColorDepthStencil" value="eClearBuffersFlags_Color|eClearBuffersFlags_Depth|eClearBuffersFlags_Stencil ">
				<comments desc="Clear the color, depth and stencil buffers. "/>
			</value>
		</enum>
		<enum name="eArrayUsage">
			<comments desc="Array usage. "/>
			<value name="eArrayUsage_Dynamic" value="0 ">
				<comments desc="Dynamic array, write only. "/>
			</value>
			<value name="eArrayUsage_DynamicReadWrite" value="1 ">
				<comments desc="Dynamic array, Read/Write. "/>
			</value>
			<value name="eArrayUsage_Static" value="2 ">
				<comments desc="Static array, write only. "/>
			</value>
			<value name="eArrayUsage_SystemMemory" value="3 ">
				<comments desc="System memory array. "/>
			</value>
		</enum>
		<enum name="eLock">
			<comments desc="Lock. "/>
			<value name="eLock_Normal" value="0 ">
				<comments desc="Normal behavior. "/>
			</value>
			<value name="eLock_Discard" value="niBit ( 0 ) ">
				<comments desc="The application overwrites (with a write-only operation) every location within the region being locked. This is a valid option when using dynamic textures, dynamic vertex arrays, and dynamic index arrays.  For vertex and index arrays, the application discards the entire buffer. A pointer to a new memory area is returned so that the dynamic memory access (DMA) and rendering from the previous area do not stall.  For textures, the application overwrites (with a write-only operation) every location within the region being locked. "/>
			</value>
			<value name="eLock_NoOverwrite" value="niBit ( 1 ) ">
				<comments desc="The application promises not to overwrite any data in the vertex and index arrays. Specifying this flag allows the driver to return immediately and continue rendering, using this array. If this flag is not used, the driver must finish rendering before returning from locking. "/>
			</value>
			<value name="eLock_ReadOnly" value="niBit ( 2 ) ">
				<comments desc="The application will not write to the buffer. "/>
			</value>
		</enum>
		<enum min_features="20" name="eShaderCompilerFlags">
			<comments desc="Shader compiler flags. "/>
			<value min_features="20" name="eShaderCompilerFlags_Debug" value="niBit ( 0 ) ">
				<comments desc="Insert debug filename, line numbers, and type and symbol information during shader compile. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_SkipValidation" value="niBit ( 1 ) ">
				<comments desc="Do not validate the generated code against known capabilities and constraints. This option is recommended only when compiling shaders that are known to work (that is, shaders that have compiled before without this option). Shaders are always validated by the runtime before they are set to the device. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_SkipOptimization" value="niBit ( 2 ) ">
				<comments desc="Instruct the compiler to skip optimization steps during code generation. Unless you are trying to isolate a problem in your code and you suspect the compiler, using this option is not recommended. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PackMatrixRowMajor" value="niBit ( 3 ) ">
				<comments desc="Unless explicitly specified, matrices will be packed in row-major order (each vector will be in a single row) when passed to or from the shader. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PackMatrixColumnMajor" value="niBit ( 4 ) ">
				<comments desc="Unless explicitly specified, matrices will be packed in column-major order (each vector will be in a single column) when passed to and from the shader. This is generally more efficient because it allows vector-matrix multiplication to be performed using a series of dot products. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PartialPrecision" value="niBit ( 5 ) ">
				<comments desc="Force all computations in the resulting shader to occur at partial precision. This may result in faster evaluation of shaders on some hardware. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_AvoidFlowControl" value="niBit ( 6 ) ">
				<comments desc="This is a hint to the compiler to avoid using flow-control instructions. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_PreferFlowControl" value="niBit ( 7 ) ">
				<comments desc="This is a hint to the compiler to prefer using flow-control instructions. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_Save" value="niBit ( 8 ) ">
				<comments desc="This will instruct the compiler to keep the data necessary to serialize the shader to a file. "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_KeepCode" value="niBit ( 9 ) ">
				<comments desc="This will instruct the driver to keep a copy of the source code used to compile the shader. That can be retrieved with ni::iShader::GetCode(). "/>
			</value>
			<value min_features="20" name="eShaderCompilerFlags_DebugLog" value="niBit ( 10 ) ">
				<comments desc="This will instruct the driver to log the macros and other debugging informations when compiling. "/>
			</value>
		</enum>
		<enum name="eGraphicsPrimitiveType">
			<comments desc="Graphics primitive types "/>
			<value name="eGraphicsPrimitiveType_PointList" value="0 ">
				<comments desc="List of isolated points. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineList" value="1 ">
				<comments desc="List of isolated straight line segments. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineStrip" value="2 ">
				<comments desc="List of vertices as a single polyline. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleList" value="3 ">
				<comments desc="List of vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Culling is affected by the current culling rendering parameter. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleStrip" value="4 ">
				<comments desc="List of vertices as a triangle strip. The culling flag is automatically flipped on even-numbered triangles. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineListAdjacency" value="5 ">
				<comments desc="Line list with adjacency information. "/>
			</value>
			<value name="eGraphicsPrimitiveType_LineStripAdjacency" value="6 ">
				<comments desc="Line strip with adjacency information. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleListAdjacency" value="7 ">
				<comments desc="Triangle list with adjacency information. "/>
			</value>
			<value name="eGraphicsPrimitiveType_TriangleStripAdjacency" value="8 ">
				<comments desc="Triangle strip with adjacency information. "/>
			</value>
			<value name="eGraphicsPrimitiveType_Last" value="10 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGraphicsDriverImplFlags">
			<comments desc="Graphics driver implementation details. "/>
			<value name="eGraphicsDriverImplFlags_VertexArrayObject" value="niBit ( 0 ) ">
				<comments desc="Vertex array. "/>
			</value>
			<value name="eGraphicsDriverImplFlags_IndexArrayObject" value="niBit ( 1 ) ">
				<comments desc="Index array. "/>
			</value>
			<value name="eGraphicsDriverImplFlags_SystemMemoryTexture" value="niBit ( 3 ) ">
				<comments desc="Can render using system memory textures. "/>
			</value>
		</enum>
		<enum name="eSamplerFilter">
			<comments desc="Sampler filter. "/>
			<value name="eSamplerFilter_Smooth" value="0 ">
				<comments desc="Default, smooth filtering. "/>
			</value>
			<value name="eSamplerFilter_Point" value="1 ">
				<comments desc="Point filtering. "/>
			</value>
			<value name="eSamplerFilter_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eSamplerWrap">
			<comments desc="Texture wrapping modes. "/>
			<value name="eSamplerWrap_Repeat" value="0 ">
				<comments desc="The texture is repeated along the axis. default. "/>
			</value>
			<value name="eSamplerWrap_Clamp" value="1 ">
				<comments desc="The texture is clamped at the end and the rest of the polygon is filled with the content of the texture edge. "/>
			</value>
			<value name="eSamplerWrap_Mirror" value="2 ">
				<comments desc="Similar to eSamplerWrap_Repeat, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on. "/>
			</value>
			<value name="eSamplerWrap_Border" value="3 ">
				<comments desc="Border mode, the border color is used when outside of 0,1 range. "/>
			</value>
			<value name="eSamplerWrap_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGraphicsCompare">
			<comments desc="Graphics compare functions. "/>
			<value name="eGraphicsCompare_Never" value="0 ">
				<comments desc="Always fail the test. "/>
			</value>
			<value name="eGraphicsCompare_Equal" value="1 ">
				<comments desc="Accept the new pixel if its value equals the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_NotEqual" value="2 ">
				<comments desc="Accept the new pixel if its value does not equal the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Less" value="3 ">
				<comments desc="Accept the new pixel if its value is less than the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_LessEqual" value="4 ">
				<comments desc="Accept the new pixel if its value is less than or equal to the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Greater" value="5 ">
				<comments desc="Accept the new pixel if its value is greater than the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_GreaterEqual" value="6 ">
				<comments desc="Accept the new pixel if its value is greater than or equal to the value of the current pixel. "/>
			</value>
			<value name="eGraphicsCompare_Always" value="7 ">
				<comments desc="Always pass the test. "/>
			</value>
			<value name="eGraphicsCompare_Last" value="8 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eStencilMode">
			<comments desc="Stencil mode. "/>
			<value name="eStencilMode_None" value="0 ">
				<comments desc="Disable the stencil. "/>
			</value>
			<value name="eStencilMode_OneSided" value="1 ">
				<comments desc="One sided stencil. "/>
			</value>
			<value name="eStencilMode_TwoSided" value="2 ">
				<comments desc="Two sided stencil. ">
					<remark text="Will fail if the renderer doesn&apos;t support two sided stencil. \see eRendererCaps "/>
				</comments>
			</value>
			<value name="eStencilMode_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eStencilOp">
			<comments desc="Stencil operations. "/>
			<value name="eStencilOp_Keep" value="0 ">
				<comments desc="Do not update the entry in the stencil buffer. This is the default value. "/>
			</value>
			<value name="eStencilOp_Zero" value="1 ">
				<comments desc="Set the stencil-buffer entry to 0. "/>
			</value>
			<value name="eStencilOp_Replace" value="2 ">
				<comments desc="Replace the stencil-buffer entry with a reference value. "/>
			</value>
			<value name="eStencilOp_IncrWrap" value="3 ">
				<comments desc="Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value. "/>
			</value>
			<value name="eStencilOp_DecrWrap" value="4 ">
				<comments desc="Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero. "/>
			</value>
			<value name="eStencilOp_IncrSat" value="5 ">
				<comments desc="Increment the stencil-buffer entry, clamping to the maximum value. "/>
			</value>
			<value name="eStencilOp_DecrSat" value="6 ">
				<comments desc="Increment the stencil-buffer entry, clamping to zero. "/>
			</value>
			<value name="eStencilOp_Invert" value="7 ">
				<comments desc="Invert the bits in the stencil-buffer entry. "/>
			</value>
			<value name="eStencilOp_Last" value="8 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eBlendMode">
			<comments desc="Blending mode A*SrcColor + B*DestColor ">
				<remark text="For material channel zero : SrcColor/Alpha is the channel 0 color, DestColor/Alpha is the color A "/>
				<remark text="For material channel &gt; zero : SrcColor/Alpha is the channel n color, DestColor/Alpha is the channel n-1 color "/>
			</comments>
			<value name="eBlendMode_NoBlending" value="0 ">
				<comments desc="Solid, no blending "/>
			</value>
			<value name="eBlendMode_ReplaceAlpha" value="1 ">
				<comments desc="Means that the current alpha will be replaced by the current stage&apos;s alpha. ">
					<remark text="For first stage only Final = Src*0 + Dest*SrcAlpha. "/>
				</comments>
			</value>
			<value name="eBlendMode_Additive" value="2 ">
				<comments desc="Additive blending ">
					<remark text="Final = Src*1 + Dest*1 "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate" value="3 ">
				<comments desc="Modulate ">
					<remark text="Final = Src*Dest + Dest*0 "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate2x" value="4 ">
				<comments desc="Modulate 2x ">
					<remark text="Final = (Src*Dest + Dest*Src) "/>
				</comments>
			</value>
			<value name="eBlendMode_Translucent" value="5 ">
				<comments desc="Translucent blending ">
					<remark text="Final = (Src*SrcAlpha + Dest*(1-SrcAlpha)) "/>
				</comments>
			</value>
			<value name="eBlendMode_TranslucentInvAlpha" value="6 ">
				<comments desc="Translucent blending with inverted alpha ">
					<remark text="Final = (Src*(1-SrcAlpha) + Dest*SrcAlpha) "/>
				</comments>
			</value>
			<value name="eBlendMode_TintedGlass" value="7 ">
				<comments desc="Tinted blending ">
					<remark text="Final = (Src*Src + Dest*(1-SrcColor)) "/>
				</comments>
			</value>
			<value name="eBlendMode_PreMulAlpha" value="8 ">
				<comments desc="Premultiplied alpha light blending. ">
					<remark text="Final = (Src*1 + Dest*(1-SrcAlpha)) "/>
				</comments>
			</value>
			<value name="eBlendMode_ModulateReplaceAlpha" value="9 ">
				<comments desc="Modulate RGB, replace alpha ">
					<remark text="Final.RGB = Src*Dest + Dest*0, Final.Alpha = Channel.Alpha "/>
				</comments>
			</value>
			<value name="eBlendMode_Modulate2xReplaceAlpha" value="10 ">
				<comments desc="Modulate RGB 2x, replace alpha ">
					<remark text="Final.RGB = (Src*Dest + Dest*Src), Final.Alpha = Channel.Alpha "/>
				</comments>
			</value>
			<value name="eBlendMode_Last" value="11 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eCullingMode">
			<comments desc="Culling mode "/>
			<value name="eCullingMode_None" value="0 ">
				<comments desc="Do not cull back faces. "/>
			</value>
			<value name="eCullingMode_CW" value="1 ">
				<comments desc="Cull back faces with clockwise vertices. "/>
			</value>
			<value name="eCullingMode_CCW" value="2 ">
				<comments desc="Cull back faces with counter clockwise vertices (default). "/>
			</value>
			<value name="eCullingMode_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eColorWriteMask">
			<comments desc="Color write mask. "/>
			<value name="eColorWriteMask_None" value="0x0 ">
				<comments desc="Disable writting in the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Alpha" value="0x1 ">
				<comments desc="Write only in the alpha buffer. "/>
			</value>
			<value name="eColorWriteMask_Red" value="0x2 ">
				<comments desc="Write only in the red channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Green" value="0x4 ">
				<comments desc="Write only in the green channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_Blue" value="0x8 ">
				<comments desc="Write only in the blue channel of the color buffer. "/>
			</value>
			<value name="eColorWriteMask_RGB" value="eColorWriteMask_Red|eColorWriteMask_Green|eColorWriteMask_Blue ">
				<comments desc="Write only in the rgb buffer. "/>
			</value>
			<value name="eColorWriteMask_All" value="eColorWriteMask_RGB|eColorWriteMask_Alpha ">
				<comments desc="Normal, write in all channels. "/>
			</value>
		</enum>
		<enum name="eGraphicsDisplayFlags">
			<comments desc="Graphics display flags "/>
			<value name="eGraphicsDisplayFlags_Skip" value="niBit ( 0 ) ">
				<comments desc="Flush all rendering but do not show the back buffer. "/>
			</value>
			<value name="eGraphicsDisplayFlags_DoNotWait" value="niBit ( 1 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_LinearContent" value="niBit ( 2 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_Transparent" value="niBit ( 3 ) ">
				<comments desc=""/>
			</value>
			<value name="eGraphicsDisplayFlags_Translucent" value="niBit ( 4 ) ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eCompiledStates">
			<comments desc="Graphics built-in compiled states. \see GetCompiledStates "/>
			<value name="eCompiledStates_Invalid" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_ColorWriteNone" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_Filled" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_Wireframe" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingColorWriteNone" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingFilled" value="5 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_NoCullingWireframe" value="6 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingColorWriteNone" value="7 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingFilled" value="8 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_RS_CWCullingWireframe" value="9 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_NoDepthTest" value="101 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_DepthTestAndWrite" value="102 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_DS_DepthTestOnly" value="103 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointRepeat" value="201 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointClamp" value="202 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointMirror" value="203 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_PointWhiteBorder" value="204 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothRepeat" value="205 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothClamp" value="206 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothMirror" value="207 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_SS_SmoothWhiteBorder" value="208 ">
				<comments desc=""/>
			</value>
			<value name="eCompiledStates_Driver" value="1000 ">
				<comments desc="Driver compiled "/>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IBitmap2D.h.idl.xml">
		<interface name="iBitmap2D" uuid1="30011CCB-E4B7-45F9-95BC-7C365A522795" uuid2="0x30011ccb,0xe4b7,0x45f9,0x95,0xbc,0x7c,0x36,0x5a,0x52,0x27,0x95">
			<comments desc="2D Bitmap interface. "/>
			<parents>
				<parent name="iBitmapBase"/>
			</parents>
			<method
				java_name="setMemoryAddress"
				name="SetMemoryAddress"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Set the memory address. " return="eFalse if apAddre is NULL, else eTrue. ">
					<remark text="If abFreeData the memory must have been allocated with niNew or niMalloc. "/>
					<params text="apAddr is the address of the bitmap&apos;s data. "/>
					<params text="abFreeData: if eTrue the data will be freed automatically when the bitmap is released. "/>
					<params text="anPitch: if != eInvalidHandle will adjust the bitmap&apos;s pitch. "/>
				</comments>
				<return type="tBool" typec="tBool"/>
				<parameter name="apAddr" type="tPtr" typec="tPtr"/>
				<parameter name="abFreeData" type="tBool" typec="tBool"/>
				<parameter
					default="eInvalidHandle "
					last="1"
					name="anPitch"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getPitch"
				name="GetPitch"
				num_parameters="0"
				property="get"
				property_name2="pitch"
				property_name="pitch">
				<comments desc="Get the number of bytes per line. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getData"
				name="GetData"
				num_parameters="0"
				property="get"
				property_name2="data"
				property_name="data">
				<comments desc="Get the data pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size in bytes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="createResized"
				name="CreateResized"
				num_parameters="2">
				<comments desc="Create a resized copy of this bitmap. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="nH"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="createResizedEx"
				name="CreateResizedEx"
				num_parameters="3">
				<comments desc="Create a resized copy of this bitmap. ">
					<remark text="This variant of CreateResized as an additional parameter that allows to specify whether the mipmaps should be resized as-well or just dropped in the resized version. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="nH"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="abPreserveMipMaps"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="createCubeBitmap"
				name="CreateCubeBitmap"
				num_parameters="13">
				<comments desc="Create a cube bitmap from the specified 6 rectangles. "/>
				<return type="iBitmapCube *" typec="iBitmapCube*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avPX"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlitPX"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="avNX"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlitNX"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="avPY"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlitPY"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="avNY"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlitNY"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="avPZ"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlitPZ"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="avNZ"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBlitNZ"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="createCubeBitmapCross"
				name="CreateCubeBitmapCross"
				num_parameters="0">
				<comments desc="Create a cube bitmap from a vertical or horizontal cross unfolded cube. ">
					<remark text="Wheter a vertical or horizontal cross is contained in the bitmap is determined from the ratio between the width and height of the bitmap. If the width is greater an horizontal cross is assumed, else if the height is greater then a vertical cross is assumed. "/>
					<remark text="The cross is assumed to be on the &apos;top&apos;/&apos;left&apos; of the bitmap. "/>
					<remark text="Horizontal cross : &#xA;&lt;pre&gt;&#xA;     |------------------------&#xA;     |     | PY  |           |&#xA;     |     |     |           |&#xA;     |------------------------&#xA;     | NX  | PZ  | PX  | NZ  |&#xA;     |     |     |     |     |&#xA;     |------------------------&#xA;     |     | NY  |           |&#xA;     |     |     |           |&#xA;     |------------------------&#xA;&lt;/pre&gt; "/>
					<remark text="Vertical cross : &#xA;&lt;pre&gt;&#xA;     |-----------------|&#xA;     |     | NX  |     |&#xA;     |     |     |     |&#xA;     |-----|-----|-----|&#xA;     | NY  | PZ  | PY  |&#xA;     |     |     |     |&#xA;     |-----|-----|-----|&#xA;     |     | PX  |     |&#xA;     |     |     |     |&#xA;     |     |-----|     |&#xA;     |     | NZ  |     |&#xA;     |     |     |     |&#xA;     |-----|-----|-----|&#xA;&lt;/pre&gt; "/>
				</comments>
				<return type="iBitmapCube *" typec="iBitmapCube*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="beginUnpackPixels" name="BeginUnpackPixels" num_parameters="0">
				<comments desc="Begin unpacking pixels. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="endUnpackPixels" name="EndUnpackPixels" num_parameters="0">
				<comments desc="End unpacking pixels. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getMipMap"
				name="GetMipMap"
				num_parameters="1"
				property="get"
				property_name2="mipMap"
				property_name="mip_map">
				<comments desc="Get the mipmap at the specified index. ">
					<remark text="Mip map zero is not the main surface but the first mip map. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLevel"
				name="GetLevel"
				num_parameters="1"
				property="get"
				property_name2="level"
				property_name="level">
				<comments desc="Get the bitmap at the specified level. ">
					<remark text="0 is the main surface, 1 is the first mip map, and so on. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blit" name="Blit" num_parameters="8">
				<comments desc="Blit a bitmap in this bitmap. ">
					<remark text="Clipping and pixel format conversion are automatically performed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="src"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="xs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ys"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="xd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="yd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="w"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="h"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					default="ePixelFormatBlit_Normal "
					last="1"
					name="eBlit"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitStretch" name="BlitStretch" num_parameters="9">
				<comments desc="Blit stretch a bitmap in this bitmap. ">
					<remark text="Clipping and pixel format conversion are automatically performed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="src"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="xs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ys"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="xd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="yd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ws"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="hs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="wd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="hd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="blitAlpha" name="BlitAlpha" num_parameters="11">
				<comments desc="Blit, with alpha blending, a bitmap in this bitmap. ">
					<remark text="The source and destination color are used to replace missing components in the source/destination format. "/>
					<remark text="Clipping and pixel format conversion are automatically performed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="src"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="xs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ys"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="xd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="yd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="w"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="h"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="eBlit"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="acolSource"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="acolDest"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitAlphaStretch" name="BlitAlphaStretch" num_parameters="12">
				<comments desc="Blit stretch, with alpha blending, a bitmap in this bitmap. ">
					<remark text="The source and destination color are used to replace missing components in the source/destination format. "/>
					<remark text="Clipping and pixel format conversion are automatically performed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="src"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="xs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ys"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="xd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="yd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="ws"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="hs"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="wd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="hd"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="acolSource"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="acolDest"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="putPixel"
				name="PutPixel"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Put a pixel at the specified position. "/>
				<return type="void" typec="void"/>
				<parameter name="x" type="tI32" typec="tI32"/>
				<parameter name="y" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="col"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				const="yes"
				java_name="getPixel"
				name="GetPixel"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Get a pixel at the specified position. "/>
				<return type="tPtr" typec="tPtr"/>
				<parameter name="x" type="tI32" typec="tI32"/>
				<parameter name="y" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="pOut"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				java_name="clear"
				name="Clear"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Clear the bitmap "/>
				<return type="void" typec="void"/>
				<parameter
					default="NULL "
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				java_name="clearRect"
				name="ClearRect"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Clear the bitmap ">
					<remark text="The right and bottom edges are not filled. "/>
				</comments>
				<return type="void" typec="void"/>
				<parameter name="aRect" type="const sRecti &amp;" typec="const sRecti&amp;"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method java_name="putPixelf" name="PutPixelf" num_parameters="3">
				<comments desc="Put a pixel at the specified position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="y"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPixelf"
				name="GetPixelf"
				num_parameters="2">
				<comments desc="Get a pixel at the specified position. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="x"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="y"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="clearf" name="Clearf" num_parameters="1">
				<comments desc="Clear the bitmap. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearRectf" name="ClearRectf" num_parameters="2">
				<comments desc="Clear the bitmap. ">
					<remark text="The right and bottom edges are not filled. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IBitmap3D.h.idl.xml">
		<interface name="iBitmap3D" uuid1="5523E61D-74F6-4AF8-BF42-DC760A6144EC" uuid2="0x5523e61d,0x74f6,0x4af8,0xbf,0x42,0xdc,0x76,0x0a,0x61,0x44,0xec">
			<comments desc="3D Bitmap interface. "/>
			<parents>
				<parent name="iBitmapBase"/>
			</parents>
			<method
				java_name="setMemoryAddress"
				name="SetMemoryAddress"
				noautomation="yes"
				num_parameters="4">
				<comments desc="Set the memory address. " return="eFalse if apAddre is NULL, else eTrue. ">
					<remark text="If abFreeData the memory must have been allocated with niNew or niMalloc. "/>
					<params text="apAddr is the address of the bitmap&apos;s data. "/>
					<params text="abFreeData: if eTrue the data will be freed automatically when the bitmap is released. "/>
					<params text="anRowPitch: if != eInvalidHandle will adjust the bitmap&apos;s row pitch. "/>
					<params text="anSlicePitch: if != eInvalidHandle will adjust the bitmap&apos;s slice pitch. "/>
				</comments>
				<return type="tBool" typec="tBool"/>
				<parameter name="apAddr" type="tPtr" typec="tPtr"/>
				<parameter name="abFreeData" type="tBool" typec="tBool"/>
				<parameter
					default="eInvalidHandle "
					name="anRowPitch"
					type="tU32"
					typec="tU32"/>
				<parameter
					default="eInvalidHandle "
					last="1"
					name="anSlicePitch"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getRowPitch"
				name="GetRowPitch"
				num_parameters="0"
				property="get"
				property_name2="rowPitch"
				property_name="row_pitch">
				<comments desc="Get the number of bytes per row "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSlicePitch"
				name="GetSlicePitch"
				num_parameters="0"
				property="get"
				property_name2="slicePitch"
				property_name="slice_pitch">
				<comments desc="Get the number of bytes per slice "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size in bytes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getData"
				name="GetData"
				noautomation="yes"
				num_parameters="0"
				property="get"
				property_name2="data"
				property_name="data">
				<comments desc="Get the data pointer. "/>
				<return type="tPtr" typec="tPtr"/>
			</method>
			<method
				const="yes"
				java_name="getSlicePtr"
				name="GetSlicePtr"
				noautomation="yes"
				num_parameters="1"
				property="get"
				property_name2="slicePtr"
				property_name="slice_ptr">
				<comments desc="Get the slice data pointer. "/>
				<return type="tPtr" typec="tPtr"/>
				<parameter
					last="1"
					name="anSlice"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="createSliceBitmap"
				name="CreateSliceBitmap"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Create a 2d bitmap which points to the memory of the specified slice. ">
					<remark text="Creates a bitmap that points to the slice data, that bitmap DOES NOT own the memory, if the 3d bitmap&apos;s memory is deleted that new bitmaps become invalid. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*"/>
				<parameter
					last="1"
					name="anSlice"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="createResized"
				name="CreateResized"
				num_parameters="3">
				<comments desc="Create a resized copy of this bitmap. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMipMap"
				name="GetMipMap"
				num_parameters="1"
				property="get"
				property_name2="mipMap"
				property_name="mip_map">
				<comments desc="Get the indicated mip map. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLevel"
				name="GetLevel"
				num_parameters="1"
				property="get"
				property_name2="level"
				property_name="level">
				<comments desc="Get the bitmap at the specified level. ">
					<remark text="0 is the main surface, 1 is the first mip map, and so on. "/>
				</comments>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="beginUnpackPixels" name="BeginUnpackPixels" num_parameters="0">
				<comments desc="Begin unpacking pixels. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="endUnpackPixels" name="EndUnpackPixels" num_parameters="0">
				<comments desc="End unpacking pixels. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="blit" name="Blit" num_parameters="4">
				<comments desc="Blit a bitmap in this bitmap. ">
					<remark text="Clipping and pixel format conversion are automatically performed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="const iBitmap3D *"
					typec="const iBitmap3D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="avSrcMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="avDestMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					last="1"
					name="avSize"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="putPixel"
				name="PutPixel"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Put a pixel at the specified position. "/>
				<return type="void" typec="void"/>
				<parameter name="avPos" type="const sVec3i &amp;" typec="const sVec3i&amp;"/>
				<parameter
					last="1"
					name="col"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				const="yes"
				java_name="getPixel"
				name="GetPixel"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Get a pixel at the specified position. "/>
				<return type="tPtr" typec="tPtr"/>
				<parameter name="avPos" type="const sVec3i &amp;" typec="const sVec3i&amp;"/>
				<parameter
					last="1"
					name="pOut"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				java_name="clear"
				name="Clear"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Clear the bitmap "/>
				<return type="void" typec="void"/>
				<parameter
					default="NULL "
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method
				java_name="clearBox"
				name="ClearBox"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Clear the bitmap ">
					<remark text="The right, bottom and back edges are not filled. "/>
				</comments>
				<return type="void" typec="void"/>
				<parameter name="avMin" type="const sVec3i &amp;" typec="const sVec3i&amp;"/>
				<parameter name="avMax" type="const sVec3i &amp;" typec="const sVec3i&amp;"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"/>
			</method>
			<method java_name="putPixelf" name="PutPixelf" num_parameters="2">
				<comments desc="Put a pixel at the specified position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avPos"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPixelf"
				name="GetPixelf"
				num_parameters="1">
				<comments desc="Get a pixel at the specified position. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearf" name="Clearf" num_parameters="1">
				<comments desc="Clear the bitmap. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearBoxf" name="ClearBoxf" num_parameters="3">
				<comments desc="Clear the bitmap. ">
					<remark text="The right and bottom edges are not filled. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avMax"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avCol"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IBitmapBase.h.idl.xml">
		<enum name="eBitmapType">
			<comments desc="Bitmap type "/>
			<value name="eBitmapType_2D" value="0 ">
				<comments desc="2D Bitmap. "/>
			</value>
			<value name="eBitmapType_Cube" value="1 ">
				<comments desc="Cube Bitmap. Six 2D Bitmaps. "/>
			</value>
			<value name="eBitmapType_3D" value="2 ">
				<comments desc="3D Bitmap. "/>
			</value>
		</enum>
		<interface name="iBitmapFormat" uuid1="08633BCB-B637-DF11-A0FB-F78A46EA41C1" uuid2="0x08633bcb,0xb637,0xdf11,0xa0,0xfb,0xf7,0x8a,0x46,0xea,0x41,0xc1">
			<comments desc="Bitmap format interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another bitmap format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apFormat"
					type="const iBitmapFormat *"
					typec="const iBitmapFormat*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the bitmap format. "/>
				<return type="iBitmapFormat *" typec="iBitmapFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="reset" name="Reset" num_parameters="0">
				<comments desc="Reset the bitmap format to its default values. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setType"
				name="SetType"
				num_parameters="1"
				property="set"
				property_name2="type"
				property_name="type">
				<comments desc="Set the bitmap type. (default eBitmapType_2D) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the bitmap type. "/>
				<return type="eBitmapType" typec="eBitmapType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setWidth"
				name="SetWidth"
				num_parameters="1"
				property="set"
				property_name2="width"
				property_name="width">
				<comments desc="Set the texture width. (default 16) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the texture width. (default 16) "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setHeight"
				name="SetHeight"
				num_parameters="1"
				property="set"
				property_name2="height"
				property_name="height">
				<comments desc="Set the texture height. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the texture height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDepth"
				name="SetDepth"
				num_parameters="1"
				property="set"
				property_name2="depth"
				property_name="depth">
				<comments desc="Set the texture depth. (default 0) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDepth"
				name="GetDepth"
				num_parameters="0"
				property="get"
				property_name2="depth"
				property_name="depth">
				<comments desc="Get the texture depth. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNumMipMaps"
				name="SetNumMipMaps"
				num_parameters="1"
				property="set"
				property_name2="numMipMaps"
				property_name="num_mip_maps">
				<comments desc="Set the number of mipmaps. (default 0) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumMipMaps"
				name="GetNumMipMaps"
				num_parameters="0"
				property="get"
				property_name2="numMipMaps"
				property_name="num_mip_maps">
				<comments desc="Get the number of mipmaps. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setPixelFormat"
				name="SetPixelFormat"
				num_parameters="1"
				property="set"
				property_name2="pixelFormat"
				property_name="pixel_format">
				<comments desc="Set the pixel format. (default R8G8B8A8) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPixelFormat"
				name="GetPixelFormat"
				num_parameters="0"
				property="get"
				property_name2="pixelFormat"
				property_name="pixel_format">
				<comments desc="Get the pixel format. "/>
				<return type="iPixelFormat *" typec="iPixelFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iBitmapBase" uuid1="28D2F00B-B685-492A-B03C-1385AD069FF5" uuid2="0x28d2f00b,0xb685,0x492a,0xb0,0x3c,0x13,0x85,0xad,0x06,0x9f,0xf5">
			<comments desc="Base bitmap interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Return the bitmap type. "/>
				<return type="eBitmapType" typec="eBitmapType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the texture width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the texture height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDepth"
				name="GetDepth"
				num_parameters="0"
				property="get"
				property_name2="depth"
				property_name="depth">
				<comments desc="Get the texture depth. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPixelFormat"
				name="GetPixelFormat"
				num_parameters="0"
				property="get"
				property_name2="pixelFormat"
				property_name="pixel_format">
				<comments desc="Get the pixel format of the texture. "/>
				<return type="iPixelFormat *" typec="iPixelFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createMipMaps" name="CreateMipMaps" num_parameters="2">
				<comments desc="Create the mipmaps. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="abCompute"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="removeMipMaps" name="RemoveMipMaps" num_parameters="0">
				<comments desc="Remove the mipmaps. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumMipMaps"
				name="GetNumMipMaps"
				num_parameters="0"
				property="get"
				property_name2="numMipMaps"
				property_name="num_mip_maps">
				<comments desc="Get the number of mipmaps. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="1">
				<comments desc="Create a copy of the bitmap. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="ePixelFormatBlit_Normal "
					last="1"
					name="eBlit"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="createConvertedFormat"
				name="CreateConvertedFormat"
				num_parameters="1">
				<comments desc="Create a copy of the bitmap that use the given format. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="pFmt"
					type="const iPixelFormat *"
					typec="const iPixelFormat*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createGammaCorrected"
				name="CreateGammaCorrected"
				num_parameters="1">
				<comments desc="Create a gamma corrected bitmap. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="factor"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="gammaCorrect" name="GammaCorrect" num_parameters="1">
				<comments desc="Correct gamma of the bitmap. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="factor"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			name="iBitmapLoader"
			uuid1="89AF4ED6-F146-4ABB-8106-B12A40C82408"
			uuid2="0x89af4ed6,0xf146,0x4abb,0x81,0x06,0xb1,0x2a,0x40,0xc8,0x24,0x08">
			<comments desc="Bitmap Loader "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				dispatchwrapper="yes"
				java_name="loadBitmap"
				name="LoadBitmap"
				num_parameters="2">
				<comments desc="Bitmap Loader "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apGraphics"
					type="iGraphics *"
					typec="iGraphics*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			name="iBitmapSaver"
			uuid1="89AF4ED6-F146-4ABB-8106-B12A40C82408"
			uuid2="0x89af4ed6,0xf146,0x4abb,0x81,0x06,0xb1,0x2a,0x40,0xc8,0x24,0x08">
			<comments desc="Bitmap Saver "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				dispatchwrapper="yes"
				java_name="saveBitmap"
				name="SaveBitmap"
				num_parameters="4">
				<comments desc="Bitmap Saver "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apGraphics"
					type="iGraphics *"
					typec="iGraphics*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBmp"
					type="iBitmapBase *"
					typec="iBitmapBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCompression"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IBitmapCube.h.idl.xml">
		<enum name="eBitmapCubeFace">
			<comments desc="Bitmap cube faces. ">
				<remark text="The coordinate system is Left-Handed as in DX7/8. "/>
			</comments>
			<value name="eBitmapCubeFace_PositiveX" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eBitmapCubeFace_NegativeX" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eBitmapCubeFace_PositiveY" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eBitmapCubeFace_NegativeY" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eBitmapCubeFace_PositiveZ" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eBitmapCubeFace_NegativeZ" value="5 ">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iBitmapCube" uuid1="8DA50FFA-7FD2-404C-85E0-BC52511EF4C4" uuid2="0x8da50ffa,0x7fd2,0x404c,0x85,0xe0,0xbc,0x52,0x51,0x1e,0xf4,0xc4">
			<comments desc="Cube bitmap interface. "/>
			<parents>
				<parent name="iBitmapBase"/>
			</parents>
			<method
				const="yes"
				java_name="getFace"
				name="GetFace"
				num_parameters="1"
				property="get"
				property_name2="face"
				property_name="face">
				<comments desc="Get the content of the indicated face. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Face"
					type="eBitmapCubeFace"
					typec="eBitmapCubeFace"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="createResized"
				name="CreateResized"
				num_parameters="1">
				<comments desc="Create a resized cube map. "/>
				<return type="iBitmapCube *" typec="iBitmapCube*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="nW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IBoundingVolume.h.idl.xml">
		<enum name="eBoundingVolumeType">
			<comments desc="Bounding volume type. "/>
			<value name="eBoundingVolumeType_AABB" value="0 ">
				<comments desc="AABB volume type. "/>
			</value>
			<value name="eBoundingVolumeType_Sphere" value="1 ">
				<comments desc="Sphere volume type. "/>
			</value>
			<value name="eBoundingVolumeType_ConvexHull" value="2 ">
				<comments desc="Convex hull volume type. "/>
			</value>
			<value name="eBoundingVolumeType_User" value="2 ">
				<comments desc="User volume type "/>
			</value>
		</enum>
		<interface name="iBoundingVolume" uuid1="489EBD21-5B90-46DB-A857-5C6E8D3B89BA" uuid2="0x489ebd21,0x5b90,0x46db,0xa8,0x57,0x5c,0x6e,0x8d,0x3b,0x89,0xba">
			<comments desc="Bounding volume interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another bounding volume in this volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="iBoundingVolume *"
					typec="iBoundingVolume*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Create a copy of the bounding volume. "/>
				<return type="iBoundingVolume *" typec="iBoundingVolume*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the bounding volume type. "/>
				<return type="eBoundingVolumeType" typec="eBoundingVolumeType" typei="ni::eType_Enum"/>
			</method>
			<method java_name="begin" name="Begin" num_parameters="1">
				<comments desc="Begin the computation of the bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abReset"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="end" name="End" num_parameters="0">
				<comments desc="End the computation of the bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="addPoint" name="AddPoint" num_parameters="1">
				<comments desc="Add a point inside the bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avPoint"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setCenter"
				name="SetCenter"
				num_parameters="1"
				property="set"
				property_name2="center"
				property_name="center">
				<comments desc="Set the center. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCenter"
				name="GetCenter"
				num_parameters="0"
				property="get"
				property_name2="center"
				property_name="center">
				<comments desc="Get the center. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setRadius"
				name="SetRadius"
				num_parameters="1"
				property="set"
				property_name2="radius"
				property_name="radius">
				<comments desc="Set the radius. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getRadius"
				name="GetRadius"
				num_parameters="0"
				property="get"
				property_name2="radius"
				property_name="radius">
				<comments desc="Get the radius. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setExtents"
				name="SetExtents"
				num_parameters="1"
				property="set"
				property_name2="extents"
				property_name="extents">
				<comments desc="Set the extents. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avExtends"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExtents"
				name="GetExtents"
				num_parameters="0"
				property="get"
				property_name2="extents"
				property_name="extents">
				<comments desc="Get the extents. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setSize"
				name="SetSize"
				num_parameters="1"
				property="set"
				property_name2="size"
				property_name="size">
				<comments desc="Set the size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setMin"
				name="SetMin"
				num_parameters="1"
				property="set"
				property_name2="min"
				property_name="min">
				<comments desc="Set the minimum value. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMin"
				name="GetMin"
				num_parameters="0"
				property="get"
				property_name2="min"
				property_name="min">
				<comments desc="Get the minimum value. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setMax"
				name="SetMax"
				num_parameters="1"
				property="set"
				property_name2="max"
				property_name="max">
				<comments desc="Set the maximum value. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMax"
				name="GetMax"
				num_parameters="0"
				property="get"
				property_name2="max"
				property_name="max">
				<comments desc="Get the maximum value. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="translate" name="Translate" num_parameters="1">
				<comments desc="Translate the bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="rotate" name="Rotate" num_parameters="1">
				<comments desc="Rotate the bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="amtxRotation"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="transform" name="Transform" num_parameters="1">
				<comments desc="Transform by the specified matrix. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="inflate" name="Inflate" num_parameters="1">
				<comments desc="Inflate the bounding volume by the given percentage. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afPercent"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="intersectAABB"
				name="IntersectAABB"
				num_parameters="3">
				<comments desc="Intersect with an AABB. "/>
				<return type="eIntersectionResult" typec="eIntersectionResult" typei="ni::eType_Enum"/>
				<parameter
					name="apResult"
					type="iIntersection *"
					typec="iIntersection*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="intersectRay"
				name="IntersectRay"
				num_parameters="3">
				<comments desc="Intersect with a ray. "/>
				<return type="eIntersectionResult" typec="eIntersectionResult" typei="ni::eType_Enum"/>
				<parameter
					name="apResult"
					type="iIntersection *"
					typec="iIntersection*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avOrg"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avDir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="intersectPoint"
				name="IntersectPoint"
				num_parameters="2">
				<comments desc="Intersect with a point. "/>
				<return type="eIntersectionResult" typec="eIntersectionResult" typei="ni::eType_Enum"/>
				<parameter
					name="apResult"
					type="iIntersection *"
					typec="iIntersection*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="intersectFrustum"
				name="IntersectFrustum"
				num_parameters="2">
				<comments desc="Intersect with a frustum. "/>
				<return type="eIntersectionResult" typec="eIntersectionResult" typei="ni::eType_Enum"/>
				<parameter
					name="apResult"
					type="iIntersection *"
					typec="iIntersection*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFrustum"
					type="const iFrustum *"
					typec="const iFrustum*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/ICamera.h.idl.xml">
		<enum name="eCameraMoveType">
			<comments desc="Camera move type "/>
			<value name="eCameraMoveType_None" value="0 ">
				<comments desc="The camera view is set through the position, target &amp; target up directly. "/>
			</value>
			<value name="eCameraMoveType_Fly" value="1 ">
				<comments desc="The camera simulates a flying object. ">
					<remark text="Moves the target with the position. "/>
				</comments>
			</value>
			<value name="eCameraMoveType_Orbit" value="2 ">
				<comments desc="The camera orbits around it&apos;s target. ">
					<remark text="Move up will &apos;orbit up/down&apos;, move forward will zoom in/out, move sidewards will &apos;orbit left/right&apos;. The movements should be in radians, zoom in/out in the same unit as the regular move forward. "/>
					<remark text="The target is never moved directly in orbit mode. "/>
				</comments>
			</value>
			<value name="eCameraMoveType_FlyFixedTarget" value="3 ">
				<comments desc="The camera simulates a flying object with a fixed target. "/>
			</value>
			<value name="eCameraMoveType_SetMatrix" value="4 ">
				<comments desc="The camera view is set through SetViewMatrix directly. "/>
			</value>
		</enum>
		<enum name="eCameraProjectionType">
			<comments desc="Camera projection type. "/>
			<value name="eCameraProjectionType_Perspective" value="0 ">
				<comments desc="Perspective camera. "/>
			</value>
			<value name="eCameraProjectionType_Orthogonal" value="1 ">
				<comments desc="Orthogonal with a free view pov. "/>
			</value>
			<value name="eCameraProjectionType_SetMatrix" value="2 ">
				<comments desc="The camera projection is set through SetProjectionMatrix directly. "/>
			</value>
		</enum>
		<interface name="iCamera" uuid1="3769AFCF-3B13-4545-8474-EF463A1E6755" uuid2="0x3769afcf,0x3b13,0x4545,0x84,0x74,0xef,0x46,0x3a,0x1e,0x67,0x55">
			<comments desc="Camera interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the camera. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="pSrc"
					type="const iCamera *"
					typec="const iCamera*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the camera. "/>
				<return type="iCamera *" typec="iCamera*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWorldMatrix"
				name="GetWorldMatrix"
				num_parameters="0"
				property="get"
				property_name2="worldMatrix"
				property_name="world_matrix">
				<comments desc="Get the world matrix. "/>
				<return type="ni::sMatrixf" typec="ni::sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getViewMatrix"
				name="GetViewMatrix"
				num_parameters="0"
				property="get"
				property_name2="viewMatrix"
				property_name="view_matrix">
				<comments desc="Get the view matrix. "/>
				<return type="ni::sMatrixf" typec="ni::sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getProjectionMatrix"
				name="GetProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="projectionMatrix"
				property_name="projection_matrix">
				<comments desc="Get the projection matrix. "/>
				<return type="ni::sMatrixf" typec="ni::sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getFrustum"
				name="GetFrustum"
				num_parameters="0"
				property="get"
				property_name2="frustum"
				property_name="frustum">
				<comments desc="Get the frustum. "/>
				<return type="ni::iFrustum *" typec="ni::iFrustum*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getRay" name="GetRay" num_parameters="3">
				<comments desc="Compute a ray from the given screen position and rectangle. " return="The normalized direction of a ray going starting at RayStart and going in the direction of the point in the specified rectangle projected in the camera&apos;s space. ">
					<remark text="The starting point of the ray should be retrieved with iCamera::GetRayStart(), while it usually coincide with the camera&apos;s position it might not always be the case (such as for orthographic projections). "/>
					<remark text="This method is commonly used to build a ray to be used by picking in camera space. "/>
				</comments>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="afX"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afY"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aRect"
					type="const ni::sRectf &amp;"
					typec="const ni::sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRayStart"
				name="GetRayStart"
				num_parameters="0"
				property="get"
				property_name2="rayStart"
				property_name="ray_start">
				<comments desc="Get the starting point of the last ray "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getScreenPosition"
				name="GetScreenPosition"
				num_parameters="2">
				<comments desc="Get a screen position from the given 3d position. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avPos"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRect"
					type="const ni::sRectf &amp;"
					typec="const ni::sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setViewMatrix"
				name="SetViewMatrix"
				num_parameters="1"
				property="set"
				property_name2="viewMatrix"
				property_name="view_matrix">
				<comments desc="Set the view matrix directly. ">
					<remark text="This should one be used with eCameraMoveType_None. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aViewMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setProjectionMatrix"
				name="SetProjectionMatrix"
				num_parameters="1"
				property="set"
				property_name2="projectionMatrix"
				property_name="projection_matrix">
				<comments desc="Set the projection matrix directly. ">
					<remark text="This should one be used with eCameraProjectionType_None. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aProjMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setFromWorldMatrix" name="SetFromWorldMatrix" num_parameters="2">
				<comments desc="Set the camera position, target and up vector from a matrix. ">
					<params text="aMatrix is the matrix from which the new camera position and target will be derived "/>
					<params text="abSetUp if true the target&apos;s up vector will also be derived from the specifed matrix. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aMatrix"
					type="const ni::sMatrixf &amp;"
					typec="const ni::sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abSetUp"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setProjection"
				name="SetProjection"
				num_parameters="1"
				property="set"
				property_name2="projection"
				property_name="projection">
				<comments desc="Set projection type. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aProjectionType"
					type="eCameraProjectionType"
					typec="eCameraProjectionType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getProjection"
				name="GetProjection"
				num_parameters="0"
				property="get"
				property_name2="projection"
				property_name="projection">
				<comments desc="Get orthogonal projection. "/>
				<return type="eCameraProjectionType" typec="eCameraProjectionType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setViewport"
				name="SetViewport"
				num_parameters="1"
				property="set"
				property_name2="viewport"
				property_name="viewport">
				<comments desc="Set the camera&apos;s viewport rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const ni::sRectf &amp;"
					typec="const ni::sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getViewport"
				name="GetViewport"
				num_parameters="0"
				property="get"
				property_name2="viewport"
				property_name="viewport">
				<comments desc="Get the camera&apos;s viewport rectangle. "/>
				<return type="ni::sRectf" typec="ni::sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setFov"
				name="SetFov"
				num_parameters="1"
				property="set"
				property_name2="fov"
				property_name="fov">
				<comments desc="Set the vertical field of view. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="fFOV"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFov"
				name="GetFov"
				num_parameters="0"
				property="get"
				property_name2="fov"
				property_name="fov">
				<comments desc="Get the vertical field of view. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setAspect"
				name="SetAspect"
				num_parameters="1"
				property="set"
				property_name2="aspect"
				property_name="aspect">
				<comments desc="Set the aspect ratio. ">
					<remark text="If the aspect ratio is 0, the aspect of the viewport is used. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="fAspect"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAspect"
				name="GetAspect"
				num_parameters="0"
				property="get"
				property_name2="aspect"
				property_name="aspect">
				<comments desc="Get the aspect ratio. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteAspect"
				name="GetAbsoluteAspect"
				num_parameters="0"
				property="get"
				property_name2="absoluteAspect"
				property_name="absolute_aspect">
				<comments desc="Get the absolute aspect ratio. ">
					<remark text="The absolute aspect ratio is the aspect ratio of the viewport if the aspect is &lt;= 0. "/>
				</comments>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setNearClipPlane"
				name="SetNearClipPlane"
				num_parameters="1"
				property="set"
				property_name2="nearClipPlane"
				property_name="near_clip_plane">
				<comments desc="Set the near clipping plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getNearClipPlane"
				name="GetNearClipPlane"
				num_parameters="0"
				property="get"
				property_name2="nearClipPlane"
				property_name="near_clip_plane">
				<comments desc="Get the near clipping plane. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setFarClipPlane"
				name="SetFarClipPlane"
				num_parameters="1"
				property="set"
				property_name2="farClipPlane"
				property_name="far_clip_plane">
				<comments desc="Set the far clipping plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFarClipPlane"
				name="GetFarClipPlane"
				num_parameters="0"
				property="get"
				property_name2="farClipPlane"
				property_name="far_clip_plane">
				<comments desc="Get the far clipping plane. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setOrthoSize"
				name="SetOrthoSize"
				num_parameters="1"
				property="set"
				property_name2="orthoSize"
				property_name="ortho_size">
				<comments desc="Set the orthogonal projection size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getOrthoSize"
				name="GetOrthoSize"
				num_parameters="0"
				property="get"
				property_name2="orthoSize"
				property_name="ortho_size">
				<comments desc="Get the orthogonal projection size. ">
					<remark text="Height of the othogonal projection, Width = OrthoSize * AbsoluteAspect "/>
				</comments>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setPosition"
				name="SetPosition"
				num_parameters="1"
				property="set"
				property_name2="position"
				property_name="position">
				<comments desc="Set the position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="vPos"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPosition"
				name="GetPosition"
				num_parameters="0"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the position. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setTarget"
				name="SetTarget"
				num_parameters="1"
				property="set"
				property_name2="target"
				property_name="target">
				<comments desc="Set the target. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avTarget"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTarget"
				name="GetTarget"
				num_parameters="0"
				property="get"
				property_name2="target"
				property_name="target">
				<comments desc="Get the target. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setTargetUp"
				name="SetTargetUp"
				num_parameters="1"
				property="set"
				property_name2="targetUp"
				property_name="target_up">
				<comments desc="Set the target up vector. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avUp"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTargetUp"
				name="GetTargetUp"
				num_parameters="0"
				property="get"
				property_name2="targetUp"
				property_name="target_up">
				<comments desc="Get the target up vector. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setTargetDistance"
				name="SetTargetDistance"
				num_parameters="1"
				property="set"
				property_name2="targetDistance"
				property_name="target_distance">
				<comments desc="Set the distance between the camera and it&apos;s target by moving the target. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afDist"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getTargetDistance"
				name="GetTargetDistance"
				num_parameters="0"
				property="get"
				property_name2="targetDistance"
				property_name="target_distance">
				<comments desc="Get the distance between the camera and it&apos;s target. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setPositionDistance"
				name="SetPositionDistance"
				num_parameters="1"
				property="set"
				property_name2="positionDistance"
				property_name="position_distance">
				<comments desc="Set the distance between the camera and it&apos;s target by moving the position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afDist"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getPositionDistance"
				name="GetPositionDistance"
				num_parameters="0"
				property="get"
				property_name2="positionDistance"
				property_name="position_distance">
				<comments desc="Get the distance between the camera and it&apos;s target. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setTargetDirection"
				name="SetTargetDirection"
				num_parameters="1"
				property="set"
				property_name2="targetDirection"
				property_name="target_direction">
				<comments desc="Set the direction of the target. ">
					<remark text="The direction is from the camera to the target. "/>
					<remark text="The direction is a normal vector. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avDir"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTargetDirection"
				name="GetTargetDirection"
				num_parameters="0"
				property="get"
				property_name2="targetDirection"
				property_name="target_direction">
				<comments desc="Get the direction of the target. ">
					<remark text="The direction is from the camera to the target. "/>
					<remark text="The direction is a normal vector. "/>
				</comments>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setMoveType"
				name="SetMoveType"
				num_parameters="1"
				property="set"
				property_name2="moveType"
				property_name="move_type">
				<comments desc="Set the camera move mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMode"
					type="eCameraMoveType"
					typec="eCameraMoveType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getMoveType"
				name="GetMoveType"
				num_parameters="0"
				property="get"
				property_name2="moveType"
				property_name="move_type">
				<comments desc="Get the camera move mode. "/>
				<return type="eCameraMoveType" typec="eCameraMoveType" typei="ni::eType_Enum"/>
			</method>
			<method java_name="moveSidewards" name="MoveSidewards" num_parameters="1">
				<comments desc="Move the camera sidewards relatively to itself. (X axis) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="delta"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="moveUp" name="MoveUp" num_parameters="1">
				<comments desc="Move the camera upward relatively to itself. (Y axis) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="delta"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="moveForward" name="MoveForward" num_parameters="1">
				<comments desc="Move the camera forward relatively to itself. (Y axis) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="delta"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setMove"
				name="SetMove"
				num_parameters="1"
				property="set"
				property_name2="move"
				property_name="move">
				<comments desc="Set the relative movement vector. (x+ sidewards, y+ upwards and z+ forward) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMove"
					type="const ni::sVec3f &amp;"
					typec="const ni::sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMove"
				name="GetMove"
				num_parameters="0"
				property="get"
				property_name2="move"
				property_name="move">
				<comments desc="Get the relative movement vector. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="rotateTarget" name="RotateTarget" num_parameters="2">
				<comments desc="Rotates the target around the specified axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avAxis"
					type="ni::sVec3f"
					typec="ni::sVec3f"
					typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="afAngle"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="rotateTargetUp" name="RotateTargetUp" num_parameters="2">
				<comments desc="Rotates the target up around the specified axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avAxis"
					type="ni::sVec3f"
					typec="ni::sVec3f"
					typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="afAngle"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="addYaw" name="AddYaw" num_parameters="1">
				<comments desc="Rotates the target up around the specified axis. Add yaw. ">
					<remark text="Rotates the target around the Y axis. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="a"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="addPitch" name="AddPitch" num_parameters="1">
				<comments desc="Add pitch. ">
					<remark text="Rotates the target around the right axis projected on the XZ plane. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="a"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="addRoll" name="AddRoll" num_parameters="1">
				<comments desc="Add roll. ">
					<remark text="Rotates the target up around the forward axis projected on the XZ plane. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="a"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="orbitUp" name="OrbitUp" num_parameters="1">
				<comments desc="Orbit up/down the position of the camera around the current target. ">
					<remark text="Rotates the position around the target about it&apos;s right axis. "/>
					<remark text="The rotation is clamped to the the pole of the orbit sphere, so that trying to orbit up when the camera is already at the north/top pole will not have any effect, and reciprocicaly at the south/bottom pole. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afA"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="orbitSidewards" name="OrbitSidewards" num_parameters="1">
				<comments desc="Orbit left/right the position of the camera around the current target. ">
					<remark text="Rotates the position around the target about the y axis. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afA"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getForward"
				name="GetForward"
				num_parameters="0"
				property="get"
				property_name2="forward"
				property_name="forward">
				<comments desc="Get the forward vector. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getRight"
				name="GetRight"
				num_parameters="0"
				property="get"
				property_name2="right"
				property_name="right">
				<comments desc="Get the right vector. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getUp"
				name="GetUp"
				num_parameters="0"
				property="get"
				property_name2="up"
				property_name="up">
				<comments desc="Get the up vector. "/>
				<return type="ni::sVec3f" typec="ni::sVec3f" typei="ni::eType_Vec3f"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/ICanvas.h.idl.xml">
		<enum name="eBillboardModeFlags">
			<comments desc="Billboard mode flags. "/>
			<value name="eBillboardModeFlags_Disabled" value="0 ">
				<comments desc="Disabled billboard mode. "/>
			</value>
			<value name="eBillboardModeFlags_CustomCenter" value="niBit ( 0 ) ">
				<comments desc="Custom center specified. "/>
			</value>
			<value name="eBillboardModeFlags_AnchorCenter" value="niBit ( 1 ) ">
				<comments desc="Anchor at the center (default if anchor not specified). "/>
			</value>
		</enum>
		<interface name="iCanvas" uuid1="0F47C834-5618-42B0-B169-BE549A2987BD" uuid2="0x0f47c834,0x5618,0x42b0,0xb1,0x69,0xbe,0x54,0x9a,0x29,0x87,0xbd">
			<comments desc="Canvas interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphicsContext"
				name="GetGraphicsContext"
				num_parameters="0"
				property="get"
				property_name2="graphicsContext"
				property_name="graphics_context">
				<comments desc="Get the parent graphics context. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setContentsScale"
				name="SetContentsScale"
				num_parameters="1"
				property="set"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Set the canvas&apos; contents scale. ">
					<remark text="The canvas in the UI rendering system are setup to use the UIContext&apos;s contents scale. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getContentsScale"
				name="GetContentsScale"
				num_parameters="0"
				property="get"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Get the canva&apos;s contents scale. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getViewport"
				name="GetViewport"
				num_parameters="0"
				property="get"
				property_name2="viewport"
				property_name="viewport">
				<comments desc="Get the viewport size in UI units. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method java_name="flush" name="Flush" num_parameters="0">
				<comments desc="Flush the rendering to the target immediatly. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="blitFill" name="BlitFill" num_parameters="2">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitFillAlpha" name="BlitFillAlpha" num_parameters="2">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitStretch" name="BlitStretch" num_parameters="3">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSrcRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="blitStretchAlpha" name="BlitStretchAlpha" num_parameters="3">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSrcRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="blitStretchAlpha1" name="BlitStretchAlpha1" num_parameters="4">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aSrcRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afAlpha"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="blitOverlay" name="BlitOverlay" num_parameters="2">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apOverlay"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="blitOverlayFrame" name="BlitOverlayFrame" num_parameters="3">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apOverlay"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitLine" name="BlitLine" num_parameters="3">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aStart"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aEnd"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitLineAlpha" name="BlitLineAlpha" num_parameters="3">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aStart"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aEnd"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitRect" name="BlitRect" num_parameters="2">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitRectAlpha" name="BlitRectAlpha" num_parameters="2">
				<comments desc="">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitText" name="BlitText" num_parameters="4">
				<comments desc="Blit text with the specified font. ">
					<remark text="Destination is relative to the current viewport. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFormatFlags"
					type="tFontFormatFlags"
					typec="tFontFormatFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="resetStates" name="ResetStates" num_parameters="0">
				<comments desc="Reset the canvas states to the default states. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getHasVertices"
				name="GetHasVertices"
				num_parameters="0"
				property="get"
				property_name2="hasVertices"
				property_name="has_vertices">
				<comments desc="Check whether any vertex has been pushed in the rendering buffer. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDrawOperation"
				name="GetDrawOperation"
				num_parameters="0"
				property="get"
				property_name2="drawOperation"
				property_name="draw_operation">
				<comments desc="Get the canvas&apos;s draw operation. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setColorA"
				name="SetColorA"
				num_parameters="1"
				property="set"
				property_name2="colorA"
				property_name="color_a">
				<comments desc="Set the default color A of the canvas. (default is 0xFFFFFFFF - white) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColorA"
				name="GetColorA"
				num_parameters="0"
				property="get"
				property_name2="colorA"
				property_name="color_a">
				<comments desc="Get the color A. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNormal"
				name="SetNormal"
				num_parameters="1"
				property="set"
				property_name2="normal"
				property_name="normal">
				<comments desc="Set the default normal of the canvas. (default sVec3f::YAxis()) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avNormal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNormal"
				name="GetNormal"
				num_parameters="0"
				property="get"
				property_name2="normal"
				property_name="normal">
				<comments desc="Get the default normal. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setLineConstantScreenSize"
				name="SetLineConstantScreenSize"
				num_parameters="1"
				property="set"
				property_name2="lineConstantScreenSize"
				property_name="line_constant_screen_size">
				<comments desc="Set whether line have a constant size in screen space. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abConstSize"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getLineConstantScreenSize"
				name="GetLineConstantScreenSize"
				num_parameters="0"
				property="get"
				property_name2="lineConstantScreenSize"
				property_name="line_constant_screen_size">
				<comments desc="Get whether line have a constant size in screen space "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setLineSize"
				name="SetLineSize"
				num_parameters="1"
				property="set"
				property_name2="lineSize"
				property_name="line_size">
				<comments desc="Set the line size. ">
					<remark text="Begin reset the default size to 1. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getLineSize"
				name="GetLineSize"
				num_parameters="0"
				property="get"
				property_name2="lineSize"
				property_name="line_size">
				<comments desc="Get the line size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setMaterial"
				name="SetMaterial"
				num_parameters="1"
				property="set"
				property_name2="material"
				property_name="material">
				<comments desc="Set the drawop&apos;s material. ">
					<remark text="Sets the default blit material when apMaterial is NULL. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apMaterial"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the drawop&apos;s material. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setDefaultMaterial" name="SetDefaultMaterial" num_parameters="3">
				<comments desc="Sets the default material as current material and sets its texture, blendmode and sampler states. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aSamplerStates"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setMatrix"
				name="SetMatrix"
				num_parameters="1"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set the current matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				name="GetMatrix"
				num_parameters="0"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get the current matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setBillboard"
				name="SetBillboard"
				num_parameters="1"
				property="set"
				property_name2="billboard"
				property_name="billboard">
				<comments desc="Set billboard mode. ">
					<remark text="Billboard mode influence the next rectangle/frame pushed. "/>
					<remark text="If the billboard right and up vectors haven&apos;t been set they will be derived from the current the view matrix. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMode"
					type="tBillboardModeFlags"
					typec="tBillboardModeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBillboard"
				name="GetBillboard"
				num_parameters="0"
				property="get"
				property_name2="billboard"
				property_name="billboard">
				<comments desc="Get billboard mode. "/>
				<return type="tBillboardModeFlags" typec="tBillboardModeFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setBillboardRight"
				name="SetBillboardRight"
				num_parameters="1"
				property="set"
				property_name2="billboardRight"
				property_name="billboard_right">
				<comments desc="Set the billboard right vector. ">
					<remark text="If not set explicitly, the first SetBillboard(true) after Begin sets it to the current camera view matrix&apos;s right vector. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBillboardRight"
				name="GetBillboardRight"
				num_parameters="0"
				property="get"
				property_name2="billboardRight"
				property_name="billboard_right">
				<comments desc="Get the billboard right vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setBillboardUp"
				name="SetBillboardUp"
				num_parameters="1"
				property="set"
				property_name2="billboardUp"
				property_name="billboard_up">
				<comments desc="Set the billboard up vector. ">
					<remark text="If not set explicitly, the first SetBillboard(true) after Begin sets it to the current camera view matrix&apos;s up vector. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avUp"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBillboardUp"
				name="GetBillboardUp"
				num_parameters="0"
				property="get"
				property_name2="billboardUp"
				property_name="billboard_up">
				<comments desc="Get the billboard up vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setBillboardCenter"
				name="SetBillboardCenter"
				num_parameters="1"
				property="set"
				property_name2="billboardCenter"
				property_name="billboard_center">
				<comments desc="Set the custom billboard center. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBillboardCenter"
				name="GetBillboardCenter"
				num_parameters="0"
				property="get"
				property_name2="billboardCenter"
				property_name="billboard_center">
				<comments desc="Get the custom billboard center. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="rect" name="Rect" num_parameters="3">
				<comments desc="Push an immediate mode rectangle. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="rectT" name="RectT" num_parameters="5">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="rectA" name="RectA" num_parameters="4">
				<comments desc="Push an immediate mode rectangle with color A. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="rectTA" name="RectTA" num_parameters="6">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates and color A. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="rectTA2" name="RectTA2" num_parameters="9">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates, color A and Color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="anTLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anTRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anBRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="quadEx" name="QuadEx" num_parameters="16">
				<comments desc="Push an immediate mode quad with 3d positions, normals, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTLA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTRN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTRA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBRA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBLN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anBLA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="quad" name="Quad" num_parameters="4">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="quadA" name="QuadA" num_parameters="5">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColorA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="quadA2" name="QuadA2" num_parameters="8">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anBLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="quadT" name="QuadT" num_parameters="8">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avBLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="quadTA" name="QuadTA" num_parameters="9">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColorA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="quadTA2" name="QuadTA2" num_parameters="12">
				<comments desc="Push an immediate mode quad with 3d positions, texture coordinates, color A and color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avTL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avTR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anTRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBR"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avBL"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anBLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="frame" name="Frame" num_parameters="5">
				<comments desc="Push an immediate mode rectangle. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="frameA" name="FrameA" num_parameters="6">
				<comments desc="Push an immediate mode rectangle with the specified color. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="frameT" name="FrameT" num_parameters="7">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="frameTA" name="FrameTA" num_parameters="8">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates and color a. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="frameTA2" name="FrameTA2" num_parameters="11">
				<comments desc="Push an immediate mode rectangle, specifying the texture coordinates, color A and Color B. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTL"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBR"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTLTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avBRTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="anTLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anTRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anBRColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBLColA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="line" name="Line" num_parameters="2">
				<comments desc="Push a line. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avStart"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avEnd"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="lineA" name="LineA" num_parameters="3">
				<comments desc="Push a line. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avStart"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avEnd"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="lineEx" name="LineEx" num_parameters="8">
				<comments desc="Push a line. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avStart"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avStartTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afStartSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="anStartCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avEnd"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avEndTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afEndSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anEndCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="lineGridXY" name="LineGridXY" num_parameters="4">
				<comments desc="Push a XY grid made of lines. ">
					<params text="aX Size in X of one cell of the grid. "/>
					<params text="aY Size in Y of one cell of the grid. "/>
					<params text="anNumColumns "/>
					<params text="anNumRows "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aX"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aY"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="anNumColumns"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumRows"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="lineGridXZ" name="LineGridXZ" num_parameters="4">
				<comments desc="Push a XZ grid made of lines. ">
					<params text="aX Size in X of one cell of the grid. "/>
					<params text="aZ Size in Z of one cell of the grid. "/>
					<params text="anNumColumns "/>
					<params text="anNumRows "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aX"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aZ"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="anNumColumns"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumRows"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="wireframeCircle" name="WireframeCircle" num_parameters="4">
				<comments desc="Draw a circle. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					default="32 "
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="ePlaneType_XY "
					last="1"
					name="aPlane"
					type="ePlaneType"
					typec="ePlaneType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="wireframeEllipse" name="WireframeEllipse" num_parameters="4">
				<comments desc="Draw an ellipse. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avRadius"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					default="32 "
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="ePlaneType_XY "
					last="1"
					name="aPlane"
					type="ePlaneType"
					typec="ePlaneType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="wireframeAABB" name="WireframeAABB" num_parameters="2">
				<comments desc="Draw wireframe AABB. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="wireframeSphere" name="WireframeSphere" num_parameters="3">
				<comments desc="Draw wireframe sphere. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					default="32 "
					last="1"
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="wireframeSphereEx" name="WireframeSphereEx" num_parameters="6">
				<comments desc="Draw wireframe sphere. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aulColorX"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aulColorY"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aulColorZ"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="wireframeEllipsoid" name="WireframeEllipsoid" num_parameters="3">
				<comments desc="Draw wireframe ellipsoid. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avRadius"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					default="32 "
					last="1"
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="wireframeEllipsoidEx" name="WireframeEllipsoidEx" num_parameters="6">
				<comments desc="Draw wireframe ellipsoid. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avRadius"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aulColorX"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aulColorY"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aulColorZ"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="wireframeCone" name="WireframeCone" num_parameters="5">
				<comments desc="Draw a wireframe cone. ">
					<remark text="Uses the current line parameters. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avBaseCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afBaseRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afHeight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					default="32 "
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="ePlaneType_XY "
					last="1"
					name="aPlane"
					type="ePlaneType"
					typec="ePlaneType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="vertexP" name="VertexP" num_parameters="1">
				<comments desc="Push a vertex with position. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="vertexPN" name="VertexPN" num_parameters="2">
				<comments desc="Push a vertex with position and normal. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avNormal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="vertexPT" name="VertexPT" num_parameters="2">
				<comments desc="Push a vertex with position and a 2d texture coodinate. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="vertexPTA" name="VertexPTA" num_parameters="3">
				<comments desc="Push a vertex with position, a 2d texture coodinate and color A. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColorA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="vertexPNT" name="VertexPNT" num_parameters="3">
				<comments desc="Push a vertex with position, normal and texture coodinate. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avNormal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="vertexPNTA" name="VertexPNTA" num_parameters="4">
				<comments desc="Push a vertex with position, normal, texture coodinate and color A. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avNormal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avTex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColorA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVGMaterial"
				name="GetVGMaterial"
				num_parameters="0"
				property="get"
				property_name2="vgmaterial"
				property_name="vgmaterial">
				<comments desc="Get the VG path used for drawing. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVGStyle"
				name="GetVGStyle"
				num_parameters="0"
				property="get"
				property_name2="vgstyle"
				property_name="vgstyle">
				<comments desc="Get the VG style used for drawing. "/>
				<return type="iVGStyle *" typec="iVGStyle*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVGTransform"
				name="GetVGTransform"
				num_parameters="1"
				property="get"
				property_name2="vgtransform"
				property_name="vgtransform">
				<comments desc="Get the VG transform used for drawing. "/>
				<return type="iVGTransform *" typec="iVGTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aTransform"
					type="eVGTransform"
					typec="eVGTransform"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="drawPath" name="DrawPath" num_parameters="1">
				<comments desc="Draw a VG path. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apPath"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IDampedSpring.h.idl.xml">
		<interface name="iDampedSpring1" uuid1="8C5A71F0-3E1B-41B6-84A2-F6F8FE08567A" uuid2="0x8c5a71f0,0x3e1b,0x41b6,0x84,0xa2,0xf6,0xf8,0xfe,0x08,0x56,0x7a">
			<comments desc="1D Damped spring interface. \see ni::DampedSpringAcceleration "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setKd"
				name="SetKd"
				num_parameters="1"
				property="set"
				property_name2="kd"
				property_name="kd">
				<comments desc="Set the Kd constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKd"
				name="GetKd"
				num_parameters="0"
				property="get"
				property_name2="kd"
				property_name="kd">
				<comments desc="Get the Kd constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setKs"
				name="SetKs"
				num_parameters="1"
				property="set"
				property_name2="ks"
				property_name="ks">
				<comments desc="Set the Ks constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKs"
				name="GetKs"
				num_parameters="0"
				property="get"
				property_name2="ks"
				property_name="ks">
				<comments desc="Get the Ks constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="setStiffnessAndDampingRatio" name="SetStiffnessAndDampingRatio" num_parameters="2">
				<comments desc="Set the value of Kd for the specified Ks that will result in a spring with the specified damping ratio. ">
					<remark text="Sets Ks with parameter&apos;s value, sets Kd in function of Ks. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afKs"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDampingRatio"
				name="SetDampingRatio"
				num_parameters="1"
				property="set"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Set the spring&apos;s damping ratio. ">
					<remark text="Sets Kd in function of the current value of Ks to achieve the specified damping ratio. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDampingRatio"
				name="GetDampingRatio"
				num_parameters="0"
				property="get"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Get the spring&apos;s damping ratio. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setVelocity"
				name="SetVelocity"
				num_parameters="1"
				property="set"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Set the spring&apos;s velocity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avVel"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getVelocity"
				name="GetVelocity"
				num_parameters="0"
				property="get"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Get the spring&apos;s velocity. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="computeAcceleration" name="ComputeAcceleration" num_parameters="1">
				<comments desc="Compute the spring&apos;s acceleration for the specified displacement. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="updateVelocity" name="UpdateVelocity" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified displacement. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="updateVelocityWithAcceleration" name="UpdateVelocityWithAcceleration" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified acceleration. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avAcc"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
		</interface>
		<interface name="iDampedSpring2" uuid1="AB391D38-FF1B-4503-A057-8242A5110215" uuid2="0xab391d38,0xff1b,0x4503,0xa0,0x57,0x82,0x42,0xa5,0x11,0x02,0x15">
			<comments desc="2D Damped spring interface. \see ni::DampedSpringAcceleration "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setKd"
				name="SetKd"
				num_parameters="1"
				property="set"
				property_name2="kd"
				property_name="kd">
				<comments desc="Set the Kd constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKd"
				name="GetKd"
				num_parameters="0"
				property="get"
				property_name2="kd"
				property_name="kd">
				<comments desc="Get the Kd constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setKs"
				name="SetKs"
				num_parameters="1"
				property="set"
				property_name2="ks"
				property_name="ks">
				<comments desc="Set the Ks constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKs"
				name="GetKs"
				num_parameters="0"
				property="get"
				property_name2="ks"
				property_name="ks">
				<comments desc="Get the Ks constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="setStiffnessAndDampingRatio" name="SetStiffnessAndDampingRatio" num_parameters="2">
				<comments desc="Set the value of Kd for the specified Ks that will result in a spring with the specified damping ratio. ">
					<remark text="Sets Ks with parameter&apos;s value, sets Kd in function of Ks. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afKs"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDampingRatio"
				name="SetDampingRatio"
				num_parameters="1"
				property="set"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Set the spring&apos;s damping ratio. ">
					<remark text="Sets Kd in function of the current value of Ks to achieve the specified damping ratio. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDampingRatio"
				name="GetDampingRatio"
				num_parameters="0"
				property="get"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Get the spring&apos;s damping ratio. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setVelocity"
				name="SetVelocity"
				num_parameters="1"
				property="set"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Set the spring&apos;s velocity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avVel"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVelocity"
				name="GetVelocity"
				num_parameters="0"
				property="get"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Get the spring&apos;s velocity. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="computeAcceleration" name="ComputeAcceleration" num_parameters="1">
				<comments desc="Compute the spring&apos;s acceleration for the specified displacement. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocity" name="UpdateVelocity" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified displacement. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocityWithAcceleration" name="UpdateVelocityWithAcceleration" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified acceleration. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avAcc"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDampedSpring3" uuid1="70FE36F4-59C8-4590-A5A5-7DC737DBF874" uuid2="0x70fe36f4,0x59c8,0x4590,0xa5,0xa5,0x7d,0xc7,0x37,0xdb,0xf8,0x74">
			<comments desc="3D Damped spring interface. \see ni::DampedSpringAcceleration "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setKd"
				name="SetKd"
				num_parameters="1"
				property="set"
				property_name2="kd"
				property_name="kd">
				<comments desc="Set the Kd constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKd"
				name="GetKd"
				num_parameters="0"
				property="get"
				property_name2="kd"
				property_name="kd">
				<comments desc="Get the Kd constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setKs"
				name="SetKs"
				num_parameters="1"
				property="set"
				property_name2="ks"
				property_name="ks">
				<comments desc="Set the Ks constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKs"
				name="GetKs"
				num_parameters="0"
				property="get"
				property_name2="ks"
				property_name="ks">
				<comments desc="Get the Ks constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="setStiffnessAndDampingRatio" name="SetStiffnessAndDampingRatio" num_parameters="2">
				<comments desc="Set the value of Kd for the specified Ks that will result in a spring with the specified damping ratio. ">
					<remark text="Sets Ks with parameter&apos;s value, sets Kd in function of Ks. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afKs"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDampingRatio"
				name="SetDampingRatio"
				num_parameters="1"
				property="set"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Set the spring&apos;s damping ratio. ">
					<remark text="Sets Kd in function of the current value of Ks to achieve the specified damping ratio. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDampingRatio"
				name="GetDampingRatio"
				num_parameters="0"
				property="get"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Get the spring&apos;s damping ratio. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setVelocity"
				name="SetVelocity"
				num_parameters="1"
				property="set"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Set the spring&apos;s velocity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avVel"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVelocity"
				name="GetVelocity"
				num_parameters="0"
				property="get"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Get the spring&apos;s velocity. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="computeAcceleration" name="ComputeAcceleration" num_parameters="1">
				<comments desc="Compute the spring&apos;s acceleration for the specified displacement. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocity" name="UpdateVelocity" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified displacement. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocityWithAcceleration" name="UpdateVelocityWithAcceleration" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified acceleration. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avAcc"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDampedSpring4" uuid1="C37F3B6D-6BB6-4036-AE64-80F43C87C7B2" uuid2="0xc37f3b6d,0x6bb6,0x4036,0xae,0x64,0x80,0xf4,0x3c,0x87,0xc7,0xb2">
			<comments desc="4D Damped spring interface. \see ni::DampedSpringAcceleration "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setKd"
				name="SetKd"
				num_parameters="1"
				property="set"
				property_name2="kd"
				property_name="kd">
				<comments desc="Set the Kd constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKd"
				name="GetKd"
				num_parameters="0"
				property="get"
				property_name2="kd"
				property_name="kd">
				<comments desc="Get the Kd constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setKs"
				name="SetKs"
				num_parameters="1"
				property="set"
				property_name2="ks"
				property_name="ks">
				<comments desc="Set the Ks constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getKs"
				name="GetKs"
				num_parameters="0"
				property="get"
				property_name2="ks"
				property_name="ks">
				<comments desc="Get the Ks constant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="setStiffnessAndDampingRatio" name="SetStiffnessAndDampingRatio" num_parameters="2">
				<comments desc="Set the value of Kd for the specified Ks that will result in a spring with the specified damping ratio. ">
					<remark text="Sets Ks with parameter&apos;s value, sets Kd in function of Ks. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afKs"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDampingRatio"
				name="SetDampingRatio"
				num_parameters="1"
				property="set"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Set the spring&apos;s damping ratio. ">
					<remark text="Sets Kd in function of the current value of Ks to achieve the specified damping ratio. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afE"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDampingRatio"
				name="GetDampingRatio"
				num_parameters="0"
				property="get"
				property_name2="dampingRatio"
				property_name="damping_ratio">
				<comments desc="Get the spring&apos;s damping ratio. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setVelocity"
				name="SetVelocity"
				num_parameters="1"
				property="set"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Set the spring&apos;s velocity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avVel"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVelocity"
				name="GetVelocity"
				num_parameters="0"
				property="get"
				property_name2="velocity"
				property_name="velocity">
				<comments desc="Get the spring&apos;s velocity. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method java_name="computeAcceleration" name="ComputeAcceleration" num_parameters="1">
				<comments desc="Compute the spring&apos;s acceleration for the specified displacement. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocity" name="UpdateVelocity" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified displacement. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avD"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateVelocityWithAcceleration" name="UpdateVelocityWithAcceleration" num_parameters="2">
				<comments desc="Update the spring&apos;s velocity from the specified acceleration. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="avAcc"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDampedSpringPosition1" uuid1="58B648FE-1CC2-4398-B911-3C109F12CCE0" uuid2="0x58b648fe,0x1cc2,0x4398,0xb9,0x11,0x3c,0x10,0x9f,0x12,0xcc,0xe0">
			<comments desc="1D Damped spring position interface. "/>
			<parents>
				<parent name="iDampedSpring1"/>
			</parents>
			<method
				java_name="setIdealPosition"
				name="SetIdealPosition"
				num_parameters="1"
				property="set"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Set the ideal (target) position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getIdealPosition"
				name="GetIdealPosition"
				num_parameters="0"
				property="get"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Get the ideal (target) position of the spring. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setCurrentPosition"
				name="SetCurrentPosition"
				num_parameters="1"
				property="set"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Set the current position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentPosition"
				name="GetCurrentPosition"
				num_parameters="0"
				property="get"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Get the current position of the spring. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="updatePosition" name="UpdatePosition" num_parameters="1">
				<comments desc="Update the current position of the spring. " return="The current position of the spring. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStep"
				name="SetStep"
				num_parameters="1"
				property="set"
				property_name2="step"
				property_name="step">
				<comments desc="Set the maximum update step size. ">
					<remark text="Default is 1.0/50.0 "/>
					<remark text="If the step is zero the value is updated at once in UpdatePosition (effectivly disable step update) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStep"
				name="GetStep"
				num_parameters="0"
				property="get"
				property_name2="step"
				property_name="step">
				<comments desc="Get the update step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSpeed"
				name="SetSpeed"
				num_parameters="1"
				property="set"
				property_name2="speed"
				property_name="speed">
				<comments desc="Set the animation speed. ">
					<remark text="This value just multiplies afDeltaTime to ariticially speed up the spring&apos;s animation. "/>
					<remark text="Default is 1.0. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSpeed"
				name="GetSpeed"
				num_parameters="0"
				property="get"
				property_name2="speed"
				property_name="speed">
				<comments desc="Get the animation speed. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setEndThreshold"
				name="SetEndThreshold"
				num_parameters="1"
				property="set"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Set the end threshold. ">
					<remark text="Default is 1e-3f "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getEndThreshold"
				name="GetEndThreshold"
				num_parameters="0"
				property="get"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Get the end threshold. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getIsEnded"
				name="GetIsEnded"
				num_parameters="0"
				property="get"
				property_name2="isEnded"
				property_name="is_ended">
				<comments desc="Get the whether the distance between the ideal and the current positions are below the end threshold. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<interface name="iDampedSpringPosition2" uuid1="A842B5C6-3331-4A8A-81EB-F5F146F5AAC2" uuid2="0xa842b5c6,0x3331,0x4a8a,0x81,0xeb,0xf5,0xf1,0x46,0xf5,0xaa,0xc2">
			<comments desc="2D Damped spring position interface. "/>
			<parents>
				<parent name="iDampedSpring2"/>
			</parents>
			<method
				java_name="setIdealPosition"
				name="SetIdealPosition"
				num_parameters="1"
				property="set"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Set the ideal (target) position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIdealPosition"
				name="GetIdealPosition"
				num_parameters="0"
				property="get"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Get the ideal (target) position of the spring. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setCurrentPosition"
				name="SetCurrentPosition"
				num_parameters="1"
				property="set"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Set the current position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentPosition"
				name="GetCurrentPosition"
				num_parameters="0"
				property="get"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Get the current position of the spring. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="updatePosition" name="UpdatePosition" num_parameters="1">
				<comments desc="Update the current position of the spring. " return="The current position of the spring. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStep"
				name="SetStep"
				num_parameters="1"
				property="set"
				property_name2="step"
				property_name="step">
				<comments desc="Set the maximum update step size. ">
					<remark text="Default is 1.0/50.0 "/>
					<remark text="If the step is zero the value is updated at once in UpdatePosition (effectivly disable step update) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStep"
				name="GetStep"
				num_parameters="0"
				property="get"
				property_name2="step"
				property_name="step">
				<comments desc="Get the update step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSpeed"
				name="SetSpeed"
				num_parameters="1"
				property="set"
				property_name2="speed"
				property_name="speed">
				<comments desc="Set the animation speed. ">
					<remark text="This value just multiplies afDeltaTime to ariticially speed up the spring&apos;s animation. "/>
					<remark text="Default is 1.0. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSpeed"
				name="GetSpeed"
				num_parameters="0"
				property="get"
				property_name2="speed"
				property_name="speed">
				<comments desc="Get the animation speed. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setEndThreshold"
				name="SetEndThreshold"
				num_parameters="1"
				property="set"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Set the end threshold. ">
					<remark text="Default is 1e-3f "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getEndThreshold"
				name="GetEndThreshold"
				num_parameters="0"
				property="get"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Get the end threshold. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getIsEnded"
				name="GetIsEnded"
				num_parameters="0"
				property="get"
				property_name2="isEnded"
				property_name="is_ended">
				<comments desc="Get the whether the distance between the ideal and the current positions are below the end threshold. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<interface name="iDampedSpringPosition3" uuid1="1FB0297E-3D7D-4F26-A6D3-07831310461D" uuid2="0x1fb0297e,0x3d7d,0x4f26,0xa6,0xd3,0x07,0x83,0x13,0x10,0x46,0x1d">
			<comments desc="3D Damped spring position interface. "/>
			<parents>
				<parent name="iDampedSpring3"/>
			</parents>
			<method
				java_name="setIdealPosition"
				name="SetIdealPosition"
				num_parameters="1"
				property="set"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Set the ideal (target) position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIdealPosition"
				name="GetIdealPosition"
				num_parameters="0"
				property="get"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Get the ideal (target) position of the spring. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setCurrentPosition"
				name="SetCurrentPosition"
				num_parameters="1"
				property="set"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Set the current position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentPosition"
				name="GetCurrentPosition"
				num_parameters="0"
				property="get"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Get the current position of the spring. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="updatePosition" name="UpdatePosition" num_parameters="1">
				<comments desc="Update the current position of the spring. " return="The current position of the spring. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStep"
				name="SetStep"
				num_parameters="1"
				property="set"
				property_name2="step"
				property_name="step">
				<comments desc="Set the maximum update step size. ">
					<remark text="Default is 1.0/50.0 "/>
					<remark text="If the step is zero the value is updated at once in UpdatePosition (effectivly disable step update) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStep"
				name="GetStep"
				num_parameters="0"
				property="get"
				property_name2="step"
				property_name="step">
				<comments desc="Get the update step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSpeed"
				name="SetSpeed"
				num_parameters="1"
				property="set"
				property_name2="speed"
				property_name="speed">
				<comments desc="Set the animation speed. ">
					<remark text="This value just multiplies afDeltaTime to ariticially speed up the spring&apos;s animation. "/>
					<remark text="Default is 1.0. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSpeed"
				name="GetSpeed"
				num_parameters="0"
				property="get"
				property_name2="speed"
				property_name="speed">
				<comments desc="Get the animation speed. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setEndThreshold"
				name="SetEndThreshold"
				num_parameters="1"
				property="set"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Set the end threshold. ">
					<remark text="Default is 1e-3f "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getEndThreshold"
				name="GetEndThreshold"
				num_parameters="0"
				property="get"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Get the end threshold. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getIsEnded"
				name="GetIsEnded"
				num_parameters="0"
				property="get"
				property_name2="isEnded"
				property_name="is_ended">
				<comments desc="Get the whether the distance between the ideal and the current positions are below the end threshold. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<interface name="iDampedSpringPosition4" uuid1="466C694D-0E04-47EE-8A39-2ED31F0FC38C" uuid2="0x466c694d,0x0e04,0x47ee,0x8a,0x39,0x2e,0xd3,0x1f,0x0f,0xc3,0x8c">
			<comments desc="4D Damped spring position interface. "/>
			<parents>
				<parent name="iDampedSpring4"/>
			</parents>
			<method
				java_name="setIdealPosition"
				name="SetIdealPosition"
				num_parameters="1"
				property="set"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Set the ideal (target) position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIdealPosition"
				name="GetIdealPosition"
				num_parameters="0"
				property="get"
				property_name2="idealPosition"
				property_name="ideal_position">
				<comments desc="Get the ideal (target) position of the spring. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setCurrentPosition"
				name="SetCurrentPosition"
				num_parameters="1"
				property="set"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Set the current position of the spring. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentPosition"
				name="GetCurrentPosition"
				num_parameters="0"
				property="get"
				property_name2="currentPosition"
				property_name="current_position">
				<comments desc="Get the current position of the spring. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method java_name="updatePosition" name="UpdatePosition" num_parameters="1">
				<comments desc="Update the current position of the spring. " return="The current position of the spring. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="afDeltaTime"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStep"
				name="SetStep"
				num_parameters="1"
				property="set"
				property_name2="step"
				property_name="step">
				<comments desc="Set the maximum update step size. ">
					<remark text="Default is 1.0/50.0 "/>
					<remark text="If the step is zero the value is updated at once in UpdatePosition (effectivly disable step update) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStep"
				name="GetStep"
				num_parameters="0"
				property="get"
				property_name2="step"
				property_name="step">
				<comments desc="Get the maximum update step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSpeed"
				name="SetSpeed"
				num_parameters="1"
				property="set"
				property_name2="speed"
				property_name="speed">
				<comments desc="Set the animation speed. ">
					<remark text="This value just multiplies afDeltaTime to ariticially speed up the spring&apos;s animation. "/>
					<remark text="Default is 1.0. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSpeed"
				name="GetSpeed"
				num_parameters="0"
				property="get"
				property_name2="speed"
				property_name="speed">
				<comments desc="Get the animation speed. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setEndThreshold"
				name="SetEndThreshold"
				num_parameters="1"
				property="set"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Set the end threshold. ">
					<remark text="Default is 1e-3f "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afD"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getEndThreshold"
				name="GetEndThreshold"
				num_parameters="0"
				property="get"
				property_name2="endThreshold"
				property_name="end_threshold">
				<comments desc="Get the end threshold. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getIsEnded"
				name="GetIsEnded"
				num_parameters="0"
				property="get"
				property_name2="isEnded"
				property_name="is_ended">
				<comments desc="Get the whether the distance between the ideal and the current positions are below the end threshold. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IDrawOperation.h.idl.xml">
		<interface name="iDrawOperation" uuid1="7F9EAA80-03E5-4514-A162-A35386CF61EA" uuid2="0x7f9eaa80,0x03e5,0x4514,0xa1,0x62,0xa3,0x53,0x86,0xcf,0x61,0xea">
			<comments desc="Draw operation interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another draw operation. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDO"
					type="const iDrawOperation *"
					typec="const iDrawOperation*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this draw operation. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsCompiled"
				name="GetIsCompiled"
				num_parameters="0"
				property="get"
				property_name2="isCompiled"
				property_name="is_compiled">
				<comments desc="Return whether the draw operation is compiled (read-only) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setPriority"
				name="SetPriority"
				num_parameters="1"
				property="set"
				property_name2="priority"
				property_name="priority">
				<comments desc="Set the priority. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anPriority"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPriority"
				name="GetPriority"
				num_parameters="0"
				property="get"
				property_name2="priority"
				property_name="priority">
				<comments desc="Get the priority. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setVertexArray"
				name="SetVertexArray"
				num_parameters="1"
				property="set"
				property_name2="vertexArray"
				property_name="vertex_array">
				<comments desc="Set the vertex array. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apVertexArray"
					type="iVertexArray *"
					typec="iVertexArray*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVertexArray"
				name="GetVertexArray"
				num_parameters="0"
				property="get"
				property_name2="vertexArray"
				property_name="vertex_array">
				<comments desc="Get the vertex array. "/>
				<return type="iVertexArray *" typec="iVertexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPrimitiveType"
				name="SetPrimitiveType"
				num_parameters="1"
				property="set"
				property_name2="primitiveType"
				property_name="primitive_type">
				<comments desc="Set the primitive type. ">
					<remark text="The primtive type is relevant only if no index array has been set. "/>
					<remark text="If an index array is set the primitive type is read only, tying to set it will have no effect. The primitive type returned will be the one of the index array. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aPrim"
					type="eGraphicsPrimitiveType"
					typec="eGraphicsPrimitiveType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getPrimitiveType"
				name="GetPrimitiveType"
				num_parameters="0"
				property="get"
				property_name2="primitiveType"
				property_name="primitive_type">
				<comments desc="Get the primitive type. "/>
				<return type="eGraphicsPrimitiveType" typec="eGraphicsPrimitiveType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setIndexArray"
				name="SetIndexArray"
				num_parameters="1"
				property="set"
				property_name2="indexArray"
				property_name="index_array">
				<comments desc="Set the index array. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apIndexArray"
					type="iIndexArray *"
					typec="iIndexArray*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIndexArray"
				name="GetIndexArray"
				num_parameters="0"
				property="get"
				property_name2="indexArray"
				property_name="index_array">
				<comments desc="Get the index array. "/>
				<return type="iIndexArray *" typec="iIndexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFirstIndex"
				name="SetFirstIndex"
				num_parameters="1"
				property="set"
				property_name2="firstIndex"
				property_name="first_index">
				<comments desc="Set the first index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFirstIndex"
				name="GetFirstIndex"
				num_parameters="0"
				property="get"
				property_name2="firstIndex"
				property_name="first_index">
				<comments desc="Get the first index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNumIndices"
				name="SetNumIndices"
				num_parameters="1"
				property="set"
				property_name2="numIndices"
				property_name="num_indices">
				<comments desc="Set the number of indices. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumIndices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumIndices"
				name="GetNumIndices"
				num_parameters="0"
				property="get"
				property_name2="numIndices"
				property_name="num_indices">
				<comments desc="Get the number of indices. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setBaseVertexIndex"
				name="SetBaseVertexIndex"
				num_parameters="1"
				property="set"
				property_name2="baseVertexIndex"
				property_name="base_vertex_index">
				<comments desc="Set the base vertex index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anBaseVertexIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getBaseVertexIndex"
				name="GetBaseVertexIndex"
				num_parameters="0"
				property="get"
				property_name2="baseVertexIndex"
				property_name="base_vertex_index">
				<comments desc="Get the base vertex index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setMatrix"
				name="SetMatrix"
				num_parameters="1"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set the matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				name="GetMatrix"
				num_parameters="0"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get the matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setMaterial"
				name="SetMaterial"
				num_parameters="1"
				property="set"
				property_name2="material"
				property_name="material">
				<comments desc="Set the material. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apMaterial"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the material. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setLocalBoundingVolume"
				name="SetLocalBoundingVolume"
				num_parameters="1"
				property="set"
				property_name2="localBoundingVolume"
				property_name="local_bounding_volume">
				<comments desc="Set the bounding volume. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apBV"
					type="iBoundingVolume *"
					typec="iBoundingVolume*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalBoundingVolume"
				name="GetLocalBoundingVolume"
				num_parameters="0"
				property="get"
				property_name2="localBoundingVolume"
				property_name="local_bounding_volume">
				<comments desc="Get the bounding volume in local space. "/>
				<return type="iBoundingVolume *" typec="iBoundingVolume*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBoundingVolume"
				name="GetBoundingVolume"
				num_parameters="0"
				property="get"
				property_name2="boundingVolume"
				property_name="bounding_volume">
				<comments desc="Get the bounding volume in world space. "/>
				<return type="iBoundingVolume *" typec="iBoundingVolume*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCenter"
				name="GetCenter"
				num_parameters="0"
				property="get"
				property_name2="center"
				property_name="center">
				<comments desc="Get the center position. ">
					<remark text="The center position is the center of the bouding volume multiplied by the matrix. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getFVF"
				name="GetFVF"
				num_parameters="0"
				property="get"
				property_name2="fvf"
				property_name="fvf">
				<comments desc="Get the FVF of the draw operation. ">
					<remark text="Try to get the FVF from the material, if zero the FVF of the vertex array is returned. "/>
				</comments>
				<return type="tFVF" typec="tFVF" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IDrawOperationSet.h.idl.xml">
		<interface name="iDrawOperationSet" uuid1="C5CE498A-186A-49ED-992C-C00B3B65FB58" uuid2="0xc5ce498a,0x186a,0x49ed,0x99,0x2c,0xc0,0x0b,0x3b,0x65,0xfb,0x58">
			<comments desc="Draw operation set. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the operation set. ">
					<remark text="Invalidates the iterator "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="insert" name="Insert" num_parameters="1">
				<comments desc="Insert a draw operation in the set. " return="The draw operation inserted ">
					<remark text="Invalidates the iterator "/>
				</comments>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDO"
					type="iDrawOperation *"
					typec="iDrawOperation*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="insertSet" name="InsertSet" num_parameters="1">
				<comments desc="Insert another set in the set. ">
					<remark text="Invalidates the iterator "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSet"
					type="const iDrawOperationSet *"
					typec="const iDrawOperationSet*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumDrawOperations"
				name="GetNumDrawOperations"
				num_parameters="0"
				property="get"
				property_name2="numDrawOperations"
				property_name="num_draw_operations">
				<comments desc="Get the number of elements in the set. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="begin" name="Begin" num_parameters="0">
				<comments desc="Go to the first iterator and returns it. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="next" name="Next" num_parameters="0">
				<comments desc="Move to the next draw op and returns it. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="isEnd"
				name="IsEnd"
				num_parameters="0">
				<comments desc="Return eTrue if the iterator is the end of the set. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCurrent"
				name="GetCurrent"
				num_parameters="0"
				property="get"
				property_name2="current"
				property_name="current">
				<comments desc="Get the current iterator. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsEmpty"
				name="GetIsEmpty"
				num_parameters="0"
				property="get"
				property_name2="isEmpty"
				property_name="is_empty">
				<comments desc="Check whether the draw operation set is empty. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="draw" name="Draw" num_parameters="2">
				<comments desc="Draw all draw operation of the set with specified graphics context. ">
					<params text="apContext the context to draw to "/>
					<params text="apFrustum if specified frustum culling is applied to the draw operation that have a valid bounding volume "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="apContext"
					type="iGraphicsContext *"
					typec="iGraphicsContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFrustum"
					type="iFrustum *"
					typec="iFrustum*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="xdraw" name="XDraw" num_parameters="3">
				<comments desc="Draw all draw operation of the set with specified graphics context and matrix set on each draw op. ">
					<params text="aMatrix the matrix to set on the draw ops "/>
					<params text="apContext the context to draw to "/>
					<params text="apFrustum if specified frustum culling is applied to the draw operation that have a valid bounding volume "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apContext"
					type="iGraphicsContext *"
					typec="iGraphicsContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFrustum"
					type="iFrustum *"
					typec="iFrustum*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IFont.h.idl.xml">
		<enum name="eFontFormatFlags">
			<comments desc="Font format flags. "/>
			<value name="eFontFormatFlags_CenterH" value="niBit ( 0 ) ">
				<comments desc="Text will be horizontally centered. "/>
			</value>
			<value name="eFontFormatFlags_CenterV" value="niBit ( 1 ) ">
				<comments desc="Text will be vertically centered. "/>
			</value>
			<value name="eFontFormatFlags_Right" value="niBit ( 2 ) ">
				<comments desc="Text will be right aligned. "/>
			</value>
			<value name="eFontFormatFlags_Bottom" value="niBit ( 3 ) ">
				<comments desc="Text will be bottom aligned. "/>
			</value>
			<value name="eFontFormatFlags_ClipH" value="niBit ( 4 ) ">
				<comments desc="Clip text horizontally. "/>
			</value>
			<value name="eFontFormatFlags_ClipV" value="niBit ( 5 ) ">
				<comments desc="Clip text vertically. "/>
			</value>
			<value name="eFontFormatFlags_Border" value="niBit ( 6 ) ">
				<comments desc="Draw a border around the text. "/>
			</value>
			<value name="eFontFormatFlags_Kerning" value="niBit ( 7 ) ">
				<comments desc="Use kerning if available in the font. "/>
			</value>
			<value name="eFontFormatFlags_NoUnitSnap" value="niBit ( 8 ) ">
				<comments desc="Dont snap to the unit grid after layout. ">
					<remark text="Snapping is needed for pixel perfect text rendering, since if the text starts on a pixel fraction it will look blurry. Snapping is the default but you will want to turn it off if you&apos;re drawing animated text, text in a 3D space or you take care of the snapping yourself. "/>
				</comments>
			</value>
		</enum>
		<enum name="eFontLoadFlags">
			<comments desc="Get font flags. "/>
			<value name="eFontLoadFlags_Registered" value="niBit ( 0 ) ">
				<comments desc="Search in the registered fonts. "/>
			</value>
			<value name="eFontLoadFlags_SystemFirst" value="niBit ( 1 ) ">
				<comments desc="Search in the system fonts before searching in the registered fonts. "/>
			</value>
			<value name="eFontLoadFlags_SystemLast" value="niBit ( 2 ) ">
				<comments desc="Search in the system fonts after searching in the registered fonts. "/>
			</value>
			<value name="eFontLoadFlags_ClosestMatch" value="niBit ( 3 ) ">
				<comments desc="Look for the closest match in the name. ">
					<remark text="If not specified will look for exact match only. "/>
					<remark text="Match is always case insensitive. "/>
				</comments>
			</value>
			<value name="eFontLoadFlags_Bold" value="niBit ( 4 ) ">
				<comments desc="Get bold font. "/>
			</value>
			<value name="eFontLoadFlags_Italic" value="niBit ( 5 ) ">
				<comments desc="Get italic font. "/>
			</value>
			<value name="eFontLoadFlags_Default" value="eFontLoadFlags_Registered|eFontLoadFlags_SystemLast|eFontLoadFlags_ClosestMatch ">
				<comments desc="Default flags. "/>
			</value>
		</enum>
		<interface name="iFont" uuid1="4605C928-77BA-45DF-9505-184677E78692" uuid2="0x4605c928,0x77ba,0x45df,0x95,0x05,0x18,0x46,0x77,0xe7,0x86,0x92">
			<comments desc="Font interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the name of the font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFamilyName"
				name="GetFamilyName"
				num_parameters="0"
				property="get"
				property_name2="familyName"
				property_name="family_name">
				<comments desc="Get the family name of the font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStyleName"
				name="GetStyleName"
				num_parameters="0"
				property="get"
				property_name2="styleName"
				property_name="style_name">
				<comments desc="Get the style name of the font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFilePath"
				name="GetFilePath"
				num_parameters="0"
				property="get"
				property_name2="filePath"
				property_name="file_path">
				<comments desc="Get the file path of the font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsFixedResolution"
				name="GetIsFixedResolution"
				num_parameters="0"
				property="get"
				property_name2="isFixedResolution"
				property_name="is_fixed_resolution">
				<comments desc="Return eTrue if the pixel size if fixed. ">
					<remark text="Fixed size fonts are generaly bitmap fonts. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHasKerning"
				name="GetHasKerning"
				num_parameters="0"
				property="get"
				property_name2="hasKerning"
				property_name="has_kerning">
				<comments desc="Return eTrue if the font has kerning informations. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMaxResolution"
				name="GetMaxResolution"
				num_parameters="0"
				property="get"
				property_name2="maxResolution"
				property_name="max_resolution">
				<comments desc="Return the maximum pixel size. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsInstance"
				name="GetIsInstance"
				num_parameters="0"
				property="get"
				property_name2="isInstance"
				property_name="is_instance">
				<comments desc="Return eTrue if this font is an instance. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="createFontInstance" name="CreateFontInstance" num_parameters="1">
				<comments desc="Create an instance of this font. ">
					<params text="apMaterial is the material that the font will use instead of creating its own. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apMaterial"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setTabSize"
				name="SetTabSize"
				num_parameters="1"
				property="set"
				property_name2="tabSize"
				property_name="tab_size">
				<comments desc="Set the tabulation size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ulNumChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTabSize"
				name="GetTabSize"
				num_parameters="0"
				property="get"
				property_name2="tabSize"
				property_name="tab_size">
				<comments desc="Get the tabulation size. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setFiltering"
				name="SetFiltering"
				num_parameters="1"
				property="set"
				property_name2="filtering"
				property_name="filtering">
				<comments desc="Set the filtering mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abLinear"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFiltering"
				name="GetFiltering"
				num_parameters="0"
				property="get"
				property_name2="filtering"
				property_name="filtering">
				<comments desc="Get the filtering mode. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setColor"
				name="SetColor"
				num_parameters="1"
				property="set"
				property_name2="color"
				property_name="color">
				<comments desc="Set the default font color. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColor"
				name="GetColor"
				num_parameters="0"
				property="get"
				property_name2="color"
				property_name="color">
				<comments desc="Get the default font color. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setBlendMode"
				name="SetBlendMode"
				num_parameters="1"
				property="set"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Set the blending mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBlendMode"
				name="GetBlendMode"
				num_parameters="0"
				property="get"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Get the blending mode. "/>
				<return type="eBlendMode" typec="eBlendMode" typei="ni::eType_Enum"/>
			</method>
			<method java_name="setSizeAndResolution" name="SetSizeAndResolution" num_parameters="3">
				<comments desc="Set the font size and resolution taking into account the contents scale. ">
					<remark text="If the avSize is (0,0) the size set is the resolution. Note that the effective resolution set will be modified by the contents scale, so GetResolution() will not always return anResolution. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anResolution"
					type="const tU32"
					typec="const tU32"
					typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getResolution"
				name="GetResolution"
				num_parameters="0"
				property="get"
				property_name2="resolution"
				property_name="resolution">
				<comments desc="Get the character&apos;s resolution. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the character rendering size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setDistanceField"
				name="SetDistanceField"
				num_parameters="1"
				property="set"
				property_name2="distanceField"
				property_name="distance_field">
				<comments desc="Set whether the glyphs are using a distance field. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abDistanceField"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDistanceField"
				name="GetDistanceField"
				num_parameters="0"
				property="get"
				property_name2="distanceField"
				property_name="distance_field">
				<comments desc="Get whether the glyphs are using a distance field. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCharWidth"
				name="GetCharWidth"
				num_parameters="1"
				property="get"
				property_name2="charWidth"
				property_name="char_width">
				<comments desc="Return the width of a character. ">
					<remark text="Passing zero will return the default width. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="c"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCharHeight"
				name="GetCharHeight"
				num_parameters="1"
				property="get"
				property_name2="charHeight"
				property_name="char_height">
				<comments desc="Return the height of a character. ">
					<remark text="Passing zero will return the default height. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="c"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxCharWidth"
				name="GetMaxCharWidth"
				num_parameters="0"
				property="get"
				property_name2="maxCharWidth"
				property_name="max_char_width">
				<comments desc="Return the maximum char width. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxCharHeight"
				name="GetMaxCharHeight"
				num_parameters="0"
				property="get"
				property_name2="maxCharHeight"
				property_name="max_char_height">
				<comments desc="Return the maximum char height. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAverageCharWidth"
				name="GetAverageCharWidth"
				num_parameters="0"
				property="get"
				property_name2="averageCharWidth"
				property_name="average_char_width">
				<comments desc="Return the average char width. ">
					<remark text="Generally defined as the width of the letter x. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAverageCharHeight"
				name="GetAverageCharHeight"
				num_parameters="0"
				property="get"
				property_name2="averageCharHeight"
				property_name="average_char_height">
				<comments desc="Return the average char height. ">
					<remark text="Generally defined as the height of the letter x. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAscent"
				name="GetAscent"
				num_parameters="0"
				property="get"
				property_name2="ascent"
				property_name="ascent">
				<comments desc="Get the ascent (units above the base line) of characters. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDescent"
				name="GetDescent"
				num_parameters="0"
				property="get"
				property_name2="descent"
				property_name="descent">
				<comments desc="Get the descent (units below the base line) of characters. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the height of the font (ascent + descent + linegap). "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFirstChar"
				name="GetFirstChar"
				num_parameters="0"
				property="get"
				property_name2="firstChar"
				property_name="first_char">
				<comments desc="Get the value of the first character defined in the font. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLastChar"
				name="GetLastChar"
				num_parameters="0"
				property="get"
				property_name2="lastChar"
				property_name="last_char">
				<comments desc="Get the value of the last character defined in the font. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getAdvance"
				name="GetAdvance"
				num_parameters="1">
				<comments desc="Get the advance for the specified character. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getKerning"
				name="GetKerning"
				num_parameters="2">
				<comments desc="Get the kerning for the specified character. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="anPrevChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setLineSpacing"
				name="SetLineSpacing"
				num_parameters="1"
				property="set"
				property_name2="lineSpacing"
				property_name="line_spacing">
				<comments desc="Set the normalized line spacing. ">
					<remark text="The "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSpacing"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getLineSpacing"
				name="GetLineSpacing"
				num_parameters="0"
				property="get"
				property_name2="lineSpacing"
				property_name="line_spacing">
				<comments desc="Get the normalized spacing a line. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getLineHeight"
				name="GetLineHeight"
				num_parameters="0"
				property="get"
				property_name2="lineHeight"
				property_name="line_height">
				<comments desc="Get the a line&apos;s height. ">
					<remark text="GetHeight() * GetLineSpacing() "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="cacheText" name="CacheText" num_parameters="1">
				<comments desc="Cache the caracters contained in the passed string. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="cacheRange" name="CacheRange" num_parameters="2">
				<comments desc="Cache a range of character. ">
					<remark text="First and Last will be included in the cache. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anFirst"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anLast"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clearCache" name="ClearCache" num_parameters="0">
				<comments desc="Clear the glyph and texture caches. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCacheID"
				name="GetCacheID"
				num_parameters="0"
				property="get"
				property_name2="cacheID"
				property_name="cache_id">
				<comments desc="Get the ID of the current cache. ">
					<remark text="The cache ID changes every time the cache is cleared. "/>
					<remark text="The ID can be used to detect changes in the font cache. For example to relayout geometries that depend on the font&apos;s internal texture cache. "/>
				</comments>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the material used for the font&apos;s rendering. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCharTexCoo"
				name="GetCharTexCoo"
				num_parameters="1"
				property="get"
				property_name2="charTexCoo"
				property_name="char_tex_coo">
				<comments desc="Get the texture coordinate of a character. ">
					<remark text="This has the side effect of caching the characters. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="c"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCharTexture"
				name="GetCharTexture"
				num_parameters="1"
				property="get"
				property_name2="charTexture"
				property_name="char_texture">
				<comments desc="Get the texture in which the specified glyph is cached. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCharBitmap"
				name="GetCharBitmap"
				num_parameters="1"
				property="get"
				property_name2="charBitmap"
				property_name="char_bitmap">
				<comments desc="Get the bitmaps in which the specified glyph is cached. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitChar" name="BlitChar" num_parameters="4">
				<comments desc="Blit a character to the specified bitmap using the pixel size. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					name="apBmp"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anX"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anY"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitCharStretch" name="BlitCharStretch" num_parameters="4">
				<comments desc="Blit a character to the specified bitmap to the current font size. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					name="apBmp"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anX"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anY"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="blitCharEx" name="BlitCharEx" num_parameters="7">
				<comments desc="Blit a character to the specified bitmap with the specified size and blend mode. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					name="apBmp"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anX"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anY"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anH"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="computeTextSize" name="ComputeTextSize" num_parameters="3">
				<comments desc="Compute text size in pixels. ">
					<params text="aRect: If not Null the rectangle will be used as &apos;target&apos; box where the text should be drawn, the compted text will take into account word wrapping, etc. in that box. "/>
					<params text="aaszText is the text to compute the size of. "/>
					<params text="aFormat: if 0 the format flags set is used, else the specified format is used. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFormat"
					type="tFontFormatFlags"
					typec="tFontFormatFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="drawText" name="DrawText" num_parameters="5">
				<comments desc="Draw text layed out in the specified rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					name="apCanvas"
					type="ni::iCanvas *"
					typec="ni::iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aposRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFormat"
					type="tFontFormatFlags"
					typec="tFontFormatFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getGlyphIndexFromName"
				name="GetGlyphIndexFromName"
				num_parameters="1"
				property="get"
				property_name2="glyphIndexFromName"
				property_name="glyph_index_from_name">
				<comments desc="Get the glyph index from its name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGlyphIndexFromCodepoint"
				name="GetGlyphIndexFromCodepoint"
				num_parameters="1"
				property="get"
				property_name2="glyphIndexFromCodepoint"
				property_name="glyph_index_from_codepoint">
				<comments desc="Get the glyph index from its codepoint. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anCodepoint"
					type="const tU32"
					typec="const tU32"
					typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getGlyphName"
				name="GetGlyphName"
				num_parameters="1"
				property="get"
				property_name2="glyphName"
				property_name="glyph_name">
				<comments desc="Get the glyph name from its codepoint. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="anGlyphIndex"
					type="const tU32"
					typec="const tU32"
					typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="enumGlyphs"
				name="EnumGlyphs"
				num_parameters="0">
				<comments desc="Enumerate all the glyphs with a codepoint in the font. " return="Map&lt;GlyphIndex:tU32,Codepoint:tU32&gt; "/>
				<return type="Ptr&lt;tU32CMap&gt;" typec="Ptr&lt;tU32CMap&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGlyphCodePointFromName"
				name="GetGlyphCodePointFromName"
				num_parameters="1"
				property="get"
				property_name2="glyphCodePointFromName"
				property_name="glyph_code_point_from_name">
				<comments desc="Get the glyph&apos;s codepoint from its name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGlyphPath"
				name="GetGlyphPath"
				num_parameters="4">
				<comments desc="Get a glyph&apos;s outline to the specified path. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="apPath"
					type="iVGPath *"
					typec="iVGPath*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anGlyphIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avOffset"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IFrustum.h.idl.xml">
		<enum name="eFrustumPlane">
			<comments desc="Frustum planes. "/>
			<value name="eFrustumPlane_Left" value="0 ">
				<comments desc="Left frustum plane. "/>
			</value>
			<value name="eFrustumPlane_Right" value="1 ">
				<comments desc="Right frustum plane. "/>
			</value>
			<value name="eFrustumPlane_Top" value="2 ">
				<comments desc="Top frustum plane. "/>
			</value>
			<value name="eFrustumPlane_Bottom" value="3 ">
				<comments desc="Bottom frustum plane. "/>
			</value>
			<value name="eFrustumPlane_Near" value="4 ">
				<comments desc="Near frustum plane. "/>
			</value>
			<value name="eFrustumPlane_Far" value="5 ">
				<comments desc="Far frustum plane. "/>
			</value>
		</enum>
		<enum name="eCullCode">
			<comments desc="Value return by the culling functions. "/>
			<value name="eCullCode_Out" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eCullCode_In" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eCullCode_Intersect" value="2">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iFrustum" uuid1="6CFE2B98-B883-4344-AA1C-A7BC56817D64" uuid2="0x6cfe2b98,0xb883,0x4344,0xaa,0x1c,0xa7,0xbc,0x56,0x81,0x7d,0x64">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Create a copy of this object. "/>
				<return type="iFrustum *" typec="iFrustum*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the given frustum. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apSrc"
					type="const iFrustum *"
					typec="const iFrustum*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getForward"
				name="GetForward"
				num_parameters="0"
				property="get"
				property_name2="forward"
				property_name="forward">
				<comments desc="Get the forward vector of the frustum. ">
					<remark text="The forward vector of the frustum is the normal of the near plane. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getUp"
				name="GetUp"
				num_parameters="0"
				property="get"
				property_name2="up"
				property_name="up">
				<comments desc="Get the up vector of the frustum. ">
					<remark text="The up vector of the frustum is the cross product between the left and right frustum planes. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getRight"
				name="GetRight"
				num_parameters="0"
				property="get"
				property_name2="right"
				property_name="right">
				<comments desc="Get the right vector of the frustum. ">
					<remark text="The right vector of the frustum is the cross product between the top and bottom frustum planes. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="extractPlanes" name="ExtractPlanes" num_parameters="1">
				<comments desc="Extract the planes from a view projection matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="mtxVP"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setNumPlanes"
				name="SetNumPlanes"
				num_parameters="1"
				property="set"
				property_name2="numPlanes"
				property_name="num_planes">
				<comments desc="Set the number of plane in the frustum. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ulNumPlane"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumPlanes"
				name="GetNumPlanes"
				num_parameters="0"
				property="get"
				property_name2="numPlanes"
				property_name="num_planes">
				<comments desc="Get the number of planes in the frustum. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="addPlanes"
				name="AddPlanes"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Add the given number of planes to the frustum. "/>
				<return type="void" typec="void"/>
				<parameter name="aulNumPlane" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="apPlanes"
					type="const sPlanef *"
					typec="const sPlanef*"/>
			</method>
			<method java_name="addPlane" name="AddPlane" num_parameters="1">
				<comments desc="Add one plane to the frustum. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aPlane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPlanes"
				name="SetPlanes"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Set all planes of the frustum. "/>
				<return type="void" typec="void"/>
				<parameter name="aulNumPlane" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="apPlanes"
					type="const sPlanef *"
					typec="const sPlanef*"/>
			</method>
			<method
				java_name="setPlane"
				name="SetPlane"
				num_parameters="2"
				property="set"
				property_name2="plane"
				property_name="plane">
				<comments desc="Set the plane of the given index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="ulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPlane"
				name="GetPlane"
				num_parameters="1"
				property="get"
				property_name2="plane"
				property_name="plane">
				<comments desc="Get the plane of the given index. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="ulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPlanes"
				name="GetPlanes"
				noautomation="yes"
				num_parameters="0">
				<comments desc="Get all planes. "/>
				<return type="sPlanef *" typec="sPlanef*"/>
			</method>
			<method
				const="yes"
				java_name="cullAABB"
				name="CullAABB"
				num_parameters="2">
				<comments desc="Cull an AABB. "/>
				<return type="eCullCode" typec="eCullCode" typei="ni::eType_Enum"/>
				<parameter
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="intersectAABB"
				name="IntersectAABB"
				num_parameters="2">
				<comments desc="Check if the given AABB is in the frustum. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="cullSphere"
				name="CullSphere"
				num_parameters="2">
				<comments desc="Cull a sphere. "/>
				<return type="eCullCode" typec="eCullCode" typei="ni::eType_Enum"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="intersectSphere"
				name="IntersectSphere"
				num_parameters="2">
				<comments desc="Check if the given sphere is in the frustum. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="transform" name="Transform" num_parameters="1">
				<comments desc="Transform the frustum by the given matrix. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="computeScreenBoundingBox" name="ComputeScreenBoundingBox" num_parameters="2">
				<comments desc="Compute the screen bounding box. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					name="amtxWVP"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aViewport"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setBoundingVolume"
				name="SetBoundingVolume"
				num_parameters="1"
				property="set"
				property_name2="boundingVolume"
				property_name="bounding_volume">
				<comments desc="Set the world bounding volume. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apBV"
					type="iBoundingVolume *"
					typec="iBoundingVolume*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBoundingVolume"
				name="GetBoundingVolume"
				num_parameters="0"
				property="get"
				property_name2="boundingVolume"
				property_name="bounding_volume">
				<comments desc="Get the world bounding volume. "/>
				<return type="iBoundingVolume *" typec="iBoundingVolume*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGeometry.h.idl.xml">
		<enum name="eGeometryGenerate">
			<comments desc="Geometry generation. "/>
			<value name="eGeometryGenerate_Adjacency" value="niBit ( 0 ) ">
				<comments desc="Generate adjacency informations. "/>
			</value>
			<value name="eGeometryGenerate_FlatNormals" value="niBit ( 1 ) ">
				<comments desc="Generate flat normals. "/>
			</value>
			<value name="eGeometryGenerate_Normals" value="niBit ( 2 ) ">
				<comments desc="Generate the normals (overrirde flat normals computation). "/>
			</value>
		</enum>
		<enum name="eGeometryType">
			<comments desc="Geometry types. "/>
			<value name="eGeometryType_Polygonal" value="0 ">
				<comments desc="Polygonal geometry. "/>
			</value>
			<value name="eGeometryType_Patch" value="1 ">
				<comments desc="Patch geometry. "/>
			</value>
			<value name="eGeometryType_Progressive" value="2 ">
				<comments desc="Progressive geometry. "/>
			</value>
		</enum>
		<enum name="eGeometryCreateFlags">
			<comments desc="Geometry creation flags. "/>
			<value name="eGeometryCreateFlags_VADynamic" value="niBit ( 0 ) ">
				<comments desc="The vertex array usage is dynamic. "/>
			</value>
			<value name="eGeometryCreateFlags_VADynamicReadWrite" value="niBit ( 1 ) ">
				<comments desc="The vertex array usage is dynamic read write. "/>
			</value>
			<value name="eGeometryCreateFlags_VAStatic" value="niBit ( 2 ) ">
				<comments desc="The vertex array usage is static. "/>
			</value>
			<value name="eGeometryCreateFlags_VASystemMemory" value="niBit ( 3 ) ">
				<comments desc="The vertex array usage is system memory. "/>
			</value>
			<value name="eGeometryCreateFlags_IADynamic" value="niBit ( 4 ) ">
				<comments desc="The index array usage is dynamic. "/>
			</value>
			<value name="eGeometryCreateFlags_IADynamicReadWrite" value="niBit ( 5 ) ">
				<comments desc="The index array usage is dynamic read write. "/>
			</value>
			<value name="eGeometryCreateFlags_IAStatic" value="niBit ( 6 ) ">
				<comments desc="The index array usage is static. "/>
			</value>
			<value name="eGeometryCreateFlags_IASystemMemory" value="niBit ( 7 ) ">
				<comments desc="The index array usage is system memory. "/>
			</value>
			<value name="eGeometryCreateFlags_Dynamic" value="eGeometryCreateFlags_VADynamic|eGeometryCreateFlags_IADynamic ">
				<comments desc="The vertex array and index array usage is dynamic. "/>
			</value>
			<value name="eGeometryCreateFlags_DynamicReadWrite" value="eGeometryCreateFlags_VADynamicReadWrite|eGeometryCreateFlags_IADynamicReadWrite ">
				<comments desc="The vertex array and index array usage is dynamic read write. "/>
			</value>
			<value name="eGeometryCreateFlags_Static" value="eGeometryCreateFlags_VAStatic|eGeometryCreateFlags_IAStatic ">
				<comments desc="The vertex array and index array usage is static. "/>
			</value>
			<value name="eGeometryCreateFlags_SystemMemory" value="eGeometryCreateFlags_VASystemMemory|eGeometryCreateFlags_IASystemMemory ">
				<comments desc="The vertex array and index array usage is system memory. "/>
			</value>
		</enum>
		<enum name="eGeometryOptimizeFlags">
			<comments desc="Geometry optimization flags. "/>
			<value name="eGeometryOptimizeFlags_RemoveDegenerates" value="niBit ( 0 ) ">
				<comments desc="Remove degenerate triangles. "/>
			</value>
			<value name="eGeometryOptimizeFlags_RemoveUnusedVertices" value="niBit ( 1 ) ">
				<comments desc="Remove unused vertices. "/>
			</value>
			<value name="eGeometryOptimizeFlags_RemoveDuplicateVertices" value="niBit ( 2 ) ">
				<comments desc="Remove duplicate vertices. "/>
			</value>
			<value name="eGeometryOptimizeFlags_Default" value="eGeometryOptimizeFlags_RemoveDegenerates|eGeometryOptimizeFlags_RemoveUnusedVertices ">
				<comments desc="Default. "/>
			</value>
			<value name="eGeometryOptimizeFlags_All" value="eGeometryOptimizeFlags_RemoveDegenerates|eGeometryOptimizeFlags_RemoveUnusedVertices|eGeometryOptimizeFlags_RemoveDuplicateVertices ">
				<comments desc="Default. "/>
			</value>
		</enum>
		<interface name="iGeometrySubset" uuid1="0F4EA1E3-4C09-44B8-A04D-954C72A86075" uuid2="0x0f4ea1e3,0x4c09,0x44b8,0xa0,0x4d,0x95,0x4c,0x72,0xa8,0x60,0x75">
			<comments desc="Geometry subset interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setID"
				name="SetID"
				num_parameters="1"
				property="set"
				property_name2="id"
				property_name="id">
				<comments desc="Set the ID of the subset. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getID"
				name="GetID"
				num_parameters="0"
				property="get"
				property_name2="id"
				property_name="id">
				<comments desc="Get the ID of the subset. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setFirstIndex"
				name="SetFirstIndex"
				num_parameters="1"
				property="set"
				property_name2="firstIndex"
				property_name="first_index">
				<comments desc="Set the first index of the subset. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFirstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFirstIndex"
				name="GetFirstIndex"
				num_parameters="0"
				property="get"
				property_name2="firstIndex"
				property_name="first_index">
				<comments desc="Get the first index of the subset. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNumIndices"
				name="SetNumIndices"
				num_parameters="1"
				property="set"
				property_name2="numIndices"
				property_name="num_indices">
				<comments desc="Set the number of indices of the subset. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumIndices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumIndices"
				name="GetNumIndices"
				num_parameters="0"
				property="get"
				property_name2="numIndices"
				property_name="num_indices">
				<comments desc="Get the number of indices of the subset. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setMaterial"
				name="SetMaterial"
				num_parameters="1"
				property="set"
				property_name2="material"
				property_name="material">
				<comments desc="Set the material ID of the subset. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMaterial"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the material ID of the subset. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iGeometry" uuid1="95CFA251-70ED-4F5D-9422-23FAB6C0C7CE" uuid2="0x95cfa251,0x70ed,0x4f5d,0x94,0x22,0x23,0xfa,0xb6,0xc0,0xc7,0xce">
			<comments desc="Geometry base interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Geometry type. "/>
				<return type="eGeometryType" typec="eGeometryType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getVertexArray"
				name="GetVertexArray"
				num_parameters="0"
				property="get"
				property_name2="vertexArray"
				property_name="vertex_array">
				<comments desc="Get the constant vertex array of this geometry. "/>
				<return type="iVertexArray *" typec="iVertexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIndexArray"
				name="GetIndexArray"
				num_parameters="0"
				property="get"
				property_name2="indexArray"
				property_name="index_array">
				<comments desc="Get the constant index array of this geometry. "/>
				<return type="iIndexArray *" typec="iIndexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="generate" name="Generate" num_parameters="2">
				<comments desc="Generate the specified things. " return="eFalse if generation failed, else eTrue. ">
					<params text="aGenerate indicate what to generate. "/>
					<params text="fEpsilon: specifies that vertices that differ in position by less than epsilon should be treated as coincident. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aGenerate"
					type="eGeometryGenerate"
					typec="eGeometryGenerate"
					typei="ni::eType_Enum"/>
				<parameter
					default="niEpsilon4 "
					last="1"
					name="fEpsilon"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getNumFaces"
				name="GetNumFaces"
				num_parameters="0"
				property="get"
				property_name2="numFaces"
				property_name="num_faces">
				<comments desc="Get the number of face contained in the mesh. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="setFacesSubsetsIDs" name="SetFacesSubsetsIDs" num_parameters="1">
				<comments desc="Set the faces subset&apos;s IDs. ">
					<remark text="this is used by the rendering optimizer to generate subsets. "/>
					<params text="apIDs is an array of subset id, it must have a size of GetNumFaces(). "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apIDs"
					type="const tU32 *"
					typec="const tU32*"
					typei="ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFacesSubsetsIDs"
				name="GetFacesSubsetsIDs"
				noautomation="yes"
				num_parameters="0">
				<comments desc="Get the faces subsets IDs. " return="NULL if the no faces subset&apos;s IDs have been set, else return an array of GetNumFaces() subset&apos;s IDs. "/>
				<return type="const tU32 *" typec="const tU32*"/>
			</method>
			<method
				const="yes"
				java_name="getAdjacencyArray"
				name="GetAdjacencyArray"
				noautomation="yes"
				num_parameters="0">
				<comments desc="Get the adjacency array. " return="NULL if the adjacency array hasn&apos;t been generated. ">
					<remark text="The size of the adjacency array is 3*GetNumFaces() "/>
				</comments>
				<return type="const tU32 *" typec="const tU32*"/>
			</method>
			<method
				const="yes"
				java_name="getNumSubsets"
				name="GetNumSubsets"
				num_parameters="0"
				property="get"
				property_name2="numSubsets"
				property_name="num_subsets">
				<comments desc="Get the number of subsets. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSubset"
				name="GetSubset"
				num_parameters="1"
				property="get"
				property_name2="subset"
				property_name="subset">
				<comments desc="Get the subset at the specified index. " return="NULL if the index is invalid, else return a pointer to the subset at the specified index. "/>
				<return type="iGeometrySubset *" typec="iGeometrySubset*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSubsetIndex"
				name="GetSubsetIndex"
				num_parameters="1"
				property="get"
				property_name2="subsetIndex"
				property_name="subset_index">
				<comments desc="Get the index of the subset with the specified ID. " return="eInvalidHandle if a subset with the specified ID doesn&apos;t exists, else return the index of the first subset found that has the given ID. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aulID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="addSubset" name="AddSubset" num_parameters="4">
				<comments desc="Add a subset. "/>
				<return type="iGeometrySubset *" typec="iGeometrySubset*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anFirstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anNumIndices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anMaterial"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="removeSubset" name="RemoveSubset" num_parameters="1">
				<comments desc="Remove the subset at the given index. " return="eFalse if the subset index is invalid, else remove the subset and return eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clone" name="Clone" num_parameters="2">
				<comments desc="Create a copy of this geometry. " return="NULL if the new geometry can&apos;t be created, else return an instance of a new geometry. ">
					<params text="aFlags are the creation flags of the new geometry. "/>
					<params text="aFVF: if not NULL it&apos;s used as the new vertex format to use for the new geometry. "/>
				</comments>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					default="0 "
					last="1"
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setDrawOp" name="SetDrawOp" num_parameters="2">
				<comments desc="Set the specified draw operation to draw the specified subset. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDrawOp"
					type="iDrawOperation *"
					typec="iDrawOperation*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aulSubsetIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="optimize" name="Optimize" num_parameters="1">
				<comments desc="Optimize the mesh. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFlags"
					type="tGeometryOptimizeFlags"
					typec="tGeometryOptimizeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface name="iGeometryModifier" uuid1="26CE1E18-D0D7-46E6-BD9F-C2057629DCA6" uuid2="0x26ce1e18,0xd0d7,0x46e6,0xbd,0x9f,0xc2,0x05,0x76,0x29,0xdc,0xa6">
			<comments desc="Geometry modifier interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setGeometry"
				name="SetGeometry"
				num_parameters="1"
				property="set"
				property_name2="geometry"
				property_name="geometry">
				<comments desc="Set the geometry to modify. " return="eFalse if the given geometry can&apos;t be modified, else return eTrue. ">
					<remark text="This may initialize some internal data specific to the modifer and to the geometry that&apos;s gonna be modified. So this function is considered as slow. That&apos;s why a modifier should be created for each geometry. "/>
					<remark text="If SetGeometry() is recalled with the same geometry as set, to indicate that some data of the geometry have been modified. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="pGeometry"
					type="iGeometry *"
					typec="iGeometry*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGeometry"
				name="GetGeometry"
				num_parameters="0"
				property="get"
				property_name2="geometry"
				property_name="geometry">
				<comments desc="Get the constant geometry that this modifier modifies. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getModifiedGeometry"
				name="GetModifiedGeometry"
				num_parameters="0"
				property="get"
				property_name2="modifiedGeometry"
				property_name="modified_geometry">
				<comments desc="Return the modified geometry. " return="NULL if the modified geometry has not been generated correctly, else a pointer to a valid geometry instance. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="update" name="Update" num_parameters="0">
				<comments desc="Update the modified geometry. ">
					<remark text="This function really do the modification. The modification is done only if it&apos;s necessary. "/>
					<remark text="Should be called after a parameter is changed or the input geometry is changed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGpu.h.idl.xml">
		<enum name="eGpuBufferMemoryMode">
			<comments desc="GPU Buffer memory mode "/>
			<value name="eGpuBufferMemoryMode_Shared" value="0 ">
				<comments desc="Default shared memory between CPU &amp; GPU, best for dynamic resources that are updated frequently by the CPU. "/>
			</value>
			<value name="eGpuBufferMemoryMode_Private" value="1 ">
				<comments desc="Memory only accessible by GPU, optimal for static resources that won&apos;t change after initialization. ">
					<remark text="Lock() with private buffers always fails and return nullptr. You should use CreateGpuBufferFromData to initialize them. "/>
				</comments>
			</value>
			<value name="eGpuBufferMemoryMode_Managed" value="2 ">
				<comments desc="Defines a synchronized memory pair for a resource, with one copy in system memory and another in video memory. Managed resources benefit from fast CPU and GPU access to each copy of the resource, with minimal API calls needed to synchronize these copies. ">
					<remark text="Lock() returns a pointer to the system memory, Unlock synchronizes it with the GPU. "/>
					<remark text="To copy the GPU version of the buffer to the system memory you must use iGraphicsDriverGpu::BlitGpuBufferToSystemMemory(). "/>
				</comments>
			</value>
			<value name="eGpuBufferMemoryMode_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGpuBufferUsageFlags">
			<comments desc="GPU Buffer usage flags "/>
			<value name="eGpuBufferUsageFlags_Vertex" value="niBit ( 0 ) ">
				<comments desc="Can be used as vertex buffer "/>
			</value>
			<value name="eGpuBufferUsageFlags_Index" value="niBit ( 1 ) ">
				<comments desc="Can be used as index buffer "/>
			</value>
			<value name="eGpuBufferUsageFlags_Uniform" value="niBit ( 2 ) ">
				<comments desc="Can be used as uniform buffer "/>
			</value>
			<value name="eGpuBufferUsageFlags_Storage" value="niBit ( 3 ) ">
				<comments desc="Can be used as storage buffer "/>
			</value>
			<value name="eGpuBufferUsageFlags_Indirect" value="niBit ( 4 ) ">
				<comments desc="Can be used as indirect buffer "/>
			</value>
			<value name="eGpuBufferUsageFlags_TransferSrc" value="niBit ( 5 ) ">
				<comments desc="Source for transfer operations "/>
			</value>
			<value name="eGpuBufferUsageFlags_TransferDst" value="niBit ( 6 ) ">
				<comments desc="Destination for transfer operations "/>
			</value>
			<value name="eGpuBufferUsageFlags_Last" value="8 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iGpuBuffer" uuid1="64A75FF7-630A-FA48-8C23-C3B6519C0471" uuid2="0x64a75ff7,0x630a,0xfa48,0x8c,0x23,0xc3,0xb6,0x51,0x9c,0x04,0x71">
			<comments desc="GPU Buffer interface. "/>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size of the buffer. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMemoryMode"
				name="GetMemoryMode"
				num_parameters="0"
				property="get"
				property_name2="memoryMode"
				property_name="memory_mode">
				<comments desc="Get the memory mode of the buffer. "/>
				<return type="eGpuBufferMemoryMode" typec="eGpuBufferMemoryMode" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getUsageFlags"
				name="GetUsageFlags"
				num_parameters="0"
				property="get"
				property_name2="usageFlags"
				property_name="usage_flags">
				<comments desc="Get the usage flags of the buffer. "/>
				<return type="tGpuBufferUsageFlags" typec="tGpuBufferUsageFlags" typei="ni::eType_Enum"/>
			</method>
			<method java_name="lock" name="Lock" num_parameters="3">
				<comments desc="Lock buffer memory for CPU access. " return="a pointer to the buffer data. ">
					<params text="anOffset is the offset in the buffer data. "/>
					<params text="anSize is the size to lock. "/>
					<params text="aLock specify to locking mode. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aLock"
					type="eLock"
					typec="eLock"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="unlock" name="Unlock" num_parameters="0">
				<comments desc="Unlock buffer memory. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsLocked"
				name="GetIsLocked"
				num_parameters="0"
				property="get"
				property_name2="isLocked"
				property_name="is_locked">
				<comments desc="Return true if the buffer is locked. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<enum name="eGpuFunctionType">
			<comments desc="GPU Function type "/>
			<value name="eGpuFunctionType_Vertex" value="0 ">
				<comments desc="Vertex function "/>
			</value>
			<value name="eGpuFunctionType_Pixel" value="1 ">
				<comments desc="Fragment/Pixel function "/>
			</value>
			<value name="eGpuFunctionType_Compute" value="2 ">
				<comments desc="Compute function "/>
			</value>
			<value name="eGpuFunctionType_Mesh" value="3 ">
				<comments desc="Mesh function "/>
			</value>
			<value name="eGpuFunctionType_Task" value="4 ">
				<comments desc="Task/Amplification function "/>
			</value>
			<value name="eGpuFunctionType_RayGeneration" value="5 ">
				<comments desc="Ray generation function "/>
			</value>
			<value name="eGpuFunctionType_RayIntersection" value="6 ">
				<comments desc="Ray intersection function "/>
			</value>
			<value name="eGpuFunctionType_RayAnyHit" value="7 ">
				<comments desc="Ray any hit function "/>
			</value>
			<value name="eGpuFunctionType_RayClosestHit" value="8 ">
				<comments desc="Ray closest hit function "/>
			</value>
			<value name="eGpuFunctionType_RayMiss" value="9 ">
				<comments desc="Ray miss function "/>
			</value>
			<value name="eGpuFunctionType_Last" value="10 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iGpuFunction" uuid1="A9FB33CE-9B16-4E4E-A933-538207420D92" uuid2="0xa9fb33ce,0x9b16,0x4e4e,0xa9,0x33,0x53,0x82,0x07,0x42,0x0d,0x92">
			<comments desc="GPU Function interface. "/>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getFunctionType"
				name="GetFunctionType"
				num_parameters="0"
				property="get"
				property_name2="functionType"
				property_name="function_type">
				<comments desc="Get the function&apos;s type. "/>
				<return type="eGpuFunctionType" typec="eGpuFunctionType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDataTable"
				name="GetDataTable"
				num_parameters="0"
				property="get"
				property_name2="dataTable"
				property_name="data_table">
				<comments desc="Get the gpu function&apos;s datatable. ">
					<remark text="The function&apos;s datatable describes the complete gpu function&apos;s interface: - Input/Output interface (attribute locations and types) - Resource bindings (textures, samplers, uniform buffers) - Platform-specific compiled shader code - Platform-specific binding decorations (descriptor sets, register bindings) This data is used to: - Create gpu pipelines - Setup resource binding infrastructure (descriptor sets, root signatures) - Validate resource bindings at runtime "/>
				</comments>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<enum name="eGpuPipelineColorFormat">
			<comments desc="GPU Pipeline color format "/>
			<value name="eGpuPipelineColorFormat_None" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_BGRA8" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_RGBA8" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_RGBA16F" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_R16F" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_R32F" value="5 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineColorFormat_Last" value="6 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGpuPipelineDepthFormat">
			<comments desc="GPU Pipeline depth format "/>
			<value name="eGpuPipelineDepthFormat_None" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineDepthFormat_D32" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineDepthFormat_D16" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineDepthFormat_D24S8" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eGpuPipelineDepthFormat_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGpuBlendFactor">
			<comments desc="GPU Blend factor "/>
			<value name="eGpuBlendFactor_Zero" value="0 ">
				<comments desc="(0, 0, 0, 0) "/>
			</value>
			<value name="eGpuBlendFactor_One" value="1 ">
				<comments desc="(1, 1, 1, 1) "/>
			</value>
			<value name="eGpuBlendFactor_SrcColor" value="2 ">
				<comments desc="(Rs, Gs, Bs, As) "/>
			</value>
			<value name="eGpuBlendFactor_InvSrcColor" value="3 ">
				<comments desc="(1-Rs, 1-Gs, 1-Bs, 1-As) "/>
			</value>
			<value name="eGpuBlendFactor_SrcAlpha" value="4 ">
				<comments desc="(As, As, As, As) "/>
			</value>
			<value name="eGpuBlendFactor_InvSrcAlpha" value="5 ">
				<comments desc="(1-As, 1-As, 1-As, 1-As) "/>
			</value>
			<value name="eGpuBlendFactor_DstAlpha" value="6 ">
				<comments desc="(Ad, Ad, Ad, Ad) "/>
			</value>
			<value name="eGpuBlendFactor_InvDstAlpha" value="7 ">
				<comments desc="(1-Ad, 1-Ad, 1-Ad, 1-Ad) "/>
			</value>
			<value name="eGpuBlendFactor_DstColor" value="8 ">
				<comments desc="(Rd, Gd, Bd, Ad) "/>
			</value>
			<value name="eGpuBlendFactor_InvDstColor" value="9 ">
				<comments desc="(1-Rd, 1-Gd, 1-Bd, 1-Ad) "/>
			</value>
			<value name="eGpuBlendFactor_SrcAlphaSat" value="10 ">
				<comments desc="(f, f, f, 1) where f = min(As, 1-Ad) "/>
			</value>
			<value name="eGpuBlendFactor_BlendColorConstant" value="11 ">
				<comments desc="Constant blend color "/>
			</value>
			<value name="eGpuBlendFactor_InvBlendColorConstant" value="12 ">
				<comments desc="1 - Constant blend color "/>
			</value>
			<value name="eGpuBlendFactor_Last" value="13 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGpuBlendOp">
			<comments desc="GPU Blend operation "/>
			<value name="eGpuBlendOp_Add" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eGpuBlendOp_Subtract" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eGpuBlendOp_ReverseSubtract" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eGpuBlendOp_Min" value="3 ">
				<comments desc=""/>
			</value>
			<value name="eGpuBlendOp_Max" value="4 ">
				<comments desc=""/>
			</value>
			<value name="eGpuBlendOp_Last" value="5 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iGpuBlendMode" uuid1="979BDA0B-8876-294F-83DE-AD0BDC159833" uuid2="0x979bda0b,0x8876,0x294f,0x83,0xde,0xad,0x0b,0xdc,0x15,0x98,0x33">
			<comments desc="GPU Blend mode interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another blend mode. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apBlend"
					type="const iGpuBlendMode *"
					typec="const iGpuBlendMode*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this blend mode. "/>
				<return type="Ptr&lt;iGpuBlendMode&gt;" typec="Ptr&lt;iGpuBlendMode&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setOp"
				name="SetOp"
				num_parameters="1"
				property="set"
				property_name2="op"
				property_name="op">
				<comments desc="Set the blend operation. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aOp"
					type="eGpuBlendOp"
					typec="eGpuBlendOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getOp"
				name="GetOp"
				num_parameters="0"
				property="get"
				property_name2="op"
				property_name="op">
				<comments desc="Get the blend operation. "/>
				<return type="eGpuBlendOp" typec="eGpuBlendOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setSrcRGB"
				name="SetSrcRGB"
				num_parameters="1"
				property="set"
				property_name2="srcRGB"
				property_name="src_rgb">
				<comments desc="Set the source RGB blend factor. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFactor"
					type="eGpuBlendFactor"
					typec="eGpuBlendFactor"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSrcRGB"
				name="GetSrcRGB"
				num_parameters="0"
				property="get"
				property_name2="srcRGB"
				property_name="src_rgb">
				<comments desc="Get the source RGB blend factor. "/>
				<return type="eGpuBlendFactor" typec="eGpuBlendFactor" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setSrcAlpha"
				name="SetSrcAlpha"
				num_parameters="1"
				property="set"
				property_name2="srcAlpha"
				property_name="src_alpha">
				<comments desc="Set the source alpha blend factor. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFactor"
					type="eGpuBlendFactor"
					typec="eGpuBlendFactor"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSrcAlpha"
				name="GetSrcAlpha"
				num_parameters="0"
				property="get"
				property_name2="srcAlpha"
				property_name="src_alpha">
				<comments desc="Get the source alpha blend factor. "/>
				<return type="eGpuBlendFactor" typec="eGpuBlendFactor" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setDstRGB"
				name="SetDstRGB"
				num_parameters="1"
				property="set"
				property_name2="dstRGB"
				property_name="dst_rgb">
				<comments desc="Set the destination RGB blend factor. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFactor"
					type="eGpuBlendFactor"
					typec="eGpuBlendFactor"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDstRGB"
				name="GetDstRGB"
				num_parameters="0"
				property="get"
				property_name2="dstRGB"
				property_name="dst_rgb">
				<comments desc="Get the destination RGB blend factor. "/>
				<return type="eGpuBlendFactor" typec="eGpuBlendFactor" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setDstAlpha"
				name="SetDstAlpha"
				num_parameters="1"
				property="set"
				property_name2="dstAlpha"
				property_name="dst_alpha">
				<comments desc="Set the destination alpha blend factor. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFactor"
					type="eGpuBlendFactor"
					typec="eGpuBlendFactor"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDstAlpha"
				name="GetDstAlpha"
				num_parameters="0"
				property="get"
				property_name2="dstAlpha"
				property_name="dst_alpha">
				<comments desc="Get the destination alpha blend factor. "/>
				<return type="eGpuBlendFactor" typec="eGpuBlendFactor" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the blend mode description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
		</interface>
		<interface name="iGpuPipelineDesc" uuid1="BD30DCB2-8309-B84A-A59F-F4A1086DC905" uuid2="0xbd30dcb2,0x8309,0xb84a,0xa5,0x9f,0xf4,0xa1,0x08,0x6d,0xc9,0x05">
			<comments desc="Gpu pipeline desc interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another pipeline. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPipe"
					type="const iGpuPipelineDesc *"
					typec="const iGpuPipelineDesc*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this pipeline. "/>
				<return type="Ptr&lt;iGpuPipelineDesc&gt;" typec="Ptr&lt;iGpuPipelineDesc&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setColorFormat"
				name="SetColorFormat"
				num_parameters="2"
				property="set"
				property_name2="colorFormat"
				property_name="color_format">
				<comments desc="Set a color format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFormat"
					type="eGpuPipelineColorFormat"
					typec="eGpuPipelineColorFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getColorFormat"
				name="GetColorFormat"
				num_parameters="1"
				property="get"
				property_name2="colorFormat"
				property_name="color_format">
				<comments desc="Get a color format. "/>
				<return type="eGpuPipelineColorFormat" typec="eGpuPipelineColorFormat" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDepthFormat"
				name="SetDepthFormat"
				num_parameters="1"
				property="set"
				property_name2="depthFormat"
				property_name="depth_format">
				<comments desc="Set the depth format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFormat"
					type="eGpuPipelineDepthFormat"
					typec="eGpuPipelineDepthFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDepthFormat"
				name="GetDepthFormat"
				num_parameters="0"
				property="get"
				property_name2="depthFormat"
				property_name="depth_format">
				<comments desc="Get the depth format. "/>
				<return type="eGpuPipelineDepthFormat" typec="eGpuPipelineDepthFormat" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setFVF"
				name="SetFVF"
				num_parameters="1"
				property="set"
				property_name2="fvf"
				property_name="fvf">
				<comments desc="Set the vertex format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFVF"
				name="GetFVF"
				num_parameters="0"
				property="get"
				property_name2="fvf"
				property_name="fvf">
				<comments desc="Get the vertex format. "/>
				<return type="tFVF" typec="tFVF" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setRasterizerStates"
				name="SetRasterizerStates"
				num_parameters="1"
				property="set"
				property_name2="rasterizerStates"
				property_name="rasterizer_states">
				<comments desc="Set the rasterizer states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getRasterizerStates"
				name="GetRasterizerStates"
				num_parameters="0"
				property="get"
				property_name2="rasterizerStates"
				property_name="rasterizer_states">
				<comments desc="Get the rasterizer states. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setDepthStencilStates"
				name="SetDepthStencilStates"
				num_parameters="1"
				property="set"
				property_name2="depthStencilStates"
				property_name="depth_stencil_states">
				<comments desc="Set the depth stencil states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getDepthStencilStates"
				name="GetDepthStencilStates"
				num_parameters="0"
				property="get"
				property_name2="depthStencilStates"
				property_name="depth_stencil_states">
				<comments desc="Get the depth stencil states. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setFunction"
				name="SetFunction"
				num_parameters="2"
				property="set"
				property_name2="function"
				property_name="function">
				<comments desc="Set a function. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aType"
					type="eGpuFunctionType"
					typec="eGpuFunctionType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apFunc"
					type="iGpuFunction *"
					typec="iGpuFunction*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFunction"
				name="GetFunction"
				num_parameters="1"
				property="get"
				property_name2="function"
				property_name="function">
				<comments desc="Get a function. "/>
				<return type="iGpuFunction *" typec="iGpuFunction*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aType"
					type="eGpuFunctionType"
					typec="eGpuFunctionType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setBlendMode"
				name="SetBlendMode"
				num_parameters="1"
				property="set"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Set the blend mode. Set to nullptr to disable. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apBlendMode"
					type="iGpuBlendMode *"
					typec="iGpuBlendMode*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBlendMode"
				name="GetBlendMode"
				num_parameters="0"
				property="get"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Get the blend mode. "/>
				<return type="iGpuBlendMode *" typec="iGpuBlendMode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the pipeline description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
		</interface>
		<interface name="iGpuPipeline" uuid1="4298B417-DDEB-BF4D-825C-125B3E0B5B05" uuid2="0x4298b417,0xddeb,0xbf4d,0x82,0x5c,0x12,0x5b,0x3e,0x0b,0x5b,0x05">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getDesc"
				name="GetDesc"
				num_parameters="0"
				property="get"
				property_name2="desc"
				property_name="desc">
				<comments desc="Get the gpu pipeline description. "/>
				<return type="const iGpuPipelineDesc *" typec="const iGpuPipelineDesc*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iGpuCommandEncoder" uuid1="055A196D-4AE9-7648-A86E-5E90AFF216CE" uuid2="0x055a196d,0x4ae9,0x7648,0xa8,0x6e,0x5e,0x90,0xaf,0xf2,0x16,0xce">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="setPipeline" name="SetPipeline" num_parameters="1">
				<comments desc="Binds a GPU pipeline to the command encoder. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apPipeline"
					type="iGpuPipeline *"
					typec="iGpuPipeline*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setVertexBuffer" name="SetVertexBuffer" num_parameters="3">
				<comments desc="Binds a vertex buffer to the specified binding slot. @param apBuffer The GPU buffer containing vertex data @param anOffset Byte offset into the buffer @param anBinding The binding slot index "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apBuffer"
					type="iGpuBuffer *"
					typec="iGpuBuffer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBinding"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setIndexBuffer" name="SetIndexBuffer" num_parameters="2">
				<comments desc="Binds an index buffer for indexed draw calls. @param apBuffer The GPU buffer containing index data @param anOffset Byte offset into the buffer "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apBuffer"
					type="iGpuBuffer *"
					typec="iGpuBuffer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setUniformBuffer" name="SetUniformBuffer" num_parameters="3">
				<comments desc="Binds a uniform buffer to the specified binding slot. @param apBuffer The GPU buffer containing uniform data @param anOffset Byte offset into the buffer @param anBinding The binding slot index "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apBuffer"
					type="iGpuBuffer *"
					typec="iGpuBuffer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBinding"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setTexture" name="SetTexture" num_parameters="2">
				<comments desc="Binds a texture to the specified binding slot. @param apTexture The texture to bind @param anBinding The binding slot index "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anBinding"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setSamplerState" name="SetSamplerState" num_parameters="2">
				<comments desc="Binds a sampler state to the specified binding slot. @param ahSS Handle to the sampler state @param anBinding The binding slot index "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="ahSS"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
				<parameter
					last="1"
					name="anBinding"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setPolygonOffset" name="SetPolygonOffset" num_parameters="1">
				<comments desc="Sets the polygon offset for depth bias. @param avOffset Vector containing the constant and slope factors "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avOffset"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setScissorRect" name="SetScissorRect" num_parameters="1">
				<comments desc="Sets the scissor test rectangle. @param aRect Rectangle defining the scissor region "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setViewport" name="SetViewport" num_parameters="1">
				<comments desc="Sets the viewport dimensions. @param aRect Rectangle defining the viewport region "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setStencilReference" name="SetStencilReference" num_parameters="1">
				<comments desc="Sets the stencil reference value. @param aRef The reference value to compare against "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRef"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="setStencilMask" name="SetStencilMask" num_parameters="1">
				<comments desc="Sets the stencil read/write mask. @param aMask The stencil mask value "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMask"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setBlendColorConstant" name="SetBlendColorConstant" num_parameters="1">
				<comments desc="Sets the blend color constant. @param aColor The color to use for constant blend factor "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="draw" name="Draw" num_parameters="2">
				<comments desc="Draws primitives using the current vertex buffer. @param anVertexCount Number of vertices to draw @param anFirstVertex Index of first vertex to draw "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anVertexCount"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anFirstVertex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="drawIndexed" name="DrawIndexed" num_parameters="2">
				<comments desc="Draws indexed primitives using the current index buffer. @param anNumIndices Number of indices to draw @param anFirstIndex Index of first index to draw "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anNumIndices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anFirstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iGraphicsContextGpu" uuid1="0D2FFD6C-887D-3D46-AA18-123B272954E0" uuid2="0x0d2ffd6c,0x887d,0x3d46,0xaa,0x18,0x12,0x3b,0x27,0x29,0x54,0xe0">
			<comments desc="GPU-specific graphics context interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="beginCommandEncoder" name="BeginCommandEncoder" num_parameters="0">
				<comments desc="Begin a command encoder for recording commands "/>
				<return type="iGpuCommandEncoder *" typec="iGpuCommandEncoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="endCommandEncoder" name="EndCommandEncoder" num_parameters="0">
				<comments desc="End the current command encoder "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
		<interface name="iGraphicsDriverGpu" uuid1="E689EE7E-F674-1541-9A2B-B306557E6F09" uuid2="0xe689ee7e,0xf674,0x1541,0x9a,0x2b,0xb3,0x06,0x55,0x7e,0x6f,0x09">
			<comments desc="GPU-specific graphics driver interface. ">
				<remark text="WIP/Placeholder "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="createGpuBuffer" name="CreateGpuBuffer" num_parameters="3">
				<comments desc="Create a new GPU buffer. "/>
				<return type="Ptr&lt;iGpuBuffer&gt;" typec="Ptr&lt;iGpuBuffer&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aMemMode"
					type="eGpuBufferMemoryMode"
					typec="eGpuBufferMemoryMode"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aUsage"
					type="tGpuBufferUsageFlags"
					typec="tGpuBufferUsageFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createGpuBufferFromData" name="CreateGpuBufferFromData" num_parameters="4">
				<comments desc="Create a new GPU buffer with initial data. "/>
				<return type="Ptr&lt;iGpuBuffer&gt;" typec="Ptr&lt;iGpuBuffer&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aMemMode"
					type="eGpuBufferMemoryMode"
					typec="eGpuBufferMemoryMode"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aUsage"
					type="tGpuBufferUsageFlags"
					typec="tGpuBufferUsageFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="createGpuBufferFromDataRaw"
				name="CreateGpuBufferFromDataRaw"
				noautomation="yes"
				num_parameters="4">
				<comments desc="Create a new GPU buffer with initial raw data. "/>
				<return type="Ptr&lt;iGpuBuffer&gt;" typec="Ptr&lt;iGpuBuffer&gt;"/>
				<parameter name="apData" type="tPtr" typec="tPtr"/>
				<parameter name="anSize" type="tU32" typec="tU32"/>
				<parameter name="aMemMode" type="eGpuBufferMemoryMode" typec="eGpuBufferMemoryMode"/>
				<parameter
					last="1"
					name="aUsage"
					type="tGpuBufferUsageFlags"
					typec="tGpuBufferUsageFlags"/>
			</method>
			<method
				const="yes"
				java_name="getGpuFunctionTarget"
				name="GetGpuFunctionTarget"
				num_parameters="0"
				property="get"
				property_name2="gpuFunctionTarget"
				property_name="gpu_function_target">
				<comments desc="Get the gpu function target. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGpuFunction" name="CreateGpuFunction" num_parameters="3">
				<comments desc="Create a new GPU function. "/>
				<return type="Ptr&lt;iGpuFunction&gt;" typec="Ptr&lt;iGpuFunction&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eGpuFunctionType"
					typec="eGpuFunctionType"
					typei="ni::eType_Enum"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apGpuFunctionDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGpuPipelineDesc" name="CreateGpuPipelineDesc" num_parameters="0">
				<comments desc="Create a new GPU pipeline description. "/>
				<return type="Ptr&lt;iGpuPipelineDesc&gt;" typec="Ptr&lt;iGpuPipelineDesc&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGpuPipeline" name="CreateGpuPipeline" num_parameters="1">
				<comments desc="Compile a GPU pipeline description into a driver handle. "/>
				<return type="Ptr&lt;iGpuPipeline&gt;" typec="Ptr&lt;iGpuPipeline&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDesc"
					type="const iGpuPipelineDesc *"
					typec="const iGpuPipelineDesc*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGpuBlendMode" name="CreateGpuBlendMode" num_parameters="0">
				<comments desc="Create a new GPU blend mode description. "/>
				<return type="Ptr&lt;iGpuBlendMode&gt;" typec="Ptr&lt;iGpuBlendMode&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="blitManagedGpuBufferToSystemMemory" name="BlitManagedGpuBufferToSystemMemory" num_parameters="1">
				<comments desc="Synchronize a managed resource from the GPU to the CPU memory. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apBuffer"
					type="iGpuBuffer *"
					typec="iGpuBuffer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGraphics.h.idl.xml">
		<interface name="iGraphics" uuid1="92E5EFCF-FCB3-4764-982B-D20C834E61ED" uuid2="0x92e5efcf,0xfcb3,0x4764,0x98,0x2b,0xd2,0x0c,0x83,0x4e,0x61,0xed">
			<comments desc="Graphics interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="fvfgetTexCooDim"
				name="FVFGetTexCooDim"
				num_parameters="2">
				<comments desc="Get the number of dimensions of the specified texture coordinates. anTexCooIndex is the index (0 to 7). "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="anFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anTexCooIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="fvfgetNumTexCoos"
				name="FVFGetNumTexCoos"
				num_parameters="1">
				<comments desc="Get the number of texture coordinates of the specified FVF. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="fvftoString"
				name="FVFToString"
				num_parameters="1">
				<comments desc="Convert the specified FVF to a string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="fvffromString"
				name="FVFFromString"
				num_parameters="1">
				<comments desc="Get a FVF from the specified string. "/>
				<return type="tFVF" typec="tFVF" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="fvfgetComponentOffset"
				name="FVFGetComponentOffset"
				num_parameters="2">
				<comments desc="Get the offset of the specified component. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="C"
					type="eFVF"
					typec="eFVF"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="fvfgetStride"
				name="FVFGetStride"
				num_parameters="1">
				<comments desc="Get the size of a FVF. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createPixelFormat" name="CreatePixelFormat" num_parameters="1">
				<comments desc="Create a pixel format. " return="an interface to handle the created pixel format. ">
					<remark text="Pixel format are created throught plugins, so the supported formats depend of the loaded plugins. "/>
					<params text="aszFormat is a achar string which describe the pixel format to create. "/>
				</comments>
				<return type="iPixelFormat *" typec="iPixelFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmapFormat" name="CreateBitmapFormat" num_parameters="6">
				<comments desc="Create a new bitmap format. "/>
				<return type="iBitmapFormat *" typec="iBitmapFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createBitmapFormatEx" name="CreateBitmapFormatEx" num_parameters="6">
				<comments desc="Create a new bitmap format. "/>
				<return type="iBitmapFormat *" typec="iBitmapFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="pFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createBitmapFormatEmpty" name="CreateBitmapFormatEmpty" num_parameters="0">
				<comments desc="Create a new empty bitmap format. "/>
				<return type="iBitmapFormat *" typec="iBitmapFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap" name="CreateBitmap" num_parameters="7">
				<comments desc="Create a new bitmap. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createBitmapEx" name="CreateBitmapEx" num_parameters="7">
				<comments desc="Create a new bitmap. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="pFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createBitmap2DEx" name="CreateBitmap2DEx" num_parameters="3">
				<comments desc="Create a 2D bitmap. ">
					<remark text="the given iPixelFormat instance will be release if the creation failed and when the bitmap is released. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="nH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="pFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap2D" name="CreateBitmap2D" num_parameters="3">
				<comments desc="Create a 2D bitmap. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="nH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aszPixFmt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap2DMemoryEx" name="CreateBitmap2DMemoryEx" num_parameters="6">
				<comments desc="Create a 2D bitmap from the specified memory. ">
					<remark text="the given iPixelFormat instance will be release if the creation failed and when the bitmap is released. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="nH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ptrAddr"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="bFreeAddr"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createBitmap2DMemory" name="CreateBitmap2DMemory" num_parameters="6">
				<comments desc="Create a 2D bitmap from the specified memory. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="nH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aszPixFmt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ptrAddr"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="bFreeAddr"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createBitmapCubeEx" name="CreateBitmapCubeEx" num_parameters="2">
				<comments desc="Create a Cube bitmap. "/>
				<return type="iBitmapCube *" typec="iBitmapCube*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ulSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="pFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmapCube" name="CreateBitmapCube" num_parameters="2">
				<comments desc="Create a Cube bitmap. "/>
				<return type="iBitmapCube *" typec="iBitmapCube*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ulSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aszPixFmt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap3DEx" name="CreateBitmap3DEx" num_parameters="4">
				<comments desc="Create a 3D bitmap. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap3D" name="CreateBitmap3D" num_parameters="4">
				<comments desc="Create a 3D bitmap. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszPixFmt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createBitmap3DMemoryEx" name="CreateBitmap3DMemoryEx" num_parameters="8">
				<comments desc="Create a 3D bitmap from the specified memory. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anRowPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anSlicePitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aptrAddr"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="abFreeAddr"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createBitmap3DMemory" name="CreateBitmap3DMemory" num_parameters="8">
				<comments desc="Create a 3D bitmap from the specified memory. "/>
				<return type="iBitmap3D *" typec="iBitmap3D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aszPixFmt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anRowPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anSlicePitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aptrAddr"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="abFreeAddr"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="loadBitmap" name="LoadBitmap" num_parameters="1">
				<comments desc="Load a bitmap from a file. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="pFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadBitmapFromRes" name="LoadBitmapFromRes" num_parameters="2">
				<comments desc="Load a bitmap from a resource. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspBasePath"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadBitmapEx" name="LoadBitmapEx" num_parameters="2">
				<comments desc="Load a bitmap from a file with the specified format. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="pFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="saveBitmap" name="SaveBitmap" num_parameters="3">
				<comments desc="Save a bitmap in a file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="pBmp"
					type="iBitmapBase *"
					typec="iBitmapBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					last="1"
					name="ulCompression"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="saveBitmapEx" name="SaveBitmapEx" num_parameters="4">
				<comments desc="Save a bitmap in the specified format in a file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBmp"
					type="iBitmapBase *"
					typec="iBitmapBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCompression"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="urlfindBitmapFilePath" name="URLFindBitmapFilePath" num_parameters="2">
				<comments desc="Find the path/url matching the specified resource and basepath. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aszRes"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszBasePath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="openBitmapFile" name="OpenBitmapFile" num_parameters="2">
				<comments desc="Open a bitmap file. ">
					<remark text="Search all the known extensions if no extension is specified. "/>
					<remark text="If no resource manager is registered in the system only the low level File opening methods are used. "/>
					<params text="aszRes is the resource to open. "/>
					<params text="aszBasePath is an optional path where the resources will be searched first. Only the directory of the path is used. "/>
				</comments>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszRes"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="NULL "
					last="1"
					name="aszBasePath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="computeBitmapDiff" name="ComputeBitmapDiff" num_parameters="5">
				<comments desc="Computes the diff between two bitmaps. ">
					<params text="apImgA the first bitmap to compare "/>
					<params text="apImgB the second bitmap to compare "/>
					<params text="apOutput an optional bitmap where to output a visualisation of the difference "/>
					<params text="afThreshold is the minimum color distance to be considered different. Between 0 and 1, default is 0.1. "/>
					<params text="abIgnoreAA whether to ignore pixel that are part of antialiasing. Default is true. "/>
				</comments>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					name="apImgA"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apImgB"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="NULL "
					name="apOutput"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0.1 "
					name="afThreshold"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					default="eTrue "
					last="1"
					name="abIgnoreAA"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createGeometryPolygonal" name="CreateGeometryPolygonal" num_parameters="4">
				<comments desc="Create a polygonal geometry. ">
					<remark text="to create a geometry that is not in system memory a renderer must be active. "/>
					<remark text="if you switch renderer all geometries not created in system memory will be invalidated. "/>
				</comments>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aulNumVertices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aulNumIndices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createGeometryPolygonalEx" name="CreateGeometryPolygonalEx" num_parameters="2">
				<comments desc="Create a polygonal geometry from an exisiting vertex array and index array. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apVA"
					type="iVertexArray *"
					typec="iVertexArray*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apIA"
					type="iIndexArray *"
					typec="iIndexArray*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryModifier" name="CreateGeometryModifier" num_parameters="3">
				<comments desc="Create a geometry modifier. " return="NULL if the modifier can&apos;t be created, else return a pointer to a valid geometry modifier. ">
					<remark text="Just a wrapper around CreateInstance(&quot;GeometryModifier.NAME&quot;,apGeometry,apInitData). "/>
					<params text="aszName is the name of the modifier. "/>
					<params text="apGeometry is the geometry that is gonna be modified by the modifier. "/>
					<params text="apInitData is a modifier specific initialization parameter. "/>
				</comments>
				<return type="iGeometryModifier *" typec="iGeometryModifier*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apGeometry"
					type="iGeometry *"
					typec="iGeometry*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apInitData"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalCube" name="CreateGeometryPolygonalCube" num_parameters="7">
				<comments desc="Create a cube polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afWidth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalPlane" name="CreateGeometryPolygonalPlane" num_parameters="10">
				<comments desc="Create a plane polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="aPlaneType"
					type="ePlaneType"
					typec="ePlaneType"
					typei="ni::eType_Enum"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afWidth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afHeight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aulNumDiv"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalCylinder" name="CreateGeometryPolygonalCylinder" num_parameters="12">
				<comments desc="Create a cylinder polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="baseRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="topRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="stacks"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="abCap"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abCentered"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createGeometryPolygonalSphere" name="CreateGeometryPolygonalSphere" num_parameters="8">
				<comments desc="Create a sphere polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="radius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="stacks"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalGeosphere" name="CreateGeometryPolygonalGeosphere" num_parameters="7">
				<comments desc="Create a geosphere polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="radius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalDiskSweep" name="CreateGeometryPolygonalDiskSweep" num_parameters="11">
				<comments desc="Create a disk sweep polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="innerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="outerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="stacks"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="startAngle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="sweepAngle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateGeometryPolygonalDiskSweep" name="UpdateGeometryPolygonalDiskSweep" num_parameters="10">
				<comments desc="Update a disk polygonal geometry. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apGeom"
					type="iGeometry *"
					typec="iGeometry*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="innerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="outerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="stacks"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="startAngle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="sweepAngle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createGeometryPolygonalDisk" name="CreateGeometryPolygonalDisk" num_parameters="9">
				<comments desc="Create a disk polygonal geometry. "/>
				<return type="iGeometry *" typec="iGeometry*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tGeometryCreateFlags"
					typec="tGeometryCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					name="innerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="outerRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="slices"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="stacks"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="aulColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="amtxUV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="initializeDriver" name="InitializeDriver" num_parameters="1">
				<comments desc="Initialize the specified hardware driver. ">
					<remark text="Only one driver can be initialized for each graphics object instance. "/>
					<remark text="&quot;NULL/renNULL&quot; driver will create a NULL driver. "/>
					<remark text="&quot;SOFT/renSOFT&quot; driver will create a software renderer driver. "/>
					<remark text="&quot;Auto&quot; driver will pick the most capable hardware driver first then fallback to software rendering if none can be found. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspDriverName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsDriverInitialized"
				name="GetIsDriverInitialized"
				num_parameters="0"
				property="get"
				property_name2="isDriverInitialized"
				property_name="is_driver_initialized">
				<comments desc="Get whether the driver has been initialized. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDriver"
				name="GetDriver"
				num_parameters="0"
				property="get"
				property_name2="driver"
				property_name="driver">
				<comments desc="Get the driver that has been initialized. "/>
				<return type="iGraphicsDriver *" typec="iGraphicsDriver*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDriverCaps"
				name="GetDriverCaps"
				num_parameters="1"
				property="get"
				property_name2="driverCaps"
				property_name="driver_caps">
				<comments desc="Get the driver&apos;s capabilities. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
				<parameter
					last="1"
					name="aCaps"
					type="eGraphicsCaps"
					typec="eGraphicsCaps"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createContextForWindow" name="CreateContextForWindow" num_parameters="5">
				<comments desc="Create a new context for the specified OS window. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apWindow"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszBBFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszDSFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSwapInterval"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aBackBufferFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createContextForRenderTargets" name="CreateContextForRenderTargets" num_parameters="5">
				<comments desc="Creates a new context for the specified render targets. "/>
				<return type="iGraphicsContextRT *" typec="iGraphicsContextRT*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT0"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT1"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT2"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT3"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDS"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGenericDeviceResourceManager"
				name="GetGenericDeviceResourceManager"
				num_parameters="0"
				property="get"
				property_name2="genericDeviceResourceManager"
				property_name="generic_device_resource_manager">
				<comments desc="Get the generice device resource manager. "/>
				<return type="iDeviceResourceManager *" typec="iDeviceResourceManager*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createSamplerStates" name="CreateSamplerStates" num_parameters="0">
				<comments desc="Create a new sampler states instance. "/>
				<return type="iSamplerStates *" typec="iSamplerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDepthStencilStates" name="CreateDepthStencilStates" num_parameters="0">
				<comments desc="Create a new depth stencil states instance. "/>
				<return type="iDepthStencilStates *" typec="iDepthStencilStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createRasterizerStates" name="CreateRasterizerStates" num_parameters="0">
				<comments desc="Create a new rasterizer states instance. "/>
				<return type="iRasterizerStates *" typec="iRasterizerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFixedStates" name="CreateFixedStates" num_parameters="0">
				<comments desc="Create a new fixed pipeline states instance. "/>
				<return type="iFixedStates *" typec="iFixedStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="checkTextureFormat" name="CheckTextureFormat" num_parameters="2">
				<comments desc="Check whether the specified texture format is supported and set the bitmap format object to the nearest matching native bitmap format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFormat"
					type="iBitmapFormat *"
					typec="iBitmapFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getTextureDeviceResourceManager"
				name="GetTextureDeviceResourceManager"
				num_parameters="0"
				property="get"
				property_name2="textureDeviceResourceManager"
				property_name="texture_device_resource_manager">
				<comments desc="Get the texture device resource manager. "/>
				<return type="iDeviceResourceManager *" typec="iDeviceResourceManager*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumTextures"
				name="GetNumTextures"
				num_parameters="0"
				property="get"
				property_name2="numTextures"
				property_name="num_textures">
				<comments desc="Get the number of textures in the manager. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTextureFromName"
				name="GetTextureFromName"
				num_parameters="1"
				property="get"
				property_name2="textureFromName"
				property_name="texture_from_name">
				<comments desc="Get a texture from its name. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTextureFromIndex"
				name="GetTextureFromIndex"
				num_parameters="1"
				property="get"
				property_name2="textureFromIndex"
				property_name="texture_from_index">
				<comments desc="Get a texture from its index. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createTexture" name="CreateTexture" num_parameters="8">
				<comments desc="Create a new texture. ">
					<remark text="Setting anNumMipMaps to zero with eTextureFlags_MipMaps automatically computes the number of mipmaps down to 4x4. "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createTextureFromBitmap" name="CreateTextureFromBitmap" num_parameters="3">
				<comments desc="Create a new texture from the specified bitmap. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBitmap"
					type="iBitmapBase *"
					typec="iBitmapBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createTextureFromRes" name="CreateTextureFromRes" num_parameters="3">
				<comments desc="Create a new texture from the specified resource. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspBasePath"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setRecreateTextureWhenChanged"
				name="SetRecreateTextureWhenChanged"
				num_parameters="1"
				property="set"
				property_name2="recreateTextureWhenChanged"
				property_name="recreate_texture_when_changed">
				<comments desc="Set whether CreateTextureFromRes recreates the texture when the source resource has changed. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getRecreateTextureWhenChanged"
				name="GetRecreateTextureWhenChanged"
				num_parameters="0"
				property="get"
				property_name2="recreateTextureWhenChanged"
				property_name="recreate_texture_when_changed">
				<comments desc="Get whether CreateTextureFromRes recreates the texture when the source resource has changed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="blitBitmapToTexture" name="BlitBitmapToTexture" num_parameters="6">
				<comments desc="Blit a bitmap to a texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTextureBlitFlags_None "
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToBitmap" name="BlitTextureToBitmap" num_parameters="6">
				<comments desc="Blit a texture to a bitmap. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTextureBlitFlags_None "
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToTexture" name="BlitTextureToTexture" num_parameters="7">
				<comments desc="Blit a texture into another texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRecti ( 0 , 0 ) "
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTextureBlitFlags_None "
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitBitmap3DToTexture" name="BlitBitmap3DToTexture" num_parameters="7">
				<comments desc="Blit a 3d bitmap to a 3d texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iBitmap3D *"
					typec="iBitmap3D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="aSrcMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="aDestMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="avSize"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTextureBlitFlags_None "
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToBitmap3D" name="BlitTextureToBitmap3D" num_parameters="7">
				<comments desc="Blit a 3d texture to a 3d bitmap. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iBitmap3D *"
					typec="iBitmap3D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="aSrcMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="aDestMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sVec3i : : Zero ( ) "
					name="avSize"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTextureBlitFlags_None "
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createBitmapFromTexture" name="CreateBitmapFromTexture" num_parameters="1">
				<comments desc="Create a bitmap from a texture. "/>
				<return type="iBitmapBase *" typec="iBitmapBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumShaderProfile"
				name="GetNumShaderProfile"
				num_parameters="1">
				<comments desc="Get the number of Shader profile supported in the specified unit. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getShaderProfile"
				name="GetShaderProfile"
				num_parameters="2">
				<comments desc="Get the profile at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="createShaderConstants"
				name="CreateShaderConstants"
				num_parameters="1">
				<comments desc="Creates an empty shader constants instance. "/>
				<return type="iShaderConstants *" typec="iShaderConstants*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anMaxRegisters"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="serializeShaderConstants" name="SerializeShaderConstants" num_parameters="3">
				<comments desc="Serialize shader constants in the specified datatable. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apConsts"
					type="iShaderConstants *"
					typec="iShaderConstants*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getShaderDeviceResourceManager"
				name="GetShaderDeviceResourceManager"
				num_parameters="0"
				property="get"
				property_name2="shaderDeviceResourceManager"
				property_name="shader_device_resource_manager">
				<comments desc="Get the shader device resource manager. "/>
				<return type="iDeviceResourceManager *" typec="iDeviceResourceManager*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumShaders"
				name="GetNumShaders"
				num_parameters="0"
				property="get"
				property_name2="numShaders"
				property_name="num_shaders">
				<comments desc="Get the number of shaders in the manager. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getShaderFromName"
				name="GetShaderFromName"
				num_parameters="1"
				property="get"
				property_name2="shaderFromName"
				property_name="shader_from_name">
				<comments desc="Get a shader from its name. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getShaderFromIndex"
				name="GetShaderFromIndex"
				num_parameters="1"
				property="get"
				property_name2="shaderFromIndex"
				property_name="shader_from_index">
				<comments desc="Get a shader from its index. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createShader" name="CreateShader" num_parameters="2">
				<comments desc="Create a new shader. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apByteCode"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createShaderFromRes" name="CreateShaderFromRes" num_parameters="1">
				<comments desc="Create a new shader from the specified resource. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setRecreateShaderWhenChanged"
				name="SetRecreateShaderWhenChanged"
				num_parameters="1"
				property="set"
				property_name2="recreateShaderWhenChanged"
				property_name="recreate_shader_when_changed">
				<comments desc="Set whether CreateShaderFromRes recreates the shader when the source resource has changed. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getRecreateShaderWhenChanged"
				name="GetRecreateShaderWhenChanged"
				num_parameters="0"
				property="get"
				property_name2="recreateShaderWhenChanged"
				property_name="recreate_shader_when_changed">
				<comments desc="Get whether CreateShaderFromRes recreates the shader when the source resource has changed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="createVertexArray" name="CreateVertexArray" num_parameters="3">
				<comments desc="Create a new driver vertex array instance. "/>
				<return type="iVertexArray *" typec="iVertexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumVertices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUsage"
					type="eArrayUsage"
					typec="eArrayUsage"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createIndexArray" name="CreateIndexArray" num_parameters="4">
				<comments desc="Create a new driver index array instance. "/>
				<return type="iIndexArray *" typec="iIndexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPrimitiveType"
					type="eGraphicsPrimitiveType"
					typec="eGraphicsPrimitiveType"
					typei="ni::eType_Enum"/>
				<parameter
					name="anNumIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anMaxVertexIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUsage"
					type="eArrayUsage"
					typec="eArrayUsage"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createDrawOperation" name="CreateDrawOperation" num_parameters="0">
				<comments desc="Creates a new draw operation. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDrawOperationSet" name="CreateDrawOperationSet" num_parameters="0">
				<comments desc="Create a draw operation set. ">
					<remark text="if the passed sorter is NULL the default sorter will be used. "/>
				</comments>
				<return type="iDrawOperationSet *" typec="iDrawOperationSet*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOcclusionQuery" name="CreateOcclusionQuery" num_parameters="0">
				<comments desc="Create a new occlusion query object. "/>
				<return type="iOcclusionQuery *" typec="iOcclusionQuery*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCompiledSamplerStates"
				name="GetCompiledSamplerStates"
				num_parameters="1"
				property="get"
				property_name2="compiledSamplerStates"
				property_name="compiled_sampler_states">
				<comments desc="Get the specified compiled sampler states. "/>
				<return type="iSamplerStates *" typec="iSamplerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getCompiledRasterizerStates"
				name="GetCompiledRasterizerStates"
				num_parameters="1"
				property="get"
				property_name2="compiledRasterizerStates"
				property_name="compiled_rasterizer_states">
				<comments desc="Get the specified compiled rasterizer states. "/>
				<return type="iRasterizerStates *" typec="iRasterizerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getCompiledDepthStencilStates"
				name="GetCompiledDepthStencilStates"
				num_parameters="1"
				property="get"
				property_name2="compiledDepthStencilStates"
				property_name="compiled_depth_stencil_states">
				<comments desc="Get the specified compiled depth stencil states. "/>
				<return type="iDepthStencilStates *" typec="iDepthStencilStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method java_name="createMaterial" name="CreateMaterial" num_parameters="0">
				<comments desc="Create an empty material. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createMaterialLibrary" name="CreateMaterialLibrary" num_parameters="0">
				<comments desc="Create a material library. "/>
				<return type="iMaterialLibrary *" typec="iMaterialLibrary*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDrawOpCapture" name="CreateDrawOpCapture" num_parameters="0">
				<comments desc="Create a new draw op capture object. "/>
				<return type="iGraphicsDrawOpCapture *" typec="iGraphicsDrawOpCapture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDrawOpCapture"
				name="SetDrawOpCapture"
				num_parameters="1"
				property="set"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Set the draw op capture object. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apCapture"
					type="iGraphicsDrawOpCapture *"
					typec="iGraphicsDrawOpCapture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDrawOpCapture"
				name="GetDrawOpCapture"
				num_parameters="0"
				property="get"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Get the draw op capture object. "/>
				<return type="iGraphicsDrawOpCapture *" typec="iGraphicsDrawOpCapture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorLuminance"
				min_features="15"
				name="ColorLuminance"
				num_parameters="1">
				<comments desc="Get the lumiance of a 3d color. ">
					<remark text="Uses the lumiance distribution kvColorLuminanceR21G71B07. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aColor"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorLuminanceEx"
				min_features="15"
				name="ColorLuminanceEx"
				num_parameters="2">
				<comments desc="Get the lumiance of a 3d color, allow to specify a luminance distribution. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aColor"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avLuminanceDistribution"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorGammaCorrect"
				min_features="15"
				name="ColorGammaCorrect"
				num_parameters="2">
				<comments desc="Correct the gamma of a color. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aC"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afFactor"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="colorAdjustContrast"
				min_features="15"
				name="ColorAdjustContrast"
				num_parameters="2">
				<comments desc="Adjust the contrast of a color. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="c"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="colorAdjustSaturation"
				min_features="15"
				name="ColorAdjustSaturation"
				num_parameters="2">
				<comments desc="Adjust the saturation of a color. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="colorNegative"
				min_features="15"
				name="ColorNegative"
				num_parameters="1">
				<comments desc="Get the negative of a color. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorGrey"
				min_features="15"
				name="ColorGrey"
				num_parameters="1">
				<comments desc="Gray a color. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorBlackWhite"
				min_features="15"
				name="ColorBlackWhite"
				num_parameters="2">
				<comments desc="Set a color to be black or white in function of the specified reference. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="colorConvert"
				min_features="15"
				name="ColorConvert"
				num_parameters="3">
				<comments desc="Convert a color from one color space to another. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aSource"
					type="eColorSpace"
					typec="eColorSpace"
					typei="ni::eType_Enum"/>
				<parameter
					name="aDest"
					type="eColorSpace"
					typec="eColorSpace"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aColor"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="colorConvertEx"
				min_features="15"
				name="ColorConvertEx"
				num_parameters="4">
				<comments desc="Convert a color from one color space to another, allows to specify the XYZ reference. ">
					<remark text="kcolXYZRef2D65 is the standard XYZ reference value "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aSource"
					type="eColorSpace"
					typec="eColorSpace"
					typei="ni::eType_Enum"/>
				<parameter
					name="aDest"
					type="eColorSpace"
					typec="eColorSpace"
					typei="ni::eType_Enum"/>
				<parameter
					name="aColor"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aXYZRef"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumNamedColors"
				name="GetNumNamedColors"
				num_parameters="0"
				property="get"
				property_name2="numNamedColors"
				property_name="num_named_colors">
				<comments desc="Get the number of named colors. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColorName"
				name="GetColorName"
				num_parameters="1"
				property="get"
				property_name2="colorName"
				property_name="color_name">
				<comments desc="Get the name of the color at the specified index. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColorIndex"
				name="GetColorIndex"
				num_parameters="1"
				property="get"
				property_name2="colorIndex"
				property_name="color_index">
				<comments desc="Get the index of the color with the specified name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColorValue"
				name="GetColorValue"
				num_parameters="1"
				property="get"
				property_name2="colorValue"
				property_name="color_value">
				<comments desc="Get the value of the color at the specified index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="findColorName"
				name="FindColorName"
				num_parameters="1">
				<comments desc="Find the color with the closest match to the specified color. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor3FromName"
				name="GetColor3FromName"
				num_parameters="1"
				property="get"
				property_name2="color3FromName"
				property_name="color3from_name">
				<comments desc="Get a color from it&apos;s name. ">
					<remark text="Supported syntaxes, case insensitive, in order of priority:&lt;br/&gt; - Vec3, Vec4, RGB, RGBA math expressions - color name&lt;br/&gt; - Hexadecimal code: &quot;#AARRGGBB&quot;, &quot;#RRGGBB&quot;, &quot;#RGB&quot;, &quot;#RGBA&quot;&lt;br/&gt; - (CSS) rgb(N,N,N), rgba(N,N,N,N), N = [0-255], [0-100]%, [0.0-1.0]f&lt;br/&gt; "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor4FromName"
				name="GetColor4FromName"
				num_parameters="1"
				property="get"
				property_name2="color4FromName"
				property_name="color4from_name">
				<comments desc="Get a color from it&apos;s name. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor4FromNameA"
				name="GetColor4FromNameA"
				num_parameters="2">
				<comments desc="Get a color from it&apos;s name, specifying the alpha. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afAlpha"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getCssColor3FromName"
				name="GetCssColor3FromName"
				num_parameters="1"
				property="get"
				property_name2="cssColor3FromName"
				property_name="css_color3from_name">
				<comments desc="Get a color from it&apos;s name. ">
					<remark text="Supported syntaxes, case insensitive, in order of priority:&lt;br/&gt; - Vec3 &amp; Vec4 math expressions - color name&lt;br&gt; - Hexadecimal code : &quot;#AARRGGBB&quot;, &quot;#RRGGBB&quot;, &quot;#RGB&quot;, &quot;#RGBA&quot;&lt;br/&gt; - (CSS) rgb(N,N,N), rgba(N,N,N,N), N = [0-255], [0-100]%, [0.0-1.0]f&lt;br/&gt; "/>
					<remark text="See the W3C CSS2 specifications. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCssColor4FromName"
				name="GetCssColor4FromName"
				num_parameters="1"
				property="get"
				property_name2="cssColor4FromName"
				property_name="css_color4from_name">
				<comments desc="Get a css color from it&apos;s name. ">
					<remark text="See the W3C CSS2 specifications. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCssColor4FromNameA"
				name="GetCssColor4FromNameA"
				num_parameters="2">
				<comments desc="Get a css color from it&apos;s name, specifying the alpha. ">
					<remark text="See the W3C CSS2 specifications. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afAlpha"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsSphereRandom"
				name="UDPointsSphereRandom"
				num_parameters="1">
				<comments desc="Generates random points on a unit sphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsSphereHammersley"
				name="UDPointsSphereHammersley"
				num_parameters="1">
				<comments desc="Generates hammersley base2 points on a unit sphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsSphereHammersleyEx"
				name="UDPointsSphereHammersleyEx"
				num_parameters="2">
				<comments desc="Generates hammersley base p1 points on a unit sphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsSphereHalton"
				name="UDPointsSphereHalton"
				num_parameters="2">
				<comments desc="Generates halton p1=2,p2 points on a unit sphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="3 "
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsSphereHaltonEx"
				name="UDPointsSphereHaltonEx"
				num_parameters="3">
				<comments desc="Generates halton p1,p2 points on a unit sphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsHemisphereRandom"
				name="UDPointsHemisphereRandom"
				num_parameters="1">
				<comments desc="Generates random points on a unit hemisphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsHemisphereHammersley"
				name="UDPointsHemisphereHammersley"
				num_parameters="1">
				<comments desc="Generates hammersley base2 points on a unit hemisphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsHemisphereHammersleyEx"
				name="UDPointsHemisphereHammersleyEx"
				num_parameters="2">
				<comments desc="Generates hammersley base p1 points on a unit hemisphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsHemisphereHalton"
				name="UDPointsHemisphereHalton"
				num_parameters="2">
				<comments desc="Generates halton p1=2,p2 points on a unit hemisphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="3 "
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsHemisphereHaltonEx"
				name="UDPointsHemisphereHaltonEx"
				num_parameters="3">
				<comments desc="Generates halton p1,p2 points on a unit hemisphere. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsPlaneRandom"
				name="UDPointsPlaneRandom"
				num_parameters="1">
				<comments desc="Generate random points on a unit plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsPlaneHammersley"
				name="UDPointsPlaneHammersley"
				num_parameters="1">
				<comments desc="Generate hammersley base2 points on a unit plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apResults"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="udpointsPlaneHammersleyEx"
				name="UDPointsPlaneHammersleyEx"
				num_parameters="2">
				<comments desc="Generate hammersley base p1 points on a unit plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsPlaneHalton"
				name="UDPointsPlaneHalton"
				num_parameters="2">
				<comments desc="Generate halton p1=2,p2 points on a unit plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="3 "
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="udpointsPlaneHaltonEx"
				name="UDPointsPlaneHaltonEx"
				num_parameters="3">
				<comments desc="Generate halton p1,p2 points on a unit plane. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apResults"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="p1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="p2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringGetDampingRatio"
				min_features="15"
				name="DampedSpringGetDampingRatio"
				num_parameters="2">
				<comments desc="Get the damping ratio of a spring set with the specified Ks/Kd constants. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringComputeKdFromDampingRatio"
				min_features="15"
				name="DampedSpringComputeKdFromDampingRatio"
				num_parameters="2">
				<comments desc="Compute the value of Kd for the specified Ks that will result in a spring with the specified damping ratio. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="E"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringAcceleration1"
				min_features="15"
				name="DampedSpringAcceleration1"
				num_parameters="4">
				<comments desc="Computes the acceleration of a 1D damped spring system. \see ni::iSystem::DampedSpringAcceleration4 "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="D"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="V"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringAcceleration2"
				min_features="15"
				name="DampedSpringAcceleration2"
				num_parameters="4">
				<comments desc="Computes the acceleration of a 1D damped spring system. \see ni::iSystem::DampedSpringAcceleration4 "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="D"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringAcceleration3"
				min_features="15"
				name="DampedSpringAcceleration3"
				num_parameters="4">
				<comments desc="Computes the acceleration of a 1D damped spring system. \see ni::iSystem::DampedSpringAcceleration4 "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="D"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="dampedSpringAcceleration4"
				min_features="15"
				name="DampedSpringAcceleration4"
				num_parameters="4">
				<comments desc="Computes the acceleration of a 4D damped spring system. The spring acceleration is applied in the direction opposite from its displacement from a rest position, and a damping acceleration is applied in the direction opposite from its velocity. The damping ratio is : E = Kd/(2*sqrt(Ks)). - When E=1, the spring system is critically damped, and the system will return to its rest position in the minimal possibile time for the given value of Ks. - When E &lt; 1, the spring system is underdamped, and it will oscillate before returning to rest. - When E &gt; 1, then the system is overdamped and it will take longer than it is necessary to reach equilibrum. ">
					<params text="D: is the displacement of the spring/object "/>
					<params text="V: is the current velocity "/>
					<params text="Ks: spring acceleration constant, control the spring component of the acceleration - the stiffness of the spring (the higher the value the faster the spring will reach its target). "/>
					<params text="Kd: damping acceleration constant, control the damping component of the acceleration. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="D"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpring1"
				min_features="15"
				name="CreateDampedSpring1"
				num_parameters="2">
				<comments desc="Creates a 1D damped spring. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpring1 *" typec="ni::iDampedSpring1*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpring2"
				min_features="15"
				name="CreateDampedSpring2"
				num_parameters="2">
				<comments desc="Creates a 2D damped spring. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpring2 *" typec="ni::iDampedSpring2*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpring3"
				min_features="15"
				name="CreateDampedSpring3"
				num_parameters="2">
				<comments desc="Creates a 3D damped spring. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpring3 *" typec="ni::iDampedSpring3*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpring4"
				min_features="15"
				name="CreateDampedSpring4"
				num_parameters="2">
				<comments desc="Creates a 4D damped spring. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpring4 *" typec="ni::iDampedSpring4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpringPosition1"
				min_features="15"
				name="CreateDampedSpringPosition1"
				num_parameters="2">
				<comments desc="Creates a 1D damped spring position. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpringPosition1 *" typec="ni::iDampedSpringPosition1*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpringPosition2"
				min_features="15"
				name="CreateDampedSpringPosition2"
				num_parameters="2">
				<comments desc="Creates a 2D damped spring position. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpringPosition2 *" typec="ni::iDampedSpringPosition2*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpringPosition3"
				min_features="15"
				name="CreateDampedSpringPosition3"
				num_parameters="2">
				<comments desc="Creates a 3D damped spring position. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpringPosition3 *" typec="ni::iDampedSpringPosition3*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createDampedSpringPosition4"
				min_features="15"
				name="CreateDampedSpringPosition4"
				num_parameters="2">
				<comments desc="Creates a 4D damped spring position. ">
					<remark text="If Ks and Kd are zero a critically damped spring with Ks=10 is set. "/>
				</comments>
				<return type="ni::iDampedSpringPosition4 *" typec="ni::iDampedSpringPosition4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Ks"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="Kd"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="createTransform"
				name="CreateTransform"
				num_parameters="0">
				<comments desc="Creates a new transform. "/>
				<return type="iTransform *" typec="iTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createFrustum"
				name="CreateFrustum"
				num_parameters="0">
				<comments desc="Creates a new frustum. "/>
				<return type="iFrustum *" typec="iFrustum*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createAABB"
				name="CreateAABB"
				num_parameters="0">
				<comments desc="Creates a new AABB. "/>
				<return type="iBoundingVolume *" typec="iBoundingVolume*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createIntersection"
				name="CreateIntersection"
				num_parameters="0">
				<comments desc="Creates an intersection. "/>
				<return type="iIntersection *" typec="iIntersection*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createCamera"
				name="CreateCamera"
				num_parameters="0">
				<comments desc="Creates a new camera instance. "/>
				<return type="iCamera *" typec="iCamera*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createNUSpline"
				name="CreateNUSpline"
				num_parameters="1">
				<comments desc="Creates a new Non-uniform spline. "/>
				<return type="iNUSpline *" typec="iNUSpline*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aType"
					type="eNUSplineType"
					typec="eNUSplineType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createOverlayColor" name="CreateOverlayColor" num_parameters="1">
				<comments desc="Creates a color overlay. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOverlayResource" name="CreateOverlayResource" num_parameters="1">
				<comments desc="Create an overlay from the specified resource. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOverlayTexture" name="CreateOverlayTexture" num_parameters="1">
				<comments desc="Creates an overlay that will use the specified texture. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOverlayImage" name="CreateOverlayImage" num_parameters="1">
				<comments desc="Creates an overlay that will use the specified image. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apImage"
					type="iImage *"
					typec="iImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOverlayMaterial" name="CreateOverlayMaterial" num_parameters="1">
				<comments desc="Creates an overlay that will use the specified material. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apMaterial"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadFont" name="LoadFont" num_parameters="1">
				<comments desc="Load a font. \see ni::iGraphics::LoadFont ">
					<remark text="This function uses the default get flags. "/>
					<remark text="Returns a font instance that can be used directly. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadFontEx" name="LoadFontEx" num_parameters="2">
				<comments desc="Load a font. ">
					<remark text="A list of font names separated by commas can be specified, the first font that matches will be used. A font name can be a regular names such as &apos;Arial, Courier New&apos; and/or a file path. Ex: &apos;Arial, fonts/arial.ttf&apos; will look for the Arial font registered in the system, if it isnt found it will try to load from the fonts/arial.ttf resource file. Font name that contain a &apos;.&apos; will not have Bold/Italic appended to their name automatically when using the eFontLoadFlags_Bold/Italic flags. "/>
					<remark text="If no font matches, &apos;Default&apos; is searched, if it fails the 8x8 font is returned. "/>
					<remark text="For each name, system fonts are searched, then fonts which have already been loaded. "/>
					<remark text="Font names can be a &quot;file pattern regex&quot;, aka contain wildcards etc... "/>
					<remark text="Returns a font instance that can be used directly. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tFontLoadFlags"
					typec="tFontLoadFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createFont" name="CreateFont" num_parameters="2">
				<comments desc="Create a font from the given file. ">
					<remark text="Font name is extract from the file name is available otherwise the file name of the source path is used. "/>
					<remark text="This method will not search for previously loaded font and create a new base font object. The prefered method to load/create fonts is to use the LoadFont/Ex() functions. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="pFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFontFromBitmap" name="CreateFontFromBitmap" num_parameters="2">
				<comments desc="Create a font from the given bitmap. ">
					<remark text="This method will not search for previously loaded font and create a new base font object. The prefered method to load/create fonts is to use the LoadFont/Ex() functions. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="pBmp"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFont8x8" name="CreateFont8x8" num_parameters="1">
				<comments desc="Create the default 8x8 system font. ">
					<remark text="The default font name is &quot;8x8&quot;. "/>
					<remark text="This method will not search for previously loaded font and create a new base font object. The prefered method to load/create fonts is to use the LoadFont/Ex() functions. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="enumOSFonts"
				name="EnumOSFonts"
				num_parameters="0">
				<comments desc="Get the list of fonts find on the host OS. " return="A map&lt;display name, font file path&gt; with all the fonts found on the host OS. "/>
				<return type="Ptr&lt;tStringCMap&gt;" typec="Ptr&lt;tStringCMap&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="registerSystemFonts" name="RegisterSystemFonts" num_parameters="0">
				<comments desc="Register all the default system fonts. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="registerSystemFont" name="RegisterSystemFont" num_parameters="3">
				<comments desc="Register a new font as a system font. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspFilePath"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumSystemFonts"
				name="GetNumSystemFonts"
				num_parameters="0"
				property="get"
				property_name2="numSystemFonts"
				property_name="num_system_fonts">
				<comments desc="Get the number of system fonts registered. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSystemFontName"
				name="GetSystemFontName"
				num_parameters="1"
				property="get"
				property_name2="systemFontName"
				property_name="system_font_name">
				<comments desc="Get the name of the specified system font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSystemFontFilePath"
				name="GetSystemFontFilePath"
				num_parameters="1"
				property="get"
				property_name2="systemFontFilePath"
				property_name="system_font_file_path">
				<comments desc="Get the file path of the specified system font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSystemFontFileName"
				name="GetSystemFontFileName"
				num_parameters="1"
				property="get"
				property_name2="systemFontFileName"
				property_name="system_font_file_name">
				<comments desc="Get the file name of the specified system font. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumFonts"
				name="GetNumFonts"
				num_parameters="0"
				property="get"
				property_name2="numFonts"
				property_name="num_fonts">
				<comments desc="Get the number of fonts registered. ">
					<remark text="This doesn&apos;t include the font regular instances. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFontFromIndex"
				name="GetFontFromIndex"
				num_parameters="1"
				property="get"
				property_name2="fontFromIndex"
				property_name="font_from_index">
				<comments desc="Get the font at the given index. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFontFromName"
				name="GetFontFromName"
				num_parameters="1"
				property="get"
				property_name2="fontFromName"
				property_name="font_from_name">
				<comments desc="Get a font from its exact name. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findFont"
				name="FindFont"
				num_parameters="2">
				<comments desc="Find a loaded font which matches the specified names. ">
					<remark text="Uses the same rules as LoadFontEx. "/>
				</comments>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="mode"
					type="tFontLoadFlags"
					typec="tFontLoadFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="clearAllFontCaches" name="ClearAllFontCaches" num_parameters="0">
				<comments desc="Clear all font caches. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFontCacheID"
				name="GetFontCacheID"
				num_parameters="0"
				property="get"
				property_name2="fontCacheID"
				property_name="font_cache_id">
				<comments desc="Get the global font cache ID. ">
					<remark text="The cache ID changes every time a font&apos;s cache is cleared. "/>
					<remark text="The ID can be used to detect changes in the font cache. For example to relayout geometries that depend on the font&apos;s internal texture cache. "/>
					<remark text="The global font cache ID should be used when the actual fonts being used is not trivial (such as in a HTML context). "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="createImage" name="CreateImage" num_parameters="2">
				<comments desc="Create a new blank empty image. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createImageFromFile" name="CreateImageFromFile" num_parameters="1">
				<comments desc="Create a new image from the specified bitmap file. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageFromResource" name="CreateImageFromResource" num_parameters="1">
				<comments desc="Create a new image from the specified resource. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageFromBitmap" name="CreateImageFromBitmap" num_parameters="1">
				<comments desc="Create a new image from the specified bitmap. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apBitmap"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageFromTexture" name="CreateImageFromTexture" num_parameters="1">
				<comments desc="Create a new image from the specified texture. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageFromBitmapAndTexture" name="CreateImageFromBitmapAndTexture" num_parameters="2">
				<comments desc="Create a new image from the specified bitmap and texture. ">
					<remark text="The bitmap and texture must be of the same size. "/>
				</comments>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBitmap"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageEx" name="CreateImageEx" num_parameters="5">
				<comments desc="Create a new image. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apBmp"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apTex"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDepthStencil"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageMap" name="CreateImageMap" num_parameters="2">
				<comments desc="Create an image map. "/>
				<return type="iImageMap *" typec="iImageMap*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszBaseName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszPxf"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createImageGraphicsContext" name="CreateImageGraphicsContext" num_parameters="1">
				<comments desc="Create a graphics context that uses the specified Image as main render target and depth buffer. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apImage"
					type="iImage *"
					typec="iImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createCanvas" name="CreateCanvas" num_parameters="2">
				<comments desc="Creates a new canvas. ">
					<params text="apContext is the graphics context where the canvas will draw "/>
					<params text="apResetMaterial if not NULL is the material that will be used to reset the default material&apos;s value when ResetStates() is called "/>
				</comments>
				<return type="iCanvas *" typec="iCanvas*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apContext"
					type="iGraphicsContext *"
					typec="iGraphicsContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apResetMaterial"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createTextObject" name="CreateTextObject" num_parameters="3">
				<comments desc="Create a new text object. "/>
				<return type="Ptr&lt;iTextObject&gt;" typec="Ptr&lt;iTextObject&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="isVideoFile"
				name="IsVideoFile"
				num_parameters="1">
				<comments desc="Check whether the given file is a supported video file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVideoDecoder" name="CreateVideoDecoder" num_parameters="3">
				<comments desc="Create a video decoder. "/>
				<return type="iVideoDecoder *" typec="iVideoDecoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createVGPath" name="CreateVGPath" num_parameters="0">
				<comments desc="Create iVGPath "/>
				<return type="Ptr&lt;iVGPath&gt;" typec="Ptr&lt;iVGPath&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGStyle" name="CreateVGStyle" num_parameters="0">
				<comments desc="Create iVGStyle "/>
				<return type="Ptr&lt;iVGStyle&gt;" typec="Ptr&lt;iVGStyle&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGTransform" name="CreateVGTransform" num_parameters="0">
				<comments desc="Create iVGTransform "/>
				<return type="Ptr&lt;iVGTransform&gt;" typec="Ptr&lt;iVGTransform&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGPolygonTesselator" name="CreateVGPolygonTesselator" num_parameters="0">
				<comments desc="Create iVGPolygonTesselator "/>
				<return type="Ptr&lt;iVGPolygonTesselator&gt;" typec="Ptr&lt;iVGPolygonTesselator&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGImage" name="CreateVGImage" num_parameters="2">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createVGImageFromBitmap" name="CreateVGImageFromBitmap" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apBitmap"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGImageFromTexture" name="CreateVGImageFromTexture" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGImageFromBitmapAndTexture" name="CreateVGImageFromBitmapAndTexture" num_parameters="2">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBitmap"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGImageFromFile" name="CreateVGImageFromFile" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGImageFromResource" name="CreateVGImageFromResource" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGGradientTable" name="CreateVGGradientTable" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGGradientTable&gt;" typec="Ptr&lt;iVGGradientTable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createVGGradientTableTwoColors" name="CreateVGGradientTableTwoColors" num_parameters="2">
				<comments desc=""/>
				<return type="Ptr&lt;iVGGradientTable&gt;" typec="Ptr&lt;iVGGradientTable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="acolStart"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="acolEnd"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGGradientTableStops" name="CreateVGGradientTableStops" num_parameters="2">
				<comments desc=""/>
				<return type="Ptr&lt;iVGGradientTable&gt;" typec="Ptr&lt;iVGGradientTable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apOffsets"
					type="const tF32CVec *"
					typec="const tF32CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apColors"
					type="const tVec4fCVec *"
					typec="const tVec4fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGPaint" name="CreateVGPaint" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaint&gt;" typec="Ptr&lt;iVGPaint&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aType"
					type="eVGPaintType"
					typec="eVGPaintType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createVGPaintSolid" name="CreateVGPaintSolid" num_parameters="1">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaint&gt;" typec="Ptr&lt;iVGPaint&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGPaintImage" name="CreateVGPaintImage" num_parameters="3">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaintImage&gt;" typec="Ptr&lt;iVGPaintImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apImage"
					type="iVGImage *"
					typec="iVGImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFilter"
					type="eVGImageFilter"
					typec="eVGImageFilter"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aWrap"
					type="eVGWrapType"
					typec="eVGWrapType"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createVGPaintGradient" name="CreateVGPaintGradient" num_parameters="2">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaintGradient&gt;" typec="Ptr&lt;iVGPaintGradient&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eVGGradientType"
					typec="eVGGradientType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apGradientTable"
					type="iVGGradientTable *"
					typec="iVGGradientTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGPaintGradientTwoColors" name="CreateVGPaintGradientTwoColors" num_parameters="3">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaintGradient&gt;" typec="Ptr&lt;iVGPaintGradient&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eVGGradientType"
					typec="eVGGradientType"
					typei="ni::eType_Enum"/>
				<parameter
					name="acolStart"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="acolEnd"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVGPaintGradientStops" name="CreateVGPaintGradientStops" num_parameters="3">
				<comments desc=""/>
				<return type="Ptr&lt;iVGPaintGradient&gt;" typec="Ptr&lt;iVGPaintGradient&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eVGGradientType"
					typec="eVGGradientType"
					typei="ni::eType_Enum"/>
				<parameter
					name="apOffsets"
					type="const tF32CVec *"
					typec="const tF32CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apColors"
					type="const tVec4fCVec *"
					typec="const tVec4fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGraphicsContext.h.idl.xml">
		<interface name="iGraphicsContext" uuid1="F61A7DB5-532F-4C23-90F5-B586F99C7853" uuid2="0xf61a7db5,0x532f,0x4c23,0x90,0xf5,0xb5,0x86,0xf9,0x9c,0x78,0x53">
			<comments desc="Graphics context description interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the context&apos;s graphics object. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDriver"
				name="GetDriver"
				num_parameters="0"
				property="get"
				property_name2="driver"
				property_name="driver">
				<comments desc="Get the context&apos;s driver. "/>
				<return type="iGraphicsDriver *" typec="iGraphicsDriver*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the context width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the context height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="clearBuffers" name="ClearBuffers" num_parameters="4">
				<comments desc="Clear the specified main buffers. ">
					<params text="clearBuffer specifies the buffers to clear. "/>
					<params text="anColor is the color to use to clear the color buffer. "/>
					<params text="afDepth is the value to use to clear the depth buffer. "/>
					<params text="anStencil is the value to use to clear the stencil buffer. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="clearBuffer"
					type="tClearBuffersFlags"
					typec="tClearBuffersFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="afDepth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anStencil"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getRenderTarget"
				name="GetRenderTarget"
				num_parameters="1"
				property="get"
				property_name2="renderTarget"
				property_name="render_target">
				<comments desc="Get the render target set on the specified index. ">
					<remark text="Might be ignored by some contexts "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDepthStencil"
				name="GetDepthStencil"
				num_parameters="0"
				property="get"
				property_name2="depthStencil"
				property_name="depth_stencil">
				<comments desc="Get the depth stencil target. ">
					<remark text="Might be ignored by some contexts "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="display" name="Display" num_parameters="2">
				<comments desc="Display the canvas in its destination window/context. ">
					<remark text="Should be called once rendering to the context is finished, this will flush and unlock shared resources for drivers that dont fully support multi-threaded rendering. If you do not wish to show the content of the context use eGraphicsDisplayFlags_Skip. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFlags"
					type="tGraphicsDisplayFlags"
					typec="tGraphicsDisplayFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="drawOperation" name="DrawOperation" num_parameters="1">
				<comments desc="Draw the specified draw operation. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDrawOp"
					type="iDrawOperation *"
					typec="iDrawOperation*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="captureFrontBuffer"
				name="CaptureFrontBuffer"
				num_parameters="0">
				<comments desc="Capture the front buffer. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setViewport"
				name="SetViewport"
				num_parameters="1"
				property="set"
				property_name2="viewport"
				property_name="viewport">
				<comments desc="Set the viewport. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getViewport"
				name="GetViewport"
				num_parameters="0"
				property="get"
				property_name2="viewport"
				property_name="viewport">
				<comments desc="Get the viewport. "/>
				<return type="sRecti" typec="sRecti" typei="ni::eType_Vec4i"/>
			</method>
			<method
				java_name="setScissorRect"
				name="SetScissorRect"
				num_parameters="1"
				property="set"
				property_name2="scissorRect"
				property_name="scissor_rect">
				<comments desc="Set the scissor rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getScissorRect"
				name="GetScissorRect"
				num_parameters="0"
				property="get"
				property_name2="scissorRect"
				property_name="scissor_rect">
				<comments desc="Get the scissor rectangle. "/>
				<return type="sRecti" typec="sRecti" typei="ni::eType_Vec4i"/>
			</method>
			<method
				java_name="setFixedStates"
				name="SetFixedStates"
				num_parameters="1"
				property="set"
				property_name2="fixedStates"
				property_name="fixed_states">
				<comments desc="Set the default fixed pipeline states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="iFixedStates *"
					typec="iFixedStates*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFixedStates"
				name="GetFixedStates"
				num_parameters="0"
				property="get"
				property_name2="fixedStates"
				property_name="fixed_states">
				<comments desc="Get the default fixed pipeline states. "/>
				<return type="iFixedStates *" typec="iFixedStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMaterial"
				name="SetMaterial"
				num_parameters="1"
				property="set"
				property_name2="material"
				property_name="material">
				<comments desc="Set the default material states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMat"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the default material states. "/>
				<return type="const iMaterial *" typec="const iMaterial*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iGraphicsContextRT" uuid1="16B1A400-2499-C141-A651-1C46CAC313C3" uuid2="0x16b1a400,0x2499,0xc141,0xa6,0x51,0x1c,0x46,0xca,0xc3,0x13,0xc3">
			<comments desc="Render target graphics context interface. "/>
			<parents>
				<parent name="iGraphicsContext"/>
			</parents>
			<method java_name="changeRenderTarget" name="ChangeRenderTarget" num_parameters="2">
				<comments desc="Change a render target. ">
					<remark text="the RT must use the same pixel format as the specified render target. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apRT"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="changeDepthStencil" name="ChangeDepthStencil" num_parameters="1">
				<comments desc="Change the depth stencil. ">
					<remark text="the DS must use the same pixel format as the current depth stencil. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDS"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGraphicsDriver.h.idl.xml">
		<enum name="eGraphicsCaptureFlags">
			<comments desc="Graphics capture flag. "/>
			<value name="eGraphicsCaptureFlags_All" value="niBit ( 0 ) ">
				<comments desc="Clone all draw ops up until stop at. "/>
			</value>
			<value name="eGraphicsCaptureFlags_CloneStopAtGeometry" value="niBit ( 1 ) ">
				<comments desc="Cloning of the geometry of the stop at draw op. "/>
			</value>
			<value name="eGraphicsCaptureFlags_CloneStopAtTextures" value="niBit ( 2 ) ">
				<comments desc="Clone the textures at the specified index. "/>
			</value>
			<value name="eGraphicsCaptureFlags_CloneStopAtStates" value="niBit ( 3 ) ">
				<comments desc="Clone the states at the specified index. "/>
			</value>
			<value name="eGraphicsCaptureFlags_KeepStopAt" value="niBit ( 4 ) ">
				<comments desc="Replace the states of the stop at draw op by the states cloned during the first capture of that draw op. This allows the states to be modified dynamically. "/>
			</value>
			<value name="eGraphicsCaptureFlags_NoTime" value="niBit ( 5 ) ">
				<comments desc="Do not count time perf when capturing the draw ops. "/>
			</value>
			<value name="eGraphicsCaptureFlags_BreakOnStopAtBegin" value="niBit ( 6 ) ">
				<comments desc="Breakpoint on StopAt begin drawop. "/>
			</value>
			<value name="eGraphicsCaptureFlags_BreakOnStopAtEnd" value="niBit ( 7 ) ">
				<comments desc="Breakpoint on StopAt end drawop. "/>
			</value>
		</enum>
		<interface name="iGraphicsDrawOpCapture" uuid1="B9DF0BBE-865D-464A-9EFE-EBE0887797E3" uuid2="0xb9df0bbe,0x865d,0x464a,0x9e,0xfe,0xeb,0xe0,0x88,0x77,0x97,0xe3">
			<comments desc="Draw operation capture object. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="beginCapture" name="BeginCapture" num_parameters="0">
				<comments desc="Begin capturing. ">
					<remark text="DOES NOT clear the previous capture data. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="endCapture" name="EndCapture" num_parameters="0">
				<comments desc="End capturing. " return="The number of draw operations captured. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsCapturing"
				name="GetIsCapturing"
				num_parameters="0"
				property="get"
				property_name2="isCapturing"
				property_name="is_capturing">
				<comments desc="Return whether we the object is currently capturing. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="clearCapture" name="ClearCapture" num_parameters="0">
				<comments desc="Clear all captured data. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setCaptureFlags"
				name="SetCaptureFlags"
				num_parameters="1"
				property="set"
				property_name2="captureFlags"
				property_name="capture_flags">
				<comments desc="Set the capture flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tGraphicsCaptureFlags"
					typec="tGraphicsCaptureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCaptureFlags"
				name="GetCaptureFlags"
				num_parameters="0"
				property="get"
				property_name2="captureFlags"
				property_name="capture_flags">
				<comments desc="Get the capture flags. "/>
				<return type="tGraphicsCaptureFlags" typec="tGraphicsCaptureFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setCaptureStopAt"
				name="SetCaptureStopAt"
				num_parameters="1"
				property="set"
				property_name2="captureStopAt"
				property_name="capture_stop_at">
				<comments desc="Set the current stop at index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anStopAt"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCaptureStopAt"
				name="GetCaptureStopAt"
				num_parameters="0"
				property="get"
				property_name2="captureStopAt"
				property_name="capture_stop_at">
				<comments desc="Get the current stop at index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumCaptured"
				name="GetNumCaptured"
				num_parameters="0"
				property="get"
				property_name2="numCaptured"
				property_name="num_captured">
				<comments desc="Get the number of draw ops captured. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCapturedClear"
				name="GetCapturedClear"
				num_parameters="1"
				property="get"
				property_name2="capturedClear"
				property_name="captured_clear">
				<comments desc="Get the captured clear operation parameters. ">
					<remark text="The format is (ClearFlags,Color,ftoul(Depth),Stencil) "/>
				</comments>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCapturedDrawOp"
				name="GetCapturedDrawOp"
				num_parameters="1"
				property="get"
				property_name2="capturedDrawOp"
				property_name="captured_draw_op">
				<comments desc="Get the draw operation at the specified index. "/>
				<return type="iDrawOperation *" typec="iDrawOperation*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCapturedDrawOpTime"
				name="GetCapturedDrawOpTime"
				num_parameters="1"
				property="get"
				property_name2="capturedDrawOpTime"
				property_name="captured_draw_op_time">
				<comments desc="Get the time taken to submit the specified draw operation "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCapturedDrawOpContext"
				name="GetCapturedDrawOpContext"
				num_parameters="1"
				property="get"
				property_name2="capturedDrawOpContext"
				property_name="captured_draw_op_context">
				<comments desc="Get the context that submited the draw operation. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="beginCaptureDrawOp" name="BeginCaptureDrawOp" num_parameters="3">
				<comments desc="Called to capture a draw operation. " return="eFalse if the draw operation should not be submitted. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apContext"
					type="iGraphicsContext *"
					typec="iGraphicsContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDrawOp"
					type="iDrawOperation *"
					typec="iDrawOperation*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aClearParams"
					type="const sVec4i &amp;"
					typec="const sVec4i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="endCaptureDrawOp" name="EndCaptureDrawOp" num_parameters="3">
				<comments desc="Called to finish the draw operation capture. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apContext"
					type="iGraphicsContext *"
					typec="iGraphicsContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDrawOp"
					type="iDrawOperation *"
					typec="iDrawOperation*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aClearParams"
					type="const sVec4i &amp;"
					typec="const sVec4i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iGraphicsDriver" uuid1="18477542-75B2-4C16-9EE0-B23161CB3EB2" uuid2="0x18477542,0x75b2,0x4c16,0x9e,0xe0,0xb2,0x31,0x61,0xcb,0x3e,0xb2">
			<comments desc="Graphics driver. ">
				<remark text="This interface should never be used directly, iGraphics is the interface that should be used. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the parent iGraphics interface. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the driver&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDesc"
				name="GetDesc"
				num_parameters="0"
				property="get"
				property_name2="desc"
				property_name="desc">
				<comments desc="Get the driver&apos;s description. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDeviceName"
				name="GetDeviceName"
				num_parameters="0"
				property="get"
				property_name2="deviceName"
				property_name="device_name">
				<comments desc="Get the driver device&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCaps"
				name="GetCaps"
				num_parameters="1"
				property="get"
				property_name2="caps"
				property_name="caps">
				<comments desc="Get the driver&apos;s capabilities. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
				<parameter
					last="1"
					name="aCaps"
					type="eGraphicsCaps"
					typec="eGraphicsCaps"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getGraphicsDriverImplFlags"
				name="GetGraphicsDriverImplFlags"
				num_parameters="0"
				property="get"
				property_name2="graphicsDriverImplFlags"
				property_name="graphics_driver_impl_flags">
				<comments desc="Get the driver implementation details. "/>
				<return type="tGraphicsDriverImplFlags" typec="tGraphicsDriverImplFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setDrawOpCapture"
				name="SetDrawOpCapture"
				num_parameters="1"
				property="set"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Set the draw op capture object. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apCapture"
					type="iGraphicsDrawOpCapture *"
					typec="iGraphicsDrawOpCapture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDrawOpCapture"
				name="GetDrawOpCapture"
				num_parameters="0"
				property="get"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Get the draw op capture object. "/>
				<return type="iGraphicsDrawOpCapture *" typec="iGraphicsDrawOpCapture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createContextForWindow" name="CreateContextForWindow" num_parameters="5">
				<comments desc="Create a new context for the specified OS window. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apWindow"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszBBFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszDSFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSwapInterval"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aBackBufferFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createContextForRenderTargets" name="CreateContextForRenderTargets" num_parameters="5">
				<comments desc="Creates a new context for the specified render targets. "/>
				<return type="iGraphicsContextRT *" typec="iGraphicsContextRT*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT0"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT1"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT2"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apRT3"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDS"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="resetAllCaches" name="ResetAllCaches" num_parameters="0">
				<comments desc="Reset all graphics driver caches. ">
					<remark text="This is to be called after using any Native API used by the renderer. If not called the cached states, textures, shaders, etc... wont be properly syncronised, resulting in unpredicatable behaviours. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="checkTextureFormat" name="CheckTextureFormat" num_parameters="2">
				<comments desc="Check whether the specified texture format is supported and set the bitmap format object to the nearest matching native bitmap format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFormat"
					type="iBitmapFormat *"
					typec="iBitmapFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createTexture" name="CreateTexture" num_parameters="8">
				<comments desc="Create a new texture. ">
					<remark text="Setting anNumMipMaps to zero with eTextureFlags_MipMaps automatically computes the number of mipmaps down to 4x4. "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eBitmapType"
					typec="eBitmapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="aaszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anDepth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFlags"
					type="tTextureFlags"
					typec="tTextureFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitBitmapToTexture" name="BlitBitmapToTexture" num_parameters="6">
				<comments desc="Blit a bitmap to a texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToBitmap" name="BlitTextureToBitmap" num_parameters="6">
				<comments desc="Blit a texture to a bitmap. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToTexture" name="BlitTextureToTexture" num_parameters="7">
				<comments desc="Blit a texture into another texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aSrcRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitBitmap3DToTexture" name="BlitBitmap3DToTexture" num_parameters="7">
				<comments desc="Blit a 3d bitmap to a 3d texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iBitmap3D *"
					typec="iBitmap3D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDest"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aSrcMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avSize"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="blitTextureToBitmap3D" name="BlitTextureToBitmap3D" num_parameters="7">
				<comments desc="Blit a 3d texture to a 3d bitmap. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iBitmap3D *"
					typec="iBitmap3D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aSrcMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestMin"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avSize"
					type="const sVec3i &amp;"
					typec="const sVec3i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="eTextureBlitFlags"
					typec="eTextureBlitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getNumShaderProfile"
				name="GetNumShaderProfile"
				num_parameters="1">
				<comments desc="Get the number of Shader profile supported in the specified unit. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getShaderProfile"
				name="GetShaderProfile"
				num_parameters="2">
				<comments desc="Get the profile at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createShader" name="CreateShader" num_parameters="2">
				<comments desc="Load a compiled shader from the specified bytecode. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apByteCode"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createOcclusionQuery" name="CreateOcclusionQuery" num_parameters="0">
				<comments desc="Create a new occlusion query object. "/>
				<return type="iOcclusionQuery *" typec="iOcclusionQuery*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVertexArray" name="CreateVertexArray" num_parameters="3">
				<comments desc="Create a new driver vertex array instance. "/>
				<return type="iVertexArray *" typec="iVertexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anNumVertices"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anFVF"
					type="tFVF"
					typec="tFVF"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUsage"
					type="eArrayUsage"
					typec="eArrayUsage"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createIndexArray" name="CreateIndexArray" num_parameters="4">
				<comments desc="Create a new driver index array instance. "/>
				<return type="iIndexArray *" typec="iIndexArray*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPrimitiveType"
					type="eGraphicsPrimitiveType"
					typec="eGraphicsPrimitiveType"
					typei="ni::eType_Enum"/>
				<parameter
					name="anNumIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anMaxVertexIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aUsage"
					type="eArrayUsage"
					typec="eArrayUsage"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IGraphicsStates.h.idl.xml">
		<interface
			name="iSamplerStates"
			serialize="1"
			uuid1="86963478-914D-4E43-8459-A1DC87F583F9"
			uuid2="0x86963478,0x914d,0x4e43,0x84,0x59,0xa1,0xdc,0x87,0xf5,0x83,0xf9">
			<comments desc="Sampler states interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another sampler states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="const iSamplerStates *"
					typec="const iSamplerStates*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this sampler states. "/>
				<return type="iSamplerStates *" typec="iSamplerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsCompiled"
				name="GetIsCompiled"
				num_parameters="0"
				property="get"
				property_name2="isCompiled"
				property_name="is_compiled">
				<comments desc="Return whether the sampler states are compiled (read-only) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFilter"
				name="SetFilter"
				num_parameters="1"
				property="set"
				property_name2="filter"
				property_name="filter"
				serialize="1">
				<comments desc="Set the filtering mode. (default eSamplerFilter_Point) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFilter"
					type="eSamplerFilter"
					typec="eSamplerFilter"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFilter"
				name="GetFilter"
				num_parameters="0"
				property="get"
				property_name2="filter"
				property_name="filter"
				serialize="1">
				<comments desc="Get the filtering mode. "/>
				<return type="eSamplerFilter" typec="eSamplerFilter" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setWrapS"
				name="SetWrapS"
				num_parameters="1"
				property="set"
				property_name2="wrapS"
				property_name="wrap_s"
				serialize="1">
				<comments desc="Set the S-axis wrapping mode. (default eSamplerWrap_Clamp) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aWrap"
					type="eSamplerWrap"
					typec="eSamplerWrap"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWrapS"
				name="GetWrapS"
				num_parameters="0"
				property="get"
				property_name2="wrapS"
				property_name="wrap_s"
				serialize="1">
				<comments desc="Get the S-axis wrapping mode. "/>
				<return type="eSamplerWrap" typec="eSamplerWrap" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setWrapT"
				name="SetWrapT"
				num_parameters="1"
				property="set"
				property_name2="wrapT"
				property_name="wrap_t"
				serialize="1">
				<comments desc="Set the T-axis wrapping mode. (default eSamplerWrap_Clamp) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aWrap"
					type="eSamplerWrap"
					typec="eSamplerWrap"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWrapT"
				name="GetWrapT"
				num_parameters="0"
				property="get"
				property_name2="wrapT"
				property_name="wrap_t"
				serialize="1">
				<comments desc="Get the T-axis wrapping mode. "/>
				<return type="eSamplerWrap" typec="eSamplerWrap" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setWrapR"
				name="SetWrapR"
				num_parameters="1"
				property="set"
				property_name2="wrapR"
				property_name="wrap_r"
				serialize="1">
				<comments desc="Set the R-axis wrapping mode. (default eSamplerWrap_Clamp) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aWrap"
					type="eSamplerWrap"
					typec="eSamplerWrap"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWrapR"
				name="GetWrapR"
				num_parameters="0"
				property="get"
				property_name2="wrapR"
				property_name="wrap_r"
				serialize="1">
				<comments desc="Get the R-axis wrapping mode. "/>
				<return type="eSamplerWrap" typec="eSamplerWrap" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setBorderColor"
				name="SetBorderColor"
				num_parameters="1"
				property="set"
				property_name2="borderColor"
				property_name="border_color"
				serialize="1">
				<comments desc="Set the border color, for border sampler wrap mode. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBorderColor"
				name="GetBorderColor"
				num_parameters="0"
				property="get"
				property_name2="borderColor"
				property_name="border_color"
				serialize="1">
				<comments desc="Get the border color. "/>
				<return type="const sColor4f &amp;" typec="const sColor4f&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the states description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the states. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="ni::iDataTable *"
					typec="ni::iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			name="iDepthStencilStates"
			serialize="1"
			uuid1="FDB9705C-32D0-41FB-A041-549DC23C7BCD"
			uuid2="0xfdb9705c,0x32d0,0x41fb,0xa0,0x41,0x54,0x9d,0xc2,0x3c,0x7b,0xcd">
			<comments desc="DepthStencil states "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another depth-stencil states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="const iDepthStencilStates *"
					typec="const iDepthStencilStates*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this depth-stencil states. "/>
				<return type="iDepthStencilStates *" typec="iDepthStencilStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsCompiled"
				name="GetIsCompiled"
				num_parameters="0"
				property="get"
				property_name2="isCompiled"
				property_name="is_compiled">
				<comments desc="Return whether the depth-stencil states are compiled (read-only) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setDepthTest"
				name="SetDepthTest"
				num_parameters="1"
				property="set"
				property_name2="depthTest"
				property_name="depth_test"
				serialize="1">
				<comments desc="Set whether the depth test is enabled. (default false) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDepthTest"
				name="GetDepthTest"
				num_parameters="0"
				property="get"
				property_name2="depthTest"
				property_name="depth_test"
				serialize="1">
				<comments desc="Get whether the depth test is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setDepthTestWrite"
				name="SetDepthTestWrite"
				num_parameters="1"
				property="set"
				property_name2="depthTestWrite"
				property_name="depth_test_write"
				serialize="1">
				<comments desc="Set whether the depth test write is enabled. (default true) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDepthTestWrite"
				name="GetDepthTestWrite"
				num_parameters="0"
				property="get"
				property_name2="depthTestWrite"
				property_name="depth_test_write"
				serialize="1">
				<comments desc="Get whether the depth test write is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setDepthTestCompare"
				name="SetDepthTestCompare"
				num_parameters="1"
				property="set"
				property_name2="depthTestCompare"
				property_name="depth_test_compare"
				serialize="1">
				<comments desc="Set depth test compare function. (default eGraphicsCompare_LessEqual) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eGraphicsCompare"
					typec="eGraphicsCompare"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDepthTestCompare"
				name="GetDepthTestCompare"
				num_parameters="0"
				property="get"
				property_name2="depthTestCompare"
				property_name="depth_test_compare"
				serialize="1">
				<comments desc="Get depth test compare function. "/>
				<return type="eGraphicsCompare" typec="eGraphicsCompare" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilMode"
				name="SetStencilMode"
				num_parameters="1"
				property="set"
				property_name2="stencilMode"
				property_name="stencil_mode"
				serialize="1">
				<comments desc="Set the stencil mode. (default eStencilMode_None) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilMode"
					typec="eStencilMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilMode"
				name="GetStencilMode"
				num_parameters="0"
				property="get"
				property_name2="stencilMode"
				property_name="stencil_mode"
				serialize="1">
				<comments desc="Get the stencil mode. "/>
				<return type="eStencilMode" typec="eStencilMode" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilRef"
				name="SetStencilRef"
				num_parameters="1"
				property="set"
				property_name2="stencilRef"
				property_name="stencil_ref"
				serialize="1">
				<comments desc="Set the stencil reference value. (default 0) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getStencilRef"
				name="GetStencilRef"
				num_parameters="0"
				property="get"
				property_name2="stencilRef"
				property_name="stencil_ref"
				serialize="1">
				<comments desc="Get the stencil reference value. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				java_name="setStencilMask"
				name="SetStencilMask"
				num_parameters="1"
				property="set"
				property_name2="stencilMask"
				property_name="stencil_mask"
				serialize="1">
				<comments desc="Set the stencil mask. (default 0xFFFFFFFF) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getStencilMask"
				name="GetStencilMask"
				num_parameters="0"
				property="get"
				property_name2="stencilMask"
				property_name="stencil_mask"
				serialize="1">
				<comments desc="Get the stencil mask. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setStencilFrontCompare"
				name="SetStencilFrontCompare"
				num_parameters="1"
				property="set"
				property_name2="stencilFrontCompare"
				property_name="stencil_front_compare"
				serialize="1">
				<comments desc="Set the stencil front test compare function. (eGraphicsCompare_Never) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eGraphicsCompare"
					typec="eGraphicsCompare"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilFrontCompare"
				name="GetStencilFrontCompare"
				num_parameters="0"
				property="get"
				property_name2="stencilFrontCompare"
				property_name="stencil_front_compare"
				serialize="1">
				<comments desc="Get the stencil front test compare function. "/>
				<return type="eGraphicsCompare" typec="eGraphicsCompare" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilFrontFail"
				name="SetStencilFrontFail"
				num_parameters="1"
				property="set"
				property_name2="stencilFrontFail"
				property_name="stencil_front_fail"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil front test fail. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilFrontFail"
				name="GetStencilFrontFail"
				num_parameters="0"
				property="get"
				property_name2="stencilFrontFail"
				property_name="stencil_front_fail"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil front test fail. "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilFrontPassDepthFail"
				name="SetStencilFrontPassDepthFail"
				num_parameters="1"
				property="set"
				property_name2="stencilFrontPassDepthFail"
				property_name="stencil_front_pass_depth_fail"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil front test pass and the depth test fail. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilFrontPassDepthFail"
				name="GetStencilFrontPassDepthFail"
				num_parameters="0"
				property="get"
				property_name2="stencilFrontPassDepthFail"
				property_name="stencil_front_pass_depth_fail"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil front test pass and the depth test fail. (eStencilOp_Keep) "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilFrontPassDepthPass"
				name="SetStencilFrontPassDepthPass"
				num_parameters="1"
				property="set"
				property_name2="stencilFrontPassDepthPass"
				property_name="stencil_front_pass_depth_pass"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil front test pass and the depth test pass. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilFrontPassDepthPass"
				name="GetStencilFrontPassDepthPass"
				num_parameters="0"
				property="get"
				property_name2="stencilFrontPassDepthPass"
				property_name="stencil_front_pass_depth_pass"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil front test pass and the depth test pass. "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilBackCompare"
				name="SetStencilBackCompare"
				num_parameters="1"
				property="set"
				property_name2="stencilBackCompare"
				property_name="stencil_back_compare"
				serialize="1">
				<comments desc="Set the stencil back test compare function. (eGraphicsCompare_Never) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eGraphicsCompare"
					typec="eGraphicsCompare"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilBackCompare"
				name="GetStencilBackCompare"
				num_parameters="0"
				property="get"
				property_name2="stencilBackCompare"
				property_name="stencil_back_compare"
				serialize="1">
				<comments desc="Get the stencil back test compare function. "/>
				<return type="eGraphicsCompare" typec="eGraphicsCompare" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilBackFail"
				name="SetStencilBackFail"
				num_parameters="1"
				property="set"
				property_name2="stencilBackFail"
				property_name="stencil_back_fail"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil back test fail. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilBackFail"
				name="GetStencilBackFail"
				num_parameters="0"
				property="get"
				property_name2="stencilBackFail"
				property_name="stencil_back_fail"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil back test fail. "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilBackPassDepthFail"
				name="SetStencilBackPassDepthFail"
				num_parameters="1"
				property="set"
				property_name2="stencilBackPassDepthFail"
				property_name="stencil_back_pass_depth_fail"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil back test pass and the depth test fail. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilBackPassDepthFail"
				name="GetStencilBackPassDepthFail"
				num_parameters="0"
				property="get"
				property_name2="stencilBackPassDepthFail"
				property_name="stencil_back_pass_depth_fail"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil back test pass and the depth test fail. "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setStencilBackPassDepthPass"
				name="SetStencilBackPassDepthPass"
				num_parameters="1"
				property="set"
				property_name2="stencilBackPassDepthPass"
				property_name="stencil_back_pass_depth_pass"
				serialize="1">
				<comments desc="Set the stencil operation when the stencil back test pass and the depth test pass. (eStencilOp_Keep) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eStencilOp"
					typec="eStencilOp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStencilBackPassDepthPass"
				name="GetStencilBackPassDepthPass"
				num_parameters="0"
				property="get"
				property_name2="stencilBackPassDepthPass"
				property_name="stencil_back_pass_depth_pass"
				serialize="1">
				<comments desc="Get the stencil operation when the stencil back test pass and the depth test pass. "/>
				<return type="eStencilOp" typec="eStencilOp" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the states description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the states. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="ni::iDataTable *"
					typec="ni::iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			name="iRasterizerStates"
			serialize="1"
			uuid1="8712BD8C-0924-481D-9222-EEFAC173C941"
			uuid2="0x8712bd8c,0x0924,0x481d,0x92,0x22,0xee,0xfa,0xc1,0x73,0xc9,0x41">
			<comments desc="Rasterizer states "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another rasterizer states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="const iRasterizerStates *"
					typec="const iRasterizerStates*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this rasterizer states. "/>
				<return type="iRasterizerStates *" typec="iRasterizerStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsCompiled"
				name="GetIsCompiled"
				num_parameters="0"
				property="get"
				property_name2="isCompiled"
				property_name="is_compiled">
				<comments desc="Return whether the rasterizer states are compiled (read-only) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setWireframe"
				name="SetWireframe"
				num_parameters="1"
				property="set"
				property_name2="wireframe"
				property_name="wireframe"
				serialize="1">
				<comments desc="Set wireframe rendering. (default false) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abWireframe"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getWireframe"
				name="GetWireframe"
				num_parameters="0"
				property="get"
				property_name2="wireframe"
				property_name="wireframe"
				serialize="1">
				<comments desc="Get wireframe rendering. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setCullingMode"
				name="SetCullingMode"
				num_parameters="1"
				property="set"
				property_name2="cullingMode"
				property_name="culling_mode"
				serialize="1">
				<comments desc="Set the culling mode. (default eCullingMode_None) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aMode"
					type="eCullingMode"
					typec="eCullingMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCullingMode"
				name="GetCullingMode"
				num_parameters="0"
				property="get"
				property_name2="cullingMode"
				property_name="culling_mode"
				serialize="1">
				<comments desc="Get the culling mode. "/>
				<return type="eCullingMode" typec="eCullingMode" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setColorWriteMask"
				name="SetColorWriteMask"
				num_parameters="1"
				property="set"
				property_name2="colorWriteMask"
				property_name="color_write_mask"
				serialize="1">
				<comments desc="Set the color write mask. (default eColorWriteMask_All) "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aMask"
					type="eColorWriteMask"
					typec="eColorWriteMask"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getColorWriteMask"
				name="GetColorWriteMask"
				num_parameters="0"
				property="get"
				property_name2="colorWriteMask"
				property_name="color_write_mask"
				serialize="1">
				<comments desc="Get the color write mask. "/>
				<return type="eColorWriteMask" typec="eColorWriteMask" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the states description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the states. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="ni::iDataTable *"
					typec="ni::iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			name="iFixedStates"
			serialize="1"
			uuid1="E5ED8D23-C0B6-443B-9B90-C5F4495D620F"
			uuid2="0xe5ed8d23,0xc0b6,0x443b,0x9b,0x90,0xc5,0xf4,0x49,0x5d,0x62,0x0f">
			<comments desc="Graphics fixed pipeline states interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another fixed pipeline states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="const iFixedStates *"
					typec="const iFixedStates*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this fixed pipeline states. "/>
				<return type="iFixedStates *" typec="iFixedStates*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setCameraViewMatrix"
				name="SetCameraViewMatrix"
				num_parameters="1"
				property="set"
				property_name2="cameraViewMatrix"
				property_name="camera_view_matrix"
				serialize="1">
				<comments desc="Set the fixed pipeline camera view matrix. (default identity) ">
					<remark text="This function will set the view matrix aswell "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setOnlyCameraViewMatrix"
				name="SetOnlyCameraViewMatrix"
				num_parameters="1"
				property="set"
				property_name2="onlyCameraViewMatrix"
				property_name="only_camera_view_matrix">
				<comments desc="Set only the fixed pipeline camera view matrix. (default identity) ">
					<remark text="This function wont modify the view matrix "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCameraViewMatrix"
				name="GetCameraViewMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraViewMatrix"
				property_name="camera_view_matrix"
				serialize="1">
				<comments desc="Get the fixed pipeline camera view matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getCameraInvViewMatrix"
				name="GetCameraInvViewMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraInvViewMatrix"
				property_name="camera_inv_view_matrix">
				<comments desc="Get the inverse camera view matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setCameraProjectionMatrix"
				name="SetCameraProjectionMatrix"
				num_parameters="1"
				property="set"
				property_name2="cameraProjectionMatrix"
				property_name="camera_projection_matrix"
				serialize="1">
				<comments desc="Set the fixed pipeline camera projection matrix. (default identity) ">
					<remark text="This function will set the projection matrix aswell "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setOnlyCameraProjectionMatrix"
				name="SetOnlyCameraProjectionMatrix"
				num_parameters="1"
				property="set"
				property_name2="onlyCameraProjectionMatrix"
				property_name="only_camera_projection_matrix">
				<comments desc="Set only the fixed pipeline camera projection matrix. (default identity) ">
					<remark text="This function wont modify the projection matrix "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCameraProjectionMatrix"
				name="GetCameraProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraProjectionMatrix"
				property_name="camera_projection_matrix"
				serialize="1">
				<comments desc="Get the fixed pipeline camera projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getCameraInvProjectionMatrix"
				name="GetCameraInvProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraInvProjectionMatrix"
				property_name="camera_inv_projection_matrix">
				<comments desc="Get the inverse camera projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getCameraViewProjectionMatrix"
				name="GetCameraViewProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraViewProjectionMatrix"
				property_name="camera_view_projection_matrix">
				<comments desc="Get the camera view projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getCameraInvViewProjectionMatrix"
				name="GetCameraInvViewProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="cameraInvViewProjectionMatrix"
				property_name="camera_inv_view_projection_matrix">
				<comments desc="Get the camera inverse view projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setViewMatrix"
				name="SetViewMatrix"
				num_parameters="1"
				property="set"
				property_name2="viewMatrix"
				property_name="view_matrix"
				serialize="1">
				<comments desc="Set the fixed pipeline view matrix. (default identity) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getViewMatrix"
				name="GetViewMatrix"
				num_parameters="0"
				property="get"
				property_name2="viewMatrix"
				property_name="view_matrix"
				serialize="1">
				<comments desc="Get the fixed pipeline view matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setProjectionMatrix"
				name="SetProjectionMatrix"
				num_parameters="1"
				property="set"
				property_name2="projectionMatrix"
				property_name="projection_matrix"
				serialize="1">
				<comments desc="Set the fixed pipeline projection matrix. (default identity) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVal"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getProjectionMatrix"
				name="GetProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="projectionMatrix"
				property_name="projection_matrix"
				serialize="1">
				<comments desc="Get the fixed pipeline projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getInvViewMatrix"
				name="GetInvViewMatrix"
				num_parameters="0"
				property="get"
				property_name2="invViewMatrix"
				property_name="inv_view_matrix">
				<comments desc="Get the inverse view matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getViewProjectionMatrix"
				name="GetViewProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="viewProjectionMatrix"
				property_name="view_projection_matrix">
				<comments desc="Get the view projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getInvViewProjectionMatrix"
				name="GetInvViewProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="invViewProjectionMatrix"
				property_name="inv_view_projection_matrix">
				<comments desc="Get the inverse view projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="getInvProjectionMatrix"
				name="GetInvProjectionMatrix"
				num_parameters="0"
				property="get"
				property_name2="invProjectionMatrix"
				property_name="inv_projection_matrix">
				<comments desc="Get the inverse projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method java_name="setLookAtMatrices" name="SetLookAtMatrices" num_parameters="8">
				<comments desc="Set a look at matrix and perspective projection in the view and projection matrices. ">
					<params text="abSetCameraMatrices if true the camera and render matrices will be set, if false only the render matrices will be set. "/>
					<params text="avEye is the position of the camera "/>
					<params text="avAt is the target of the camera "/>
					<params text="avUp is the up direction of the camera "/>
					<params text="afFovY is the vertical field of view of the camera, in radians "/>
					<params text="afAspect is the aspect ratio of the projection (width/height) "/>
					<params text="afNear is the distance of the near clip plane "/>
					<params text="afFar is the distance of the far clip plane "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="abSetCameraMatrices"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="avEye"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avAt"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avUp"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afFovY"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afAspect"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afNear"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afFar"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="setOrthoMatrices" name="SetOrthoMatrices" num_parameters="4">
				<comments desc="Set an orthographic projection in the view and projection matrices. ">
					<remark text="Takes in account ni::eGraphicsCaps_OrthoProjectionOffset "/>
					<remark text="This is meant to be used to do ortho projections at the screen&apos;s resolution. To do generic ortho projection generate your ortho projection matrix using MatrixOrthoOffCenterLH (for example) and set the view matrix to identity. "/>
					<params text="abSetCameraMatrices if true the camera and render matrices will be set, if false only the render matrices will be set. "/>
					<params text="arectViewport defines the orthographic projection area. "/>
					<params text="afNear is the distance of the near clip plane "/>
					<params text="afFar is the distance of the far clip plane "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="abSetCameraMatrices"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="arectViewport"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afNear"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afFar"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the states description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the states. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="ni::iDataTable *"
					typec="ni::iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IImage.h.idl.xml">
		<enum name="eImageUsage">
			<comments desc="Image usage. "/>
			<value name="eImageUsage_Source" value="0 ">
				<comments desc="The usage is read-only to be used a source for rendering. ">
					<remark text="No dirty region is added. "/>
				</comments>
			</value>
			<value name="eImageUsage_Target" value="1 ">
				<comments desc="The usage is write-only to be used as a render target. Previous content is preserved. "/>
			</value>
			<value name="eImageUsage_DepthStencil" value="2 ">
				<comments desc="For GetTexture only, grabs the depth stencil for rendering. "/>
			</value>
			<value name="eImageUsage_TargetDiscard" value="3 ">
				<comments desc="The usage is write-only to be used as a render target. The whole content of the target is assumed to be overwritten and so no effort to keep the previous content is made. "/>
			</value>
		</enum>
		<interface name="iImage" uuid1="848A96E9-4B5C-43CF-9C61-A26DF54C7F07" uuid2="0x848a96e9,0x4b5c,0x43cf,0x9c,0x61,0xa2,0x6d,0xf5,0x4c,0x7f,0x07">
			<comments desc="Image interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified image. ">
					<remark text="Copy the bitmap&apos;s content. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apImage"
					type="iImage *"
					typec="iImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this image. ">
					<remark text="Clone the bitmap&apos;s content. "/>
				</comments>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasBitmap"
				name="GetHasBitmap"
				num_parameters="0"
				property="get"
				property_name2="hasBitmap"
				property_name="has_bitmap">
				<comments desc="Get whether a bitmap is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabBitmap" name="GrabBitmap" num_parameters="2">
				<comments desc="Grab the image as a bitmap to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the bitmap&apos;s update from the texture. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eImageUsage"
					typec="eImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasTexture"
				name="GetHasTexture"
				num_parameters="0"
				property="get"
				property_name2="hasTexture"
				property_name="has_texture">
				<comments desc="Get whether a texture is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHasDepthStencil"
				name="GetHasDepthStencil"
				num_parameters="0"
				property="get"
				property_name2="hasDepthStencil"
				property_name="has_depth_stencil">
				<comments desc="Get whether a depth stencil is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabTexture" name="GrabTexture" num_parameters="2">
				<comments desc="Grab the image as a texture to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the texture&apos;s update from the bitmap. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eImageUsage"
					typec="eImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the image&apos;s width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the image&apos;s height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the image&apos;s size in a vec2f. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="recomputeBitmapMipmapsBeforeCopyToTexture" name="RecomputeBitmapMipmapsBeforeCopyToTexture" num_parameters="0">
				<comments desc="Indicate that the bitmap&apos;s mipmaps should be recomputed the next time the bitmap is copied to the texture. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IImageMap.h.idl.xml">
		<enum name="eImageMapSerializeFlags">
			<comments desc="Image map serialization flags. "/>
			<value name="eImageMapSerializeFlags_Write" value="niBit ( 0 ) ">
				<comments desc="Serialize write "/>
			</value>
			<value name="eImageMapSerializeFlags_Read" value="niBit ( 1 ) ">
				<comments desc="Serialize read "/>
			</value>
		</enum>
		<interface name="iImageMap" uuid1="A5A4C988-BC75-4A36-B054-B96CB9D2541B" uuid2="0xa5a4c988,0xbc75,0x4a36,0xb0,0x54,0xb9,0x6c,0xb9,0xd2,0x54,0x1b">
			<comments desc="Image map interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setMaxNumPages"
				name="SetMaxNumPages"
				num_parameters="1"
				property="set"
				property_name2="maxNumPages"
				property_name="max_num_pages">
				<comments desc="Set the maximum number of pages. ">
					<remark text="Zero, the default value, means no limit. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMax"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxNumPages"
				name="GetMaxNumPages"
				num_parameters="0"
				property="get"
				property_name2="maxNumPages"
				property_name="max_num_pages">
				<comments desc="Get the maximum number of pages. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setPageSize"
				name="SetPageSize"
				num_parameters="1"
				property="set"
				property_name2="pageSize"
				property_name="page_size">
				<comments desc="Set the resolution of a page. ">
					<remark text="Default is 1024 or the maximum texture size on the current hardware. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageSize"
				name="GetPageSize"
				num_parameters="0"
				property="get"
				property_name2="pageSize"
				property_name="page_size">
				<comments desc="Get the resolution of a page. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setPageMipMaps"
				name="SetPageMipMaps"
				num_parameters="1"
				property="set"
				property_name2="pageMipMaps"
				property_name="page_mip_maps">
				<comments desc="Set the number of mipmaps of a page. ">
					<remark text="Reset by set page size if the number of mipmaps is != 0 (the default) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumMipMaps"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageMipMaps"
				name="GetPageMipMaps"
				num_parameters="0"
				property="get"
				property_name2="pageMipMaps"
				property_name="page_mip_maps">
				<comments desc="Get the number of mipmaps of a page. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setComputeMipMapsPerPage"
				name="SetComputeMipMapsPerPage"
				num_parameters="1"
				property="set"
				property_name2="computeMipMapsPerPage"
				property_name="compute_mip_maps_per_page">
				<comments desc="Set whether the mipmaps are computed for the whole page after an image has been added. That is regardless of whether the image added had mipmap itself. ">
					<remark text="Default is eFalse. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abComputeMipMapsPerPage"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getComputeMipMapsPerPage"
				name="GetComputeMipMapsPerPage"
				num_parameters="0"
				property="get"
				property_name2="computeMipMapsPerPage"
				property_name="compute_mip_maps_per_page">
				<comments desc="Get whether the mipmaps are computed for the whole page after an image has been added. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setPageFormat"
				name="SetPageFormat"
				num_parameters="1"
				property="set"
				property_name2="pageFormat"
				property_name="page_format">
				<comments desc="Set the page format. ">
					<remark text="The default is R8G8B8A8 "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspFormat"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPageFormat"
				name="GetPageFormat"
				num_parameters="0"
				property="get"
				property_name2="pageFormat"
				property_name="page_format">
				<comments desc="Get the page format. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumPages"
				name="GetNumPages"
				num_parameters="0"
				property="get"
				property_name2="numPages"
				property_name="num_pages">
				<comments desc="Get the number of pages in the image map. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPage"
				name="GetPage"
				num_parameters="1"
				property="get"
				property_name2="page"
				property_name="page">
				<comments desc="Get the specified page in the image map. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the image map. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setDefaultImageBlendMode"
				name="SetDefaultImageBlendMode"
				num_parameters="1"
				property="set"
				property_name2="defaultImageBlendMode"
				property_name="default_image_blend_mode">
				<comments desc="Set the default blend mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultImageBlendMode"
				name="GetDefaultImageBlendMode"
				num_parameters="0"
				property="get"
				property_name2="defaultImageBlendMode"
				property_name="default_image_blend_mode">
				<comments desc="Get the default blend mode. "/>
				<return type="eBlendMode" typec="eBlendMode" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setDefaultImageFilter"
				name="SetDefaultImageFilter"
				num_parameters="1"
				property="set"
				property_name2="defaultImageFilter"
				property_name="default_image_filter">
				<comments desc="Set the default filtering. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abFiltering"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultImageFilter"
				name="GetDefaultImageFilter"
				num_parameters="0"
				property="get"
				property_name2="defaultImageFilter"
				property_name="default_image_filter">
				<comments desc="Get the default filtering. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getNumImages"
				name="GetNumImages"
				num_parameters="0"
				property="get"
				property_name2="numImages"
				property_name="num_images">
				<comments desc="Get the number of images. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getImage"
				name="GetImage"
				num_parameters="1"
				property="get"
				property_name2="image"
				property_name="image">
				<comments desc="Get the image at the specified index. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getImageIndex"
				name="GetImageIndex"
				num_parameters="1"
				property="get"
				property_name2="imageIndex"
				property_name="image_index">
				<comments desc="Get the index of the image at the specified index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apImage"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getImageFromName"
				name="GetImageFromName"
				num_parameters="1"
				property="get"
				property_name2="imageFromName"
				property_name="image_from_name">
				<comments desc="Get the first image with the given name. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addImage" name="AddImage" num_parameters="2">
				<comments desc="Add an image to the image map. " return="An new image packed in the image map, if failed returns NULL. ">
					<remark text="The returned overlay is owned by the image map, when the image map is released or invalidated the overlay will be invalidated. "/>
				</comments>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apBitmap"
					type="iBitmap2D *"
					typec="iBitmap2D*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addImageFromResource" name="AddImageFromResource" num_parameters="2">
				<comments desc="Add an image to the image map loading from a resource. " return="An new image packed in the image map, if failed returns NULL. ">
					<remark text="The returned overlay is owned by the image map, when the image map is released or invalidated the overlay will be invalidated. "/>
					<params text="ahspName is the name of the image, if the name isnt not specified the resource path is used as name. "/>
					<params text="ahspRes is the path of the resource. "/>
				</comments>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addImageFromIconSet" name="AddImageFromIconSet" num_parameters="5">
				<comments desc="Add an image to the image map loading from a icon set folder. " return="An new image packed in the image map, if failed returns NULL. ">
					<remark text="The returned overlay is owned by the image map, when the image map is released or invalidated the overlay will be invalidated. "/>
					<remark text="This method will try to load all mip map levels from several folders, up to maxres down to minres, missing versions will be generated automatically. "/>
					<remark text="The path for the images is folder/[res]x[res]/res "/>
					<params text="ahspName is the name of the image, if the name isnt not specified the resource path is used as name. "/>
					<params text="ahspFolder is the base folder name. "/>
					<params text="ahspRes is the path of the resource. "/>
					<params text="anMaxRes is the maximum icon resolution to use. "/>
					<params text="anMinRes is the minimum icon resolution to use. "/>
				</comments>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspFolder"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anMaxRes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anMinRes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="removeImage" name="RemoveImage" num_parameters="1">
				<comments desc="Remove an image from the image map. ">
					<remark text="Removing an image will invalidate the overlay and repack the cache, this operation should be considered slow. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apImage"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getShouldSerialize"
				name="GetShouldSerialize"
				num_parameters="0"
				property="get"
				property_name2="shouldSerialize"
				property_name="should_serialize">
				<comments desc="Get whether the image map has been modified since the last serialize read. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="serialize" name="Serialize" num_parameters="2">
				<comments desc="Serialize the image map to/from the specified file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tImageMapSerializeFlags"
					typec="tImageMapSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IIndexArray.h.idl.xml">
		<interface name="iIndexArray" uuid1="A1AB22BF-95B1-43FE-923C-9EEF84CA8341" uuid2="0xa1ab22bf,0x95b1,0x43fe,0x92,0x3c,0x9e,0xef,0x84,0xca,0x83,0x41">
			<comments desc="Index array interface ">
				<remark text="Bindable "/>
			</comments>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getPrimitiveType"
				name="GetPrimitiveType"
				num_parameters="0"
				property="get"
				property_name2="primitiveType"
				property_name="primitive_type">
				<comments desc="Get the primitive type of this index array. "/>
				<return type="eGraphicsPrimitiveType" typec="eGraphicsPrimitiveType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getNumIndices"
				name="GetNumIndices"
				num_parameters="0"
				property="get"
				property_name2="numIndices"
				property_name="num_indices">
				<comments desc="Get the number of indices in the given index array. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxVertexIndex"
				name="GetMaxVertexIndex"
				num_parameters="0"
				property="get"
				property_name2="maxVertexIndex"
				property_name="max_vertex_index">
				<comments desc="Get the maximum vertex index that can be used in this index array. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getUsage"
				name="GetUsage"
				num_parameters="0"
				property="get"
				property_name2="usage"
				property_name="usage">
				<comments desc="Get the usage of the given vertex array. "/>
				<return type="eArrayUsage" typec="eArrayUsage" typei="ni::eType_Enum"/>
			</method>
			<method java_name="lock" name="Lock" num_parameters="3">
				<comments desc="Lock index array memory to enable writting and reading in it. " return="a pointer to the index data. ">
					<remark text="pass 0 for ulFirstIndex and ulNumIndex to lock the entire array. "/>
					<remark text="This method should be considered as slow as it may perform some processing to adapt the indices data to the renderer&apos;s supported format. "/>
					<params text="ulFirstIndex is the offset in the index data to lock. "/>
					<params text="ulNumIndex is the number of index to lock. "/>
					<params text="aLock specify the locking mode. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="ulFirstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulNumIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aLock"
					type="eLock"
					typec="eLock"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="unlock" name="Unlock" num_parameters="0">
				<comments desc="Unlock vertex array memory. ">
					<remark text="This method should be considered as slow as it may perform some processing to adapt the indices data to the renderer&apos;s supported format. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsLocked"
				name="GetIsLocked"
				num_parameters="0"
				property="get"
				property_name2="isLocked"
				property_name="is_locked">
				<comments desc="Return true if the array is locked. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IIntersection.h.idl.xml">
		<enum name="eIntersectionResult">
			<comments desc="Intersection result. "/>
			<value name="eIntersectionResult_None" value="0 ">
				<comments desc="No intersection result. "/>
			</value>
			<value name="eIntersectionResult_Inside" value="1 ">
				<comments desc="Inside the bounding volume. "/>
			</value>
			<value name="eIntersectionResult_Intersect" value="2 ">
				<comments desc="Intersect the bounding volume. "/>
			</value>
		</enum>
		<interface name="iIntersection" uuid1="64C8B5C4-4D70-46E4-B534-9DA2854D1928" uuid2="0x64c8b5c4,0x4d70,0x46e4,0xb5,0x34,0x9d,0xa2,0x85,0x4d,0x19,0x28">
			<comments desc="Intersection result interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setResult"
				name="SetResult"
				num_parameters="1"
				property="set"
				property_name2="result"
				property_name="result">
				<comments desc="Set the intersection result. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aResult"
					type="eIntersectionResult"
					typec="eIntersectionResult"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getResult"
				name="GetResult"
				num_parameters="0">
				<comments desc="Get the intersection result. "/>
				<return type="eIntersectionResult" typec="eIntersectionResult" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setPosition"
				name="SetPosition"
				num_parameters="1"
				property="set"
				property_name2="position"
				property_name="position">
				<comments desc="Set the intersection&apos;s position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPosition"
				name="GetPosition"
				num_parameters="0"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the intersection&apos;s position. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setBaryCentric"
				name="SetBaryCentric"
				num_parameters="1"
				property="set"
				property_name2="baryCentric"
				property_name="bary_centric">
				<comments desc="Set the intersection&apos;s barycentric coordinate. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avBC"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBaryCentric"
				name="GetBaryCentric"
				num_parameters="0"
				property="get"
				property_name2="baryCentric"
				property_name="bary_centric">
				<comments desc="Get the intersection&apos;s barycentric coordinate. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setPolygonIndex"
				name="SetPolygonIndex"
				num_parameters="1"
				property="set"
				property_name2="polygonIndex"
				property_name="polygon_index">
				<comments desc="Set the index of the intersected polygon. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPolygonIndex"
				name="GetPolygonIndex"
				num_parameters="0"
				property="get"
				property_name2="polygonIndex"
				property_name="polygon_index">
				<comments desc="Get the index of the intersected polygon. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IJpegReader.h.idl.xml">
		<interface name="iJpegReader" uuid1="8E453086-379F-4848-BCB4-6F0303A1C6AF" uuid2="0x8e453086,0x379f,0x4848,0xbc,0xb4,0x6f,0x03,0x03,0xa1,0xc6,0xaf">
			<comments desc="Jpeg reader interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="readHeaderTables" name="ReadHeaderTables" num_parameters="0">
				<comments desc="Read the jpeg header tables only. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="beginRead" name="BeginRead" num_parameters="0">
				<comments desc="Start reading a jpeg image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="endRead" name="EndRead" num_parameters="0">
				<comments desc="End reading a jpeg image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="discardBuffer" name="DiscardBuffer" num_parameters="0">
				<comments desc="Discard existing bytes in the buffer. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFile"
				name="GetFile"
				num_parameters="0"
				property="get"
				property_name2="file"
				property_name="file">
				<comments desc="Get the file from which the data are read. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the width of the current image. ">
					<remark text="The value will be valid only between Begin/EndRead; "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the height of the current image. ">
					<remark text="The value will be valid only between Begin/EndRead; "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumComponents"
				name="GetNumComponents"
				num_parameters="0"
				property="get"
				property_name2="numComponents"
				property_name="num_components">
				<comments desc="Get the number of 8bits components. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColorSpace"
				name="GetColorSpace"
				num_parameters="0"
				property="get"
				property_name2="colorSpace"
				property_name="color_space">
				<comments desc="Get the color space. "/>
				<return type="eColorSpace" typec="eColorSpace" typei="ni::eType_Enum"/>
			</method>
			<method java_name="readScanline" name="ReadScanline" num_parameters="1">
				<comments desc="Read the next scanline. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apOut"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readBitmap" name="ReadBitmap" num_parameters="1">
				<comments desc="Read a 2d bitmap from the result of the next begin/end read. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apGraphics"
					type="iGraphics *"
					typec="iGraphics*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IJpegWriter.h.idl.xml">
		<enum name="eJpegWriteFlags">
			<comments desc="Jpeg write flags "/>
			<value name="eJpegWriteFlags_None" value="0 ">
				<comments desc="No flags. "/>
			</value>
			<value name="eJpegWriteFlags_YCoCg" value="niBit ( 0 ) ">
				<comments desc="Use the custom YCoCg color space. "/>
			</value>
			<value name="eJpegWriteFlags_Alpha" value="niBit ( 1 ) ">
				<comments desc="Has an alpha channel, implies the use of the YCoCg(A) colorspace. "/>
			</value>
		</enum>
		<interface name="iJpegWriter" uuid1="D8DDBBF9-9609-44EE-80E5-7A99973AF903" uuid2="0xd8ddbbf9,0x9609,0x44ee,0x80,0xe5,0x7a,0x99,0x97,0x3a,0xf9,0x03">
			<comments desc="Jpeg writer interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="beginWrite" name="BeginWrite" num_parameters="7">
				<comments desc="Begin writing a new jpeg file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aInCS"
					type="eColorSpace"
					typec="eColorSpace"
					typei="ni::eType_Enum"/>
				<parameter
					name="anC"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anQuality"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFlags"
					type="tJpegWriteFlags"
					typec="tJpegWriteFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="endWrite" name="EndWrite" num_parameters="0">
				<comments desc="End writing the jpeg file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="writeScanline" name="WriteScanline" num_parameters="1">
				<comments desc="Write a scanline. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="writeBitmap" name="WriteBitmap" num_parameters="4">
				<comments desc="Write a 2d bitmap. ">
					<remark text="Supports R8G8B8 and R8G8B8A8. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBmp"
					type="const iBitmap2D *"
					typec="const iBitmap2D*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anQuality"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFlags"
					type="tJpegWriteFlags"
					typec="tJpegWriteFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IMaterial.h.idl.xml">
		<enum name="eMaterialFlags">
			<comments desc="Material flags. "/>
			<value name="eMaterialFlags_DoubleSided" value="niBit ( 0 ) ">
				<comments desc="Material is double sided. ">
					<remark text="This is independant of the culling mode, the graphics driver is responsible for making sure that double sided materials are drawn both sides when this flag is set. "/>
				</comments>
			</value>
			<value name="eMaterialFlags_Translucent" value="niBit ( 1 ) ">
				<comments desc="Material is translucent. "/>
			</value>
			<value name="eMaterialFlags_Transparent" value="niBit ( 2 ) ">
				<comments desc="Material is transparent. ">
					<remark text="A transparent material is alpha tested, the alpha test key value is in the alpha channel of the Base Channel color. "/>
				</comments>
			</value>
			<value name="eMaterialFlags_DiffuseModulate" value="niBit ( 3 ) ">
				<comments desc="Multiply the diffuse channel texture by the diffuse channel&apos;s color. "/>
			</value>
			<value name="eMaterialFlags_Vertex" value="niBit ( 4 ) ">
				<comments desc="The material is vertex lit. "/>
			</value>
			<value name="eMaterialFlags_HeightMap" value="niBit ( 5 ) ">
				<comments desc="The material has a height map. "/>
			</value>
			<value name="eMaterialFlags_NormalMap" value="niBit ( 6 ) ">
				<comments desc="The material uses a normal map. Otherwise it&apos;s considered to be a grayscale bump. "/>
			</value>
			<value name="eMaterialFlags_Refraction" value="niBit ( 7 ) ">
				<comments desc="The material is refracting. "/>
			</value>
			<value name="eMaterialFlags_Decal" value="niBit ( 8 ) ">
				<comments desc="The material is used as a decal. "/>
			</value>
			<value name="eMaterialFlags_TileMap" value="niBit ( 9 ) ">
				<comments desc="The material is a tilemap. "/>
			</value>
			<value name="eMaterialFlags_DepthOnly" value="niBit ( 10 ) ">
				<comments desc="The material should only be drawn in the depth buffer. (no color write) "/>
			</value>
			<value name="eMaterialFlags_NoShadow" value="niBit ( 11 ) ">
				<comments desc="The material doesn&apos;t cast shadow. "/>
			</value>
			<value name="eMaterialFlags_NoLighting" value="niBit ( 12 ) ">
				<comments desc="The material shouldn&apos;t be lit. "/>
			</value>
			<value name="eMaterialFlags_NoDraw" value="niBit ( 13 ) ">
				<comments desc="The material isnt drawn. "/>
			</value>
			<value name="eMaterialFlags_DistanceField" value="niBit ( 14 ) ">
				<comments desc="The material&apos;s opacity channel contains a distance field. "/>
			</value>
			<value name="eMaterialFlags_TransparentAA" value="niBit ( 15 ) ">
				<comments desc="Enable transparent (alpha-tested) anti-aliasing. "/>
			</value>
			<value name="eMaterialFlags_NoCollision" value="niBit ( 16 ) ">
				<comments desc="No collision mesh should be associated with this material. "/>
			</value>
			<value name="eMaterialFlags_PolygonOffset" value="niBit ( 17 ) ">
				<comments desc="Using polygon offset in this material "/>
			</value>
		</enum>
		<enum name="eMaterialChannel">
			<comments desc="Material channel "/>
			<value name="eMaterialChannel_Base" value="0 ">
				<comments desc="Base texture map. RGB : Diffuse/albedo color Alpha : Opacity Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_Opacity" value="1 ">
				<comments desc="Opacity/Detail texture map. RGB : Detail Alpha : Opacity/Detail Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_Bump" value="2 ">
				<comments desc="Bump map. RGB : Normal map. Alpha : Height map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_Specular" value="3 ">
				<comments desc="Specular map. RGB : Specular color Grayscale : Gloss. Specular color alpha contains the specular power. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_Environment" value="4 ">
				<comments desc="Environment map. RGB : Color Default Blend mode : Modulate "/>
			</value>
			<value name="eMaterialChannel_Ambient" value="5 ">
				<comments desc="Light/ambient map. RGB : Light color Alpha : Light intensity Default Blend mode : Modulate "/>
			</value>
			<value name="eMaterialChannel_Emissive" value="6 ">
				<comments desc="Emissive map. RGB : Color Alpha : Directional coefficient. Default Blend mode : Additive "/>
			</value>
			<value name="eMaterialChannel_Refraction" value="7 ">
				<comments desc="Refraction direction map. RGB : Refraction direction Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T0" value="8 ">
				<comments desc="User 0 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T1" value="9 ">
				<comments desc="User 1 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T2" value="10 ">
				<comments desc="User 2 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T3" value="11 ">
				<comments desc="User 3 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T4" value="12 ">
				<comments desc="User 4 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T5" value="13 ">
				<comments desc="User 5 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T6" value="14 ">
				<comments desc="User 6 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_T7" value="15 ">
				<comments desc="User 7 map. Default Blend mode : NoBlending "/>
			</value>
			<value name="eMaterialChannel_Last" value="16 ">
				<comments desc="\internal Default Blend mode : NoBlending "/>
			</value>
		</enum>
		<enum name="eMaterialExpression">
			<comments desc="Material expressions "/>
			<value name="eMaterialExpression_Tex0" value="0 ">
				<comments desc="Texture channel 0 matrix expression. Shader uniform: float4 fpsExprTex0. ">
					<remark text="Works with the fixed pipeline. "/>
				</comments>
			</value>
			<value name="eMaterialExpression_Tex1" value="1 ">
				<comments desc="Texture channel 1 matrix expression. Shader uniform: float4 fpsExprTex1. ">
					<remark text="Works with the fixed pipeline. "/>
				</comments>
			</value>
			<value name="eMaterialExpression_Matrix0" value="2 ">
				<comments desc="Generic matrix expression. Shader uniform: float4x4 fpsExprMatrix0. ">
					<remark text="The usage depends on the shader / render path actually used. "/>
				</comments>
			</value>
			<value name="eMaterialExpression_Matrix1" value="3 ">
				<comments desc="Generic matrix expression. Shader uniform: float4x4 fpsExprMatrix1. ">
					<remark text="The usage depends on the shader / render path actually used. "/>
				</comments>
			</value>
			<value name="eMaterialExpression_Last" value="4">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iMaterial" uuid1="3D0F9569-2D97-4EFD-ABE2-853FBFAFBC88" uuid2="0x3d0f9569,0x2d97,0x4efd,0xab,0xe2,0x85,0x3f,0xbf,0xaf,0xbc,0x88">
			<comments desc="Material interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the parent graphics object. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setName"
				name="SetName"
				num_parameters="1"
				property="set"
				property_name2="name"
				property_name="name">
				<comments desc="Set the material&apos;s name. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the material&apos;s name. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setClass"
				name="SetClass"
				num_parameters="1"
				property="set"
				property_name2="class"
				property_name="class">
				<comments desc="Set the material&apos;s class. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClassName"
				name="GetClass"
				num_parameters="0"
				property="get"
				property_name2="class"
				property_name="class">
				<comments desc="Get the material&apos;s class. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the texture width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the texture height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDepth"
				name="GetDepth"
				num_parameters="0"
				property="get"
				property_name2="depth"
				property_name="depth">
				<comments desc="Get the texture depth. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setFlags"
				name="SetFlags"
				num_parameters="1"
				property="set"
				property_name2="flags"
				property_name="flags">
				<comments desc="Set the material&apos;s flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tMaterialFlags"
					typec="tMaterialFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the material&apos;s flags. "/>
				<return type="tMaterialFlags" typec="tMaterialFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setBlendMode"
				name="SetBlendMode"
				num_parameters="1"
				property="set"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Set the material&apos;s blend mode. ">
					<remark text="Shortcut to base sampler&apos;s blend mode. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBlendMode"
				name="GetBlendMode"
				num_parameters="0"
				property="get"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Get the material&apos;s blend mode. ">
					<remark text="Shortcut to base sampler&apos;s blend mode. "/>
				</comments>
				<return type="eBlendMode" typec="eBlendMode" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setRasterizerStates"
				name="SetRasterizerStates"
				num_parameters="1"
				property="set"
				property_name2="rasterizerStates"
				property_name="rasterizer_states">
				<comments desc="Set the material&apos;s rasterizer states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getRasterizerStates"
				name="GetRasterizerStates"
				num_parameters="0"
				property="get"
				property_name2="rasterizerStates"
				property_name="rasterizer_states">
				<comments desc="Get the material&apos;s rasterizer states. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setDepthStencilStates"
				name="SetDepthStencilStates"
				num_parameters="1"
				property="set"
				property_name2="depthStencilStates"
				property_name="depth_stencil_states">
				<comments desc="Set the material&apos;s depth stencil states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getDepthStencilStates"
				name="GetDepthStencilStates"
				num_parameters="0"
				property="get"
				property_name2="depthStencilStates"
				property_name="depth_stencil_states">
				<comments desc="Get the material&apos;s depth stencil states. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setPolygonOffset"
				name="SetPolygonOffset"
				num_parameters="1"
				property="set"
				property_name2="polygonOffset"
				property_name="polygon_offset">
				<comments desc="Set the material&apos;s polygon offset. ">
					<remark text="The polygon offset is computed as: offset = (slope * DZ) + (units * r) where DZ is the change in depth relative to the screen area of the triangle, and r is the smallest value that is guaranteed to produce a resolvable offset for a given implementation. "/>
					<remark text="Useful for avoiding z-fighting when rendering decals, shadows, or coplanar geometry. "/>
					<params text="avOffset. Vec2(x: units scale factor, y: depth slope factor) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avOffset"
					type="const ni::sVec2f &amp;"
					typec="const ni::sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPolygonOffset"
				name="GetPolygonOffset"
				num_parameters="0"
				property="get"
				property_name2="polygonOffset"
				property_name="polygon_offset">
				<comments desc="Get the material&apos;s polygon offset. " return="Vec2(x: units scale factor, y: depth slope factor) "/>
				<return type="ni::sVec2f" typec="ni::sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getHasShader"
				name="GetHasShader"
				num_parameters="0"
				property="get"
				property_name2="hasShader"
				property_name="has_shader">
				<comments desc="Get whether any shader is set. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setShader"
				name="SetShader"
				num_parameters="2"
				property="set"
				property_name2="shader"
				property_name="shader">
				<comments desc="Set the specified shader. ">
					<remark text="Not cloned with the material. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apProgram"
					type="iShader *"
					typec="iShader*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getShader"
				name="GetShader"
				num_parameters="1"
				property="get"
				property_name2="shader"
				property_name="shader">
				<comments desc="Get the specified shader. "/>
				<return type="iShader *" typec="iShader*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aUnit"
					type="eShaderUnit"
					typec="eShaderUnit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setShaderConstants"
				name="SetShaderConstants"
				num_parameters="1"
				property="set"
				property_name2="shaderConstants"
				property_name="shader_constants">
				<comments desc="Set the material constant buffer. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apBuffer"
					type="iShaderConstants *"
					typec="iShaderConstants*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getShaderConstants"
				name="GetShaderConstants"
				num_parameters="0"
				property="get"
				property_name2="shaderConstants"
				property_name="shader_constants">
				<comments desc="Get the material constant buffer. "/>
				<return type="iShaderConstants *" typec="iShaderConstants*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasChannelTexture"
				name="HasChannelTexture"
				num_parameters="1">
				<comments desc="Check if the material has the specified channel texture. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setChannelTexture"
				name="SetChannelTexture"
				num_parameters="2"
				property="set"
				property_name2="channelTexture"
				property_name="channel_texture">
				<comments desc="Set a material channel texture. ">
					<remark text="Not cloned with the material. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apTexture"
					type="iTexture *"
					typec="iTexture*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChannelTexture"
				name="GetChannelTexture"
				num_parameters="1"
				property="get"
				property_name2="channelTexture"
				property_name="channel_texture">
				<comments desc="Get a material channel texture. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setChannelColor"
				name="SetChannelColor"
				num_parameters="2"
				property="set"
				property_name2="channelColor"
				property_name="channel_color">
				<comments desc="Set a material channel color. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChannelColor"
				name="GetChannelColor"
				num_parameters="1"
				property="get"
				property_name2="channelColor"
				property_name="channel_color">
				<comments desc="Get a material channel color. "/>
				<return type="const sColor4f &amp;" typec="const sColor4f&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setChannelSamplerStates"
				name="SetChannelSamplerStates"
				num_parameters="2"
				property="set"
				property_name2="channelSamplerStates"
				property_name="channel_sampler_states">
				<comments desc="Set the sampler states of the specified texture channel. ">
					<remark text="If the sampler states are not specified the default states are used. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getChannelSamplerStates"
				name="GetChannelSamplerStates"
				num_parameters="1"
				property="get"
				property_name2="channelSamplerStates"
				property_name="channel_sampler_states">
				<comments desc="Get the sampler states of the specified texture channel. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
				<parameter
					last="1"
					name="aChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="copyChannel" name="CopyChannel" num_parameters="3">
				<comments desc="Copy the channel properties from another material. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aDestChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
				<parameter
					name="apSource"
					type="const iMaterial *"
					typec="const iMaterial*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSrcChannel"
					type="eMaterialChannel"
					typec="eMaterialChannel"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the source material. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMat"
					type="const iMaterial *"
					typec="const iMaterial*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this material. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serialize" name="Serialize" num_parameters="3">
				<comments desc="Serialize the material in a data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aMode"
					type="eSerializeMode"
					typec="eSerializeMode"
					typei="ni::eType_Enum"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspBasePath"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the material description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				java_name="setExpression"
				name="SetExpression"
				num_parameters="2"
				property="set"
				property_name2="expression"
				property_name="expression">
				<comments desc="Set an expression of the material. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="ahspExpr"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExpression"
				name="GetExpression"
				num_parameters="1"
				property="get"
				property_name2="expression"
				property_name="expression">
				<comments desc="Get the expression of the material. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getExpressionValueMatrix"
				name="GetExpressionValueMatrix"
				num_parameters="1"
				property="get"
				property_name2="expressionValueMatrix"
				property_name="expression_value_matrix">
				<comments desc="Get the matrix result of the specified material expression. ">
					<remark text="Returns identity if no valid expression is set. "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getExpressionValueVector"
				name="GetExpressionValueVector"
				num_parameters="1"
				property="get"
				property_name2="expressionValueVector"
				property_name="expression_value_vector">
				<comments desc="Get the vector4 result of the specified material expression. ">
					<remark text="Returns zero if no valid expression is set. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="setExpressionObject" name="SetExpressionObject" num_parameters="3">
				<comments desc="Set an expression object on the material. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
				<parameter
					name="ahspExpr"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apExpr"
					type="iExpression *"
					typec="iExpression*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getExpressionObject" name="GetExpressionObject" num_parameters="1">
				<comments desc="Get the expression object. "/>
				<return type="iExpression *" typec="iExpression*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aExpr"
					type="eMaterialExpression"
					typec="eMaterialExpression"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setUserdata"
				name="SetUserdata"
				num_parameters="2"
				property="set"
				property_name2="userdata"
				property_name="userdata">
				<comments desc="Set a userdata. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apUserdata"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getUserdata"
				name="GetUserdata"
				num_parameters="1"
				property="get"
				property_name2="userdata"
				property_name="userdata">
				<comments desc="Get a userdata. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumUserdata"
				name="GetNumUserdata"
				num_parameters="0"
				property="get"
				property_name2="numUserdata"
				property_name="num_userdata">
				<comments desc="Get the number of userdata. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				const="yes"
				java_name="getUserdataName"
				name="GetUserdataName"
				num_parameters="1"
				property="get"
				property_name2="userdataName"
				property_name="userdata_name">
				<comments desc="Get the name of the user data at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getUserdataFromIndex"
				name="GetUserdataFromIndex"
				num_parameters="1"
				property="get"
				property_name2="userdataFromIndex"
				property_name="userdata_from_index">
				<comments desc="Get the userdata at the specified index. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IMaterialLibrary.h.idl.xml">
		<enum name="eMaterialSerializeFlags">
			<comments desc="Material Serialization flags. "/>
			<value name="eMaterialSerializeFlags_Write" value="niBit ( 0 ) ">
				<comments desc="Serialize write. "/>
			</value>
			<value name="eMaterialSerializeFlags_Read" value="niBit ( 1 ) ">
				<comments desc="Serialize read. "/>
			</value>
			<value name="eMaterialSerializeFlags_Textures" value="niBit ( 2 ) ">
				<comments desc="Serialize all the textures data in the file. "/>
			</value>
			<value name="eMaterialSerializeFlags_Compress" value="niBit ( 3 ) ">
				<comments desc="Compress the content for best hardware usage. "/>
			</value>
			<value name="eMaterialSerializeFlags_NamesOnly" value="niBit ( 4 ) ">
				<comments desc="Serialize only the name of the materials. "/>
			</value>
			<value name="eMaterialSerializeFlags_ReadExistingOnly" value="niBit ( 5 ) ">
				<comments desc="Read only if the material was alreadu in the library. "/>
			</value>
			<value name="eMaterialSerializeFlags_TextureNoMipMaps" value="niBit ( 19 ) ">
				<comments desc="Don&apos;t serialize the texture&apos;s mip maps. ">
					<remark text="Mip maps will be recomputed when the library/material is loaded. "/>
				</comments>
			</value>
			<value name="eMaterialSerializeFlags_TextureMaxResLo" value="niBit ( 20 ) ">
				<comments desc="Texture max res value lower bit. (4 bits value) ">
					<remark text="(FLAGS|(RES&lt;&lt;20)), RES is the maximum resolution between 0 and 15 the maximum resolution is 2^RES. "/>
				</comments>
			</value>
			<value name="eMaterialSerializeFlags_TextureMaxResHi" value="niBit ( 24 ) ">
				<comments desc="Texture max res value higher bit. (4 bits value) "/>
			</value>
			<value name="eMaterialSerializeFlags_TextureCompressionLo" value="niBit ( 25 ) ">
				<comments desc="Texture compression value lower bit. (7 bits value) ">
					<remark text="(FLAGS|(COMP&lt;&lt;25)), COMP should be a value between 0 and 100, 0 == no loss compression "/>
				</comments>
			</value>
			<value name="eMaterialSerializeFlags_TextureCompressionHi" value="niBit ( 31 ) ">
				<comments desc="Texture compression value higher bit. (7 bits value) "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iMaterialLibrarySink"
			uuid1="DD70858C-D1F5-459A-9963-7FE61DB43698"
			uuid2="0xdd70858c,0xd1f5,0x459a,0x99,0x63,0x7f,0xe6,0x1d,0xb4,0x36,0x98">
			<comments desc="Material library sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onMaterialLibrarySink_MaterialAdded"
				name="OnMaterialLibrarySink_MaterialAdded"
				num_parameters="2"
				optional="yes">
				<comments desc="Called when a material is added. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apLib"
					type="iMaterialLibrary *"
					typec="iMaterialLibrary*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apMat"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onMaterialLibrarySink_MaterialRemoved"
				name="OnMaterialLibrarySink_MaterialRemoved"
				num_parameters="2"
				optional="yes">
				<comments desc="Called when a material is removed. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apLib"
					type="iMaterialLibrary *"
					typec="iMaterialLibrary*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apMat"
					type="iMaterial *"
					typec="iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iMaterialLibrary" uuid1="BDED3EE6-BB4C-45A8-9497-E58C3871B609" uuid2="0xbded3ee6,0xbb4c,0x45a8,0x94,0x97,0xe5,0x8c,0x38,0x71,0xb6,0x09">
			<comments desc="Material library interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getSinkList"
				name="GetSinkList"
				num_parameters="0"
				property="get"
				property_name2="sinkList"
				property_name="sink_list">
				<comments desc="Get the sink list. "/>
				<return type="tMaterialLibrarySinkLst *" typec="tMaterialLibrarySinkLst*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="2">
				<comments desc="Copy the material library. ">
					<params text="apSrc is the source library to copy "/>
					<params text="abCloneMats sets whether the materials will be cloned, or just their pointer transfered. "/>
				</comments>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSrc"
					type="const iMaterialLibrary *"
					typec="const iMaterialLibrary*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abCloneMats"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="1">
				<comments desc="Clone the material library. "/>
				<return type="iMaterialLibrary *" typec="iMaterialLibrary*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abCloneMats"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="clearMaterials" name="ClearMaterials" num_parameters="0">
				<comments desc="Remove all materials. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="addMaterial" name="AddMaterial" num_parameters="1">
				<comments desc="Add a material. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMaterial"
					type="ni::iMaterial *"
					typec="ni::iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeMaterial" name="RemoveMaterial" num_parameters="1">
				<comments desc="Remove a material. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMaterial"
					type="ni::iMaterial *"
					typec="ni::iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumMaterials"
				name="GetNumMaterials"
				num_parameters="0"
				property="get"
				property_name2="numMaterials"
				property_name="num_materials">
				<comments desc="Get the number of materials. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="1"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the material at the specified index. "/>
				<return type="ni::iMaterial *" typec="ni::iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaterialFromName"
				name="GetMaterialFromName"
				num_parameters="1"
				property="get"
				property_name2="materialFromName"
				property_name="material_from_name">
				<comments desc="Get the material from the specified name. "/>
				<return type="ni::iMaterial *" typec="ni::iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaterialIndex"
				name="GetMaterialIndex"
				num_parameters="1"
				property="get"
				property_name2="materialIndex"
				property_name="material_index">
				<comments desc="Get the index of the specified material. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apMaterial"
					type="ni::iMaterial *"
					typec="ni::iMaterial*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the library in a datatable. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="ni::iDataTable *"
					typec="ni::iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tMaterialSerializeFlags"
					typec="tMaterialSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="serializeFile" name="SerializeFile" num_parameters="2">
				<comments desc="Serialize the library in a file. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tMaterialSerializeFlags"
					typec="tMaterialSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setBasePath"
				name="SetBasePath"
				num_parameters="1"
				property="set"
				property_name2="basePath"
				property_name="base_path">
				<comments desc="Set the material library&apos;s base path. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspBasePath"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBasePath"
				name="GetBasePath"
				num_parameters="0"
				property="get"
				property_name2="basePath"
				property_name="base_path">
				<comments desc="Get the material library&apos;s base path. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/INUSpline.h.idl.xml">
		<enum name="eNUSplineType">
			<comments desc="Non-uniform spline type. "/>
			<value name="eNUSplineType_Linear" value="0 ">
				<comments desc="Linear spline. Not a spline simple linear interpolation. "/>
			</value>
			<value name="eNUSplineType_Rounded" value="1 ">
				<comments desc="Rounded non-uniform spline. "/>
			</value>
			<value name="eNUSplineType_Smooth" value="2 ">
				<comments desc="Smooth non-uniform spline. "/>
			</value>
			<value name="eNUSplineType_Timed" value="3 ">
				<comments desc="Timed non-uniform spline. "/>
			</value>
			<value name="eNUSplineType_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iNUSpline" uuid1="37096DFE-B7F7-4D34-A5BF-5E2E2A91A84A" uuid2="0x37096dfe,0xb7f7,0x4d34,0xa5,0xbf,0x5e,0x2e,0x2a,0x91,0xa8,0x4a">
			<comments desc="Non-uniform spline interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setType"
				name="SetType"
				num_parameters="1"
				property="set"
				property_name2="type"
				property_name="type">
				<comments desc="Set the spline type. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aType"
					type="eNUSplineType"
					typec="eNUSplineType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the spline type. "/>
				<return type="eNUSplineType" typec="eNUSplineType" typei="ni::eType_Enum"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the spline, remove all nodes. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="addNode" name="AddNode" num_parameters="1">
				<comments desc="Add a node. ">
					<remark text="The node is a 4D vector, with x,y,z as position and w as time interval. "/>
					<remark text="The time interval is used only by timed non-uniform spline. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avNode"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeNode" name="RemoveNode" num_parameters="1">
				<comments desc="Remove the node at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumNodes"
				name="GetNumNodes"
				num_parameters="0"
				property="get"
				property_name2="numNodes"
				property_name="num_nodes">
				<comments desc="Get the number of nodes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNode"
				name="SetNode"
				num_parameters="2"
				property="set"
				property_name2="node"
				property_name="node">
				<comments desc="Set the node at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avNode"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNode"
				name="GetNode"
				num_parameters="1"
				property="get"
				property_name2="node"
				property_name="node">
				<comments desc="Get the node at the specified index. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNodeDistance"
				name="GetNodeDistance"
				num_parameters="1"
				property="get"
				property_name2="nodeDistance"
				property_name="node_distance">
				<comments desc="Get the distance of the specified node. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLength"
				name="GetLength"
				num_parameters="0"
				property="get"
				property_name2="length"
				property_name="length">
				<comments desc="Get the length of the path. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="getPosition"
				name="GetPosition"
				num_parameters="1"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the position at the specified time. ">
					<remark text="The spline must have at least three nodes to return a valid position. If the spline is invalid a 0,0,0 position will be returned. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="afTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="getRelativePosition"
				name="GetRelativePosition"
				num_parameters="1"
				property="get"
				property_name2="relativePosition"
				property_name="relative_position">
				<comments desc="Get the relative position at the specified time. ">
					<remark text="The spline must have at least three nodes to return a valid position. If the spline is invalid a 0,0,0 position will be returned. "/>
					<remark text="The relative position is relative to the first node&apos;s position. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="afTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="2">
				<comments desc="Serialize the spline in the specified datatable. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tSerializeFlags"
					typec="tSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IOcclusionQuery.h.idl.xml">
		<enum name="eOcclusionQueryStatus">
			<comments desc="Occlusion query status. "/>
			<value name="eOcclusionQueryStatus_NotIssued" value="0 ">
				<comments desc="No query has been issued yet. "/>
			</value>
			<value name="eOcclusionQueryStatus_Began" value="1 ">
				<comments desc="The query has began but is not ended yet. "/>
			</value>
			<value name="eOcclusionQueryStatus_Pending" value="2 ">
				<comments desc="Waiting for the query to return. "/>
			</value>
			<value name="eOcclusionQueryStatus_Successful" value="3 ">
				<comments desc="The query status is available. "/>
			</value>
			<value name="eOcclusionQueryStatus_Failed" value="4 ">
				<comments desc="The query failed. "/>
			</value>
		</enum>
		<interface name="iOcclusionQuery" uuid1="9BDA9D89-23E7-4CF7-AAA7-C95BA7EDAE2A" uuid2="0x9bda9d89,0x23e7,0x4cf7,0xaa,0xa7,0xc9,0x5b,0xa7,0xed,0xae,0x2a">
			<comments desc="Occlusion query object. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="begin" name="Begin" num_parameters="0">
				<comments desc="Begin the query. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="end" name="End" num_parameters="0">
				<comments desc="End the query. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="getStatus" name="GetStatus" num_parameters="1">
				<comments desc="Get the status of the query. ">
					<params text="abWait if eTrue the function will wait until the query is successful or fails. "/>
				</comments>
				<return type="eOcclusionQueryStatus" typec="eOcclusionQueryStatus" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="abWait"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getResult"
				name="GetResult"
				num_parameters="0"
				property="get"
				property_name2="result"
				property_name="result">
				<comments desc="Get the result of the query. " return="the number of pixels drawn between begin/end. eInvalidHandle if the result is not yet available. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IOverlay.h.idl.xml">
		<interface name="iOverlay" uuid1="FC8D5E7E-931F-4388-B670-1E30B9B1A21F" uuid2="0xfc8d5e7e,0x931f,0x4388,0xb6,0x70,0x1e,0x30,0xb9,0xb1,0xa2,0x1f">
			<comments desc="iOverlay interface  "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the overlay. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaterial"
				name="GetMaterial"
				num_parameters="0"
				property="get"
				property_name2="material"
				property_name="material">
				<comments desc="Get the overlay&apos;s material. "/>
				<return type="iMaterial *" typec="iMaterial*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getImage"
				name="GetImage"
				num_parameters="0"
				property="get"
				property_name2="image"
				property_name="image">
				<comments desc="Get the overlay&apos;s base image if there&apos;s one. "/>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBaseSize"
				name="GetBaseSize"
				num_parameters="0"
				property="get"
				property_name2="baseSize"
				property_name="base_size">
				<comments desc="Get the overlay&apos;s base size. ">
					<remark text="The base size is the size of the overlay&apos;s material. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setPivot"
				name="SetPivot"
				num_parameters="1"
				property="set"
				property_name2="pivot"
				property_name="pivot">
				<comments desc="Set the overlay&apos;s pivot position. ">
					<remark text="The pivot position, is the offset at which the overaly is going to be drawn. "/>
					<remark text="If &lt; 1.0 the center position is considered to be relative to the overlay&apos;s size, else it&apos;s assumed to be &apos;absolute&apos;. "/>
					<remark text="Default is (0,0), the position is relative the the top left corner of the overlay. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPivot"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPivot"
				name="GetPivot"
				num_parameters="0"
				property="get"
				property_name2="pivot"
				property_name="pivot">
				<comments desc="Get the overlay&apos;s pivot position. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setSize"
				name="SetSize"
				num_parameters="1"
				property="set"
				property_name2="size"
				property_name="size">
				<comments desc="Set the overlay size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the overlay position and size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setBlendMode"
				name="SetBlendMode"
				num_parameters="1"
				property="set"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Set the rasterizer blend mode. ">
					<remark text="This changes the blend mode in the material. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBlendMode"
				name="GetBlendMode"
				num_parameters="0"
				property="get"
				property_name2="blendMode"
				property_name="blend_mode">
				<comments desc="Get the rasterizer blend mode. "/>
				<return type="eBlendMode" typec="eBlendMode" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setFiltering"
				name="SetFiltering"
				num_parameters="1"
				property="set"
				property_name2="filtering"
				property_name="filtering">
				<comments desc="Set the filtering mode. ">
					<remark text="This changes the filtering type in the material. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFiltering"
				name="GetFiltering"
				num_parameters="0"
				property="get"
				property_name2="filtering"
				property_name="filtering">
				<comments desc="Get the filtering mode. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setColor"
				name="SetColor"
				num_parameters="1"
				property="set"
				property_name2="color"
				property_name="color">
				<comments desc="Set the color of the overlay. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor"
				name="GetColor"
				num_parameters="0"
				property="get"
				property_name2="color"
				property_name="color">
				<comments desc="Get the color of the overlay. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setCornerColor"
				name="SetCornerColor"
				num_parameters="2"
				property="set"
				property_name2="cornerColor"
				property_name="corner_color">
				<comments desc="Set the color of the overlay. ">
					<params text="aCorner specify the corner(s) on which the color apply. "/>
					<params text="aColor is the new color of the corner. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aCorner"
					type="eRectCorners"
					typec="eRectCorners"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCornerColor"
				name="GetCornerColor"
				num_parameters="1"
				property="get"
				property_name2="cornerColor"
				property_name="corner_color">
				<comments desc="Get the color of the overlay. " return="the color of the specified corner of the overlay. ">
					<params text="aCorner is the corner to get the color of. "/>
				</comments>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aCorner"
					type="eRectCorners"
					typec="eRectCorners"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setMapping"
				name="SetMapping"
				num_parameters="1"
				property="set"
				property_name2="mapping"
				property_name="mapping">
				<comments desc="Set the overlay&apos;s mapping coordinates. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMapping"
				name="GetMapping"
				num_parameters="0"
				property="get"
				property_name2="mapping"
				property_name="mapping">
				<comments desc="Get the overlay&apos;s mapping coordinates. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setFrame"
				name="SetFrame"
				num_parameters="1"
				property="set"
				property_name2="frame"
				property_name="frame">
				<comments desc="Set the overlay&apos;s frame. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFrameBorder"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFrame"
				name="GetFrame"
				num_parameters="0"
				property="get"
				property_name2="frame"
				property_name="frame">
				<comments desc="Get the overlay&apos;s frame. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getIsFrame"
				name="GetIsFrame"
				num_parameters="0"
				property="get"
				property_name2="isFrame"
				property_name="is_frame">
				<comments desc="Get whether a frame is activated. ">
					<remark text="A frame is defined if the frame is != Vec4::Zero "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="computeFrameCenter"
				name="ComputeFrameCenter"
				num_parameters="1">
				<comments desc="Compute the center of the frame from the provided destination rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aDest"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="draw" name="Draw" num_parameters="3">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="drawFrame" name="DrawFrame" num_parameters="4">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFrame"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="aPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IPixelFormat.h.idl.xml">
		<enum name="ePixelFormatBlit">
			<comments desc="Pixel Format Blitting flags. "/>
			<value name="ePixelFormatBlit_Normal" value="0x00000000 ">
				<comments desc="Normal blitting. "/>
			</value>
			<value name="ePixelFormatBlit_MirrorLeftRight" value="0x00000001 ">
				<comments desc="Mirrored left right blitting. "/>
			</value>
			<value name="ePixelFormatBlit_MirrorUpDown" value="0x00000002 ">
				<comments desc="Mirrored up down blitting. "/>
			</value>
			<value name="ePixelFormatBlit_MirrorDiagonal" value="ePixelFormatBlit_MirrorLeftRight|ePixelFormatBlit_MirrorUpDown ">
				<comments desc="Diagonal mirror. Equivalent to a Pi rad rotation. "/>
			</value>
		</enum>
		<enum name="ePixelFormatCaps">
			<comments desc="Pixel format capabilities. "/>
			<value name="ePixelFormatCaps_BuildPixel" value="niBit ( 0 ) ">
				<comments desc="Support the build pixel methods. "/>
			</value>
			<value name="ePixelFormatCaps_UnpackPixel" value="niBit ( 1 ) ">
				<comments desc="Support pixel unpacking. "/>
			</value>
			<value name="ePixelFormatCaps_Blit" value="niBit ( 2 ) ">
				<comments desc="Support standard blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitMirrorLeftRight" value="niBit ( 3 ) ">
				<comments desc="Support mirrored left right blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitMirrorUpDown" value="niBit ( 4 ) ">
				<comments desc="Support mirrored up down blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitStretch" value="niBit ( 5 ) ">
				<comments desc="Support stretched blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitStretchHalf" value="niBit ( 6 ) ">
				<comments desc="Support stretched blitting of half size only (for mipmaps generation). "/>
			</value>
			<value name="ePixelFormatCaps_Signed" value="niBit ( 7 ) ">
				<comments desc="Is a signed pixel format. "/>
			</value>
			<value name="ePixelFormatCaps_BlitAlpha" value="niBit ( 8 ) ">
				<comments desc="Support standard alpha blended blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitAlphaMirrorLeftRight" value="niBit ( 9 ) ">
				<comments desc="Support mirrored left right alpha blended blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitAlphaMirrorUpDown" value="niBit ( 10 ) ">
				<comments desc="Support mirrored up down alpha blended blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitAlphaStretch" value="niBit ( 11 ) ">
				<comments desc="Support stretched alpha blended blitting. "/>
			</value>
			<value name="ePixelFormatCaps_BlitAlphaStretchHalf" value="niBit ( 12 ) ">
				<comments desc="Support stretched alpha blended blitting of half size only (for mipmaps generation). "/>
			</value>
			<value name="ePixelFormatCaps_Clear" value="niBit ( 13 ) ">
				<comments desc="Support a specialize clear method. "/>
			</value>
			<value name="ePixelFormatCaps_BlockCompressed" value="niBit ( 14 ) ">
				<comments desc="Block compressed format. ">
					<remark text="This includes format such as DXT formats and ASTC. "/>
				</comments>
			</value>
		</enum>
		<interface name="iPixelFormat" uuid1="DC0B6CE3-FD1C-4283-B6B8-768E85A272A4" uuid2="0xdc0b6ce3,0xfd1c,0x4283,0xb6,0xb8,0x76,0x8e,0x85,0xa2,0x72,0xa4">
			<comments desc="Pixel Format interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="isSamePixelFormat"
				name="IsSamePixelFormat"
				num_parameters="1">
				<comments desc="Test if the given pixel format is the same as this pixel format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="pPixFmt"
					type="const iPixelFormat *"
					typec="const iPixelFormat*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumParameters"
				name="GetNumParameters"
				num_parameters="0"
				property="get"
				property_name2="numParameters"
				property_name="num_parameters">
				<comments desc="Get the number of parameters of the pixel format. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setParameter"
				name="SetParameter"
				num_parameters="2"
				property="set"
				property_name2="parameter"
				property_name="parameter">
				<comments desc="Set a parameter of the pixel format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ulParameter"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ulValue"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getParameter"
				name="GetParameter"
				num_parameters="1"
				property="get"
				property_name2="parameter"
				property_name="parameter">
				<comments desc="Get a parameter of the pixel format. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ulParameter"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the pixel format. "/>
				<return type="iPixelFormat *" typec="iPixelFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFormat"
				name="GetFormat"
				num_parameters="0"
				property="get"
				property_name2="format"
				property_name="format">
				<comments desc="Get the pixel format, format string. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCaps"
				name="GetCaps"
				num_parameters="0"
				property="get"
				property_name2="caps"
				property_name="caps">
				<comments desc="Get the pixel format capabilities. "/>
				<return type="ePixelFormatCaps" typec="ePixelFormatCaps" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBitsPerPixel"
				name="GetBitsPerPixel"
				num_parameters="0"
				property="get"
				property_name2="bitsPerPixel"
				property_name="bits_per_pixel">
				<comments desc="Get the number of bits per pixel. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getBytesPerPixel"
				name="GetBytesPerPixel"
				num_parameters="0"
				property="get"
				property_name2="bytesPerPixel"
				property_name="bytes_per_pixel">
				<comments desc="Get the number of bytes per pixel. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="3">
				<comments desc="Get the size in bytes of a surface using this pixel format. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="ulW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ulD"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumComponents"
				name="GetNumComponents"
				num_parameters="0"
				property="get"
				property_name2="numComponents"
				property_name="num_components">
				<comments desc="Get the number of components of the pixel format. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumRBits"
				name="GetNumRBits"
				num_parameters="0"
				property="get"
				property_name2="numRBits"
				property_name="num_rbits">
				<comments desc="Get the number of red bits. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumGBits"
				name="GetNumGBits"
				num_parameters="0"
				property="get"
				property_name2="numGBits"
				property_name="num_gbits">
				<comments desc="Get the number of green bits. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumBBits"
				name="GetNumBBits"
				num_parameters="0"
				property="get"
				property_name2="numBBits"
				property_name="num_bbits">
				<comments desc="Get the number of blue bits. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumABits"
				name="GetNumABits"
				num_parameters="0"
				property="get"
				property_name2="numABits"
				property_name="num_abits">
				<comments desc="Get the number of alpha bits. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="buildPixelub"
				name="BuildPixelub"
				num_parameters="5">
				<comments desc="Build a pixel using unsigned byte values. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="pOut"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="r"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
				<parameter
					name="g"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
				<parameter
					name="b"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
				<parameter
					default="0 "
					last="1"
					name="a"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="buildPixelus"
				name="BuildPixelus"
				num_parameters="5">
				<comments desc="Build a pixel using unsigned short values. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="pOut"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="r"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
				<parameter
					name="g"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
				<parameter
					name="b"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
				<parameter
					default="0 "
					last="1"
					name="a"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method
				const="yes"
				java_name="buildPixelul"
				name="BuildPixelul"
				num_parameters="5">
				<comments desc="Build a pixel using unsigned short values. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="pOut"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="r"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="g"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="b"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="0 "
					last="1"
					name="a"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="buildPixelf"
				name="BuildPixelf"
				num_parameters="5">
				<comments desc="Build a pixel using floating point values. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="pOut"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="r"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="g"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="b"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					default="0.0f "
					last="1"
					name="a"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="beginUnpackPixels" name="BeginUnpackPixels" num_parameters="6">
				<comments desc="Begin pixel unpacking. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="pSurface"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulX"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulY"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulW"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ulH"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="endUnpackPixels" name="EndUnpackPixels" num_parameters="0">
				<comments desc="End pixel unpacking. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="unpackPixelub"
				name="UnpackPixelub"
				num_parameters="1">
				<comments desc="Unpack a pixel in an unsigned byte color. "/>
				<return type="sColor4ub" typec="sColor4ub" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="unpackPixelus"
				name="UnpackPixelus"
				num_parameters="1">
				<comments desc="Unpack a pixel in an unsigned short color. ">
					<remark text="Return a Vec4i in with member in the 0-0xFFFF range. "/>
				</comments>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="unpackPixelul"
				name="UnpackPixelul"
				num_parameters="1">
				<comments desc="Unpack a pixel in an unsigned long color. "/>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="unpackPixelf"
				name="UnpackPixelf"
				num_parameters="1">
				<comments desc="Unpack a pixel in a floating point color. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="pColor"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="7">
				<comments desc="Clear a surface with a specified color. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="pDst"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulDestPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="w"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="h"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apClearColor"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="blit"
				name="Blit"
				num_parameters="12">
				<comments desc="Blit a surface of any pixel format to a surface of this pixel format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="pDst"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulDestPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulSrcPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrcFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="w"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="h"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="blitFlags"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="blitStretch"
				name="BlitStretch"
				num_parameters="15">
				<comments desc="Blit stretch a surface of any pixel format to a surface of this pixel format. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="pDst"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulDestPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulDestWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulDestHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dw"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dh"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulSrcPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrcFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sw"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="sh"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="blitAlpha"
				name="BlitAlpha"
				num_parameters="15">
				<comments desc="Blit a surface of any pixel format to a surface of this pixel format. ">
					<remark text="The source and destination color are used to replace missing components in the source/destination format. "/>
					<remark text="If the passed blending mode is not supported the method will return false to be handled by the reference implementation. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="pDst"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulDestPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulSrcPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrcFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="w"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="h"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="blitFlags"
					type="ePixelFormatBlit"
					typec="ePixelFormatBlit"
					typei="ni::eType_Enum"/>
				<parameter
					name="aSourceColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="blitAlphaStretch"
				name="BlitAlphaStretch"
				num_parameters="18">
				<comments desc="Blit stretch a surface of any pixel format to a surface of this pixel format. ">
					<remark text="The source and destination color are used to replace missing components in the source/destination format. "/>
					<remark text="If the passed blending mode is not supported the method will return false to be handled by the reference implementation. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="pDst"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulDestPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulDestWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulDestHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dw"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="dh"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="ulSrcPitch"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="pSrcFmt"
					type="iPixelFormat *"
					typec="iPixelFormat*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sy"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sw"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="sh"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aSourceColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aDestColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBlendMode"
					type="eBlendMode"
					typec="eBlendMode"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IShader.h.idl.xml">
		<enum name="eShaderUnit">
			<comments desc="Shader Units. "/>
			<value name="eShaderUnit_Vertex" value="0 ">
				<comments desc="Vertex shader. "/>
			</value>
			<value name="eShaderUnit_Pixel" value="1 ">
				<comments desc="Pixel shader. "/>
			</value>
			<value name="eShaderUnit_Native" value="2 ">
				<comments desc="Native driver dependent shader. "/>
			</value>
			<value name="eShaderUnit_Last" value="3 ">
				<comments desc="\internal. "/>
			</value>
		</enum>
		<enum name="eShaderRegisterType">
			<comments desc="Shader input register type. "/>
			<value name="eShaderRegisterType_Input" value="0 ">
				<comments desc="Input register. "/>
			</value>
			<value name="eShaderRegisterType_Output" value="1 ">
				<comments desc="Output position register. "/>
			</value>
			<value name="eShaderRegisterType_Temporary" value="2 ">
				<comments desc="Temporary register. "/>
			</value>
			<value name="eShaderRegisterType_ConstFloat" value="3 ">
				<comments desc="Constant float register. "/>
			</value>
			<value name="eShaderRegisterType_ConstInt" value="4 ">
				<comments desc="Constant int register. "/>
			</value>
			<value name="eShaderRegisterType_ConstBool" value="5 ">
				<comments desc="Constant bool register. "/>
			</value>
			<value name="eShaderRegisterType_Sampler" value="6 ">
				<comments desc="Sampler register. "/>
			</value>
			<value name="eShaderRegisterType_Address" value="7 ">
				<comments desc="Address register. "/>
			</value>
			<value name="eShaderRegisterType_Loop" value="8 ">
				<comments desc="Loop register. "/>
			</value>
			<value name="eShaderRegisterType_Texture" value="9 ">
				<comments desc="Texture register. "/>
			</value>
			<value name="eShaderRegisterType_Predicate" value="10 ">
				<comments desc="Predicate register. "/>
			</value>
			<value name="eShaderRegisterType_Last" value="11 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iShaderConstants" uuid1="4450DC53-E4B1-4BC3-8CD3-EC396B36C2D7" uuid2="0x4450dc53,0xe4b1,0x4bc3,0x8c,0xd3,0xec,0x39,0x6b,0x36,0xc2,0xd7">
			<comments desc="Shader constants buffer. ">
				<remark text="All sizes and offsets are expressed in register (sVec4f/l) unit. "/>
			</comments>
			<parents>
				<parent name="iSerializable"/>
			</parents>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this constant buffer. "/>
				<return type="iShaderConstants *" typec="iShaderConstants*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMaxNumRegisters"
				name="GetMaxNumRegisters"
				num_parameters="0"
				property="get"
				property_name2="maxNumRegisters"
				property_name="max_num_registers">
				<comments desc="Get the constants buffer maximum number of registers. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="addConstant" name="AddConstant" num_parameters="3">
				<comments desc="Add a new constant. " return="The index of the added constant, eInvalidHandle if error. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eShaderRegisterType"
					typec="eShaderRegisterType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumConstants"
				name="GetNumConstants"
				num_parameters="0"
				property="get"
				property_name2="numConstants"
				property_name="num_constants">
				<comments desc="Get the number of constants in the buffer. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getConstantIndex"
				name="GetConstantIndex"
				num_parameters="1"
				property="get"
				property_name2="constantIndex"
				property_name="constant_index">
				<comments desc="Get the index of the specified constant. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getConstantName"
				name="GetConstantName"
				num_parameters="1"
				property="get"
				property_name2="constantName"
				property_name="constant_name">
				<comments desc="Get the name of the specified constant. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getConstantSize"
				name="GetConstantSize"
				num_parameters="1"
				property="get"
				property_name2="constantSize"
				property_name="constant_size">
				<comments desc="Get the size of the constant at the specified index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getConstantType"
				name="GetConstantType"
				num_parameters="1"
				property="get"
				property_name2="constantType"
				property_name="constant_type">
				<comments desc="Get the type of the specified constant. "/>
				<return type="eShaderRegisterType" typec="eShaderRegisterType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setHwIndex"
				name="SetHwIndex"
				num_parameters="2"
				property="set"
				property_name2="hwIndex"
				property_name="hw_index">
				<comments desc="Set the hardware register index of the specified constant. ">
					<remark text="a eInvalidHandle value means that the register index is not specified and has to be determined from the context. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anRegisterIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHwIndex"
				name="GetHwIndex"
				num_parameters="1"
				property="get"
				property_name2="hwIndex"
				property_name="hw_index">
				<comments desc="Get the hardware register index of the specified constant. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setFloatArray" name="SetFloatArray" num_parameters="3">
				<comments desc="Set a float constant from 4D vectors. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apV"
					type="const tVec4fCVec *"
					typec="const tVec4fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="1 "
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setFloatPointer"
				name="SetFloatPointer"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Set a float constant from 4D vectors. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="anConstIndex" type="tU32" typec="tU32"/>
				<parameter name="apV" type="const sVec4f *" typec="const sVec4f*"/>
				<parameter
					default="1 "
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"/>
			</method>
			<method java_name="setFloat" name="SetFloat" num_parameters="2">
				<comments desc="Set a float constant from 4D vectors. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setFloatMatrixArray" name="SetFloatMatrixArray" num_parameters="3">
				<comments desc="Set four float constants from matrices. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apV"
					type="const tMatrixfCVec *"
					typec="const tMatrixfCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="1 "
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setFloatMatrix" name="SetFloatMatrix" num_parameters="2">
				<comments desc="Set four float constants from matrices. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setIntArray" name="SetIntArray" num_parameters="3">
				<comments desc="Set an integer constant from 4D vectors. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apV"
					type="const tVec4iCVec *"
					typec="const tVec4iCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="1 "
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setIntPointer"
				name="SetIntPointer"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Set an integer constant from 4D vectors. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="anConstIndex" type="tU32" typec="tU32"/>
				<parameter name="apV" type="const sVec4i *" typec="const sVec4i*"/>
				<parameter
					default="1 "
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"/>
			</method>
			<method java_name="setInt" name="SetInt" num_parameters="2">
				<comments desc="Set an integer constant from 4D vectors. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4i &amp;"
					typec="const sVec4i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFloat"
				name="GetFloat"
				num_parameters="2">
				<comments desc="Get the float constant at the specified index. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFloatMatrix"
				name="GetFloatMatrix"
				num_parameters="1">
				<comments desc="Get the float constant matrix at the specified index. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFloatPointer"
				name="GetFloatPointer"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Get the float constant pointer at the specified index. "/>
				<return type="sVec4f *" typec="sVec4f*"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getInt"
				name="GetInt"
				num_parameters="2">
				<comments desc="Get the float constant at the specified index. "/>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIntPointer"
				name="GetIntPointer"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Get the float constant pointer at the specified index. "/>
				<return type="sVec4i *" typec="sVec4i*"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the shader constants buffer description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				java_name="setConstantMetadata"
				name="SetConstantMetadata"
				num_parameters="2"
				property="set"
				property_name2="constantMetadata"
				property_name="constant_metadata">
				<comments desc="Set the metadata of the specified constant. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspMetadata"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getConstantMetadata"
				name="GetConstantMetadata"
				num_parameters="1"
				property="get"
				property_name2="constantMetadata"
				property_name="constant_metadata">
				<comments desc="Get the metadata of the specified constant. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anConstIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iShader" uuid1="D33A0C21-AD8F-4A61-A132-C0CD95F9864D" uuid2="0xd33a0c21,0xad8f,0x4a61,0xa1,0x32,0xc0,0xcd,0x95,0xf9,0x86,0x4d">
			<comments desc="Shader interface. "/>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getUnit"
				name="GetUnit"
				num_parameters="0"
				property="get"
				property_name2="unit"
				property_name="unit">
				<comments desc="Return the Shader unit on which it runs. "/>
				<return type="eShaderUnit" typec="eShaderUnit" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getProfile"
				name="GetProfile"
				num_parameters="0"
				property="get"
				property_name2="profile"
				property_name="profile">
				<comments desc="Return the profile of the Shader. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getConstants"
				name="GetConstants"
				num_parameters="0"
				property="get"
				property_name2="constants"
				property_name="constants">
				<comments desc="Get the program&apos;s constants. "/>
				<return type="const iShaderConstants *" typec="const iShaderConstants*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCode"
				name="GetCode"
				num_parameters="0"
				property="get"
				property_name2="code"
				property_name="code">
				<comments desc="Get the code of the shader. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the shader description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
		</interface>
		<interface name="iGLShader" uuid1="DD4046FA-5076-1641-AD1D-70DEC5054EDF" uuid2="0xdd4046fa,0x5076,0x1641,0xad,0x1d,0x70,0xde,0xc5,0x05,0x4e,0xdf">
			<comments desc=" The OpenGL shader that is linked and can give use the bindings and pushes the uniforms. That&apos;s the interface the native shader&apos;s Bind() function must return.   The calling order is: - iGLShader::Bind(iDrawOperation) -&gt; iGLShader - iGLShader::GetVertexAttributeLocationArray() before binding the VA. - glBindBuffer(VA), glDrawElements/glDrawArrays - iGLShader::BeforeDraw(), its expected to push shader uniforms. - glBindBuffer(IA), glDrawElements/glDrawArrays - iGLShader::AfterDraw()  "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getVertexAttributeLocationArray"
				name="GetVertexAttributeLocationArray"
				noautomation="yes"
				num_parameters="0">
				<comments desc=" The OpenGL shader that is linked and can give use the bindings and pushes the uniforms. That&apos;s the interface the native shader&apos;s Bind() function must return.   The calling order is: - iGLShader::Bind(iDrawOperation) -&gt; iGLShader - iGLShader::GetVertexAttributeLocationArray() before binding the VA. - glBindBuffer(VA), glDrawElements/glDrawArrays - iGLShader::BeforeDraw(), its expected to push shader uniforms. - glBindBuffer(IA), glDrawElements/glDrawArrays - iGLShader::AfterDraw()  "/>
				<return type="const tI32 *" typec="const tI32*"/>
			</method>
			<method java_name="beforeDraw" name="BeforeDraw" num_parameters="0">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="afterDraw" name="AfterDraw" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/ITextObject.h.idl.xml">
		<enum name="eTextTruncation">
			<comments desc="Text truncation "/>
			<value name="eTextTruncation_Left" value="0 ">
				<comments desc="The words will be truncated on the left if bigger than the text block. "/>
			</value>
			<value name="eTextTruncation_Right" value="1 ">
				<comments desc="The words will be truncated on the right if bigger than the text block. "/>
			</value>
			<value name="eTextTruncation_None" value="2 ">
				<comments desc="The words won&apos;t be truncated. "/>
			</value>
		</enum>
		<interface name="iTextOccluder" uuid1="0A985A32-1472-41E9-85C9-AFEED972E14C" uuid2="0x0a985a32,0x1472,0x41e9,0x85,0xc9,0xaf,0xee,0xd9,0x72,0xe1,0x4c">
			<comments desc="Text occluder interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getTextObject"
				name="GetTextObject"
				num_parameters="0"
				property="get"
				property_name2="textObject"
				property_name="text_object">
				<comments desc="Get the parent text object. "/>
				<return type="Ptr&lt;iTextObject&gt;" typec="Ptr&lt;iTextObject&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setRect"
				name="SetRect"
				num_parameters="1"
				property="set"
				property_name2="rect"
				property_name="rect">
				<comments desc="Set the occluder&apos;s rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRect"
				name="GetRect"
				num_parameters="0"
				property="get"
				property_name2="rect"
				property_name="rect">
				<comments desc="Get the occluder&apos;s rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setUserData"
				name="SetUserData"
				num_parameters="1"
				property="set"
				property_name2="userData"
				property_name="user_data">
				<comments desc="Set user data. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aUserData"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getUserData"
				name="GetUserData"
				num_parameters="0"
				property="get"
				property_name2="userData"
				property_name="user_data">
				<comments desc="Get the user data. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
		</interface>
		<interface name="iTextObject" uuid1="81B98E50-26EA-4A69-B13D-CB0AA5ABEA11" uuid2="0x81b98e50,0x26ea,0x4a69,0xb1,0x3d,0xcb,0x0a,0xa5,0xab,0xea,0x11">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the graphics object that created the text object. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setContentsScale"
				name="SetContentsScale"
				num_parameters="1"
				property="set"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Set the contents&apos; scale factor. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getContentsScale"
				name="GetContentsScale"
				num_parameters="0"
				property="get"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Get the contents&apos; scale factor. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDefaultFont"
				name="SetDefaultFont"
				num_parameters="1"
				property="set"
				property_name2="defaultFont"
				property_name="default_font">
				<comments desc="Set the default font used by the text object. ">
					<remark text="If an invalid font is passed the default font of the graphics&apos;s instance is used. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultFont"
				name="GetDefaultFont"
				num_parameters="0"
				property="get"
				property_name2="defaultFont"
				property_name="default_font">
				<comments desc="Get the default font used by the text object. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setLoadFontCallback"
				name="SetLoadFontCallback"
				num_parameters="1"
				property="set"
				property_name2="loadFontCallback"
				property_name="load_font_callback">
				<comments desc="Set the load font callback used by the text object. ">
					<remark text="The callback&apos;s signature: iFont* LoadFont(iHString* ahspFontName) "/>
					<remark text="If none are provided the default font will be used everywhere. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apLoadFontCallback"
					type="iCallback *"
					typec="iCallback*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLoadFontCallback"
				name="GetLoadFontCallback"
				num_parameters="0"
				property="get"
				property_name2="loadFontCallback"
				property_name="load_font_callback">
				<comments desc="Get the load font callback used by the text object. "/>
				<return type="iCallback *" typec="iCallback*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSize"
				name="SetSize"
				num_parameters="1"
				property="set"
				property_name2="size"
				property_name="size">
				<comments desc="Set the size of the text object. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size of the text object. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setTruncation"
				name="SetTruncation"
				num_parameters="1"
				property="set"
				property_name2="truncation"
				property_name="truncation">
				<comments desc="Set the word truncation mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aType"
					type="eTextTruncation"
					typec="eTextTruncation"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getTruncation"
				name="GetTruncation"
				num_parameters="0"
				property="get"
				property_name2="truncation"
				property_name="truncation">
				<comments desc="Get the word truncation mode. "/>
				<return type="eTextTruncation" typec="eTextTruncation" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setTruncationText"
				name="SetTruncationText"
				num_parameters="1"
				property="set"
				property_name2="truncationText"
				property_name="truncation_text">
				<comments desc="Set the truncation text. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTruncationText"
				name="GetTruncationText"
				num_parameters="0"
				property="get"
				property_name2="truncationText"
				property_name="truncation_text">
				<comments desc="Get the truncation text. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setTrimLeadingSpaces"
				name="SetTrimLeadingSpaces"
				num_parameters="1"
				property="set"
				property_name2="trimLeadingSpaces"
				property_name="trim_leading_spaces">
				<comments desc="Set whether to trim the leading spaces. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abTrimLeadingSpaces"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTrimLeadingSpaces"
				name="GetTrimLeadingSpaces"
				num_parameters="0"
				property="get"
				property_name2="trimLeadingSpaces"
				property_name="trim_leading_spaces">
				<comments desc="Get whether to trim the leading spaces. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setKerning"
				name="SetKerning"
				num_parameters="1"
				property="set"
				property_name2="kerning"
				property_name="kerning">
				<comments desc="Set whether to use kerning. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abKerning"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getKerning"
				name="GetKerning"
				num_parameters="0"
				property="get"
				property_name2="kerning"
				property_name="kerning">
				<comments desc="Get whether to use kerning. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTextSize"
				name="GetTextSize"
				num_parameters="0"
				property="get"
				property_name2="textSize"
				property_name="text_size">
				<comments desc="Get the computed size of the text after layout. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setExpressionContext"
				name="SetExpressionContext"
				num_parameters="1"
				property="set"
				property_name2="expressionContext"
				property_name="expression_context">
				<comments desc="Set the expression context used for the &lt;expr&gt; tags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apContext"
					type="iExpressionContext *"
					typec="iExpressionContext*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExpressionContext"
				name="GetExpressionContext"
				num_parameters="0"
				property="get"
				property_name2="expressionContext"
				property_name="expression_context">
				<comments desc="Get the expression context used for the &lt;expr&gt; tags. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="update" name="Update" num_parameters="0">
				<comments desc="Update. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="drawAt" name="DrawAt" num_parameters="3">
				<comments desc="Draw the text object in the specified canvas. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aClippingRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="draw" name="Draw" num_parameters="2">
				<comments desc="Draw the text object in the specified canvas. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aClippingRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addOccluder" name="AddOccluder" num_parameters="2">
				<comments desc="Add a text occluder. "/>
				<return type="iTextOccluder *" typec="iTextOccluder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aUserData"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeOccluder" name="RemoveOccluder" num_parameters="1">
				<comments desc="Remove the text occluder at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clearOccluders" name="ClearOccluders" num_parameters="0">
				<comments desc="Removes all text occluders. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumOccluders"
				name="GetNumOccluders"
				num_parameters="0"
				property="get"
				property_name2="numOccluders"
				property_name="num_occluders">
				<comments desc="Get number of occluders. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getOccluder"
				name="GetOccluder"
				num_parameters="1"
				property="get"
				property_name2="occluder"
				property_name="occluder">
				<comments desc="Get occluder from index. "/>
				<return type="iTextOccluder *" typec="iTextOccluder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setText"
				name="SetText"
				num_parameters="1"
				property="set"
				property_name2="text"
				property_name="text">
				<comments desc="Set the text of the text object. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getText"
				name="GetText"
				num_parameters="0"
				property="get"
				property_name2="text"
				property_name="text">
				<comments desc="Get the text of the text object. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addText" name="AddText" num_parameters="1">
				<comments desc="Add Text the the widget. ">
					<remark text="Will push back and layout the desired string without processing the already-processed parts uselessly. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSelectionColor"
				name="SetSelectionColor"
				num_parameters="1"
				property="set"
				property_name2="selectionColor"
				property_name="selection_color">
				<comments desc="Set the selection background color. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="sVec4f"
					typec="sVec4f"
					typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getSelectionColor"
				name="GetSelectionColor"
				num_parameters="0"
				property="get"
				property_name2="selectionColor"
				property_name="selection_color">
				<comments desc="Get the selection background color. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getSelectedString"
				name="GetSelectedString"
				num_parameters="0"
				property="get"
				property_name2="selectedString"
				property_name="selected_string">
				<comments desc="Get the selected string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method java_name="clearSelection" name="ClearSelection" num_parameters="0">
				<comments desc="Clear the current selection. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="selectRange" name="SelectRange" num_parameters="2">
				<comments desc="Select the specified word range. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anBegin"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anEnd"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="findWordIndexFromPosition"
				name="FindWordIndexFromPosition"
				num_parameters="1">
				<comments desc="Find the index of the word nearest of the specified position. " return="eInvalidHandle if no words can be found. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avPosition"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/ITexture.h.idl.xml">
		<enum name="eTextureFlags">
			<comments desc="Texture flags. "/>
			<value name="eTextureFlags_Default" value="0 ">
				<comments desc="Texture default. "/>
			</value>
			<value name="eTextureFlags_SystemMemory" value="niBit ( 0 ) ">
				<comments desc="Texture is in system memory. ">
					<remark text="Textures in system memory also implements the iBitmap interface matching it&apos;s type. "/>
				</comments>
			</value>
			<value name="eTextureFlags_RenderTarget" value="niBit ( 1 ) ">
				<comments desc="Texture is a render target. ">
					<remark text="Excludes Dynamic and DepthStencil flags. "/>
				</comments>
			</value>
			<value name="eTextureFlags_DepthStencil" value="niBit ( 2 ) ">
				<comments desc="Texture is a depth stencil. ">
					<remark text="Excludes Dynamic and RenderTarget flags. "/>
				</comments>
			</value>
			<value name="eTextureFlags_Dynamic" value="niBit ( 3 ) ">
				<comments desc="Texture is a dynamic and so can be locked. ">
					<remark text="Excludes DepthStencil and RenderTarget flags. "/>
				</comments>
			</value>
			<value name="eTextureFlags_MipMaps" value="niBit ( 4 ) ">
				<comments desc="Texture has mip maps. "/>
			</value>
			<value name="eTextureFlags_AutoGenMipMaps" value="niBit ( 5 ) ">
				<comments desc="Texture has automatically generated mip maps. ">
					<remark text="This will automatically add eTextureFlags_MipMaps. "/>
					<remark text="Mipmaps will be generated only when the level 0 surface is modified. "/>
				</comments>
			</value>
			<value name="eTextureFlags_Surface" value="niBit ( 6 ) ">
				<comments desc="The texture is a surface. It cant be bound as a source texture to be rasterized, but can be used for blitting, locked and as render target. "/>
			</value>
			<value name="eTextureFlags_SubTexture" value="niBit ( 7 ) ">
				<comments desc="Is a sub texture. "/>
			</value>
			<value name="eTextureFlags_Overlay" value="niBit ( 8 ) ">
				<comments desc="Overlay texture. An overlay texture is a texture that will use only clamp addressing without mipmaps, and that is generaly non-pow2. "/>
			</value>
			<value name="eTextureFlags_Virtual" value="niBit ( 9 ) ">
				<comments desc="Virtual texture. The actual texture data are provided through bind only. \see ni::iDeviceResource::Bind "/>
			</value>
			<value name="eTextureFlags_RTAA4Samples" value="niBit ( 10 ) ">
				<comments desc="Texture is an antialiased render target with 4 samples. "/>
			</value>
			<value name="eTextureFlags_RTAA8Samples" value="niBit ( 11 ) ">
				<comments desc="Texture is an antialiased render target with 8 samples. "/>
			</value>
			<value name="eTextureFlags_RTAA16Samples" value="niBit ( 12 ) ">
				<comments desc="Texture is an antialiased render target with 16 samples. "/>
			</value>
			<value name="eTextureFlags_RTAA_All" value="eTextureFlags_RTAA4Samples|eTextureFlags_RTAA8Samples|eTextureFlags_RTAA16Samples ">
				<comments desc="All RTAA flags, can be used to test whether a texture is antialiased. "/>
			</value>
			<value name="eTextureFlags_RTFlipped" value="niBit ( 15 ) ">
				<comments desc="Render target is flipped. ">
					<remark text="Shader projection matrices should be flipped when rendering in a render target that has this flags set. The fixed/plain rendering pipeline does the flipping automatically. "/>
				</comments>
			</value>
		</enum>
		<enum name="eTextureBlitFlags">
			<comments desc="Texture blit flags. "/>
			<value name="eTextureBlitFlags_None" value="0 ">
				<comments desc="No flags "/>
			</value>
			<value name="eTextureBlitFlags_BilinearFilter" value="niBit ( 0 ) ">
				<comments desc="Bilinear filtering. "/>
			</value>
			<value name="eTextureBlitFlags_Frequent" value="niBit ( 1 ) ">
				<comments desc="Optimization flags that notify that the bliting will happen frequently. ">
					<remark text="The flag is used as an hint for the implementation to cache some data. "/>
				</comments>
			</value>
		</enum>
		<interface name="iTexture" uuid1="604AF5DB-7590-444A-947C-D320BB95F78C" uuid2="0x604af5db,0x7590,0x444a,0x94,0x7c,0xd3,0x20,0xbb,0x95,0xf7,0x8c">
			<comments desc="Texture interface ">
				<remark text="Bindable "/>
			</comments>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the texture type. "/>
				<return type="eBitmapType" typec="eBitmapType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the texture width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the texture height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDepth"
				name="GetDepth"
				num_parameters="0"
				property="get"
				property_name2="depth"
				property_name="depth">
				<comments desc="Get the texture depth. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPixelFormat"
				name="GetPixelFormat"
				num_parameters="0"
				property="get"
				property_name2="pixelFormat"
				property_name="pixel_format">
				<comments desc="Get the texture&apos;s pixel format. "/>
				<return type="iPixelFormat *" typec="iPixelFormat*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumMipMaps"
				name="GetNumMipMaps"
				num_parameters="0"
				property="get"
				property_name2="numMipMaps"
				property_name="num_mip_maps">
				<comments desc="Get the number of mipmaps of the texture. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the texture flags. "/>
				<return type="tTextureFlags" typec="tTextureFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSubTexture"
				name="GetSubTexture"
				num_parameters="1"
				property="get"
				property_name2="subTexture"
				property_name="sub_texture">
				<comments desc="Get a sub texture. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iGLTexture" uuid1="A960DAC0-7F0E-0000-C891-B3B1FF7F0000" uuid2="0xa960dac0,0x7f0e,0x0000,0xc8,0x91,0xb3,0xb1,0xff,0x7f,0x00,0x00">
			<comments desc=""/>
			<parents>
				<parent name="iTexture"/>
			</parents>
			<method
				const="yes"
				java_name="getGLHandle"
				name="GetGLHandle"
				num_parameters="0"
				property="get"
				property_name2="glhandle"
				property_name="glhandle">
				<comments desc="Get the OpenGL handle. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getGLFBOHandle"
				name="GetGLFBOHandle"
				num_parameters="0"
				property="get"
				property_name2="glfbohandle"
				property_name="glfbohandle">
				<comments desc="Get the OpenGL FBO handle. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/ITransform.h.idl.xml">
		<enum name="eTransformFlags">
			<comments desc="Transform flags. Default is eTransformFlags_InheritAll "/>
			<value name="eTransformFlags_InheritPositionX" value="niBit ( 0 ) ">
				<comments desc="Inherit the position X axis. "/>
			</value>
			<value name="eTransformFlags_InheritPositionY" value="niBit ( 1 ) ">
				<comments desc="Inherit the position Y axis. "/>
			</value>
			<value name="eTransformFlags_InheritPositionZ" value="niBit ( 2 ) ">
				<comments desc="Inherit the position Z axis. "/>
			</value>
			<value name="eTransformFlags_InheritPosition" value="niBit ( 0 ) |niBit ( 1 ) |niBit ( 2 ) ">
				<comments desc="Inherit the position XYZ axis. "/>
			</value>
			<value name="eTransformFlags_InheritRotation" value="niBit ( 3 ) ">
				<comments desc="Inherit the rotation. "/>
			</value>
			<value name="eTransformFlags_InheritScale" value="niBit ( 4 ) ">
				<comments desc="Parent scalings are also apply on children. "/>
			</value>
			<value name="eTransformFlags_InheritPositionRotation" value="eTransformFlags_InheritPosition|eTransformFlags_InheritRotation ">
				<comments desc="Inherit the position and rotation. "/>
			</value>
			<value name="eTransformFlags_InheritAll" value="eTransformFlags_InheritPositionRotation|eTransformFlags_InheritScale ">
				<comments desc="Inherit all. "/>
			</value>
		</enum>
		<enum name="eTransformInternalFlags">
			<comments desc="Transform internal flags. "/>
			<value name="eTransformInternalFlags_Dirty" value="niBit ( 8 ) ">
				<comments desc="The transform will have to be recomputed. "/>
			</value>
			<value name="eTransformInternalFlags_UseScale" value="niBit ( 9 ) ">
				<comments desc="The transform uses a scaling factor. "/>
			</value>
		</enum>
		<interface name="iTransform" uuid1="2B890822-2BFF-426D-A646-51691C1649B4" uuid2="0x2b890822,0x2bff,0x426d,0xa6,0x46,0x51,0x69,0x1c,0x16,0x49,0xb4">
			<comments desc="iTransform is the interface for positionning and orienting. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getDescStructPtr"
				name="GetDescStructPtr"
				num_parameters="0"
				property="get"
				property_name2="descStructPtr"
				property_name="desc_struct_ptr">
				<comments desc="Get the transform description structure pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the transform. "/>
				<return type="iTransform *" typec="iTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy another transform in this transform. ">
					<remark text="This function should be prefered to copying the world matrix of the transform. The scale of the transform is stored separatly and will be lost if not copied aswell. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="const iTransform *"
					typec="const iTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setDirty" name="SetDirty" num_parameters="0">
				<comments desc="Mark the transform as &quot;Dirty&quot;. " return="The previous value of the sync counter, garanteed to be different of the current counter. ">
					<remark text="If the transform isn&apos;t already marked as dirty it increases the update count. "/>
				</comments>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method
				java_name="setFlags"
				name="SetFlags"
				num_parameters="1"
				property="set"
				property_name2="flags"
				property_name="flags">
				<comments desc="Set the transform flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFlags"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the transform flags. "/>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method
				java_name="setSyncCounter"
				name="SetSyncCounter"
				num_parameters="1"
				property="set"
				property_name2="syncCounter"
				property_name="sync_counter">
				<comments desc="Set the synchronization counter. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFlags"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method
				const="yes"
				java_name="getSyncCounter"
				name="GetSyncCounter"
				num_parameters="0"
				property="get"
				property_name2="syncCounter"
				property_name="sync_counter">
				<comments desc="Get the synchronization counter. ">
					<remark text="The counter can be used to synchronize updates. "/>
				</comments>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method
				java_name="setParent"
				name="SetParent"
				num_parameters="1"
				property="set"
				property_name2="parent"
				property_name="parent">
				<comments desc="Set the parent transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apParent"
					type="iTransform *"
					typec="iTransform*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getParent"
				name="GetParent"
				num_parameters="0"
				property="get"
				property_name2="parent"
				property_name="parent">
				<comments desc="Get the parent transform. "/>
				<return type="iTransform *" typec="iTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="identity" name="Identity" num_parameters="0">
				<comments desc="Set the transform to identity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setWorldMatrix"
				name="SetWorldMatrix"
				num_parameters="1"
				property="set"
				property_name2="worldMatrix"
				property_name="world_matrix">
				<comments desc="Set the world matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWorldMatrix"
				name="GetWorldMatrix"
				num_parameters="0"
				property="get"
				property_name2="worldMatrix"
				property_name="world_matrix">
				<comments desc="Get the world matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setLocalMatrix"
				name="SetLocalMatrix"
				num_parameters="1"
				property="set"
				property_name2="localMatrix"
				property_name="local_matrix">
				<comments desc="Set the local matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalMatrix"
				name="GetLocalMatrix"
				num_parameters="0"
				property="get"
				property_name2="localMatrix"
				property_name="local_matrix">
				<comments desc="Get the local matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method java_name="multiplyWorldMatrix" name="MultiplyWorldMatrix" num_parameters="1">
				<comments desc="Multiply the world matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="preMultiplyWorldMatrix" name="PreMultiplyWorldMatrix" num_parameters="1">
				<comments desc="Pre-Multiply the world matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="multiplyLocalMatrix" name="MultiplyLocalMatrix" num_parameters="1">
				<comments desc="Multiply the local matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="preMultiplyLocalMatrix" name="PreMultiplyLocalMatrix" num_parameters="1">
				<comments desc="Pre-Multiply the local matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="lookAt" name="LookAt" num_parameters="2">
				<comments desc="Set the transform&apos;s orientation that the forward vector points at a specified world position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="avLookAt"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avUp"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setWorldPosition"
				name="SetWorldPosition"
				num_parameters="1"
				property="set"
				property_name2="worldPosition"
				property_name="world_position">
				<comments desc="Set the world position of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWorldPosition"
				name="GetWorldPosition"
				num_parameters="0"
				property="get"
				property_name2="worldPosition"
				property_name="world_position">
				<comments desc="Get the world position of the transform. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setLocalPosition"
				name="SetLocalPosition"
				num_parameters="1"
				property="set"
				property_name2="localPosition"
				property_name="local_position">
				<comments desc="Set the local position of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalPosition"
				name="GetLocalPosition"
				num_parameters="0"
				property="get"
				property_name2="localPosition"
				property_name="local_position">
				<comments desc="Get the local position of the transform. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="translate" name="Translate" num_parameters="1">
				<comments desc="Translate the local position of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="preTranslate" name="PreTranslate" num_parameters="1">
				<comments desc="PreTranslate the local position of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setWorldRotation"
				name="SetWorldRotation"
				num_parameters="1"
				property="set"
				property_name2="worldRotation"
				property_name="world_rotation">
				<comments desc="Set the world rotation of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setLocalRotation"
				name="SetLocalRotation"
				num_parameters="1"
				property="set"
				property_name2="localRotation"
				property_name="local_rotation">
				<comments desc="Set the local rotation of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="rotate" name="Rotate" num_parameters="1">
				<comments desc="Rotate the local rotation of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="preRotate" name="PreRotate" num_parameters="1">
				<comments desc="PreRotate the local rotation of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setScale"
				name="SetScale"
				num_parameters="1"
				property="set"
				property_name2="scale"
				property_name="scale">
				<comments desc="Set the scale of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aScale"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getScale"
				name="GetScale"
				num_parameters="0"
				property="get"
				property_name2="scale"
				property_name="scale">
				<comments desc="Return the scale of the transform. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method java_name="createPreOffsetTransform" name="CreatePreOffsetTransform" num_parameters="0">
				<comments desc="Create a pre offset transform. ">
					<remark text="The created transform will be the new parent of this transform. The current parent of this transform becoming the parent of the offset transform. "/>
				</comments>
				<return type="iTransform *" typec="iTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createPostOffsetTransform" name="CreatePostOffsetTransform" num_parameters="0">
				<comments desc="Create a post offset transform. ">
					<remark text="The created transform will have this transform as parent. "/>
				</comments>
				<return type="iTransform *" typec="iTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRight"
				name="GetRight"
				num_parameters="0"
				property="get"
				property_name2="right"
				property_name="right">
				<comments desc="Get the right (X) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getUp"
				name="GetUp"
				num_parameters="0"
				property="get"
				property_name2="up"
				property_name="up">
				<comments desc="Get the up (Y) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getForward"
				name="GetForward"
				num_parameters="0"
				property="get"
				property_name2="forward"
				property_name="forward">
				<comments desc="Get the forward (Z) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getInvRight"
				name="GetInvRight"
				num_parameters="0"
				property="get"
				property_name2="invRight"
				property_name="inv_right">
				<comments desc="Get the inverse transform right (X) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getInvUp"
				name="GetInvUp"
				num_parameters="0"
				property="get"
				property_name2="invUp"
				property_name="inv_up">
				<comments desc="Get the inverse transform up (Y) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				const="yes"
				java_name="getInvForward"
				name="GetInvForward"
				num_parameters="0"
				property="get"
				property_name2="invForward"
				property_name="inv_forward">
				<comments desc="Get the inverse transform forward (Z) vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IUIContext.h.idl.xml">
		<enum name="eUIInputModifier">
			<comments desc="UI input modifiers. ">
				<remark text="The key values are intentionally the same as ni::eKeyMod "/>
			</comments>
			<value name="eUIInputModifier_A" value="niBit ( 16 ) ">
				<comments desc="Modifier A. "/>
			</value>
			<value name="eUIInputModifier_Control" value="eUIInputModifier_A ">
				<comments desc="Modifier A. "/>
			</value>
			<value name="eUIInputModifier_Command" value="eUIInputModifier_A ">
				<comments desc="Modifier A. "/>
			</value>
			<value name="eUIInputModifier_AddSelection" value="eUIInputModifier_A ">
				<comments desc="Modifier A. "/>
			</value>
			<value name="eUIInputModifier_B" value="niBit ( 17 ) ">
				<comments desc="Modifier B. "/>
			</value>
			<value name="eUIInputModifier_Shift" value="eUIInputModifier_B ">
				<comments desc="Modifier B. "/>
			</value>
			<value name="eUIInputModifier_AddSelectionRange" value="eUIInputModifier_B ">
				<comments desc="Modifier B. "/>
			</value>
			<value name="eUIInputModifier_C" value="niBit ( 18 ) ">
				<comments desc="Modifier C. "/>
			</value>
			<value name="eUIInputModifier_Alt" value="eUIInputModifier_C ">
				<comments desc="Modifier C. "/>
			</value>
			<value name="eUIInputModifier_Shortcut" value="eUIInputModifier_C ">
				<comments desc="Modifier C. "/>
			</value>
			<value name="eUIInputModifier_KeyDownRepeat" value="niBit ( 31 ) ">
				<comments desc="KeyDown is repeating. "/>
			</value>
		</enum>
		<enum name="eUIInputSubmitFlags">
			<comments desc="UI input submit. "/>
			<value name="eUIInputSubmitFlags_Disabled" value="0 ">
				<comments desc="Disabled "/>
			</value>
			<value name="eUIInputSubmitFlags_SubmitA" value="niBit ( 0 ) ">
				<comments desc="Input action Submit A. ">
					<remark text="Standard is Enter and NumPadEnter. "/>
				</comments>
			</value>
			<value name="eUIInputSubmitFlags_SubmitB" value="niBit ( 1 ) ">
				<comments desc="Input action Submit B. ">
					<remark text="Standard is Space bar. "/>
				</comments>
			</value>
			<value name="eUIInputSubmitFlags_SubmitC" value="niBit ( 2 ) ">
				<comments desc="Input action Submit C. ">
					<remark text="Standard is Ctrl+Enter. "/>
				</comments>
			</value>
			<value name="eUIInputSubmitFlags_LeftClick" value="niBit ( 3 ) ">
				<comments desc="Left click. "/>
			</value>
			<value name="eUIInputSubmitFlags_LeftDoubleClick" value="niBit ( 4 ) ">
				<comments desc="Left double click. "/>
			</value>
			<value name="eUIInputSubmitFlags_RightClick" value="niBit ( 5 ) ">
				<comments desc="Right click. "/>
			</value>
			<value name="eUIInputSubmitFlags_RightDoubleClick" value="niBit ( 6 ) ">
				<comments desc="Right double click. "/>
			</value>
			<value name="eUIInputSubmitFlags_StandardButton" value="eUIInputSubmitFlags_SubmitA|eUIInputSubmitFlags_SubmitB|eUIInputSubmitFlags_LeftClick ">
				<comments desc="Button standard. "/>
			</value>
			<value name="eUIInputSubmitFlags_StandardIcon" value="eUIInputSubmitFlags_SubmitA|eUIInputSubmitFlags_SubmitB|eUIInputSubmitFlags_LeftDoubleClick ">
				<comments desc="Icon standard. "/>
			</value>
			<value name="eUIInputSubmitFlags_StandardSingleLineText" value="eUIInputSubmitFlags_SubmitA|eUIInputSubmitFlags_SubmitC ">
				<comments desc="Single Line Text box standard. "/>
			</value>
			<value name="eUIInputSubmitFlags_StandardMultiLineText" value="eUIInputSubmitFlags_SubmitC ">
				<comments desc="Multi Line Text box standard. "/>
			</value>
			<value name="eUIInputSubmitFlags_Default" value="eUIInputSubmitFlags_Disabled ">
				<comments desc="UI Context default input submit flags default. "/>
			</value>
		</enum>
		<interface name="iUIContext" uuid1="2C6B89CB-0E9E-41FC-92BB-AE6AA3EE442C" uuid2="0x2c6b89cb,0x0e9e,0x41fc,0x92,0xbb,0xae,0x6a,0xa3,0xee,0x44,0x2c">
			<comments desc="UI Context interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the parent graphics object. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGraphicsContext"
				name="GetGraphicsContext"
				num_parameters="0"
				property="get"
				property_name2="graphicsContext"
				property_name="graphics_context">
				<comments desc="Get the parent graphics context attached to this UI context. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="sendWindowMessage" name="SendWindowMessage" num_parameters="3">
				<comments desc="Send a Window message to the UI context. ">
					<remark text="This method should be called in the application&apos;s window message sink to send input to the UI context. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aMsg"
					type="eOSWindowMessage"
					typec="eOSWindowMessage"
					typei="ni::eType_Enum"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setInputModifiers"
				name="SetInputModifiers"
				num_parameters="1"
				property="set"
				property_name2="inputModifiers"
				property_name="input_modifiers">
				<comments desc="Set the input modifiers. \see ni::eUIInputModifier "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anInputModifier"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getInputModifiers"
				name="GetInputModifiers"
				num_parameters="0"
				property="get"
				property_name2="inputModifiers"
				property_name="input_modifiers">
				<comments desc="Get the input modifiers. \see ni::eUIInputModifier "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDefaultInputSubmitFlags"
				name="SetDefaultInputSubmitFlags"
				num_parameters="1"
				property="set"
				property_name2="defaultInputSubmitFlags"
				property_name="default_input_submit_flags">
				<comments desc="Set the default input submit flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aSubmitFlags"
					type="tUIInputSubmitFlags"
					typec="tUIInputSubmitFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultInputSubmitFlags"
				name="GetDefaultInputSubmitFlags"
				num_parameters="0"
				property="get"
				property_name2="defaultInputSubmitFlags"
				property_name="default_input_submit_flags">
				<comments desc="Get the default input submit flags. "/>
				<return type="tUIInputSubmitFlags" typec="tUIInputSubmitFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setHoverDelay"
				name="SetHoverDelay"
				num_parameters="1"
				property="set"
				property_name2="hoverDelay"
				property_name="hover_delay">
				<comments desc="Set the hovering delay in seconds. ">
					<remark text="Default is 0 which means that it is disabled. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afDelay"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getHoverDelay"
				name="GetHoverDelay"
				num_parameters="0"
				property="get"
				property_name2="hoverDelay"
				property_name="hover_delay">
				<comments desc="Get the hovering delay in seconds. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setHoverInputModifiers"
				name="SetHoverInputModifiers"
				num_parameters="1"
				property="set"
				property_name2="hoverInputModifiers"
				property_name="hover_input_modifiers">
				<comments desc="Set the input modifier required to enable the hover. \see ni::eUIInputModifier "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anInputModifiers"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHoverInputModifiers"
				name="GetHoverInputModifiers"
				num_parameters="0"
				property="get"
				property_name2="hoverInputModifiers"
				property_name="hover_input_modifiers">
				<comments desc="Get the input modifier required to enable the hover. \see ni::eUIInputModifier "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setImageMap"
				name="SetImageMap"
				num_parameters="1"
				property="set"
				property_name2="imageMap"
				property_name="image_map">
				<comments desc="Set the context&apos;s image map. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apImageMap"
					type="iImageMap *"
					typec="iImageMap*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getImageMap"
				name="GetImageMap"
				num_parameters="0"
				property="get"
				property_name2="imageMap"
				property_name="image_map">
				<comments desc="Get the context&apos;s image map. "/>
				<return type="iImageMap *" typec="iImageMap*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setErrorOverlay"
				name="SetErrorOverlay"
				num_parameters="1"
				property="set"
				property_name2="errorOverlay"
				property_name="error_overlay">
				<comments desc="Get the error overlay. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apOverlay"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getErrorOverlay"
				name="GetErrorOverlay"
				num_parameters="0"
				property="get"
				property_name2="errorOverlay"
				property_name="error_overlay">
				<comments desc="Get the error overlay. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearSkins" name="ClearSkins" num_parameters="0">
				<comments desc="Remove all skins loaded. ">
					<remark text="The default skin will remain. "/>
					<remark text="A SkinChanged message will be broadcasted to all widgets when the skins are cleared. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="addSkin" name="AddSkin" num_parameters="1">
				<comments desc="Add a new skin. ">
					<remark text="If a skin with the specified name has already been loaded the method will fail. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addSkinFromRes" name="AddSkinFromRes" num_parameters="1">
				<comments desc="Add a new skin from the specified resource. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeSkin" name="RemoveSkin" num_parameters="1">
				<comments desc="Unload a skin. ">
					<remark text="The default skin cannot be removed "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDefaultSkin"
				name="SetDefaultSkin"
				num_parameters="1"
				property="set"
				property_name2="defaultSkin"
				property_name="default_skin">
				<comments desc="Set the default skin. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultSkin"
				name="GetDefaultSkin"
				num_parameters="0"
				property="get"
				property_name2="defaultSkin"
				property_name="default_skin">
				<comments desc="Get the default skin. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumSkins"
				name="GetNumSkins"
				num_parameters="0"
				property="get"
				property_name2="numSkins"
				property_name="num_skins">
				<comments desc="Get the number of skins. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSkinName"
				name="GetSkinName"
				num_parameters="1"
				property="get"
				property_name2="skinName"
				property_name="skin_name">
				<comments desc="Get the name of the skin at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSkinIndex"
				name="GetSkinIndex"
				num_parameters="1"
				property="get"
				property_name2="skinIndex"
				property_name="skin_index">
				<comments desc="Get the index of the skin with the specified name. ">
					<remark text="Return eInvalidHandle if the skin does not exist. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSkinDataTable"
				name="GetSkinDataTable"
				num_parameters="1"
				property="get"
				property_name2="skinDataTable"
				property_name="skin_data_table">
				<comments desc="Get the data table associated with the specified skin. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="applySkin" name="ApplySkin" num_parameters="2">
				<comments desc="Apply the specified skin to a widget and all its children. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinFont"
				name="FindSkinFont"
				num_parameters="4">
				<comments desc="Find the font of the specified item in the widget&apos;s skin. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinCursor"
				name="FindSkinCursor"
				num_parameters="4">
				<comments desc="Find the cursor of the specified item in the widget&apos;s skin. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinElement"
				name="FindSkinElement"
				num_parameters="4">
				<comments desc="Find the element of the specified item in the widget&apos;s skin. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinColor"
				name="FindSkinColor"
				num_parameters="5">
				<comments desc="Find the color of the specified item in the widget&apos;s skin. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aDefault"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasWidgetSinkClass"
				name="HasWidgetSinkClass"
				num_parameters="1">
				<comments desc="Check whether the specified widget sink class can be created. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidgetSink" name="CreateWidgetSink" num_parameters="2">
				<comments desc="Create a widget sink of the specified class. "/>
				<return type="iWidgetSink *" typec="iWidgetSink*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="createWidgetSinkFromScript"
				min_features="15"
				name="CreateWidgetSinkFromScript"
				num_parameters="1">
				<comments desc="Create a widget sink from the the specified script script. "/>
				<return type="iWidgetSink *" typec="iWidgetSink*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidget" name="CreateWidget" num_parameters="5">
				<comments desc="Create a widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apwParent"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRectf : : Null ( ) "
					name="arectPos"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					name="anStyle"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="NULL "
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidgetRaw" name="CreateWidgetRaw" num_parameters="5">
				<comments desc="Create a widget without attaching any sink to it. ">
					<remark text="Use ni::iWidget::AddSink, ni::iWidget::AddPostSink, ni::iWidget::AddClassSink or ni::iWidget::AddClassPostSink to add custom or registered sink. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apwParent"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="sRectf : : Null ( ) "
					name="arectPos"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					name="anStyle"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="NULL "
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidgetFromDataTable" name="CreateWidgetFromDataTable" num_parameters="4">
				<comments desc="Create a widget from the specified datatable. " return="The newly created widget. ">
					<remark text="apwParent is the parent widget, if specified the datatable is loaded in a Canvas widget with a fill dock style, if not the datatable is loaded in a Form widget with a snap center dock style. "/>
					<remark text="ahspID if not null is the id of the widget (overwrite the &apos;id&apos; property in the datatable). "/>
					<remark text="ahspTitle if not null is the title of the form widget (overwrite the &apos;title&apos; property in the datatable). "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apwParent"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspTitle"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidgetFromResource" name="CreateWidgetFromResource" num_parameters="4">
				<comments desc="Create a widget from a datatable in the specified resource. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspRes"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apwParent"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspTitle"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRootWidget"
				name="GetRootWidget"
				num_parameters="0"
				property="get"
				property_name2="rootWidget"
				property_name="root_widget">
				<comments desc="Get the root widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setActiveWidget"
				name="SetActiveWidget"
				num_parameters="1"
				property="set"
				property_name2="activeWidget"
				property_name="active_widget">
				<comments desc="Set the active widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActiveWidget"
				name="GetActiveWidget"
				num_parameters="0"
				property="get"
				property_name2="activeWidget"
				property_name="active_widget">
				<comments desc="Get the active widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumWidgets"
				name="GetNumWidgets"
				num_parameters="0"
				property="get"
				property_name2="numWidgets"
				property_name="num_widgets">
				<comments desc="Get the number of widgets created. ">
					<remark text="This function is meant for debugging purpose. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getWidget"
				name="GetWidget"
				num_parameters="1"
				property="get"
				property_name2="widget"
				property_name="widget">
				<comments desc="Get the widget at the specified index. ">
					<remark text="This function is meant for debugging purpose. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="serializeWidget" name="SerializeWidget" num_parameters="4">
				<comments desc="Serialize the specified widget. " return="eFalse if failed, else eTrue. ">
					<params text="apWidget is the widget to serialize. "/>
					<params text="apDT is the source/destination data table. "/>
					<params text="anFlags is the serialization flags. "/>
					<params text="apFilter regular expression that determines which class will be serialized. Is NULL all classes will be serialized. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anFlags"
					type="tWidgetSerializeFlags"
					typec="tWidgetSerializeFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apFilter"
					type="iRegex *"
					typec="iRegex*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createWidgetCommand" name="CreateWidgetCommand" num_parameters="0">
				<comments desc="Create a widget command instance. "/>
				<return type="iWidgetCommand *" typec="iWidgetCommand*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="sendCommand" name="SendCommand" num_parameters="2">
				<comments desc="Send a command to the specified widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apCmd"
					type="iWidgetCommand *"
					typec="iWidgetCommand*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="draw" name="Draw" num_parameters="0">
				<comments desc="Draw the GUI. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="drawCursor" name="DrawCursor" num_parameters="1">
				<comments desc="Draw the current mouse cursor or set it as hardware cursor on the specified window if it is specified and supported by the graphics context. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apWindow"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="update" name="Update" num_parameters="1">
				<comments desc="Updates the GUI. " return="eTrue if succeeded, eFalse if failed. ">
					<remark text="Update will fail if called from inside a widget&apos;s message handler. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="fTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="resize" name="Resize" num_parameters="2">
				<comments desc="Resize the UI context. " return="eTrue if succeeded, eFalse if failed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aRootRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getContentsScale"
				name="GetContentsScale"
				num_parameters="0"
				property="get"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Get the contents&apos; scale factor. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setDebugDraw"
				name="SetDebugDraw"
				num_parameters="1"
				property="set"
				property_name2="debugDraw"
				property_name="debug_draw">
				<comments desc="Set whether debug draw is enabled. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abDebug"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDebugDraw"
				name="GetDebugDraw"
				num_parameters="0"
				property="get"
				property_name2="debugDraw"
				property_name="debug_draw">
				<comments desc="Get whether debug draw is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setCursor"
				name="SetCursor"
				num_parameters="1"
				property="set"
				property_name2="cursor"
				property_name="cursor">
				<comments desc="Set the current mouse cursor. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="pCursor"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCursor"
				name="GetCursor"
				num_parameters="0"
				property="get"
				property_name2="cursor"
				property_name="cursor">
				<comments desc="Get the current mouse cursor. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCursorPosition"
				name="GetCursorPosition"
				num_parameters="0"
				property="get"
				property_name2="cursorPosition"
				property_name="cursor_position">
				<comments desc="Get the cursor position. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="initializeDefaultToolbar"
				min_features="20"
				name="InitializeDefaultToolbar"
				num_parameters="0">
				<comments desc="Initialize the a toolbar in the root widget. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setToolbar"
				min_features="20"
				name="SetToolbar"
				num_parameters="1"
				property="set"
				property_name2="toolbar"
				property_name="toolbar">
				<comments desc="Set the UI default toolbar. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apToolbar"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getToolbar"
				min_features="20"
				name="GetToolbar"
				num_parameters="0"
				property="get"
				property_name2="toolbar"
				property_name="toolbar">
				<comments desc="Get the UI default toolbar. "/>
				<return type="ni::iWidget *" typec="ni::iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDrawOpCapture"
				name="SetDrawOpCapture"
				num_parameters="1"
				property="set"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Set whether the draw operation capture hud is enabled. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDrawOpCapture"
				name="GetDrawOpCapture"
				num_parameters="0"
				property="get"
				property_name2="drawOpCapture"
				property_name="draw_op_capture">
				<comments desc="Get whether the draw operation capture hud is enabled. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="drawWidget" name="DrawWidget" num_parameters="2">
				<comments desc="Draw the specified widget in the specified canvas. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="drawTransformedWidget" name="DrawTransformedWidget" num_parameters="3">
				<comments desc="Draw the specified widget in the specified canvas. The widget is transformed using the specified matrix. Clipping and scissoring is disabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aBaseMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDragStartDistance"
				name="SetDragStartDistance"
				num_parameters="1"
				property="set"
				property_name2="dragStartDistance"
				property_name="drag_start_distance">
				<comments desc="Set the drag start distance. ">
					<remark text="This define the minimum number of pixels the cursor has to move before a drag start message is sent. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anPixelDistance"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDragStartDistance"
				name="GetDragStartDistance"
				num_parameters="0"
				property="get"
				property_name2="dragStartDistance"
				property_name="drag_start_distance">
				<comments desc="Get the drag start distance. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDragFingerStartDistance"
				name="SetDragFingerStartDistance"
				num_parameters="2"
				property="set"
				property_name2="dragFingerStartDistance"
				property_name="drag_finger_start_distance">
				<comments desc="Set the drag finger start distance. ">
					<remark text="This define the minimum number of pixels a finger has to move before a drag start message is sent. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anPixelDistance"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDragFingerStartDistance"
				name="GetDragFingerStartDistance"
				num_parameters="1"
				property="get"
				property_name2="dragFingerStartDistance"
				property_name="drag_finger_start_distance">
				<comments desc="Get the drag finger start distance. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFingerPosition"
				name="GetFingerPosition"
				num_parameters="1"
				property="get"
				property_name2="fingerPosition"
				property_name="finger_position">
				<comments desc="Get a finger&apos;s latest screen position and pressure. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFingerDown"
				name="GetFingerDown"
				num_parameters="1"
				property="get"
				property_name2="fingerDown"
				property_name="finger_down">
				<comments desc="Get a finger&apos;s latest down state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clearShortcuts" name="ClearShortcuts" num_parameters="0">
				<comments desc="Remove all shortcuts. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="addShortcut" name="AddShortcut" num_parameters="2">
				<comments desc="Add a shortcut. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anKey"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspCmd"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeShortcut" name="RemoveShortcut" num_parameters="1">
				<comments desc="Remove a shortcut. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anKey"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getShortcutCommand"
				name="GetShortcutCommand"
				num_parameters="1"
				property="get"
				property_name2="shortcutCommand"
				property_name="shortcut_command">
				<comments desc="Get the command of the specified shortcut. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anKey"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getKeyDown"
				name="GetKeyDown"
				num_parameters="1"
				property="get"
				property_name2="keyDown"
				property_name="key_down">
				<comments desc="Get a keyboard key&apos;s down state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aKey"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method java_name="inputFingerMove" name="InputFingerMove" num_parameters="2">
				<comments desc="">
					<params text="avPosition is in UI units. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="inputFingerRelativeMove" name="InputFingerRelativeMove" num_parameters="2">
				<comments desc="">
					<params text="avRelMove is in UI units. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avRelMove"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="inputFingerPress" name="InputFingerPress" num_parameters="3">
				<comments desc="">
					<params text="avPosition is in UI units. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avPosition"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abDown"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="inputKeyPress" name="InputKeyPress" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aKey"
					type="eKey"
					typec="eKey"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="abDown"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="inputKeyChar" name="InputKeyChar" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aCharCodePoint"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aKeyLeadingToKeyChar"
					type="eKey"
					typec="eKey"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="inputMouseWheel" name="InputMouseWheel" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afDelta"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method java_name="inputDoubleClick" name="InputDoubleClick" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aPointer"
					type="ePointerButton"
					typec="ePointerButton"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="inputRelativeMouseMove" name="InputRelativeMouseMove" num_parameters="1">
				<comments desc="">
					<params text="avRelMove is in UI units. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avRelMove"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="inputGameCtrl" name="InputGameCtrl" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apGameController"
					type="iGameCtrl *"
					typec="iGameCtrl*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="inputPinch" name="InputPinch" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afScale"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="aState"
					type="const eGestureState"
					typec="const eGestureState"
					typei="ni::eTypeFlags_Constant|ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFocusedWidget"
				name="GetFocusedWidget"
				num_parameters="0"
				property="get"
				property_name2="focusedWidget"
				property_name="focused_widget">
				<comments desc="Get the focused widget, that is the widget that is receiving the input messages. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createProfDraw"
				name="CreateProfDraw"
				num_parameters="2">
				<comments desc="Create an iProfDraw instance which uses the specifed canvas and font. "/>
				<return type="iProfDraw *" typec="iProfDraw*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setShowTerminal"
				name="SetShowTerminal"
				num_parameters="1"
				property="set"
				property_name2="showTerminal"
				property_name="show_terminal">
				<comments desc="Set whether the builtin terminal is enabled. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getShowTerminal"
				name="GetShowTerminal"
				num_parameters="0"
				property="get"
				property_name2="showTerminal"
				property_name="show_terminal">
				<comments desc="Get whether the builtin terminal is enabled. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVertexArray.h.idl.xml">
		<interface name="iVertexArray" uuid1="1C847F71-312F-41EA-97B9-AB29B0C38121" uuid2="0x1c847f71,0x312f,0x41ea,0x97,0xb9,0xab,0x29,0xb0,0xc3,0x81,0x21">
			<comments desc="Vertex Array interface. ">
				<remark text="Bindable "/>
			</comments>
			<parents>
				<parent name="iDeviceResource"/>
			</parents>
			<method
				const="yes"
				java_name="getFVF"
				name="GetFVF"
				num_parameters="0"
				property="get"
				property_name2="fvf"
				property_name="fvf">
				<comments desc="Get the FVF of the vertex array. "/>
				<return type="tFVF" typec="tFVF" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumVertices"
				name="GetNumVertices"
				num_parameters="0"
				property="get"
				property_name2="numVertices"
				property_name="num_vertices">
				<comments desc="Get the number of vertices in the vertex array. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getUsage"
				name="GetUsage"
				num_parameters="0"
				property="get"
				property_name2="usage"
				property_name="usage">
				<comments desc="Get the usage of the given vertex array. "/>
				<return type="eArrayUsage" typec="eArrayUsage" typei="ni::eType_Enum"/>
			</method>
			<method java_name="lock" name="Lock" num_parameters="3">
				<comments desc="Lock vertex array memory to enable writting and reading in it. " return="a pointer to the vertex data. ">
					<remark text="pass 0 for ulFirstVertex and ulNumVertex to lock the entire array. "/>
					<params text="ulFirstVertex is the offset in the vertex data to lock. "/>
					<params text="ulNumVertex is the number of vertex to lock. "/>
					<params text="aLock specify to locking mode. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
				<parameter
					name="ulFirstVertex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="ulNumVertex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aLock"
					type="eLock"
					typec="eLock"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="unlock" name="Unlock" num_parameters="0">
				<comments desc="Unlock vertex array memory. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsLocked"
				name="GetIsLocked"
				num_parameters="0"
				property="get"
				property_name2="isLocked"
				property_name="is_locked">
				<comments desc="Return true if the array is locked. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGGradientTable.h.idl.xml">
		<enum min_features="20" name="eVGGradientType">
			<comments desc="Gradient type. "/>
			<value min_features="20" name="eVGGradientType_Linear" value="0 ">
				<comments desc="Linear gradient. "/>
			</value>
			<value min_features="20" name="eVGGradientType_Radial" value="1 ">
				<comments desc="Radial/circle gradient. "/>
			</value>
			<value min_features="20" name="eVGGradientType_Cross" value="2 ">
				<comments desc="Cross gradient. "/>
			</value>
			<value min_features="20" name="eVGGradientType_SqrtCross" value="3 ">
				<comments desc="Square root cross gradient. "/>
			</value>
			<value min_features="20" name="eVGGradientType_Conic" value="4 ">
				<comments desc="Conic gradient. "/>
			</value>
			<value min_features="20" name="eVGGradientType_Diamond" value="5 ">
				<comments desc="Diamond gradient. "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iVGGradientTable"
			uuid1="D508082D-9992-4EEB-A8A7-0ADEE6E26648"
			uuid2="0xd508082d,0x9992,0x4eeb,0xa8,0xa7,0x0a,0xde,0xe6,0xe2,0x66,0x48">
			<comments desc="Gradient table. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="copy"
				min_features="20"
				name="Copy"
				num_parameters="1">
				<comments desc="Copy another table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="const iVGGradientTable *"
					typec="const iVGGradientTable*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				min_features="20"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this table. "/>
				<return type="iVGGradientTable *" typec="iVGGradientTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				min_features="20"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size of the table. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setColor"
				min_features="20"
				name="SetColor"
				num_parameters="2"
				property="set"
				property_name2="color"
				property_name="color">
				<comments desc="Set the color of the gradient at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor"
				min_features="20"
				name="GetColor"
				num_parameters="1"
				property="get"
				property_name2="color"
				property_name="color">
				<comments desc="Get the color of the gradient at the specified index. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setColorRange"
				min_features="20"
				name="SetColorRange"
				num_parameters="3"
				property="set"
				property_name2="colorRange"
				property_name="color_range">
				<comments desc="Set a range of color. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anStart"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anEnd"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="generateTwoColors"
				min_features="20"
				name="GenerateTwoColors"
				num_parameters="2">
				<comments desc="Generate a gradient between two colors. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aStartColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aEndColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="generateStops"
				min_features="20"
				name="GenerateStops"
				num_parameters="2">
				<comments desc="Generate a gradient between specified stops. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apOffsets"
					type="const tF32CVec *"
					typec="const tF32CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apColors"
					type="const tVec4fCVec *"
					typec="const tVec4fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="createImage"
				min_features="20"
				name="CreateImage"
				num_parameters="7">
				<comments desc="Create an image containing the gradient. "/>
				<return type="iVGImage *" typec="iVGImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eVGGradientType"
					typec="eVGGradientType"
					typei="ni::eType_Enum"/>
				<parameter
					name="aWrapType"
					type="eVGWrapType"
					typec="eVGWrapType"
					typei="ni::eType_Enum"/>
				<parameter
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anD1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="anD2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGImage.h.idl.xml">
		<enum name="eVGWrapType">
			<comments desc="VG wrap type. "/>
			<value name="eVGWrapType_Clamp" value="0 ">
				<comments desc="Clamp, the edge color is used when outside of the source rectangle. "/>
			</value>
			<value name="eVGWrapType_Repeat" value="1 ">
				<comments desc="Repeat, the source is repeated at each source rectangle boundary. "/>
			</value>
			<value name="eVGWrapType_Mirror" value="2 ">
				<comments desc="Mirror, the source is mirror at each source rectangle boundary. "/>
			</value>
			<value name="eVGWrapType_Pad" value="3 ">
				<comments desc="Padding, the background color is used when outside of the source rectangle. ">
					<remark text="Not supported by gradients. "/>
				</comments>
			</value>
		</enum>
		<enum name="eVGImageFilter">
			<comments desc="VG Image filter. "/>
			<value name="eVGImageFilter_Point" value="0 ">
				<comments desc="No filter. "/>
			</value>
			<value name="eVGImageFilter_Bilinear" value="1 ">
				<comments desc="Bilinear filter. "/>
			</value>
			<value name="eVGImageFilter_Bicubic" value="2 ">
				<comments desc="Bicubic filter. "/>
			</value>
			<value name="eVGImageFilter_Spline16" value="3 ">
				<comments desc="Spline16 filter. "/>
			</value>
			<value name="eVGImageFilter_Spline36" value="4 ">
				<comments desc="Spline36 filter. "/>
			</value>
			<value name="eVGImageFilter_Hanning" value="5 ">
				<comments desc="Hanning filter. "/>
			</value>
			<value name="eVGImageFilter_Hamming" value="6 ">
				<comments desc="Hamming filter. "/>
			</value>
			<value name="eVGImageFilter_Hermite" value="7 ">
				<comments desc="Hermite filter. "/>
			</value>
			<value name="eVGImageFilter_Kaiser" value="8 ">
				<comments desc="Kaiser filter. "/>
			</value>
			<value name="eVGImageFilter_Quadric" value="9 ">
				<comments desc="Quadric filter. "/>
			</value>
			<value name="eVGImageFilter_Catrom" value="10 ">
				<comments desc="Catrom filter. "/>
			</value>
			<value name="eVGImageFilter_Gaussian" value="11 ">
				<comments desc="Gaussian filter. "/>
			</value>
			<value name="eVGImageFilter_Bessel" value="12 ">
				<comments desc="Bessel filter. "/>
			</value>
			<value name="eVGImageFilter_Mitchell" value="13 ">
				<comments desc="Mitchell filter. "/>
			</value>
			<value name="eVGImageFilter_Sinc" value="14 ">
				<comments desc="Sinc filter. "/>
			</value>
			<value name="eVGImageFilter_Lanczos" value="15 ">
				<comments desc="Lanczos filter. "/>
			</value>
			<value name="eVGImageFilter_Blackman" value="16 ">
				<comments desc="Blackman filter. "/>
			</value>
			<value name="eVGImageFilter_Last" value="17 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eVGImageUsage">
			<comments desc="VGImage usage. "/>
			<value name="eVGImageUsage_Source" value="0 ">
				<comments desc="The usage is read-only to be used a source for rendering. ">
					<remark text="No dirty region is added. "/>
				</comments>
			</value>
			<value name="eVGImageUsage_Target" value="1 ">
				<comments desc="The usage is write-only to be used as a render target. ">
					<remark text="For texture this will force the creation of a render target texture. Once a render target has been created the image will always remain a render target. "/>
				</comments>
			</value>
			<value name="eVGImageUsage_DepthStencil" value="2 ">
				<comments desc="For GetTexture only, grabs the depth stencil for rendering. "/>
			</value>
		</enum>
		<interface name="iVGImage" uuid1="848A96E9-4B5C-43CF-9C61-A26DF54C7F07" uuid2="0x848a96e9,0x4b5c,0x43cf,0x9c,0x61,0xa2,0x6d,0xf5,0x4c,0x7f,0x07">
			<comments desc="VGImage interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified image. ">
					<remark text="Copy the bitmap&apos;s content. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apImage"
					type="iVGImage *"
					typec="iVGImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this image. ">
					<remark text="Clone the bitmap&apos;s content. "/>
				</comments>
				<return type="Ptr&lt;iVGImage&gt;" typec="Ptr&lt;iVGImage&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasBitmap"
				name="GetHasBitmap"
				num_parameters="0"
				property="get"
				property_name2="hasBitmap"
				property_name="has_bitmap">
				<comments desc="Get whether a bitmap is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabBitmap" name="GrabBitmap" num_parameters="2">
				<comments desc="Grab the image as a bitmap to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the bitmap&apos;s update from the texture. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eVGImageUsage"
					typec="eVGImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasTexture"
				name="GetHasTexture"
				num_parameters="0"
				property="get"
				property_name2="hasTexture"
				property_name="has_texture">
				<comments desc="Get whether a texture is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHasDepthStencil"
				name="GetHasDepthStencil"
				num_parameters="0"
				property="get"
				property_name2="hasDepthStencil"
				property_name="has_depth_stencil">
				<comments desc="Get whether a depth stencil is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabTexture" name="GrabTexture" num_parameters="2">
				<comments desc="Grab the image as a texture to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the texture&apos;s update from the bitmap. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eVGImageUsage"
					typec="eVGImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the image&apos;s width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the image&apos;s height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the image&apos;s size in a vector2f. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="resize" name="Resize" num_parameters="2">
				<comments desc="Resize the image. ">
					<remark text="This will clear the image&apos;s content. "/>
					<remark text="Resize will fail if the size is smaller than one. "/>
					<remark text="When resize fail the previous image&apos;s state is preserved. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anNewWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNewHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGPaint.h.idl.xml">
		<enum min_features="20" name="eVGPaintType">
			<comments desc="VG paint type. "/>
			<value min_features="20" name="eVGPaintType_Solid" value="0 ">
				<comments desc="Solid paint type. "/>
			</value>
			<value min_features="20" name="eVGPaintType_Image" value="1 ">
				<comments desc="Image paint type. "/>
			</value>
			<value min_features="20" name="eVGPaintType_Gradient" value="2 ">
				<comments desc="Gradient paint type. "/>
			</value>
		</enum>
		<enum min_features="20" name="eVGPaintUnits">
			<comments desc="VG paint units. "/>
			<value min_features="20" name="eVGPaintUnits_Absolute" value="0 ">
				<comments desc="Units are absolute (default). "/>
			</value>
			<value min_features="20" name="eVGPaintUnits_ObjectBoundingBox" value="1 ">
				<comments desc="Units relative to the element&apos;s bounding box. "/>
			</value>
			<value min_features="20" name="eVGPaintUnits_UserSpaceOnUse" value="2 ">
				<comments desc="Units relative to the current coordinate system. "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iVGPaint"
			uuid1="70ADF57B-20E2-4734-903C-DE24E702EFA9"
			uuid2="0x70adf57b,0x20e2,0x4734,0x90,0x3c,0xde,0x24,0xe7,0x02,0xef,0xa9">
			<comments desc="VG paint interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="copy"
				min_features="20"
				name="Copy"
				num_parameters="1">
				<comments desc="Copy another paint of the same type. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="const iVGPaint *"
					typec="const iVGPaint*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				min_features="20"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this paint. "/>
				<return type="iVGPaint *" typec="iVGPaint*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				min_features="20"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the paint type. "/>
				<return type="eVGPaintType" typec="eVGPaintType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setColor"
				min_features="20"
				name="SetColor"
				num_parameters="1"
				property="set"
				property_name2="color"
				property_name="color">
				<comments desc="Set the paint color. ">
					<remark text="The paint color is the default color that should be used if the rendering context can&apos;t draw this paint type. "/>
					<remark text="The color is the modulation color if the paint type is more complex than a solid color. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColor"
				min_features="20"
				name="GetColor"
				num_parameters="0"
				property="get"
				property_name2="color"
				property_name="color">
				<comments desc="Get the paint color. ">
					<remark text="The paint color is the default color that should be used if the rendering context can&apos;t draw this paint type. "/>
				</comments>
				<return type="const sColor4f &amp;" typec="const sColor4f&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iVGPaintImage"
			uuid1="83454203-03D3-43DF-9FC6-06E9E70A782F"
			uuid2="0x83454203,0x03d3,0x43df,0x9f,0xc6,0x06,0xe9,0xe7,0x0a,0x78,0x2f">
			<comments desc="VG paint image interface. "/>
			<parents>
				<parent name="iVGPaint"/>
			</parents>
			<method
				const="yes"
				java_name="getImage"
				min_features="20"
				name="GetImage"
				num_parameters="0"
				property="get"
				property_name2="image"
				property_name="image">
				<comments desc="Get the painted image. "/>
				<return type="iVGImage *" typec="iVGImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFilterType"
				min_features="20"
				name="SetFilterType"
				num_parameters="1"
				property="set"
				property_name2="filterType"
				property_name="filter_type">
				<comments desc="Set the image filter type. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aType"
					type="eVGImageFilter"
					typec="eVGImageFilter"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFilterType"
				min_features="20"
				name="GetFilterType"
				num_parameters="0"
				property="get"
				property_name2="filterType"
				property_name="filter_type">
				<comments desc="Get the image filter type. "/>
				<return type="eVGImageFilter" typec="eVGImageFilter" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setFilterRadius"
				min_features="20"
				name="SetFilterRadius"
				num_parameters="1"
				property="set"
				property_name2="filterRadius"
				property_name="filter_radius">
				<comments desc="Set the image filter radius. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afRadius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFilterRadius"
				min_features="20"
				name="GetFilterRadius"
				num_parameters="0"
				property="get"
				property_name2="filterRadius"
				property_name="filter_radius">
				<comments desc="Get the image filter radius. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setFilterNormalize"
				min_features="20"
				name="SetFilterNormalize"
				num_parameters="1"
				property="set"
				property_name2="filterNormalize"
				property_name="filter_normalize">
				<comments desc="Set the image filter normalization flag. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abNormalize"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFilterNormalize"
				min_features="20"
				name="GetFilterNormalize"
				num_parameters="0"
				property="get"
				property_name2="filterNormalize"
				property_name="filter_normalize">
				<comments desc="Get the image filter normalization flag. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setWrapType"
				min_features="20"
				name="SetWrapType"
				num_parameters="1"
				property="set"
				property_name2="wrapType"
				property_name="wrap_type">
				<comments desc="Set the paint wrap type. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aWrapType"
					type="eVGWrapType"
					typec="eVGWrapType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWrapType"
				min_features="20"
				name="GetWrapType"
				num_parameters="0"
				property="get"
				property_name2="wrapType"
				property_name="wrap_type">
				<comments desc="Get the paint wrap type. "/>
				<return type="eVGWrapType" typec="eVGWrapType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setRectangle"
				min_features="20"
				name="SetRectangle"
				num_parameters="1"
				property="set"
				property_name2="rectangle"
				property_name="rectangle">
				<comments desc="Set the image&apos;s display rectangle. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRectangle"
				min_features="20"
				name="GetRectangle"
				num_parameters="0"
				property="get"
				property_name2="rectangle"
				property_name="rectangle">
				<comments desc="Get the image&apos;s display rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setUnits"
				min_features="20"
				name="SetUnits"
				num_parameters="1"
				property="set"
				property_name2="units"
				property_name="units">
				<comments desc="Set the paint units. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aUnits"
					type="eVGPaintUnits"
					typec="eVGPaintUnits"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getUnits"
				min_features="20"
				name="GetUnits"
				num_parameters="0"
				property="get"
				property_name2="units"
				property_name="units">
				<comments desc="Get the paint units. "/>
				<return type="eVGPaintUnits" typec="eVGPaintUnits" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setSource"
				min_features="20"
				name="SetSource"
				num_parameters="1"
				property="set"
				property_name2="source"
				property_name="source">
				<comments desc="Set the source user pointer to be used to generate the image&apos;s content. ">
					<remark text="User side parameter, the user should update the fill/stroke image transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apSource"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSource"
				min_features="20"
				name="GetSource"
				num_parameters="0"
				property="get"
				property_name2="source"
				property_name="source">
				<comments desc="Get the source user pointer to be used to generate the image&apos;s content. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSourceUnits"
				min_features="20"
				name="SetSourceUnits"
				num_parameters="1"
				property="set"
				property_name2="sourceUnits"
				property_name="source_units">
				<comments desc="Set the content units. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
					<remark text="Valid only if generated from a source. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aUnits"
					type="eVGPaintUnits"
					typec="eVGPaintUnits"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSourceUnits"
				min_features="20"
				name="GetSourceUnits"
				num_parameters="0"
				property="get"
				property_name2="sourceUnits"
				property_name="source_units">
				<comments desc="Get the content units. "/>
				<return type="eVGPaintUnits" typec="eVGPaintUnits" typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iVGPaintGradient"
			uuid1="2DA65D45-7B4B-4885-9B68-09E586DEF11B"
			uuid2="0x2da65d45,0x7b4b,0x4885,0x9b,0x68,0x09,0xe5,0x86,0xde,0xf1,0x1b">
			<comments desc="VG paint gradient interface. "/>
			<parents>
				<parent name="iVGPaint"/>
			</parents>
			<method
				java_name="setGradientType"
				min_features="20"
				name="SetGradientType"
				num_parameters="1"
				property="set"
				property_name2="gradientType"
				property_name="gradient_type">
				<comments desc="Set the type of gradient. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aType"
					type="eVGGradientType"
					typec="eVGGradientType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getGradientType"
				min_features="20"
				name="GetGradientType"
				num_parameters="0"
				property="get"
				property_name2="gradientType"
				property_name="gradient_type">
				<comments desc="Get the type of gradient. "/>
				<return type="eVGGradientType" typec="eVGGradientType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setD1"
				min_features="20"
				name="SetD1"
				num_parameters="1"
				property="set"
				property_name2="d1"
				property_name="d1">
				<comments desc="Set the D1 parameter. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anD1"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getD1"
				min_features="20"
				name="GetD1"
				num_parameters="0"
				property="get"
				property_name2="d1"
				property_name="d1">
				<comments desc="Get the D1 parameter. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				java_name="setD2"
				min_features="20"
				name="SetD2"
				num_parameters="1"
				property="set"
				property_name2="d2"
				property_name="d2">
				<comments desc="Set the D2 parameter. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anD2"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getD2"
				min_features="20"
				name="GetD2"
				num_parameters="0"
				property="get"
				property_name2="d2"
				property_name="d2">
				<comments desc="Get the D2 parameter. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				java_name="setWrapType"
				min_features="20"
				name="SetWrapType"
				num_parameters="1"
				property="set"
				property_name2="wrapType"
				property_name="wrap_type">
				<comments desc="Set the paint wrap type. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aWrapType"
					type="eVGWrapType"
					typec="eVGWrapType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getWrapType"
				min_features="20"
				name="GetWrapType"
				num_parameters="0"
				property="get"
				property_name2="wrapType"
				property_name="wrap_type">
				<comments desc="Get the paint wrap type. "/>
				<return type="eVGWrapType" typec="eVGWrapType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setA"
				min_features="20"
				name="SetA"
				num_parameters="1"
				property="set"
				property_name2="a"
				property_name="a">
				<comments desc="Set the direction start for linear gradient, or center for radial gradients. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getA"
				min_features="20"
				name="GetA"
				num_parameters="0"
				property="get"
				property_name2="a"
				property_name="a">
				<comments desc="Get the direction start for linear gradient, or center for radial gradients. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setB"
				min_features="20"
				name="SetB"
				num_parameters="1"
				property="set"
				property_name2="b"
				property_name="b">
				<comments desc="Set the direction end for linear gradient, or focal for radial gradients. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getB"
				min_features="20"
				name="GetB"
				num_parameters="0"
				property="get"
				property_name2="b"
				property_name="b">
				<comments desc="Get the direction end for linear gradient, or focal for radial gradients. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setR"
				min_features="20"
				name="SetR"
				num_parameters="1"
				property="set"
				property_name2="r"
				property_name="r">
				<comments desc="Set the distance scale for linear gradient, or radius for radial gradients. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afV"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getR"
				min_features="20"
				name="GetR"
				num_parameters="0"
				property="get"
				property_name2="r"
				property_name="r">
				<comments desc="Get the distance scale for linear gradient, or radius for radial gradients. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setUnits"
				min_features="20"
				name="SetUnits"
				num_parameters="1"
				property="set"
				property_name2="units"
				property_name="units">
				<comments desc="Set the paint units. ">
					<remark text="User side parameter, the user should setup the fill/stroke paint transform according to this parameter before rendering. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aUnits"
					type="eVGPaintUnits"
					typec="eVGPaintUnits"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getUnits"
				min_features="20"
				name="GetUnits"
				num_parameters="0"
				property="get"
				property_name2="units"
				property_name="units">
				<comments desc="Get the paint units. "/>
				<return type="eVGPaintUnits" typec="eVGPaintUnits" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getGradientTable"
				min_features="20"
				name="GetGradientTable"
				num_parameters="0"
				property="get"
				property_name2="gradientTable"
				property_name="gradient_table">
				<comments desc="Get the gradient table. "/>
				<return type="iVGGradientTable *" typec="iVGGradientTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGPath.h.idl.xml">
		<enum min_features="20" name="eVGPathCommand">
			<comments desc="VGPath commands. "/>
			<value min_features="20" name="eVGPathCommand_Stop" value="0 ">
				<comments desc="Stop command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_MoveTo" value="1 ">
				<comments desc="MoveTo command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_LineTo" value="2 ">
				<comments desc="LineTo command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_Curve3" value="3 ">
				<comments desc="Quadric curve command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_Curve4" value="4 ">
				<comments desc="Cubic curve command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_CurveN" value="5 ">
				<comments desc="N curve command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_Catrom" value="6 ">
				<comments desc="Catrom command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_UBSpline" value="7 ">
				<comments desc="UBSpline command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_EndPoly" value="0x0F ">
				<comments desc="End poly command. "/>
			</value>
			<value min_features="20" name="eVGPathCommand_Mask" value="0x0F ">
				<comments desc="Command mask. "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			min_features="20"
			name="iVGPathTesselatedRenderer"
			uuid1="4629B016-9A7A-44BB-8F6C-24F5886DE462"
			uuid2="0x4629b016,0x9a7a,0x44bb,0x8f,0x6c,0x24,0xf5,0x88,0x6d,0xe4,0x62">
			<comments desc="VGPathTesselatedRenderer interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="beginAddPath"
				min_features="20"
				name="BeginAddPath"
				num_parameters="2">
				<comments desc="Called when begining to render a path. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abStroke"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="endAddPath"
				min_features="20"
				name="EndAddPath"
				num_parameters="2">
				<comments desc="Called when end adding a path. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abStroke"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPathApproximationScale"
				min_features="20"
				name="GetPathApproximationScale"
				num_parameters="1">
				<comments desc="Called to request the approximation scale. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="addPathPolygons"
				min_features="20"
				name="AddPathPolygons"
				num_parameters="3">
				<comments desc="Called to add the path&apos;s polygons. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apTess"
					type="iVGPolygonTesselator *"
					typec="iVGPolygonTesselator*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abStroke"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iVGPath"
			uuid1="01302541-1712-47B1-80A9-E2B161539F96"
			uuid2="0x01302541,0x1712,0x47b1,0x80,0xa9,0xe2,0xb1,0x61,0x53,0x9f,0x96">
			<comments desc="VGPath interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="copy"
				min_features="20"
				name="Copy"
				num_parameters="1">
				<comments desc="Copy the specified path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPath"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				min_features="20"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this path. "/>
				<return type="iVGPath *" typec="iVGPath*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="clear"
				min_features="20"
				name="Clear"
				num_parameters="0">
				<comments desc="Clear the path. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="addVertex"
				min_features="20"
				name="AddVertex"
				num_parameters="2">
				<comments desc="Add a vertex to the path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avVertex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aCommand"
					type="eVGPathCommand"
					typec="eVGPathCommand"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="addPath"
				min_features="20"
				name="AddPath"
				num_parameters="1">
				<comments desc="Add another path to the end of this path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPath"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumVertices"
				min_features="20"
				name="GetNumVertices"
				num_parameters="0"
				property="get"
				property_name2="numVertices"
				property_name="num_vertices">
				<comments desc="Get the number of vertices in the path. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				java_name="setVertex"
				min_features="20"
				name="SetVertex"
				num_parameters="2"
				property="set"
				property_name2="vertex"
				property_name="vertex">
				<comments desc="Set the vertex at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avVertex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVertex"
				min_features="20"
				name="GetVertex"
				num_parameters="1"
				property="get"
				property_name2="vertex"
				property_name="vertex">
				<comments desc="Get the vertex at the specified index. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setCommand"
				min_features="20"
				name="SetCommand"
				num_parameters="2"
				property="set"
				property_name2="command"
				property_name="command">
				<comments desc="Set the command at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aCmd"
					type="eVGPathCommand"
					typec="eVGPathCommand"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCommand"
				min_features="20"
				name="GetCommand"
				num_parameters="1"
				property="get"
				property_name2="command"
				property_name="command">
				<comments desc="Get the command at the specified index. "/>
				<return type="eVGPathCommand" typec="eVGPathCommand" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="resetIterator"
				min_features="20"
				name="ResetIterator"
				num_parameters="0">
				<comments desc="Reset the iterator. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNextIterator"
				min_features="20"
				name="GetNextIterator"
				num_parameters="0"
				property="get"
				property_name2="nextIterator"
				property_name="next_iterator">
				<comments desc="Get the next vertex of the iterator. "/>
				<return type="eVGPathCommand" typec="eVGPathCommand" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getVertexIterator"
				min_features="20"
				name="GetVertexIterator"
				num_parameters="0"
				property="get"
				property_name2="vertexIterator"
				property_name="vertex_iterator">
				<comments desc="Get the current vertex of the iterator. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="flipX"
				min_features="20"
				name="FlipX"
				num_parameters="2">
				<comments desc="Flip the path along the X-axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="flipY"
				min_features="20"
				name="FlipY"
				num_parameters="2">
				<comments desc="Flip the path along the Y-axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="moveTo"
				min_features="20"
				name="MoveTo"
				num_parameters="2">
				<comments desc="Move to the specified position. ">
					<remark text="Maps to the &apos;M&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="moveToRel"
				min_features="20"
				name="MoveToRel"
				num_parameters="2">
				<comments desc="Move to the specified position, relativly to the previous vertex. ">
					<remark text="Maps to the &apos;m&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="lineTo"
				min_features="20"
				name="LineTo"
				num_parameters="2">
				<comments desc="Add a line to the specified position. ">
					<remark text="Maps to the &apos;L&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="lineToRel"
				min_features="20"
				name="LineToRel"
				num_parameters="2">
				<comments desc="">
					<remark text="Maps to the &apos;l&apos; path command, relativly to the previous vertex. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="hlineTo"
				min_features="20"
				name="HLineTo"
				num_parameters="1">
				<comments desc="Add an horizontal line to the specified column. ">
					<remark text="Maps to the &apos;H&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="hlineToRel"
				min_features="20"
				name="HLineToRel"
				num_parameters="1">
				<comments desc="">
					<remark text="Maps to the &apos;h&apos; path command, relativly to the previous vertex. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="vlineTo"
				min_features="20"
				name="VLineTo"
				num_parameters="1">
				<comments desc="Add a vertical line to the specified line. ">
					<remark text="Maps to the &apos;V&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="vlineToRel"
				min_features="20"
				name="VLineToRel"
				num_parameters="1">
				<comments desc="Add a vertical line to the specified line, relativly to the previous vertex. ">
					<remark text="Maps to the &apos;v&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve3"
				min_features="20"
				name="Curve3"
				num_parameters="4">
				<comments desc="Quadratic Bezier curveto. ">
					<remark text="Maps to the &apos;Q&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve3Rel"
				min_features="20"
				name="Curve3Rel"
				num_parameters="4">
				<comments desc="Quadratic Bezier curveto. ">
					<remark text="Maps to the &apos;q&apos; path command, relativly to the previous vertex. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve3Prev"
				min_features="20"
				name="Curve3Prev"
				num_parameters="2">
				<comments desc="Shorthand/smooth quadratic Bezier curveto. ">
					<remark text="Maps to the &apos;T&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve3PrevRel"
				min_features="20"
				name="Curve3PrevRel"
				num_parameters="2">
				<comments desc="Shorthand/smooth quadratic Bezier curveto, relativly to the previous vertex. ">
					<remark text="Maps to the &apos;t&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4"
				min_features="20"
				name="Curve4"
				num_parameters="6">
				<comments desc="Cubic Bezier curveto. ">
					<remark text="Maps to the &apos;C&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4Rel"
				min_features="20"
				name="Curve4Rel"
				num_parameters="6">
				<comments desc="Cubic Bezier curveto, relativly to the previous vertex. ">
					<remark text="Maps to the &apos;c&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4Prev"
				min_features="20"
				name="Curve4Prev"
				num_parameters="4">
				<comments desc="Shorthand/smooth cubic Bezier curveto. ">
					<remark text="Maps to the &apos;S&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4PrevRel"
				min_features="20"
				name="Curve4PrevRel"
				num_parameters="4">
				<comments desc="Shorthand/smooth cubic Bezier curveto, relativly to the previous vertex. ">
					<remark text="Maps to the &apos;s&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4K"
				min_features="20"
				name="Curve4K"
				num_parameters="3">
				<comments desc="Cubic curve with auto control point computation, relativly to the previous vertex. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="k"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="curve4KRel"
				min_features="20"
				name="Curve4KRel"
				num_parameters="3">
				<comments desc="Cubic curve with auto control point computation. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="k"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="hermite"
				min_features="20"
				name="Hermite"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="hermiteRel"
				min_features="20"
				name="HermiteRel"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="ubspline"
				min_features="20"
				name="UBSpline"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="ubsplineRel"
				min_features="20"
				name="UBSplineRel"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="catrom"
				min_features="20"
				name="Catrom"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="catromRel"
				min_features="20"
				name="CatromRel"
				num_parameters="6">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="arcTo"
				min_features="20"
				name="ArcTo"
				num_parameters="7">
				<comments desc="Elliptical arc. ">
					<remark text="Maps to the SVG &apos;A&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="rx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="ry"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="large_arc_flag"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="sweep_flag"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="arcToRel"
				min_features="20"
				name="ArcToRel"
				num_parameters="7">
				<comments desc="Elliptical arc, relativly to the previous vertex. ">
					<remark text="Maps to the SVG &apos;a&apos; path command. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="rx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="ry"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="large_arc_flag"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="sweep_flag"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="closePolygon"
				min_features="20"
				name="ClosePolygon"
				num_parameters="0">
				<comments desc="Close the current path&apos;s polygon. ">
					<remark text="Maps to the SVG &apos;Z&apos; and &apos;z&apos; path commands. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="rect"
				min_features="20"
				name="Rect"
				num_parameters="4">
				<comments desc="Add a rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="width"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="roundedRect"
				min_features="20"
				name="RoundedRect"
				num_parameters="6">
				<comments desc="Add a rounded rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="width"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="rx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="ry"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="rectCentered"
				min_features="20"
				name="RectCentered"
				num_parameters="4">
				<comments desc="Add a centered rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="cx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="cy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="width"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="roundedRectCentered"
				min_features="20"
				name="RoundedRectCentered"
				num_parameters="6">
				<comments desc="Add a rounded centered rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="cx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="cy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="width"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="rx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="ry"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="speechBubbleRect"
				min_features="20"
				name="SpeechBubbleRect"
				num_parameters="10">
				<comments desc="Add a speech bubble rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="y"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="w"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="h"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="rx"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="ry"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="tx"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="ty"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="arrowGap"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="arrowLen"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				java_name="circle"
				min_features="20"
				name="Circle"
				num_parameters="3">
				<comments desc="Add a circle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="cx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="cy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="radius"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="ellipse"
				min_features="20"
				name="Ellipse"
				num_parameters="4">
				<comments desc="Add an ellipse. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="cx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="cy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="rx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="ry"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="line"
				min_features="20"
				name="Line"
				num_parameters="4">
				<comments desc="Add a line. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="polyline"
				min_features="20"
				name="Polyline"
				num_parameters="1">
				<comments desc="Add a polyline. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apVerts"
					type="const tVec2fCVec *"
					typec="const tVec2fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="polygon"
				min_features="20"
				name="Polygon"
				num_parameters="1">
				<comments desc="Add a polygon. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apVerts"
					type="const tVec2fCVec *"
					typec="const tVec2fCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="star"
				min_features="20"
				name="Star"
				num_parameters="6">
				<comments desc="Add a star shape. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="xc"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="yc"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="n"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="0.0 "
					last="1"
					name="start_angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="text"
				min_features="20"
				name="Text"
				num_parameters="3">
				<comments desc="Add a text. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="textAlongOnePath"
				min_features="20"
				name="TextAlongOnePath"
				num_parameters="7">
				<comments desc="Add a text along a path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apPath"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="abPreserveXScale"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="afBaseLength"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afSegmentApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afCurvesApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="textAlongTwoPaths"
				min_features="20"
				name="TextAlongTwoPaths"
				num_parameters="9">
				<comments desc="Add a text between two paths. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apPath1"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apPath2"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="abPreserveXScale"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="afBaseHeight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afBaseLength"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afSegmentApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afCurvesApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="toBSpline"
				min_features="20"
				name="ToBSpline"
				num_parameters="1">
				<comments desc="Transform the path to a bspline "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afInterpolationStep"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="translate"
				min_features="20"
				name="Translate"
				num_parameters="1">
				<comments desc="Translate the path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avTranslate"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="rotate"
				min_features="20"
				name="Rotate"
				num_parameters="1">
				<comments desc="Rotate the path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afRadians"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="scale"
				min_features="20"
				name="Scale"
				num_parameters="1">
				<comments desc="Scale the path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="avScale"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="transform"
				min_features="20"
				name="Transform"
				num_parameters="1">
				<comments desc="Transform the path with the specified transform. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="transformAlongOnePath"
				min_features="20"
				name="TransformAlongOnePath"
				num_parameters="5">
				<comments desc="Transform the path along another path "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPath"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="abPreserveXScale"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="afBaseLength"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afSegmentApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afCurvesApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="transformAlongTwoPaths"
				min_features="20"
				name="TransformAlongTwoPaths"
				num_parameters="7">
				<comments desc="Transform the path against two other paths "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPath1"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apPath2"
					type="const iVGPath *"
					typec="const iVGPath*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="abPreserveXScale"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="afBaseHeight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afBaseLength"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="afSegmentApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afCurvesApproxScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="arrangeOrientations"
				min_features="20"
				name="ArrangeOrientations"
				num_parameters="1">
				<comments desc="Make all polygons follow the same orientation. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abCW"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getBoundingRect"
				min_features="20"
				name="GetBoundingRect"
				num_parameters="1">
				<comments desc="Get the path&apos;s bounding box. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="renderTesselated"
				min_features="20"
				name="RenderTesselated"
				num_parameters="3">
				<comments desc="Render the tesselated path. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPath"
					type="iVGPathTesselatedRenderer *"
					typec="iVGPathTesselatedRenderer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="addSVGPath"
				min_features="20"
				name="AddSVGPath"
				num_parameters="1">
				<comments desc="Add a SVG path. ">
					<remark text="The syntax of the path is the same as SVG paths. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="addPolylinePath"
				min_features="20"
				name="AddPolylinePath"
				num_parameters="1">
				<comments desc="Add a polyline path. ">
					<remark text="The syntax of the path is the same as SVG polyline element. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="addPolygonPath"
				min_features="20"
				name="AddPolygonPath"
				num_parameters="1">
				<comments desc="Add a polygon path. ">
					<remark text="The syntax of the path is the same as SVG polygon element. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSVGPath"
				min_features="20"
				name="GetSVGPath"
				num_parameters="0"
				property="get"
				property_name2="svgpath"
				property_name="svgpath">
				<comments desc="Get the path in a SVG string form. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGPolygonTesselator.h.idl.xml">
		<interface
			min_features="20"
			name="iVGPolygonTesselator"
			uuid1="BB3A2EC0-8F76-4888-8F1E-4A4ED0E800EE"
			uuid2="0xbb3a2ec0,0x8f76,0x4888,0x8f,0x1e,0x4a,0x4e,0xd0,0xe8,0x00,0xee">
			<comments desc="Polygon tessellator interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="addVertexF32"
				min_features="20"
				name="AddVertexF32"
				num_parameters="2">
				<comments desc="Add a F32 vertex to the current polygon contour. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="addVertexF64"
				min_features="20"
				name="AddVertexF64"
				num_parameters="2">
				<comments desc="Add a F64 vertex to the current polygon contour. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="x"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="y"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				java_name="addVertex"
				min_features="20"
				name="AddVertex"
				num_parameters="1">
				<comments desc="Add a Vec2f vertex to the current polygon contour. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="vertex"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumVertices"
				min_features="20"
				name="GetNumVertices"
				num_parameters="0">
				<comments desc="Get the number of vertices in the current contour. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				java_name="submitContour"
				min_features="20"
				name="SubmitContour"
				num_parameters="0">
				<comments desc="Submit the current contour. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="beginPolygon"
				min_features="20"
				name="BeginPolygon"
				num_parameters="1">
				<comments desc="Begin tesselating a polygon. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abEvenOdd"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="endPolygon"
				min_features="20"
				name="EndPolygon"
				num_parameters="0">
				<comments desc="Finish tesselating a polygon. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTesselatedVertices"
				min_features="20"
				name="GetTesselatedVertices"
				num_parameters="0">
				<comments desc="Get the tesselated polygon&apos;s triangles vertices. "/>
				<return type="const tVec2fCVec *" typec="const tVec2fCVec*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGStyle.h.idl.xml">
		<enum min_features="20" name="eVGLineCap">
			<comments desc="VG Line Cap type. "/>
			<value min_features="20" name="eVGLineCap_Butt" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineCap_Square" value="1 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineCap_Round" value="2 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum min_features="20" name="eVGLineJoin">
			<comments desc="VG Line join. "/>
			<value min_features="20" name="eVGLineJoin_Miter" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineJoin_MiterRevert" value="1 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineJoin_MiterRound" value="2 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineJoin_Round" value="3 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGLineJoin_Bevel" value="4 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum min_features="20" name="eVGInnerJoin">
			<comments desc="VG Inner join. "/>
			<value min_features="20" name="eVGInnerJoin_Bevel" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGInnerJoin_Miter" value="1 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGInnerJoin_Jag" value="2 ">
				<comments desc=""/>
			</value>
			<value min_features="20" name="eVGInnerJoin_Round" value="3 ">
				<comments desc=""/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iVGStyle"
			uuid1="ECC6259B-41CC-4D37-B1FC-55F6485D9573"
			uuid2="0xecc6259b,0x41cc,0x4d37,0xb1,0xfc,0x55,0xf6,0x48,0x5d,0x95,0x73">
			<comments desc="VGStyle inteface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="copy"
				min_features="20"
				name="Copy"
				num_parameters="1">
				<comments desc="Create a copy of the style. ">
					<remark text="Only the top style will be copied, not the style&apos;s stack. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStyle"
					type="const iVGStyle *"
					typec="const iVGStyle*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				min_features="20"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the style. "/>
				<return type="iVGStyle *" typec="iVGStyle*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="push"
				min_features="20"
				name="Push"
				num_parameters="0">
				<comments desc="Push the style states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="pop"
				min_features="20"
				name="Pop"
				num_parameters="0">
				<comments desc="Pop the style states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setDefault"
				min_features="20"
				name="SetDefault"
				num_parameters="0">
				<comments desc="Set the default states. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setOpacity"
				min_features="20"
				name="SetOpacity"
				num_parameters="1"
				property="set"
				property_name2="opacity"
				property_name="opacity">
				<comments desc="Set the global opacity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afOpacity"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getOpacity"
				min_features="20"
				name="GetOpacity"
				num_parameters="0"
				property="get"
				property_name2="opacity"
				property_name="opacity">
				<comments desc="Get the global opacity. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setLineCap"
				min_features="20"
				name="SetLineCap"
				num_parameters="1"
				property="set"
				property_name2="lineCap"
				property_name="line_cap">
				<comments desc="Set the line&apos;s cap. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aCap"
					type="eVGLineCap"
					typec="eVGLineCap"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getLineCap"
				min_features="20"
				name="GetLineCap"
				num_parameters="0"
				property="get"
				property_name2="lineCap"
				property_name="line_cap">
				<comments desc="Get the line&apos;s cap "/>
				<return type="eVGLineCap" typec="eVGLineCap" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setLineJoin"
				min_features="20"
				name="SetLineJoin"
				num_parameters="1"
				property="set"
				property_name2="lineJoin"
				property_name="line_join">
				<comments desc="Set the line&apos;s join. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aJoin"
					type="eVGLineJoin"
					typec="eVGLineJoin"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getLineJoin"
				min_features="20"
				name="GetLineJoin"
				num_parameters="0"
				property="get"
				property_name2="lineJoin"
				property_name="line_join">
				<comments desc="Get the line&apos;s join. "/>
				<return type="eVGLineJoin" typec="eVGLineJoin" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setInnerJoin"
				min_features="20"
				name="SetInnerJoin"
				num_parameters="1"
				property="set"
				property_name2="innerJoin"
				property_name="inner_join">
				<comments desc="Set the inner join type. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aInnerJoin"
					type="eVGInnerJoin"
					typec="eVGInnerJoin"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getInnerJoin"
				min_features="20"
				name="GetInnerJoin"
				num_parameters="0"
				property="get"
				property_name2="innerJoin"
				property_name="inner_join">
				<comments desc="Get the inner join type. "/>
				<return type="eVGInnerJoin" typec="eVGInnerJoin" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setMiterLimit"
				min_features="20"
				name="SetMiterLimit"
				num_parameters="1"
				property="set"
				property_name2="miterLimit"
				property_name="miter_limit">
				<comments desc="Set the miter limit. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afMiterLimit"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getMiterLimit"
				min_features="20"
				name="GetMiterLimit"
				num_parameters="0"
				property="get"
				property_name2="miterLimit"
				property_name="miter_limit">
				<comments desc="Get the miter limit. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSmooth"
				min_features="20"
				name="SetSmooth"
				num_parameters="1"
				property="set"
				property_name2="smooth"
				property_name="smooth">
				<comments desc="Set the smoothing. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSmooth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSmooth"
				min_features="20"
				name="GetSmooth"
				num_parameters="0"
				property="get"
				property_name2="smooth"
				property_name="smooth">
				<comments desc="Get the smoothing. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setCurrentColor"
				min_features="20"
				name="SetCurrentColor"
				num_parameters="1"
				property="set"
				property_name2="currentColor"
				property_name="current_color">
				<comments desc="Set the current style color. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentColor"
				min_features="20"
				name="GetCurrentColor"
				num_parameters="0"
				property="get"
				property_name2="currentColor"
				property_name="current_color">
				<comments desc="Get the current style color. "/>
				<return type="const sColor4f &amp;" typec="const sColor4f&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setAntiAliasing"
				min_features="20"
				name="SetAntiAliasing"
				num_parameters="1"
				property="set"
				property_name2="antiAliasing"
				property_name="anti_aliasing">
				<comments desc="Set the antialiasing. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abAntiAliasing"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getAntiAliasing"
				min_features="20"
				name="GetAntiAliasing"
				num_parameters="0"
				property="get"
				property_name2="antiAliasing"
				property_name="anti_aliasing">
				<comments desc="Get whether antialiasing is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setRasterizerApproximationScale"
				min_features="20"
				name="SetRasterizerApproximationScale"
				num_parameters="1"
				property="set"
				property_name2="rasterizerApproximationScale"
				property_name="rasterizer_approximation_scale">
				<comments desc="Set the rasterizer&apos;s approximation scale. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afRasterizerApproximationScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getRasterizerApproximationScale"
				min_features="20"
				name="GetRasterizerApproximationScale"
				num_parameters="0"
				property="get"
				property_name2="rasterizerApproximationScale"
				property_name="rasterizer_approximation_scale">
				<comments desc="Get the rasterizer&apos;s approximation scale. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setTesselatorApproximationScale"
				min_features="20"
				name="SetTesselatorApproximationScale"
				num_parameters="1"
				property="set"
				property_name2="tesselatorApproximationScale"
				property_name="tesselator_approximation_scale">
				<comments desc="Set the tesselator&apos;s approximation scale. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afTesselatorApproximationScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getTesselatorApproximationScale"
				min_features="20"
				name="GetTesselatorApproximationScale"
				num_parameters="0"
				property="get"
				property_name2="tesselatorApproximationScale"
				property_name="tesselator_approximation_scale">
				<comments desc="Get the tesselator&apos;s approximation scale. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStroke"
				min_features="20"
				name="SetStroke"
				num_parameters="1"
				property="set"
				property_name2="stroke"
				property_name="stroke">
				<comments desc="Set stroke drawing. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abStroke"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getStroke"
				min_features="20"
				name="GetStroke"
				num_parameters="0"
				property="get"
				property_name2="stroke"
				property_name="stroke">
				<comments desc="Get whether stroke drawing is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setStrokeWidth"
				min_features="20"
				name="SetStrokeWidth"
				num_parameters="1"
				property="set"
				property_name2="strokeWidth"
				property_name="stroke_width">
				<comments desc="Set the stroke&apos;s width. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afWidth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStrokeWidth"
				min_features="20"
				name="GetStrokeWidth"
				num_parameters="0"
				property="get"
				property_name2="strokeWidth"
				property_name="stroke_width">
				<comments desc="Get the stroke&apos;s width. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setStrokeTransformed"
				min_features="20"
				name="SetStrokeTransformed"
				num_parameters="1"
				property="set"
				property_name2="strokeTransformed"
				property_name="stroke_transformed">
				<comments desc="Set whether the transformed path should be stroked. ">
					<remark text="If true, the path will be first transformed, and that new transformed path will be stroked. So the size of the stroke (line) will be the same no matter what is the scaling factor of the transform. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abStrokeTransformed"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getStrokeTransformed"
				min_features="20"
				name="GetStrokeTransformed"
				num_parameters="0"
				property="get"
				property_name2="strokeTransformed"
				property_name="stroke_transformed">
				<comments desc="Get whether the transformed path should be stroked. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setStrokePaint"
				min_features="20"
				name="SetStrokePaint"
				num_parameters="1"
				property="set"
				property_name2="strokePaint"
				property_name="stroke_paint">
				<comments desc="Set the stroke&apos;s paint. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPaint"
					type="iVGPaint *"
					typec="iVGPaint*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStrokePaint"
				min_features="20"
				name="GetStrokePaint"
				num_parameters="0"
				property="get"
				property_name2="strokePaint"
				property_name="stroke_paint">
				<comments desc="Get the stroke&apos;s paint. "/>
				<return type="iVGPaint *" typec="iVGPaint*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setStrokeColor"
				min_features="20"
				name="SetStrokeColor"
				num_parameters="1"
				property="set"
				property_name2="strokeColor"
				property_name="stroke_color">
				<comments desc="Set the stroke&apos;s paint color. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor3f &amp;"
					typec="const sColor3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStrokeColor"
				min_features="20"
				name="GetStrokeColor"
				num_parameters="0"
				property="get"
				property_name2="strokeColor"
				property_name="stroke_color">
				<comments desc="Get the stroke&apos;s paint color. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;GetColor() "/>
				</comments>
				<return type="sColor3f" typec="sColor3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setStrokeColor4"
				min_features="20"
				name="SetStrokeColor4"
				num_parameters="1"
				property="set"
				property_name2="strokeColor4"
				property_name="stroke_color4">
				<comments desc="Set the stroke&apos;s paint color. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStrokeColor4"
				min_features="20"
				name="GetStrokeColor4"
				num_parameters="0"
				property="get"
				property_name2="strokeColor4"
				property_name="stroke_color4">
				<comments desc="Get the stroke&apos;s paint color. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;GetColor() "/>
				</comments>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setStrokeOpacity"
				min_features="20"
				name="SetStrokeOpacity"
				num_parameters="1"
				property="set"
				property_name2="strokeOpacity"
				property_name="stroke_opacity">
				<comments desc="Set the stroke opacity. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afOpacity"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getStrokeOpacity"
				min_features="20"
				name="GetStrokeOpacity"
				num_parameters="0"
				property="get"
				property_name2="strokeOpacity"
				property_name="stroke_opacity">
				<comments desc="Get the stroke opacity. ">
					<remark text="Conveniance for GetStrokePaint()-&gt;GetColor() "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getNumDashes"
				min_features="20"
				name="GetNumDashes"
				num_parameters="0"
				property="get"
				property_name2="numDashes"
				property_name="num_dashes">
				<comments desc="Get the number of dashes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="clearDashes"
				min_features="20"
				name="ClearDashes"
				num_parameters="0">
				<comments desc="Remove all dashes. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="addDash"
				min_features="20"
				name="AddDash"
				num_parameters="1">
				<comments desc="Add a dash. ">
					<remark text="Vector2f(Position,Length) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="removeDash"
				min_features="20"
				name="RemoveDash"
				num_parameters="1">
				<comments desc="Remove a dash. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDash"
				min_features="20"
				name="GetDash"
				num_parameters="1"
				property="get"
				property_name2="dash"
				property_name="dash">
				<comments desc="Get the dash at the specified index. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDashStart"
				min_features="20"
				name="SetDashStart"
				num_parameters="1"
				property="set"
				property_name2="dashStart"
				property_name="dash_start">
				<comments desc="Set the dash start. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afDashStart"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getDashStart"
				min_features="20"
				name="GetDashStart"
				num_parameters="0"
				property="get"
				property_name2="dashStart"
				property_name="dash_start">
				<comments desc="Get the dash start. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setFill"
				min_features="20"
				name="SetFill"
				num_parameters="1"
				property="set"
				property_name2="fill"
				property_name="fill">
				<comments desc="Set fill drawing. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abFill"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFill"
				min_features="20"
				name="GetFill"
				num_parameters="0"
				property="get"
				property_name2="fill"
				property_name="fill">
				<comments desc="Get whether fill drawing is enabled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFillEvenOdd"
				min_features="20"
				name="SetFillEvenOdd"
				num_parameters="1"
				property="set"
				property_name2="fillEvenOdd"
				property_name="fill_even_odd">
				<comments desc="Set fill odd even. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abFillEvenOdd"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFillEvenOdd"
				min_features="20"
				name="GetFillEvenOdd"
				num_parameters="0"
				property="get"
				property_name2="fillEvenOdd"
				property_name="fill_even_odd">
				<comments desc="Get whether the fill uses the odd even or non zero rules to fill polygons. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFillExpand"
				min_features="20"
				name="SetFillExpand"
				num_parameters="1"
				property="set"
				property_name2="fillExpand"
				property_name="fill_expand">
				<comments desc="Set the filling expand. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afExpand"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFillExpand"
				min_features="20"
				name="GetFillExpand"
				num_parameters="0"
				property="get"
				property_name2="fillExpand"
				property_name="fill_expand">
				<comments desc="Get the filling expand. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setFillPaint"
				min_features="20"
				name="SetFillPaint"
				num_parameters="1"
				property="set"
				property_name2="fillPaint"
				property_name="fill_paint">
				<comments desc="Set the fill paint. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPaint"
					type="iVGPaint *"
					typec="iVGPaint*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFillPaint"
				min_features="20"
				name="GetFillPaint"
				num_parameters="0"
				property="get"
				property_name2="fillPaint"
				property_name="fill_paint">
				<comments desc="Get the fill paint. "/>
				<return type="iVGPaint *" typec="iVGPaint*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFillColor"
				min_features="20"
				name="SetFillColor"
				num_parameters="1"
				property="set"
				property_name2="fillColor"
				property_name="fill_color">
				<comments desc="Set the fill color. ">
					<remark text="Conveniance for GetFillPaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor3f &amp;"
					typec="const sColor3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFillColor"
				min_features="20"
				name="GetFillColor"
				num_parameters="0"
				property="get"
				property_name2="fillColor"
				property_name="fill_color">
				<comments desc="Get the fill color. ">
					<remark text="Conveniance for GetFillPaint()-&gt;GetColor() "/>
				</comments>
				<return type="sColor3f" typec="sColor3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setFillColor4"
				min_features="20"
				name="SetFillColor4"
				num_parameters="1"
				property="set"
				property_name2="fillColor4"
				property_name="fill_color4">
				<comments desc="Set the fill color. ">
					<remark text="Conveniance for GetFillPaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avColor"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFillColor4"
				min_features="20"
				name="GetFillColor4"
				num_parameters="0"
				property="get"
				property_name2="fillColor4"
				property_name="fill_color4">
				<comments desc="Get the fill color. ">
					<remark text="Conveniance for GetFillPaint()-&gt;GetColor() "/>
				</comments>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setFillOpacity"
				min_features="20"
				name="SetFillOpacity"
				num_parameters="1"
				property="set"
				property_name2="fillOpacity"
				property_name="fill_opacity">
				<comments desc="Set the fill opacity. ">
					<remark text="Conveniance for GetFillPaint()-&gt;SetColor() "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afOpacity"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getFillOpacity"
				min_features="20"
				name="GetFillOpacity"
				num_parameters="0"
				property="get"
				property_name2="fillOpacity"
				property_name="fill_opacity">
				<comments desc="Get the fill opacity. ">
					<remark text="Conveniance for GetFillPaint()-&gt;GetColor() "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVGTransform.h.idl.xml">
		<enum min_features="20" name="eVGTransform">
			<comments desc="VG transform type. "/>
			<value min_features="20" name="eVGTransform_Path" value="0 ">
				<comments desc="Path to surface transform. "/>
			</value>
			<value min_features="20" name="eVGTransform_Image" value="1 ">
				<comments desc="Image to surface transform. "/>
			</value>
			<value min_features="20" name="eVGTransform_FillPaint" value="2 ">
				<comments desc="Fill paint to user transform. "/>
			</value>
			<value min_features="20" name="eVGTransform_StrokePaint" value="3 ">
				<comments desc="Stroke paint to user transform. "/>
			</value>
			<value min_features="20" name="eVGTransform_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum min_features="20" name="eVGTransformValue">
			<comments desc="VG transform value. "/>
			<value min_features="20" name="eVGTransformValue_ScaleX" value="0 ">
				<comments desc="ScaleX (m0) component. "/>
			</value>
			<value min_features="20" name="eVGTransformValue_RotationSkew0" value="1 ">
				<comments desc="RotationSkew0 (m1) component. "/>
			</value>
			<value min_features="20" name="eVGTransformValue_RotationSkew1" value="2 ">
				<comments desc="RotationSkew1 (m2) component. "/>
			</value>
			<value min_features="20" name="eVGTransformValue_ScaleY" value="3 ">
				<comments desc="RotationSkew1 (m3) component. "/>
			</value>
			<value min_features="20" name="eVGTransformValue_TranslateX" value="4 ">
				<comments desc="RotationSkew1 (m4) component. "/>
			</value>
			<value min_features="20" name="eVGTransformValue_TranslateY" value="5 ">
				<comments desc="RotationSkew1 (m5) component. "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iVGTransform"
			uuid1="399C48D6-E2CA-4560-8266-C482484EBD5D"
			uuid2="0x399c48d6,0xe2ca,0x4560,0x82,0x66,0xc4,0x82,0x48,0x4e,0xbd,0x5d">
			<comments desc="VG transform interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="copy"
				min_features="20"
				name="Copy"
				num_parameters="1">
				<comments desc="Copy another transform. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				min_features="20"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this transform. "/>
				<return type="iVGTransform *" typec="iVGTransform*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="push"
				min_features="20"
				name="Push"
				num_parameters="0">
				<comments desc="Push the transform states on the stack. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="pop"
				min_features="20"
				name="Pop"
				num_parameters="0">
				<comments desc="Pop the transfrom states from the stack. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setMatrix"
				min_features="20"
				name="SetMatrix"
				num_parameters="1"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set the 3x2 transform matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				min_features="20"
				name="GetMatrix"
				num_parameters="0"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get the 3x2 transform matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setValue"
				min_features="20"
				name="SetValue"
				num_parameters="2"
				property="set"
				property_name2="value"
				property_name="value">
				<comments desc="Set a value of the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aType"
					type="eVGTransformValue"
					typec="eVGTransformValue"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="afValue"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getValue"
				min_features="20"
				name="GetValue"
				num_parameters="1"
				property="get"
				property_name2="value"
				property_name="value">
				<comments desc="Get a value of the transform. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aType"
					type="eVGTransformValue"
					typec="eVGTransformValue"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setValues"
				min_features="20"
				name="SetValues"
				num_parameters="6">
				<comments desc="Set all values. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="m0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="m5"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="identity"
				min_features="20"
				name="Identity"
				num_parameters="0">
				<comments desc="Set the transform to identity. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="invert"
				min_features="20"
				name="Invert"
				num_parameters="0">
				<comments desc="Invert the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getIsIdentity"
				min_features="20"
				name="GetIsIdentity"
				num_parameters="0"
				property="get"
				property_name2="isIdentity"
				property_name="is_identity">
				<comments desc="Check whether the transform is identity. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="isEqual"
				min_features="20"
				name="IsEqual"
				num_parameters="1">
				<comments desc="Check whether the transform is equal the passed transform. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDeterminant"
				min_features="20"
				name="GetDeterminant"
				num_parameters="0">
				<comments desc="Get the transform&apos;s determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="flipX"
				min_features="20"
				name="FlipX"
				num_parameters="0">
				<comments desc="Flip the transform&apos;s X-axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="flipY"
				min_features="20"
				name="FlipY"
				num_parameters="0">
				<comments desc="Flip the transform&apos;s Y-axis. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="transform"
				min_features="20"
				name="Transform"
				num_parameters="1">
				<comments desc="Transform a vertex. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="avV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="transformRotate"
				min_features="20"
				name="TransformRotate"
				num_parameters="1">
				<comments desc="Transform a vertex with the rotational part (2x2) of the transform only. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="avV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="multiply"
				min_features="20"
				name="Multiply"
				num_parameters="1">
				<comments desc="Multiply the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="preMultiply"
				min_features="20"
				name="PreMultiply"
				num_parameters="1">
				<comments desc="PreMultiply the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apTransform"
					type="const iVGTransform *"
					typec="const iVGTransform*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="multiplyMatrix"
				min_features="20"
				name="MultiplyMatrix"
				num_parameters="1">
				<comments desc="Multiply the transform by a matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="preMultiplyMatrix"
				min_features="20"
				name="PreMultiplyMatrix"
				num_parameters="1">
				<comments desc="PreMultiply the transform by a matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="multiplyValues"
				min_features="20"
				name="MultiplyValues"
				num_parameters="6">
				<comments desc="Multiply the transform by values. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="m0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="m5"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="preMultiplyValues"
				min_features="20"
				name="PreMultiplyValues"
				num_parameters="6">
				<comments desc="PreMultiply the transform by values. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="m0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m2"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m3"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="m4"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="m5"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="rotate"
				min_features="20"
				name="Rotate"
				num_parameters="1">
				<comments desc="Rotate the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afRadians"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="preRotate"
				min_features="20"
				name="PreRotate"
				num_parameters="1">
				<comments desc="PreRotate the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afRadians"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="rotateAround"
				min_features="20"
				name="RotateAround"
				num_parameters="2">
				<comments desc="Rotate the transform around the specified position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRadians"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="preRotateAround"
				min_features="20"
				name="PreRotateAround"
				num_parameters="2">
				<comments desc="PreRotate the transform around the specified position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRadians"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="translate"
				min_features="20"
				name="Translate"
				num_parameters="1">
				<comments desc="Translate the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="preTranslate"
				min_features="20"
				name="PreTranslate"
				num_parameters="1">
				<comments desc="PreTranslate the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="scaling"
				min_features="20"
				name="Scaling"
				num_parameters="1">
				<comments desc="Scale the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="preScaling"
				min_features="20"
				name="PreScaling"
				num_parameters="1">
				<comments desc="PreScale the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="skew"
				min_features="20"
				name="Skew"
				num_parameters="1">
				<comments desc="Skew the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="preSkew"
				min_features="20"
				name="PreSkew"
				num_parameters="1">
				<comments desc="PreSkew the transform. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="lineSegment"
				min_features="20"
				name="LineSegment"
				num_parameters="3">
				<comments desc="Generates a transform that point in the direction of a line segment. ">
					<remark text="If afDist &gt; 0.0f it will be used to scale in function of the line&apos;s length. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aStart"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aEnd"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afDist"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="preLineSegment"
				min_features="20"
				name="PreLineSegment"
				num_parameters="3">
				<comments desc="Generates a transform that point in the direction of a line segment. \see ni::iVGTransform::LineSegment "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aStart"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aEnd"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afDist"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getRotation"
				min_features="20"
				name="GetRotation"
				num_parameters="0"
				property="get"
				property_name2="rotation"
				property_name="rotation">
				<comments desc="Get the transform&apos;s rotation. ">
					<remark text="Could be inaccurate with degenerate transforms. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScale"
				min_features="20"
				name="GetScale"
				num_parameters="0"
				property="get"
				property_name2="scale"
				property_name="scale">
				<comments desc="Get the transform&apos;s scale. ">
					<remark text="Could be inaccurate with degenerate transforms. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getTranslation"
				min_features="20"
				name="GetTranslation"
				num_parameters="0"
				property="get"
				property_name2="translation"
				property_name="translation">
				<comments desc="Get the transform&apos;s translation. ">
					<remark text="Could be inaccurate with degenerate transforms. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getScaling"
				min_features="20"
				name="GetScaling"
				num_parameters="0"
				property="get"
				property_name2="scaling"
				property_name="scaling">
				<comments desc="Get the transform&apos;s scaling. ">
					<remark text="Could be inaccurate with degenerate transforms. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IVideoDecoder.h.idl.xml">
		<enum name="eVideoDecoderFlags">
			<comments desc="Video decoder flags. "/>
			<value name="eVideoDecoderFlags_TargetBitmap" value="niBit ( 0 ) ">
				<comments desc="Bitmap target. ">
					<remark text="Manual update only. "/>
					<remark text="If no target type is specified no actual decoding will occur. "/>
				</comments>
			</value>
			<value name="eVideoDecoderFlags_TargetTexture" value="niBit ( 1 ) ">
				<comments desc="Texture target. ">
					<remark text="Update the decoder when binded in the renderer. "/>
					<remark text="If no target type is specified no actual decoding will occur. "/>
				</comments>
			</value>
			<value name="eVideoDecoderFlags_Sound" value="niBit ( 2 ) ">
				<comments desc="If available decode and sync sound stream with the video. "/>
			</value>
		</enum>
		<interface name="iVideoDecoder" uuid1="0AEBF271-83DE-40DA-ABC0-4F6A37EED3DB" uuid2="0x0aebf271,0x83de,0x40da,0xab,0xc0,0x4f,0x6a,0x37,0xee,0xd3,0xdb">
			<comments desc="Video decoder interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getVideoDecoderName"
				name="GetVideoDecoderName"
				num_parameters="0"
				property="get"
				property_name2="videoDecoderName"
				property_name="video_decoder_name">
				<comments desc="Get the name of the decoder used. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVideoFps"
				name="GetVideoFps"
				num_parameters="0"
				property="get"
				property_name2="videoFps"
				property_name="video_fps">
				<comments desc="Get the original number of frames per second of the video. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the decoder flags. "/>
				<return type="tVideoDecoderFlags" typec="tVideoDecoderFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getLength"
				name="GetLength"
				num_parameters="0"
				property="get"
				property_name2="length"
				property_name="length">
				<comments desc="Get the video&apos;s length. " return="The length in seconds of the video. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setTime"
				name="SetTime"
				num_parameters="1"
				property="set"
				property_name2="time"
				property_name="time">
				<comments desc="Set the current time. ">
					<params text="afTime is the time to set. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afTime"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getTime"
				name="GetTime"
				num_parameters="0"
				property="get"
				property_name2="time"
				property_name="time">
				<comments desc="Get the current time. " return="The current time. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setPause"
				name="SetPause"
				num_parameters="1"
				property="set"
				property_name2="pause"
				property_name="pause">
				<comments desc="Set pause. ">
					<remark text="This will pause the thread is the decoder is asyncronous. "/>
					<params text="abPause, if eTrue the update and decoding will be paused. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abPause"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPause"
				name="GetPause"
				num_parameters="0"
				property="get"
				property_name2="pause"
				property_name="pause">
				<comments desc="Get the pause status. " return="eTrue if the decoder is in pause mode, else eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setSpeed"
				name="SetSpeed"
				num_parameters="1"
				property="set"
				property_name2="speed"
				property_name="speed">
				<comments desc="Set the time&apos;s speed. ">
					<params text="afSpeed is the speed to set, 1 is the original speed, 2 is twice faster, 0.5 half the original speed and so on. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSpeed"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSpeed"
				name="GetSpeed"
				num_parameters="0"
				property="get"
				property_name2="speed"
				property_name="speed">
				<comments desc="Get the time&apos;s speed. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setNumLoops"
				name="SetNumLoops"
				num_parameters="1"
				property="set"
				property_name2="numLoops"
				property_name="num_loops">
				<comments desc="Set the number of time the time should loop. ">
					<remark text="eInvalidHandle means infinite looping (the default value). "/>
					<remark text="Unless infinite, the number of loops decrease every time the video is looped until it reaches zero and the video stops. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anLoop"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumLoops"
				name="GetNumLoops"
				num_parameters="0"
				property="get"
				property_name2="numLoops"
				property_name="num_loops">
				<comments desc="Get the number of loop. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="update" name="Update" num_parameters="2">
				<comments desc="Update the video. " return="eFalse if the target&apos;s update failed, else eTrue. ">
					<params text="abUpdateTarget, if eTrue will update the target else only the current frame and time will be updated. "/>
					<params text="afFrameTime is the time elapsed since the last frame. If you dont want the method to compute the new frame set it to zero. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="abUpdateTarget"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afFrameTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="getTargetTexture"
				name="GetTargetTexture"
				num_parameters="0"
				property="get"
				property_name2="targetTexture"
				property_name="target_texture">
				<comments desc="Get the target texture. "/>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="getTargetBitmap"
				name="GetTargetBitmap"
				num_parameters="0"
				property="get"
				property_name2="targetBitmap"
				property_name="target_bitmap">
				<comments desc="Get the target bitmap. "/>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumSoundTracks"
				name="GetNumSoundTracks"
				num_parameters="0"
				property="get"
				property_name2="numSoundTracks"
				property_name="num_sound_tracks">
				<comments desc="Get the number of sound tracks attached to the video. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getSoundTrackData"
				name="GetSoundTrackData"
				num_parameters="1"
				property="get"
				property_name2="soundTrackData"
				property_name="sound_track_data">
				<comments desc="Get a sound data of a track associated with the video. ">
					<remark text="Note that sound is always decoded at the original speed its found in the video. The video speed needs to be handled manually, by using iSoundSource::SetSpeed for example, to keep the sound properly in sync with the video. "/>
				</comments>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anNumTrack"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setUpdateOnBind"
				name="SetUpdateOnBind"
				num_parameters="1"
				property="set"
				property_name2="updateOnBind"
				property_name="update_on_bind">
				<comments desc="Set whether the video should automatically be updated when bound for rendering. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abUpdateOnBind"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getUpdateOnBind"
				name="GetUpdateOnBind"
				num_parameters="0"
				property="get"
				property_name2="updateOnBind"
				property_name="update_on_bind">
				<comments desc="Get whether the video should automatically be updated when bound for rendering. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidget.h.idl.xml">
		<enum name="eWidgetStyle">
			<comments desc="Widget style. "/>
			<value name="eWidgetStyle_NCRelative" value="niBit ( 0 ) ">
				<comments desc=""/>
			</value>
			<value name="eWidgetStyle_Free" value="niBit ( 1 ) ">
				<comments desc="Free widget. ">
					<remark text="Free widgets are not affected by the ZOrder nor the clipping of their parent. "/>
					<remark text="Free widgets are organized by the desktop widget. "/>
				</comments>
			</value>
			<value name="eWidgetStyle_HoldFocus" value="niBit ( 2 ) ">
				<comments desc="The widget will receive input focus. "/>
			</value>
			<value name="eWidgetStyle_OverFocus" value="niBit ( 3 ) ">
				<comments desc="The widget will receive input focus when the cursor is above it. "/>
			</value>
			<value name="eWidgetStyle_NoClip" value="niBit ( 4 ) ">
				<comments desc="The widget wont be clipped by it&apos;s parent. "/>
			</value>
			<value name="eWidgetStyle_NoClick" value="niBit ( 5 ) ">
				<comments desc="No click and double click messages will be generated. ">
					<remark text="If the click messages are not used it&apos;s a bit cheaper to not generate them at all. "/>
				</comments>
			</value>
			<value name="eWidgetStyle_NotifyParent" value="niBit ( 6 ) ">
				<comments desc="The parent widget is notified through the ParentNotify message when a message is sent to this widget. ">
					<remark text="The ParentNotify message is never notified to the parent widget. "/>
				</comments>
			</value>
			<value name="eWidgetStyle_FocusActivate" value="niBit ( 7 ) ">
				<comments desc="Activate the widget just before receiving focus. "/>
			</value>
			<value name="eWidgetStyle_DontSerialize" value="niBit ( 8 ) ">
				<comments desc="Don&apos;t serialize. "/>
			</value>
			<value name="eWidgetStyle_ItemOwned" value="niBit ( 9 ) ">
				<comments desc="The item the widget is attached to owns it. This is to instruct items (such as tree nodes or list entry) to destroy/invalidate the widget when it isnt used anymore. "/>
			</value>
			<value name="eWidgetStyle_DragSource" value="niBit ( 10 ) ">
				<comments desc="The the widget is a dragging source. "/>
			</value>
			<value name="eWidgetStyle_DragDestination" value="niBit ( 11 ) ">
				<comments desc="The widget is a dragging destination. "/>
			</value>
			<value name="eWidgetStyle_Temp" value="niBit ( 12 ) ">
				<comments desc="The widget is temporary, as for example the hover labels. "/>
			</value>
			<value name="eWidgetStyle_NoMoveFocus" value="niBit ( 13 ) ">
				<comments desc="Focus won&apos;t be set on the widget as a response to the MoveFocus message. "/>
			</value>
			<value name="eWidgetStyle_NoAutoRedraw" value="niBit ( 14 ) ">
				<comments desc="Dont redraw the widget automatically on input events. "/>
			</value>
			<value name="eWidgetStyle_MoveFocusGroup" value="niBit ( 15 ) ">
				<comments desc="Widget is a &quot;move focus group&quot;. ">
					<remark text="A move focus group indicates a logical organization of widgets which should be all cycled through before going to the next group. "/>
				</comments>
			</value>
			<value name="eWidgetStyle_MaxBit" value="16 ">
				<comments desc="Max bit, user styles should use the bits above this. "/>
			</value>
		</enum>
		<enum name="eWidgetDockStyle">
			<comments desc="Widget dock style. ">
				<remark text="Docking flags allows to snap/dock the widget on the edges of it&apos;s parent control client area. "/>
				<remark text="Snap only moves the widget to the specified edges, left and right are mutually exclusive, and top and bottom are mutually exclusive as well. "/>
				<remark text="Dock stretch the widget to reach the specified edge and update the docking area, so that a fill dock will fill only the empty space left. "/>
				<remark text="The widgets are docked in the ZOrder. "/>
			</comments>
			<value name="eWidgetDockStyle_None" value="0 ">
				<comments desc="No docking. "/>
			</value>
			<value name="eWidgetDockStyle_SnapLeft" value="1 ">
				<comments desc="Snap the widget on the left. "/>
			</value>
			<value name="eWidgetDockStyle_SnapRight" value="2 ">
				<comments desc="Snap the widget on the right. "/>
			</value>
			<value name="eWidgetDockStyle_SnapTop" value="3 ">
				<comments desc="Snap the widget on the top. "/>
			</value>
			<value name="eWidgetDockStyle_SnapBottom" value="4 ">
				<comments desc="Snap the widget on the bottom. "/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterLeft" value="5 ">
				<comments desc="Snap the widget on the center left. "/>
			</value>
			<value name="eWidgetDockStyle_SnapLeftCenter" value="5 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterRight" value="6 ">
				<comments desc="Snap the widget on the center right. "/>
			</value>
			<value name="eWidgetDockStyle_SnapRightCenter" value="6 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterTop" value="7 ">
				<comments desc="Snap the widget on the center top. "/>
			</value>
			<value name="eWidgetDockStyle_SnapTopCenter" value="7 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterBottom" value="8 ">
				<comments desc="Snap the widget on the center bottom. "/>
			</value>
			<value name="eWidgetDockStyle_SnapBottomCenter" value="8 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapTopLeft" value="9 ">
				<comments desc="Snap the widget on the top left. "/>
			</value>
			<value name="eWidgetDockStyle_SnapLeftTop" value="9 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapTopRight" value="10 ">
				<comments desc="Snap the widget on the top right. "/>
			</value>
			<value name="eWidgetDockStyle_SnapRightTop" value="10 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapBottomLeft" value="11 ">
				<comments desc="Snap the widget on the bottom left. "/>
			</value>
			<value name="eWidgetDockStyle_SnapLeftBottom" value="11 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapBottomRight" value="12 ">
				<comments desc="Snap the widget on the bottom right. "/>
			</value>
			<value name="eWidgetDockStyle_SnapRightBottom" value="12 ">
				<comments desc=""/>
			</value>
			<value name="eWidgetDockStyle_SnapCenter" value="13 ">
				<comments desc="Snap the widget in the center. "/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterH" value="14 ">
				<comments desc="Snap the widget in the center horizontally. "/>
			</value>
			<value name="eWidgetDockStyle_SnapCenterV" value="15 ">
				<comments desc="Snap the widget in the center vertically. "/>
			</value>
			<value name="eWidgetDockStyle_DockLeft" value="16 ">
				<comments desc="Dock the widget on the left. "/>
			</value>
			<value name="eWidgetDockStyle_DockRight" value="17 ">
				<comments desc="Dock the widget on the right. "/>
			</value>
			<value name="eWidgetDockStyle_DockTop" value="18 ">
				<comments desc="Dock the widget on the top. "/>
			</value>
			<value name="eWidgetDockStyle_DockBottom" value="19 ">
				<comments desc="Dock the widget on the bottom. "/>
			</value>
			<value name="eWidgetDockStyle_DockFill" value="20 ">
				<comments desc="Dock the widget to fill the widget. "/>
			</value>
			<value name="eWidgetDockStyle_DockFillWidth" value="21 ">
				<comments desc="Dock the widget to fill the widget width. "/>
			</value>
			<value name="eWidgetDockStyle_DockFillHeight" value="22 ">
				<comments desc="Dock the widget to fill the widget height. "/>
			</value>
			<value name="eWidgetDockStyle_DockFillOverlay" value="23 ">
				<comments desc="Dock the widget to fill the all widget, this is meant to be used by overlays. "/>
			</value>
			<value name="eWidgetDockStyle_Grid" value="24 ">
				<comments desc="Place the widget in a grid. "/>
			</value>
		</enum>
		<enum name="eWidgetZOrder">
			<comments desc="Widget ZOrder. ">
				<remark text="These are the reserved ZOrder, to define a ZOrder explicitly pass a value less that eWidgetZOrder_Max. Zero is the overlay widget, higher values are below it. "/>
			</comments>
			<value name="eWidgetZOrder_BackgroundBottom" value="0 ">
				<comments desc="Places the widget in the background behind all background widgets. "/>
			</value>
			<value name="eWidgetZOrder_Background" value="1 ">
				<comments desc="Places the widget in the background. "/>
			</value>
			<value name="eWidgetZOrder_Bottom" value="2 ">
				<comments desc="Places the widget at the bottom of the Z order. "/>
			</value>
			<value name="eWidgetZOrder_Top" value="3 ">
				<comments desc="Places the widget at the top of the Z order. "/>
			</value>
			<value name="eWidgetZOrder_TopMostBottom" value="4 ">
				<comments desc="Places the widget above all non-topmost widgets but below all top-most widgets. "/>
			</value>
			<value name="eWidgetZOrder_TopMost" value="5 ">
				<comments desc="Places the widget above all non-topmost widgets. "/>
			</value>
			<value name="eWidgetZOrder_OverlayBottom" value="6 ">
				<comments desc="Places the widget above all other widgets, but below all overlay widgets. "/>
			</value>
			<value name="eWidgetZOrder_Overlay" value="7 ">
				<comments desc="Overlay widget. "/>
			</value>
		</enum>
		<enum name="eWidgetSerializeFlags">
			<comments desc="Widget serialize flags. "/>
			<value name="eWidgetSerializeFlags_Write" value="niBit ( 0 ) ">
				<comments desc="Serialize write. ">
					<remark text="Read or Write must be specified, both can&apos;t be specified simultaneously. "/>
					<remark text="This is intentionally the same as ni::eSerializeFlags_Write "/>
				</comments>
			</value>
			<value name="eWidgetSerializeFlags_Read" value="niBit ( 1 ) ">
				<comments desc="Serialize read. ">
					<remark text="Read or Write must be specified, both can&apos;t be specified simultaneously. "/>
					<remark text="This is intentionally the same as ni::eSerializeFlags_Read "/>
				</comments>
			</value>
			<value name="eWidgetSerializeFlags_Children" value="niBit ( 2 ) ">
				<comments desc="Serialize (read/write) the children of the widget. "/>
			</value>
			<value name="eWidgetSerializeFlags_NoRoot" value="niBit ( 3 ) ">
				<comments desc="Don&apos;t serialize the root widget&apos;s information. ">
					<remark text="What is considered the root widget is the widget passed to SerializeLayout. "/>
				</comments>
			</value>
			<value name="eWidgetSerializeFlags_PropertyBox" value="niBit ( 10 ) ">
				<comments desc="Edition property box serialization. ">
					<remark text="Additional or different informations that are more suited for edition should be serialized when writting in a property box. "/>
					<remark text="This is intentionally the same as ni::eSerializeFlags_TypeInfoMetadata. "/>
				</comments>
			</value>
		</enum>
		<enum name="eWidgetAutoLayoutFlags">
			<comments desc="Widget auto layout flags. "/>
			<value name="eWidgetAutoLayoutFlags_Relative" value="niBit ( 0 ) ">
				<comments desc="Compute the children&apos;s relative sizes. "/>
			</value>
			<value name="eWidgetAutoLayoutFlags_Dock" value="niBit ( 1 ) ">
				<comments desc="Compute the children&apos;s docking positions. "/>
			</value>
			<value name="eWidgetAutoLayoutFlags_Size" value="niBit ( 2 ) ">
				<comments desc="Compute the size to fit the children. "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iWidgetSink"
			uuid1="6905DFA1-FA65-4444-A390-BA809580DBF6"
			uuid2="0x6905dfa1,0xfa65,0x4444,0xa3,0x90,0xba,0x80,0x95,0x80,0xdb,0xf6">
			<comments desc="Widget sink interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="onWidgetSink" name="OnWidgetSink" num_parameters="4">
				<comments desc="Widget sink message handler. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="nMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="varParam0"
					type="const ni::Var &amp;"
					typec="const ni::Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="varParam1"
					type="const ni::Var &amp;"
					typec="const ni::Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iWidgetCommand" uuid1="6D19A44F-87AD-4517-B5AE-FE57C7A2F25E" uuid2="0x6d19a44f,0x87ad,0x4517,0xb5,0xae,0xfe,0x57,0xc7,0xa2,0xf2,0x5e">
			<comments desc="Widget command interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified command in this command. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSrc"
					type="const iWidgetCommand *"
					typec="const iWidgetCommand*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this command. "/>
				<return type="iWidgetCommand *" typec="iWidgetCommand*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSender"
				name="SetSender"
				num_parameters="1"
				property="set"
				property_name2="sender"
				property_name="sender">
				<comments desc="Set the command sender. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSender"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSender"
				name="GetSender"
				num_parameters="0"
				property="get"
				property_name2="sender"
				property_name="sender">
				<comments desc="Get the command sender. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setID"
				name="SetID"
				num_parameters="1"
				property="set"
				property_name2="id"
				property_name="id">
				<comments desc="Set the command id. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getID"
				name="GetID"
				num_parameters="0"
				property="get"
				property_name2="id"
				property_name="id">
				<comments desc="Get the command id. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setExtra1"
				name="SetExtra1"
				num_parameters="1"
				property="set"
				property_name2="extra1"
				property_name="extra1">
				<comments desc="Set the extra parameter 1. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExtra1"
				name="GetExtra1"
				num_parameters="0"
				property="get"
				property_name2="extra1"
				property_name="extra1">
				<comments desc="Get the extra parameter 1. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setExtra2"
				name="SetExtra2"
				num_parameters="1"
				property="set"
				property_name2="extra2"
				property_name="extra2">
				<comments desc="Set the extra parameter 2. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExtra2"
				name="GetExtra2"
				num_parameters="0"
				property="get"
				property_name2="extra2"
				property_name="extra2">
				<comments desc="Get the extra parameter 2. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<enum name="eWidgetSystemTimer">
			<comments desc="Widget system timers. "/>
			<value name="eWidgetSystemTimer_First" value="eInvalidHandle+1 ">
				<comments desc="First system timer id. "/>
			</value>
			<value name="eWidgetSystemTimer_Hover" value="eWidgetSystemTimer_First+0 ">
				<comments desc="Hover system timer. "/>
			</value>
			<value name="eWidgetSystemTimer_NCHover" value="eWidgetSystemTimer_First+1 ">
				<comments desc="Non-client area hover system timer. "/>
			</value>
			<value name="eWidgetSystemTimer_LeftDoubleClick" value="eWidgetSystemTimer_First+2 ">
				<comments desc="Left doubleclick timer. "/>
			</value>
			<value name="eWidgetSystemTimer_RightDoubleClick" value="eWidgetSystemTimer_First+3 ">
				<comments desc="Right doubleclick timer. "/>
			</value>
		</enum>
		<interface name="iWidget" uuid1="84722D61-18B8-4081-ABCE-5AFE186F3FDA" uuid2="0x84722d61,0x18b8,0x4081,0xab,0xce,0x5a,0xfe,0x18,0x6f,0x3f,0xda">
			<comments desc="Widget interface. "/>
			<parents>
				<parent name="iMessageHandler"/>
			</parents>
			<method java_name="destroy" name="Destroy" num_parameters="0">
				<comments desc="Destroy the widget and it&apos;s children. ">
					<remark text="Will send the eUIMessage_Destroy message and invalidate the widget. "/>
					<remark text="This is not done automatically when releasing the widget, it&apos;s meant to be used to force the closing of application widgets at run-time manually. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getGraphics"
				name="GetGraphics"
				num_parameters="0"
				property="get"
				property_name2="graphics"
				property_name="graphics">
				<comments desc="Get the widget&apos;s Graphics object. "/>
				<return type="iGraphics *" typec="iGraphics*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGraphicsContext"
				name="GetGraphicsContext"
				num_parameters="0"
				property="get"
				property_name2="graphicsContext"
				property_name="graphics_context">
				<comments desc="Get the widget&apos;s Graphics Context. "/>
				<return type="iGraphicsContext *" typec="iGraphicsContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getUIContext"
				name="GetUIContext"
				num_parameters="0"
				property="get"
				property_name2="uicontext"
				property_name="uicontext">
				<comments desc="Get the widget&apos;s UI context. "/>
				<return type="iUIContext *" typec="iUIContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClassName"
				name="GetClassName"
				num_parameters="0"
				property="get"
				property_name2="className"
				property_name="class_name">
				<comments desc="Get the widget&apos;s class. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setID"
				name="SetID"
				num_parameters="1"
				property="set"
				property_name2="id"
				property_name="id">
				<comments desc="Set the widget&apos;s ID. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getID"
				name="GetID"
				num_parameters="0"
				property="get"
				property_name2="id"
				property_name="id">
				<comments desc="Get the widget&apos;s ID. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setStyle"
				name="SetStyle"
				num_parameters="1"
				property="set"
				property_name2="style"
				property_name="style">
				<comments desc="Set the widget&apos;s style. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anStyle"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getStyle"
				name="GetStyle"
				num_parameters="0"
				property="get"
				property_name2="style"
				property_name="style">
				<comments desc="Get the widget&apos;s style. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setParent"
				name="SetParent"
				num_parameters="1"
				property="set"
				property_name2="parent"
				property_name="parent">
				<comments desc="Set the parent widget. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apParent"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getParent"
				name="GetParent"
				num_parameters="0"
				property="get"
				property_name2="parent"
				property_name="parent">
				<comments desc="Get the parent widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setZOrder"
				name="SetZOrder"
				num_parameters="1"
				property="set"
				property_name2="zorder"
				property_name="zorder">
				<comments desc="Set the widget&apos;s ZOrder. \see eWidgetZOrder "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aZOrder"
					type="eWidgetZOrder"
					typec="eWidgetZOrder"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getZOrder"
				name="GetZOrder"
				num_parameters="0"
				property="get"
				property_name2="zorder"
				property_name="zorder">
				<comments desc="Get the widget&apos;s ZOrder. "/>
				<return type="eWidgetZOrder" typec="eWidgetZOrder" typei="ni::eType_Enum"/>
			</method>
			<method java_name="setZOrderAbove" name="SetZOrderAbove" num_parameters="1">
				<comments desc="Place the widget above (on top of) the specified sibling widget in the ZOrder. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDrawOrder"
				name="GetDrawOrder"
				num_parameters="0"
				property="get"
				property_name2="drawOrder"
				property_name="draw_order">
				<comments desc="Get the drawing order. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setAutoLayout"
				name="SetAutoLayout"
				num_parameters="1"
				property="set"
				property_name2="autoLayout"
				property_name="auto_layout">
				<comments desc="Set if the widget&apos;s auto layout flags. ">
					<remark text="If a child&apos;s relative position or size is set, the relative auto layout will be set. "/>
					<remark text="If a child&apos;s dock style is different of none the dock auto layout will be set. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tWidgetAutoLayoutFlags"
					typec="tWidgetAutoLayoutFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getAutoLayout"
				name="GetAutoLayout"
				num_parameters="0"
				property="get"
				property_name2="autoLayout"
				property_name="auto_layout">
				<comments desc="Get if the widget&apos;s auto layout flags. "/>
				<return type="tWidgetAutoLayoutFlags" typec="tWidgetAutoLayoutFlags" typei="ni::eType_Enum"/>
			</method>
			<method java_name="computeAutoLayout" name="ComputeAutoLayout" num_parameters="1">
				<comments desc="Computer the widget children&apos;s auto layout. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tWidgetAutoLayoutFlags"
					typec="tWidgetAutoLayoutFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setPosition"
				name="SetPosition"
				num_parameters="1"
				property="set"
				property_name2="position"
				property_name="position">
				<comments desc="Set the widget&apos;s position. ">
					<remark text="For a child window the position is relative to it&apos;s parent client top-left cornet, else the position is relative to the top-left corner of the screen. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPosition"
				name="GetPosition"
				num_parameters="0"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the widget&apos;s position. ">
					<remark text="For a child window the position is relative to it&apos;s parent client top-left cornet, else the position is relative to the top-left corner of the screen. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setSize"
				name="SetSize"
				num_parameters="1"
				property="set"
				property_name2="size"
				property_name="size">
				<comments desc="Set the widget&apos;s size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the widget&apos;s size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setMinimumSize"
				name="SetMinimumSize"
				num_parameters="1"
				property="set"
				property_name2="minimumSize"
				property_name="minimum_size">
				<comments desc="Set the widget&apos;s minimum size. ">
					<remark text="If a component is &lt;= 0 the limit is not enforced. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMinSize"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getMinimumSize"
				name="GetMinimumSize"
				num_parameters="0"
				property="get"
				property_name2="minimumSize"
				property_name="minimum_size">
				<comments desc="Get the widget&apos;s minimum size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setMaximumSize"
				name="SetMaximumSize"
				num_parameters="1"
				property="set"
				property_name2="maximumSize"
				property_name="maximum_size">
				<comments desc="Set the widget&apos;s maximum size. ">
					<remark text="If a component is &lt;= 0 the limit is not enforced. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMaxSize"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getMaximumSize"
				name="GetMaximumSize"
				num_parameters="0"
				property="get"
				property_name2="maximumSize"
				property_name="maximum_size">
				<comments desc="Get the widget&apos;s maximum size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setRect"
				name="SetRect"
				num_parameters="1"
				property="set"
				property_name2="rect"
				property_name="rect">
				<comments desc="Set the widget&apos;s rectangle. ">
					<remark text="For a child window the position is relative to it&apos;s parent client top-left cornet, else the position is relative to the top-left corner of the screen. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRect"
				name="GetRect"
				num_parameters="0"
				property="get"
				property_name2="rect"
				property_name="rect">
				<comments desc="Get the widget&apos;s rectangle. ">
					<remark text="For a child window the position is relative to it&apos;s parent client top-left cornet, else the position is relative to the top-left corner of the screen. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getWidgetRect"
				name="GetWidgetRect"
				num_parameters="0"
				property="get"
				property_name2="widgetRect"
				property_name="widget_rect">
				<comments desc="Get the widget rectangle. Relative to it&apos;s own top-left corner. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getDockFillRect"
				name="GetDockFillRect"
				num_parameters="0"
				property="get"
				property_name2="dockFillRect"
				property_name="dock_fill_rect">
				<comments desc="Get the widget&apos;s dock fill rectangle. ">
					<remark text="The DockFill rectangle is where DockFill widget at the end of the draw order will be placed. "/>
					<remark text="The DockFill rectangle is relative to the client area. "/>
					<remark text="The DockFill rectangle is reliable only after ComputeLayout has been called. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setClientPosition"
				name="SetClientPosition"
				num_parameters="1"
				property="set"
				property_name2="clientPosition"
				property_name="client_position">
				<comments desc="Set the widget&apos;s client position. ">
					<remark text="The position is relative to the widget&apos;s rectangle top-left corner. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClientPosition"
				name="GetClientPosition"
				num_parameters="0"
				property="get"
				property_name2="clientPosition"
				property_name="client_position">
				<comments desc="Get the widget&apos;s client position. ">
					<remark text="The position is relative to the widget&apos;s rectangle top-left corner. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setClientSize"
				name="SetClientSize"
				num_parameters="1"
				property="set"
				property_name2="clientSize"
				property_name="client_size">
				<comments desc="Set the widget&apos;s client size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClientSize"
				name="GetClientSize"
				num_parameters="0"
				property="get"
				property_name2="clientSize"
				property_name="client_size">
				<comments desc="Get the widget&apos;s client size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setClientRect"
				name="SetClientRect"
				num_parameters="1"
				property="set"
				property_name2="clientRect"
				property_name="client_rect">
				<comments desc="Set the widget&apos;s client rectangle. ">
					<remark text="The position is relative to the widget&apos;s rectangle top-left corner. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClientRect"
				name="GetClientRect"
				num_parameters="0"
				property="get"
				property_name2="clientRect"
				property_name="client_rect">
				<comments desc="Get the widget&apos;s client rectangle. ">
					<remark text="The position is relative to the widget&apos;s rectangle top-left corner. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="computeFitRect"
				name="ComputeFitRect"
				num_parameters="1">
				<comments desc="Compute a rectangle that fits around the specified client rectangle. " return="The rectangle, is absolute coordinates, that fits are the specified client rectangle. ">
					<remark text="Return a rectangle that can be used with SetAbsoluteRect. "/>
					<params text="aRect is the client rectangle in absolute coordinates. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFitRect"
				name="SetFitRect"
				num_parameters="1"
				property="set"
				property_name2="fitRect"
				property_name="fit_rect">
				<comments desc="Set a rectangle that fits around the specified client rectangle. ">
					<params text="aRect is the client rectangle in absolute coordinates. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFitSize"
				name="SetFitSize"
				num_parameters="1"
				property="set"
				property_name2="fitSize"
				property_name="fit_size">
				<comments desc="Set a rectangle that fits around the specified client size. ">
					<params text="avSize is the client size. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f"
					typec="const sVec2f"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setAbsolutePosition"
				name="SetAbsolutePosition"
				num_parameters="1"
				property="set"
				property_name2="absolutePosition"
				property_name="absolute_position">
				<comments desc="Set the widget&apos;s absolute position. ">
					<remark text="The position is relative to the screen&apos;s top-left corner. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAbsolutePosition"
				name="GetAbsolutePosition"
				num_parameters="0"
				property="get"
				property_name2="absolutePosition"
				property_name="absolute_position">
				<comments desc="Get the widget&apos;s absolute position. ">
					<remark text="The position is relative to the screen&apos;s top-left corner. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setAbsoluteRect"
				name="SetAbsoluteRect"
				num_parameters="1"
				property="set"
				property_name2="absoluteRect"
				property_name="absolute_rect">
				<comments desc="Set the widget&apos;s absolute rectangle. ">
					<remark text="The absolute rectangle size is the same as the widget&apos;s size. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteRect"
				name="GetAbsoluteRect"
				num_parameters="0"
				property="get"
				property_name2="absoluteRect"
				property_name="absolute_rect">
				<comments desc="Get the widget&apos;s absolute rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getClippedRect"
				name="GetClippedRect"
				num_parameters="0"
				property="get"
				property_name2="clippedRect"
				property_name="clipped_rect">
				<comments desc="Get the widget&apos;s rect clipped to the parent client rectangle. ">
					<remark text="The rectangle will not be clipped only if the NoClip style is specified. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteClippedRect"
				name="GetAbsoluteClippedRect"
				num_parameters="0"
				property="get"
				property_name2="absoluteClippedRect"
				property_name="absolute_clipped_rect">
				<comments desc="Get the widget&apos;s absolute rect clipped to the parent client rectangle. ">
					<remark text="The rectangle will not be clipped only if the NoClip style is specified. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getClippedClientRect"
				name="GetClippedClientRect"
				num_parameters="0"
				property="get"
				property_name2="clippedClientRect"
				property_name="clipped_client_rect">
				<comments desc="Get the widget&apos;s client rect clipped to the parent client rectangle. ">
					<remark text="The rectangle will not be clipped only if the NoClip style is specified. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteClippedClientRect"
				name="GetAbsoluteClippedClientRect"
				num_parameters="0"
				property="get"
				property_name2="absoluteClippedClientRect"
				property_name="absolute_clipped_client_rect">
				<comments desc="Get the widget&apos;s absolute client rect clipped to the parent client rectangle. ">
					<remark text="The rectangle will not be clipped only if the NoClip style is specified. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setRelativePosition"
				name="SetRelativePosition"
				num_parameters="1"
				property="set"
				property_name2="relativePosition"
				property_name="relative_position">
				<comments desc="Set the widget&apos;s relative position. ">
					<remark text="Will enabled the relative auto layout. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRelativePosition"
				name="GetRelativePosition"
				num_parameters="0"
				property="get"
				property_name2="relativePosition"
				property_name="relative_position">
				<comments desc="Get the widget&apos;s relative position. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setRelativeSize"
				name="SetRelativeSize"
				num_parameters="1"
				property="set"
				property_name2="relativeSize"
				property_name="relative_size">
				<comments desc="Set the widget&apos;s relative size. ">
					<remark text="Will enabled the relative auto layout. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRelativeSize"
				name="GetRelativeSize"
				num_parameters="0"
				property="get"
				property_name2="relativeSize"
				property_name="relative_size">
				<comments desc="Get the widget&apos;s relative size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setRelativeRect"
				name="SetRelativeRect"
				num_parameters="1"
				property="set"
				property_name2="relativeRect"
				property_name="relative_rect">
				<comments desc="Set the widget&apos;s relative rectangle. ">
					<remark text="Will enabled the relative auto layout. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRelativeRect"
				name="GetRelativeRect"
				num_parameters="0"
				property="get"
				property_name2="relativeRect"
				property_name="relative_rect">
				<comments desc="Get the widget&apos;s relative rectangle. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setPadding"
				name="SetPadding"
				num_parameters="1"
				property="set"
				property_name2="padding"
				property_name="padding">
				<comments desc="Set the padding size. ">
					<remark text="The padding rectangle specifies the internal padding of the client area for each side of the widget. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPadding"
				name="GetPadding"
				num_parameters="0"
				property="get"
				property_name2="padding"
				property_name="padding">
				<comments desc="Get the padding size. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getHasPadding"
				name="GetHasPadding"
				num_parameters="0"
				property="get"
				property_name2="hasPadding"
				property_name="has_padding">
				<comments desc="Get whether a padding is specified (non-zero). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setMargin"
				name="SetMargin"
				num_parameters="1"
				property="set"
				property_name2="margin"
				property_name="margin">
				<comments desc="Set the margin rectangle. ">
					<remark text="The margin rectangle specifies the margin for each side of the widget. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMargin"
				name="GetMargin"
				num_parameters="0"
				property="get"
				property_name2="margin"
				property_name="margin">
				<comments desc="Get the margin rectangle. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getHasMargin"
				name="GetHasMargin"
				num_parameters="0"
				property="get"
				property_name2="hasMargin"
				property_name="has_margin">
				<comments desc="Get whether a margin is specified (non-zero). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="setFocus" name="SetFocus" num_parameters="0">
				<comments desc="Ask to get the input focus. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="moveFocus" name="MoveFocus" num_parameters="1">
				<comments desc="Move the focus to the previous or next widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abToPrevious"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setCapture"
				name="SetCapture"
				num_parameters="1"
				property="set"
				property_name2="capture"
				property_name="capture">
				<comments desc="Set the capture of the input. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnable"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCapture"
				name="GetCapture"
				num_parameters="0"
				property="get"
				property_name2="capture"
				property_name="capture">
				<comments desc="Get the capture of the input state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setExclusive"
				name="SetExclusive"
				num_parameters="1"
				property="set"
				property_name2="exclusive"
				property_name="exclusive">
				<comments desc="Set exclusive. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnable"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getExclusive"
				name="GetExclusive"
				num_parameters="0"
				property="get"
				property_name2="exclusive"
				property_name="exclusive">
				<comments desc="Get the exclusive state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setInputSubmitFlags"
				name="SetInputSubmitFlags"
				num_parameters="1"
				property="set"
				property_name2="inputSubmitFlags"
				property_name="input_submit_flags">
				<comments desc="Set the input submit flags. \see ni::eUIInputSubmitFlags "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aSubmitFlags"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getInputSubmitFlags"
				name="GetInputSubmitFlags"
				num_parameters="0"
				property="get"
				property_name2="inputSubmitFlags"
				property_name="input_submit_flags">
				<comments desc="Get the input submit flags. \see ni::eUIInputSubmitFlags "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setVisible"
				name="SetVisible"
				num_parameters="1"
				property="set"
				property_name2="visible"
				property_name="visible">
				<comments desc="Set the widget visibility status. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abVisible"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getVisible"
				name="GetVisible"
				num_parameters="0"
				property="get"
				property_name2="visible"
				property_name="visible">
				<comments desc="Get the widget visibility status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setEnabled"
				name="SetEnabled"
				num_parameters="1"
				property="set"
				property_name2="enabled"
				property_name="enabled">
				<comments desc="Set the widget enabled status. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getEnabled"
				name="GetEnabled"
				num_parameters="0"
				property="get"
				property_name2="enabled"
				property_name="enabled">
				<comments desc="Get the widget enabled status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setIgnoreInput"
				name="SetIgnoreInput"
				num_parameters="1"
				property="set"
				property_name2="ignoreInput"
				property_name="ignore_input">
				<comments desc="Set the ignore input status. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abIgnoreInput"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIgnoreInput"
				name="GetIgnoreInput"
				num_parameters="0"
				property="get"
				property_name2="ignoreInput"
				property_name="ignore_input">
				<comments desc="Get the ignore input status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="setStatus" name="SetStatus" num_parameters="3">
				<comments desc="Set all the status. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="abVisible"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abIgnoreInput"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setHideChildren"
				name="SetHideChildren"
				num_parameters="1"
				property="set"
				property_name2="hideChildren"
				property_name="hide_children">
				<comments desc="Set whether all client children of the widget are hidden. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abHideChildren"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHideChildren"
				name="GetHideChildren"
				num_parameters="0"
				property="get"
				property_name2="hideChildren"
				property_name="hide_children">
				<comments desc="Get whether all client children of the widget are hidden. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsMouseOver"
				name="GetIsMouseOver"
				num_parameters="0"
				property="get"
				property_name2="isMouseOver"
				property_name="is_mouse_over">
				<comments desc="Get whether the mouse is over this widget&apos;s client area. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsPressed"
				name="GetIsPressed"
				num_parameters="0"
				property="get"
				property_name2="isPressed"
				property_name="is_pressed">
				<comments desc="Get whether the main mouse button is pressed while the mouse is over the widget&apos;s client area. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsNcMouseOver"
				name="GetIsNcMouseOver"
				num_parameters="0"
				property="get"
				property_name2="isNcMouseOver"
				property_name="is_nc_mouse_over">
				<comments desc="Get whether the mouse is over this widget&apos;s non-client area. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsNcPressed"
				name="GetIsNcPressed"
				num_parameters="0"
				property="get"
				property_name2="isNcPressed"
				property_name="is_nc_pressed">
				<comments desc="Get whether the main mouse button is pressed while the mouse is over the widget&apos;s non-client area. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHasFocus"
				name="GetHasFocus"
				num_parameters="0"
				property="get"
				property_name2="hasFocus"
				property_name="has_focus">
				<comments desc="Get whether the widget has input (keyboard) focus. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDraggingSource"
				name="GetDraggingSource"
				num_parameters="0"
				property="get"
				property_name2="draggingSource"
				property_name="dragging_source">
				<comments desc="Get whether the widget is the current draggin source. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDragging"
				name="GetDragging"
				num_parameters="0"
				property="get"
				property_name2="dragging"
				property_name="dragging">
				<comments desc="Get whether something is currently being dragged from this widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="redraw" name="Redraw" num_parameters="0">
				<comments desc="Force redrawing of the widget&apos;s content. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setTimer"
				name="SetTimer"
				num_parameters="2"
				property="set"
				property_name2="timer"
				property_name="timer">
				<comments desc="Set a timer. ">
					<remark text="When the timer expires a eUIMessage_Timer will be sent to the widget with the timer ID as parameter. "/>
					<params text="anID is the ID of the timer to set. "/>
					<params text="afTime is the time in seconds after which the timer will expire. If &lt; 0 the timer will be removed. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="afTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getTimer"
				name="GetTimer"
				num_parameters="1"
				property="get"
				property_name2="timer"
				property_name="timer">
				<comments desc="Get a timer. ">
					<remark text="If the ID specified is not set -1 is returned. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anID"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="addSink" name="AddSink" num_parameters="1">
				<comments desc="Add a widget sink as first sink called. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iWidgetSink *"
					typec="iWidgetSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addPostSink" name="AddPostSink" num_parameters="1">
				<comments desc="Add a widget sink as last sink called. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iWidgetSink *"
					typec="iWidgetSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addClassSink" name="AddClassSink" num_parameters="1">
				<comments desc="Add a new instance of a widget sink as first sink called. "/>
				<return type="iWidgetSink *" typec="iWidgetSink*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addClassPostSink" name="AddClassPostSink" num_parameters="1">
				<comments desc="Add a new instance of a widget sink as last sink called. "/>
				<return type="iWidgetSink *" typec="iWidgetSink*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszClassName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeSink" name="RemoveSink" num_parameters="1">
				<comments desc="Remove a widget sink. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apSink"
					type="iWidgetSink *"
					typec="iWidgetSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="invalidateChildren" name="InvalidateChildren" num_parameters="0">
				<comments desc="Invalidate all children. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumChildren"
				name="GetNumChildren"
				num_parameters="0"
				property="get"
				property_name2="numChildren"
				property_name="num_children">
				<comments desc="Get the number of child widgets. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getChildIndex"
				name="GetChildIndex"
				num_parameters="1"
				property="get"
				property_name2="childIndex"
				property_name="child_index">
				<comments desc="Get the index of the specified widget, if not a child widget return eInvalidHandle. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChildFromIndex"
				name="GetChildFromIndex"
				num_parameters="1"
				property="get"
				property_name2="childFromIndex"
				property_name="child_from_index">
				<comments desc="Get the child widget at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getChildFromID"
				name="GetChildFromID"
				num_parameters="1"
				property="get"
				property_name2="childFromID"
				property_name="child_from_id">
				<comments desc="Get the child widget with the specified ID. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChildFromDrawOrder"
				name="GetChildFromDrawOrder"
				num_parameters="1"
				property="get"
				property_name2="childFromDrawOrder"
				property_name="child_from_draw_order">
				<comments desc="Get the child widget with the specified draw order. ">
					<remark text="0 is the widget that is drawn first (in the background). "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anDrawOrder"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="findWidget"
				name="FindWidget"
				num_parameters="1">
				<comments desc="Find the first widget with the specified ID. ">
					<remark text="This include this widget. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findWidgetByPos"
				name="FindWidgetByPos"
				num_parameters="1">
				<comments desc="Find the top widget that intersects the specified absolute position. ">
					<remark text="This include this widget. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasChild"
				name="HasChild"
				num_parameters="2">
				<comments desc="Check whether the specified widget is a child of this widget. ">
					<params text="abRecursive if true the check will recursively check in all the children of the children. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apW"
					type="const iWidget *"
					typec="const iWidget*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abRecursive"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="hasParent"
				name="HasParent"
				num_parameters="1">
				<comments desc="Walks up the parent to check if the specified widget is one of the parent of this widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apW"
					type="const iWidget *"
					typec="const iWidget*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setText"
				name="SetText"
				num_parameters="1"
				property="set"
				property_name2="text"
				property_name="text">
				<comments desc="Set the widget&apos;s text. ">
					<remark text="The widget&apos;s text is meant to store limited amount of text in a standard way. "/>
					<remark text="Controls like the edit box, which edits text should use the standard text only to store the default text value - aka value when the widget is created from a datatable. Those control&apos;s edited text should provide a text_buffer property to store the edited text. SetText on those control should also reset the content of the text buffer, but GetText still returns only the text set with SetText, while GetTextBuffer returns the edited text. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspText"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getText"
				name="GetText"
				num_parameters="0"
				property="get"
				property_name2="text"
				property_name="text">
				<comments desc="Get the widget&apos;s title. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalizedText"
				name="GetLocalizedText"
				num_parameters="0"
				property="get"
				property_name2="localizedText"
				property_name="localized_text">
				<comments desc="Get the localized text. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setHoverText"
				name="SetHoverText"
				num_parameters="1"
				property="set"
				property_name2="hoverText"
				property_name="hover_text">
				<comments desc="Set the widget&apos;s hovering text. ">
					<remark text="Text drawn in a label when hovering message is sent on the client area. That is the default behavior that can be overriden by intersepting the hover message. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspText"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHoverText"
				name="GetHoverText"
				num_parameters="0"
				property="get"
				property_name2="hoverText"
				property_name="hover_text">
				<comments desc="Get the widget&apos;s hovering text. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDefaultHoverWidget" name="CreateDefaultHoverWidget" num_parameters="1">
				<comments desc="Create a default hover widget (Text only). "/>
				<return type="ni::iWidget *" typec="ni::iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspHoverText"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="showHoverWidget" name="ShowHoverWidget" num_parameters="2">
				<comments desc="Show a hover widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="ni::iWidget *"
					typec="ni::iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avAbsPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="resetHoverWidget" name="ResetHoverWidget" num_parameters="1">
				<comments desc="Reset the hover widget. ">
					<params text="abRestart: if true and hover delay &gt;=0 restarts the hover timer, else stops the timer. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abRestart"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHoverWidget"
				name="GetHoverWidget"
				num_parameters="0"
				property="get"
				property_name2="hoverWidget"
				property_name="hover_widget">
				<comments desc="Get the currently displayed hover widget. "/>
				<return type="ni::iWidget *" typec="ni::iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFont"
				name="SetFont"
				num_parameters="1"
				property="set"
				property_name2="font"
				property_name="font">
				<comments desc="Set the widget&apos;s font. " return="eTrue if the font is valid, else eFalse. ">
					<remark text="By default if not set the skin&apos;s font will be used. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apFont"
					type="iFont *"
					typec="iFont*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFont"
				name="GetFont"
				num_parameters="0"
				property="get"
				property_name2="font"
				property_name="font">
				<comments desc="Get the widget&apos;s font. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDockStyle"
				name="SetDockStyle"
				num_parameters="1"
				property="set"
				property_name2="dockStyle"
				property_name="dock_style">
				<comments desc="Set the widget&apos;s dock style. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aStyle"
					type="eWidgetDockStyle"
					typec="eWidgetDockStyle"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDockStyle"
				name="GetDockStyle"
				num_parameters="0"
				property="get"
				property_name2="dockStyle"
				property_name="dock_style">
				<comments desc="Get the widget&apos;s dock style. "/>
				<return type="eWidgetDockStyle" typec="eWidgetDockStyle" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setSkin"
				name="SetSkin"
				num_parameters="1"
				property="set"
				property_name2="skin"
				property_name="skin">
				<comments desc="Set the widget&apos;s skin. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspSkin"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSkin"
				name="GetSkin"
				num_parameters="0"
				property="get"
				property_name2="skin"
				property_name="skin">
				<comments desc="Get the widget&apos;s skin. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSkinClass"
				name="SetSkinClass"
				num_parameters="1"
				property="set"
				property_name2="skinClass"
				property_name="skin_class">
				<comments desc="Set the widget&apos;s skin classs. ">
					<remark text="If not specified it&apos;s the widget&apos;s class name. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspSkinClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSkinClass"
				name="GetSkinClass"
				num_parameters="0"
				property="get"
				property_name2="skinClass"
				property_name="skin_class">
				<comments desc="Get the widget&apos;s skin class. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setLocale"
				name="SetLocale"
				num_parameters="1"
				property="set"
				property_name2="locale"
				property_name="locale">
				<comments desc="Set the widget&apos;s locale. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocale"
				name="GetLocale"
				num_parameters="0"
				property="get"
				property_name2="locale"
				property_name="locale">
				<comments desc="Get the widget&apos;s locale. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActiveLocale"
				name="GetActiveLocale"
				num_parameters="0"
				property="get"
				property_name2="activeLocale"
				property_name="active_locale">
				<comments desc="Get the locale actually used by the widget. ">
					<remark text="This will get the parent&apos;s locale if no locale is specified on this widget. "/>
				</comments>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinFont"
				name="FindSkinFont"
				num_parameters="3">
				<comments desc="Find the font of the specified item in the widget&apos;s skin. "/>
				<return type="iFont *" typec="iFont*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkinClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinCursor"
				name="FindSkinCursor"
				num_parameters="3">
				<comments desc="Find the cursor of the specified item in the widget&apos;s skin. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkinClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinElement"
				name="FindSkinElement"
				num_parameters="3">
				<comments desc="Find the element of the specified item in the widget&apos;s skin. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkinClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findSkinColor"
				name="FindSkinColor"
				num_parameters="4">
				<comments desc="Find the color of the specified item in the widget&apos;s skin. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aDefault"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspSkinClass"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspState"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findLocalized"
				name="FindLocalized"
				num_parameters="1">
				<comments desc="Find a localized text. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspText"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setContextMenu"
				name="SetContextMenu"
				num_parameters="1"
				property="set"
				property_name2="contextMenu"
				property_name="context_menu">
				<comments desc="Set the widget&apos;s context menu. \see ni::eUIMessage::eUIMessage_ContextMenu ">
					<remark text="The parent of the menu wont be changed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMenu"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getContextMenu"
				name="GetContextMenu"
				num_parameters="0"
				property="get"
				property_name2="contextMenu"
				property_name="context_menu">
				<comments desc="Get the widget&apos;s context menu. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="sendMessage" name="SendMessage" num_parameters="3">
				<comments desc="Send a message to this widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="niVarNull "
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					default="niVarNull "
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="sendCommand" name="SendCommand" num_parameters="4">
				<comments desc="Send a command to the specified widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anCommand"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="niVarNull "
					name="avarExtra1"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					default="niVarNull "
					last="1"
					name="avarExtra2"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="broadcastMessage" name="BroadcastMessage" num_parameters="3">
				<comments desc="Send a message to this widget and its children recursivly. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					default="niVarNull "
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					default="niVarNull "
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setCanvas"
				name="SetCanvas"
				num_parameters="1"
				property="set"
				property_name2="canvas"
				property_name="canvas">
				<comments desc="Set the VG canvas of the widget. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apCanvas"
					type="iCanvas *"
					typec="iCanvas*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCanvas"
				name="GetCanvas"
				num_parameters="0"
				property="get"
				property_name2="canvas"
				property_name="canvas">
				<comments desc="Get the VG canvas of the widget. "/>
				<return type="iCanvas *" typec="iCanvas*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serializeLayout" name="SerializeLayout" num_parameters="2">
				<comments desc="Serialize the layout of this widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anFlags"
					type="tWidgetSerializeFlags"
					typec="tWidgetSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="serializeChildren" name="SerializeChildren" num_parameters="2">
				<comments desc="Serialize the children widget. ">
					<remark text="The Children data table passed can contain a _regex_filter regular expression (iRegex) property. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anFlags"
					type="tWidgetSerializeFlags"
					typec="tWidgetSerializeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="applyDockStyle" name="ApplyDockStyle" num_parameters="1">
				<comments desc="Set a dock style, and then restore the previous dock style. ">
					<remark text="This is useful to set position of widgets relative to their parent. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aStyle"
					type="eWidgetDockStyle"
					typec="eWidgetDockStyle"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="place" name="Place" num_parameters="3">
				<comments desc="Place the widget using the specified dock style, margin and rectangle. ">
					<params text="aRect is the parent-relative rectangle which specify the &apos;starting&apos; position of the widget, if the size/pos is &lt;= 1.0 the coordinates are assumed to be relative to the widget&apos;s parent. "/>
					<params text="aStyle dock style to use the place the widget. "/>
					<params text="avMargin is the size of the margin to use to place the widget. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aStyle"
					type="eWidgetDockStyle"
					typec="eWidgetDockStyle"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="avMargin"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="snapInside" name="SnapInside" num_parameters="2">
				<comments desc="Makes sure the widget is within the bounds of the specified &apos;container&apos; widget. ">
					<params text="apContainer: the container widget, if null the root widget. "/>
					<params text="afSnapMargin: the distance margin below which the widget will be snapped to the container&apos;s inner border "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apContainer"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afSnapMargin"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="popAt" name="PopAt" num_parameters="3">
				<comments desc="Move the widget at the specified position making sure it is within the bounds of the specified &apos;container&apos; widget. ">
					<params text="apContainer: the container widget, if null the root widget. "/>
					<params text="avAbsPos: the position where the widget should be placed "/>
					<params text="afSnapMargin: the distance margin below which the widget will be snapped to the container&apos;s inner border "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apContainer"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avAbsPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afSnapMargin"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="layout" name="Layout" num_parameters="1">
				<comments desc="Compute the Widget&apos;s layout. ">
					<remark text="This method shouldn&apos;t be called manually in general ; it recomputes the layout only if a request has been set, which happens when the widget size changes and other various events. "/>
					<params text="abChildren if true compute all the children&apos;s layout recursively. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abChildren"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFingerCapture"
				name="SetFingerCapture"
				num_parameters="2"
				property="set"
				property_name2="fingerCapture"
				property_name="finger_capture">
				<comments desc="Set the capture of a finger&apos;s input. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="abEnable"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFingerCapture"
				name="GetFingerCapture"
				num_parameters="1"
				property="get"
				property_name2="fingerCapture"
				property_name="finger_capture">
				<comments desc="Get the capture of a finger&apos;s input. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anFinger"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetButton.h.idl.xml">
		<enum name="eWidgetButtonStyle">
			<comments desc=""/>
			<value name="eWidgetButtonStyle_OnOff" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Toggle button. "/>
			</value>
			<value name="eWidgetButtonStyle_CheckBox" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Check box button. "/>
			</value>
			<value name="eWidgetButtonStyle_RadioButton" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Radio button. "/>
			</value>
			<value name="eWidgetButtonStyle_TabButton" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="Tab button. "/>
			</value>
			<value name="eWidgetButtonStyle_Select" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="Draw the button in a selected state when checked. "/>
			</value>
			<value name="eWidgetButtonStyle_NoText" value="niBit ( eWidgetStyle_MaxBit+5 ) ">
				<comments desc="Dont draw the text. "/>
			</value>
			<value name="eWidgetButtonStyle_Sticky" value="niBit ( eWidgetStyle_MaxBit+6 ) ">
				<comments desc="The button will stay pressed and &apos;click&apos; once it has been pressed, even if the mouse moves out of it. "/>
			</value>
			<value name="eWidgetButtonStyle_NoFrame" value="niBit ( eWidgetStyle_MaxBit+7 ) ">
				<comments desc="Dont draw the button frame. "/>
			</value>
			<value name="eWidgetButtonStyle_IconFit" value="niBit ( eWidgetStyle_MaxBit+8 ) ">
				<comments desc="Set the icon size automatically to fit into the button. ">
					<remark text="Fit keeps the ratio of the button. "/>
				</comments>
			</value>
			<value name="eWidgetButtonStyle_IconStretch" value="niBit ( eWidgetStyle_MaxBit+9 ) ">
				<comments desc="Set the icon size automatically to fill the button. ">
					<remark text="Stretch doesnt keep the icon ratio. "/>
				</comments>
			</value>
			<value name="eWidgetButtonStyle_IconLeft" value="0 ">
				<comments desc="The icon position is on the left. The text position is on the right. ">
					<remark text="This is the default if not position is specified. "/>
				</comments>
			</value>
			<value name="eWidgetButtonStyle_IconRight" value="niBit ( eWidgetStyle_MaxBit+10 ) ">
				<comments desc="The icon position is on the right. The text position is on the left. "/>
			</value>
			<value name="eWidgetButtonStyle_IconTop" value="niBit ( eWidgetStyle_MaxBit+11 ) ">
				<comments desc="The icon position is on the top. The text position is in the bottom. "/>
			</value>
			<value name="eWidgetButtonStyle_IconBottom" value="niBit ( eWidgetStyle_MaxBit+12 ) ">
				<comments desc="The icon position is in the bottom. The text position is on the top. "/>
			</value>
			<value name="eWidgetButtonStyle_IconCenter" value="niBit ( eWidgetStyle_MaxBit+13 ) ">
				<comments desc="The icon position is in the center. The text position is over the icon. "/>
			</value>
			<value name="eWidgetButtonStyle_TextLeft" value="niBit ( eWidgetStyle_MaxBit+14 ) ">
				<comments desc="The text is left/top aligned. "/>
			</value>
			<value name="eWidgetButtonStyle_TextRight" value="niBit ( eWidgetStyle_MaxBit+15 ) ">
				<comments desc="The text is right/bottom aligned. "/>
			</value>
			<value name="eWidgetButtonStyle_TextCenter" value="0 ">
				<comments desc="The text is center aligned. ">
					<remark text="This is the default if no text position is specified. "/>
				</comments>
			</value>
			<value name="eWidgetButtonStyle_BitmapButton" value="eWidgetButtonStyle_IconCenter ">
				<comments desc="Bitmap button. Text is drawn over the icon. "/>
			</value>
			<value name="eWidgetButtonStyle_IconButton" value="eWidgetButtonStyle_IconTop ">
				<comments desc="Icon button, same as bitmap button excepted that the text is drawn below the icon. "/>
			</value>
		</enum>
		<enum name="eWidgetButtonCmd">
			<comments desc="Button notification messages. "/>
			<value name="eWidgetButtonCmd_Clicked" value="0 ">
				<comments desc="The button has been clicked. "/>
			</value>
			<value name="eWidgetButtonCmd_Pushed" value="1 ">
				<comments desc="The button has been pushed. "/>
			</value>
			<value name="eWidgetButtonCmd_UnPushed" value="2 ">
				<comments desc="The button has been unpushed. "/>
			</value>
			<value name="eWidgetButtonCmd_Checked" value="3 ">
				<comments desc="The button has been checked. "/>
			</value>
			<value name="eWidgetButtonCmd_UnChecked" value="4 ">
				<comments desc="The button has been unchecked. "/>
			</value>
		</enum>
		<interface name="iWidgetButton" uuid1="719EEAC7-6CB0-4C6A-95BE-2420DEE10EB8" uuid2="0x719eeac7,0x6cb0,0x4c6a,0x95,0xbe,0x24,0x20,0xde,0xe1,0x0e,0xb8">
			<comments desc="Button widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setIcon"
				name="SetIcon"
				num_parameters="1"
				property="set"
				property_name2="icon"
				property_name="icon">
				<comments desc="Set the button&apos;s icon "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apIcon"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIcon"
				name="GetIcon"
				num_parameters="0"
				property="get"
				property_name2="icon"
				property_name="icon">
				<comments desc="Get the button&apos;s icon "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIconPressed"
				name="SetIconPressed"
				num_parameters="1"
				property="set"
				property_name2="iconPressed"
				property_name="icon_pressed">
				<comments desc="Set the button&apos;s icon in pressed state. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apIcon"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIconPressed"
				name="GetIconPressed"
				num_parameters="0"
				property="get"
				property_name2="iconPressed"
				property_name="icon_pressed">
				<comments desc="Get the button&apos;s icon in pressed state. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIconHover"
				name="SetIconHover"
				num_parameters="1"
				property="set"
				property_name2="iconHover"
				property_name="icon_hover">
				<comments desc="Set the button&apos;s icon in hover state. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apIcon"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIconHover"
				name="GetIconHover"
				num_parameters="0"
				property="get"
				property_name2="iconHover"
				property_name="icon_hover">
				<comments desc="Get the button&apos;s icon in hover state. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIconSize"
				name="SetIconSize"
				num_parameters="1"
				property="set"
				property_name2="iconSize"
				property_name="icon_size">
				<comments desc="Set the button&apos;s icon size. ">
					<remark text="If zero the size of the icon image is used. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIconSize"
				name="GetIconSize"
				num_parameters="0"
				property="get"
				property_name2="iconSize"
				property_name="icon_size">
				<comments desc="Get the button&apos;s icon size. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setCheck"
				name="SetCheck"
				num_parameters="1"
				property="set"
				property_name2="check"
				property_name="check">
				<comments desc="Set the button check status "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abCkecked"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCheck"
				name="GetCheck"
				num_parameters="0"
				property="get"
				property_name2="check"
				property_name="check">
				<comments desc="Get the button check status "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setGroupID"
				name="SetGroupID"
				num_parameters="1"
				property="set"
				property_name2="groupID"
				property_name="group_id">
				<comments desc="Set the button&apos;s group id. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGroupID"
				name="GetGroupID"
				num_parameters="0"
				property="get"
				property_name2="groupID"
				property_name="group_id">
				<comments desc="Get the button&apos;s group id. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIconMargin"
				name="SetIconMargin"
				num_parameters="1"
				property="set"
				property_name2="iconMargin"
				property_name="icon_margin">
				<comments desc="Set the icon margin. ">
					<remark text="Default margin is Vec4(3,3,3,3) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMargin"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIconMargin"
				name="GetIconMargin"
				num_parameters="0"
				property="get"
				property_name2="iconMargin"
				property_name="icon_margin">
				<comments desc="Get the icon margin. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getIconDrawRect"
				name="GetIconDrawRect"
				num_parameters="0"
				property="get"
				property_name2="iconDrawRect"
				property_name="icon_draw_rect">
				<comments desc="Get the icon&apos;s drawing rectangle, client rectangle relative. "/>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setDrawFrameFlags"
				name="SetDrawFrameFlags"
				num_parameters="1"
				property="set"
				property_name2="drawFrameFlags"
				property_name="draw_frame_flags">
				<comments desc="Set the draw frame flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDrawFrameFlags"
				name="GetDrawFrameFlags"
				num_parameters="0"
				property="get"
				property_name2="drawFrameFlags"
				property_name="draw_frame_flags">
				<comments desc="Get the draw frame flags. "/>
				<return type="tRectFrameFlags" typec="tRectFrameFlags" typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetCanvas.h.idl.xml">
		<enum name="eWidgetCanvasStyle">
			<comments desc="Canvas widget styles "/>
			<value name="eWidgetCanvasStyle_ScrollH" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="A horizontal scroll bar will be shown if the canvas client size is bigger than the canvas&apos;s rectangle. ">
					<remark text="The width of the client rectangle wont be adjusted to the canvas rectangle. "/>
				</comments>
			</value>
			<value name="eWidgetCanvasStyle_ScrollV" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="A vertical scroll bar will be shown if the canvas client size is bigger than the canvas&apos;s rectangle. ">
					<remark text="The height of the client rectangle wont be adjusted to the canvas rectangle. "/>
				</comments>
			</value>
			<value name="eWidgetCanvasStyle_HideScrollH" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="The horizontal scroll bar will never be set visible. "/>
			</value>
			<value name="eWidgetCanvasStyle_HideScrollV" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="The vertical scroll bar will never be set visible. "/>
			</value>
		</enum>
		<interface name="iWidgetCanvas" uuid1="CD67D2FC-71DA-4054-AE79-BF6DD22744D6" uuid2="0xcd67d2fc,0x71da,0x4054,0xae,0x79,0xbf,0x6d,0xd2,0x27,0x44,0xd6">
			<comments desc="Canvas widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getScrollV"
				name="GetScrollV"
				num_parameters="0"
				property="get"
				property_name2="scrollV"
				property_name="scroll_v">
				<comments desc="Get the vertical scroll bar. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setScrollStepV"
				name="SetScrollStepV"
				num_parameters="1"
				property="set"
				property_name2="scrollStepV"
				property_name="scroll_step_v">
				<comments desc="Set the scroll bar vertical step size. ">
					<remark text="The default is 20 "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afV"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollStepV"
				name="GetScrollStepV"
				num_parameters="0"
				property="get"
				property_name2="scrollStepV"
				property_name="scroll_step_v">
				<comments desc="Get the scroll bar vertical step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setScrollMarginV"
				name="SetScrollMarginV"
				num_parameters="1"
				property="set"
				property_name2="scrollMarginV"
				property_name="scroll_margin_v">
				<comments desc="Set the scroll bar vertical range margin. ">
					<remark text="The default is zero "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afV"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollMarginV"
				name="GetScrollMarginV"
				num_parameters="0"
				property="get"
				property_name2="scrollMarginV"
				property_name="scroll_margin_v">
				<comments desc="Get the scroll bar vertical range margin. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollH"
				name="GetScrollH"
				num_parameters="0"
				property="get"
				property_name2="scrollH"
				property_name="scroll_h">
				<comments desc="Get the horizontal scroll bar. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setScrollStepH"
				name="SetScrollStepH"
				num_parameters="1"
				property="set"
				property_name2="scrollStepH"
				property_name="scroll_step_h">
				<comments desc="Set the scroll bar horizontal step size. ">
					<remark text="The default is 20 "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afV"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollStepH"
				name="GetScrollStepH"
				num_parameters="0"
				property="get"
				property_name2="scrollStepH"
				property_name="scroll_step_h">
				<comments desc="Get the scroll bar horizontal step size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setScrollMarginH"
				name="SetScrollMarginH"
				num_parameters="1"
				property="set"
				property_name2="scrollMarginH"
				property_name="scroll_margin_h">
				<comments desc="Set the scroll bar horizontal range margin. ">
					<remark text="The default is zero "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afV"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollMarginH"
				name="GetScrollMarginH"
				num_parameters="0"
				property="get"
				property_name2="scrollMarginH"
				property_name="scroll_margin_h">
				<comments desc="Get the scroll bar horizontal range margin. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetColorPicker.h.idl.xml">
		<enum name="eWidgetColorPickerCmd">
			<comments desc="Color picker notification messages. "/>
			<value name="eWidgetColorPickerCmd_ColorChanged" value="0 ">
				<comments desc="Sent when the color changed. "/>
			</value>
		</enum>
		<enum name="eWidgetColorPickerStyle">
			<comments desc="Color picker style. "/>
			<value name="eWidgetColorPickerStyle_Brightness" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Show the brightness control. "/>
			</value>
		</enum>
		<interface name="iWidgetColorPicker" uuid1="DE06C422-DFBA-4BBB-BABA-35812A4244D4" uuid2="0xde06c422,0xdfba,0x4bbb,0xba,0xba,0x35,0x81,0x2a,0x42,0x44,0xd4">
			<comments desc="Widget ColorPicker viewer. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setHSV"
				name="SetHSV"
				num_parameters="1"
				property="set"
				property_name2="hsv"
				property_name="hsv">
				<comments desc="Set the color picker&apos;s current color in HSV format. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avHSV"
					type="const sColor3f &amp;"
					typec="const sColor3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHSV"
				name="GetHSV"
				num_parameters="0"
				property="get"
				property_name2="hsv"
				property_name="hsv">
				<comments desc="Get the color picker&apos;s current color in HSV format. "/>
				<return type="sColor3f" typec="sColor3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setRGBA"
				name="SetRGBA"
				num_parameters="1"
				property="set"
				property_name2="rgba"
				property_name="rgba">
				<comments desc="Set the color picker&apos;s current color in RGBA format. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avRGBA"
					type="const sColor4f &amp;"
					typec="const sColor4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRGBA"
				name="GetRGBA"
				num_parameters="0"
				property="get"
				property_name2="rgba"
				property_name="rgba">
				<comments desc="Get the color picker&apos;s current color in RGBA format. "/>
				<return type="sColor4f" typec="sColor4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setRGB"
				name="SetRGB"
				num_parameters="1"
				property="set"
				property_name2="rgb"
				property_name="rgb">
				<comments desc="Set the color picker&apos;s current color in RGB format. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avRGB"
					type="const sColor3f &amp;"
					typec="const sColor3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRGB"
				name="GetRGB"
				num_parameters="0"
				property="get"
				property_name2="rgb"
				property_name="rgb">
				<comments desc="Get the color picker&apos;s current color in RGB format. "/>
				<return type="sColor3f" typec="sColor3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setAlpha"
				name="SetAlpha"
				num_parameters="1"
				property="set"
				property_name2="alpha"
				property_name="alpha">
				<comments desc="Set the color picker&apos;s current color alpha. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afAlpha"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAlpha"
				name="GetAlpha"
				num_parameters="0"
				property="get"
				property_name2="alpha"
				property_name="alpha">
				<comments desc="Get the color picker&apos;s current color alpha. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setBrightness"
				name="SetBrightness"
				num_parameters="1"
				property="set"
				property_name2="brightness"
				property_name="brightness">
				<comments desc="Set the color picker&apos;s current color brightness. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afBrightness"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getBrightness"
				name="GetBrightness"
				num_parameters="0"
				property="get"
				property_name2="brightness"
				property_name="brightness">
				<comments desc="Get the color picker&apos;s current color brightness. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setMaxBrightness"
				name="SetMaxBrightness"
				num_parameters="1"
				property="set"
				property_name2="maxBrightness"
				property_name="max_brightness">
				<comments desc="Set the color picker&apos;s current color maximum brightness. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afMaxBrightness"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxBrightness"
				name="GetMaxBrightness"
				num_parameters="0"
				property="get"
				property_name2="maxBrightness"
				property_name="max_brightness">
				<comments desc="Get the color picker&apos;s current color maximum brightness. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setColorName"
				name="SetColorName"
				num_parameters="1"
				property="set"
				property_name2="colorName"
				property_name="color_name">
				<comments desc="Set the color picker&apos;s current color from a color name. \see ni::eColor "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColorName"
				name="GetColorName"
				num_parameters="0"
				property="get"
				property_name2="colorName"
				property_name="color_name">
				<comments desc="Get the color picker&apos;s current color as color name. \see ni::eColor "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setExpression"
				name="SetExpression"
				num_parameters="1"
				property="set"
				property_name2="expression"
				property_name="expression">
				<comments desc="Set the color picker&apos;s current color from a mathematic expression. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspExpression"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExpression"
				name="GetExpression"
				num_parameters="0"
				property="get"
				property_name2="expression"
				property_name="expression">
				<comments desc="Get the color picker&apos;s current color as a mathematic expression. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetComboBox.h.idl.xml">
		<enum name="eWidgetComboBoxStyle">
			<comments desc="Combo box widget style. "/>
			<value name="eWidgetComboBoxStyle_DropDown" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Drop down combo box, the text cant be edited. "/>
			</value>
			<value name="eWidgetComboBoxStyle_Multiselect" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Allow to select multiple items in the combo box. "/>
			</value>
			<value name="eWidgetComboBoxStyle_ReadOnly" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Set the combo box&apos;s edity box to be read only. "/>
			</value>
			<value name="eWidgetComboBoxStyle_NoDefaultListBox" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="No default list box is created, the next child added will be the dropped widget. "/>
			</value>
			<value name="eWidgetComboBoxStyle_ClickAddSelection" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="For defautl dropped list box, click down add selection, ctrl+click set selection. (This is the opposite of the default) "/>
			</value>
		</enum>
		<enum name="eWidgetComboBoxCmd">
			<comments desc="Combo box widget notify messages. "/>
			<value name="eWidgetComboBoxCmd_SelectionChanged" value="0 ">
				<comments desc="The selection changed. "/>
			</value>
			<value name="eWidgetComboBoxCmd_Validated" value="1 ">
				<comments desc="The edit box has been validated. "/>
			</value>
			<value name="eWidgetComboBoxCmd_Modified" value="2 ">
				<comments desc="The edit box has been modified. "/>
			</value>
			<value name="eWidgetComboBoxCmd_DropShown" value="3 ">
				<comments desc="The drop is going to be shown. "/>
			</value>
			<value name="eWidgetComboBoxCmd_DropHidden" value="4 ">
				<comments desc="The drop is going to be hidden. "/>
			</value>
		</enum>
		<interface name="iWidgetComboBox" uuid1="69E43028-C01D-4CB9-B3BA-E3CD0CD4089E" uuid2="0x69e43028,0xc01d,0x4cb9,0xb3,0xba,0xe3,0xcd,0x0c,0xd4,0x08,0x9e">
			<comments desc="Combo box widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setNumLines"
				name="SetNumLines"
				num_parameters="1"
				property="set"
				property_name2="numLines"
				property_name="num_lines">
				<comments desc="Set the number of lines dropped. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNum"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumLines"
				name="GetNumLines"
				num_parameters="0"
				property="get"
				property_name2="numLines"
				property_name="num_lines">
				<comments desc="Get the number of lines dropped. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDroppedWidget"
				name="SetDroppedWidget"
				num_parameters="1"
				property="set"
				property_name2="droppedWidget"
				property_name="dropped_widget">
				<comments desc="Set the &apos;dropped&apos; widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDroppedWidget"
				name="GetDroppedWidget"
				num_parameters="0"
				property="get"
				property_name2="droppedWidget"
				property_name="dropped_widget">
				<comments desc="Get the &apos;dropped&apos; widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetDock.h.idl.xml">
		<enum name="eWidgetDockingManagerMessage">
			<comments desc="Docking manager messages "/>
			<value name="eWidgetDockingManagerMessage_BeginMove" value="niMessageID ( &apos;_&apos; , &apos;W&apos; , &apos;D&apos; , &apos;M&apos; , &apos;b&apos; ) ">
				<comments desc="The widget is beginning to be moved/dragged. "/>
			</value>
			<value name="eWidgetDockingManagerMessage_EndMove" value="niMessageID ( &apos;_&apos; , &apos;W&apos; , &apos;D&apos; , &apos;M&apos; , &apos;e&apos; ) ">
				<comments desc="The widget is finished to be moved/dragged. "/>
			</value>
			<value name="eWidgetDockingManagerMessage_Move" value="niMessageID ( &apos;_&apos; , &apos;W&apos; , &apos;D&apos; , &apos;N&apos; , &apos;m&apos; ) ">
				<comments desc="The widget is moved. ">
					<params text="A is the absolute cursor position. "/>
				</comments>
			</value>
		</enum>
		<interface name="iWidgetDockable" uuid1="74AD7011-E5FB-47D8-8AAD-4B2C65C50D35" uuid2="0x74ad7011,0xe5fb,0x47d8,0x8a,0xad,0x4b,0x2c,0x65,0xc5,0x0d,0x35">
			<comments desc="Dockable widget interface. ">
				<remark text="This is the interface that widgets needs to implement to be dockable. "/>
				<remark text="Dockable widgets needs to call their parent widget&apos;s docking manager to handle their docking. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getDockName"
				name="GetDockName"
				num_parameters="0"
				property="get"
				property_name2="dockName"
				property_name="dock_name">
				<comments desc="Get the dock&apos;s name. ">
					<remark text="The dock name will be used as tab page name when docked. "/>
				</comments>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsDocked"
				name="GetIsDocked"
				num_parameters="0"
				property="get"
				property_name2="isDocked"
				property_name="is_docked">
				<comments desc="Get the docking status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<enum name="eWidgetDockingManagerFlags">
			<comments desc="Docking manager flags. "/>
			<value name="eWidgetDockingManagerFlags_Navigator" value="niBit ( 0 ) ">
				<comments desc="Show a navigator if the Navigator action is triggered. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_HideTabIfOnePage" value="niBit ( 1 ) ">
				<comments desc="Hide the tab name if only one page is in the tab widget. ">
					<remark text="This can be set per tab page if necessary, this is the default value. "/>
				</comments>
			</value>
			<value name="eWidgetDockingManagerFlags_DockLeft" value="niBit ( 2 ) ">
				<comments desc="Docking on the left is allowed. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockRight" value="niBit ( 3 ) ">
				<comments desc="Docking on the right is allowed. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockTop" value="niBit ( 4 ) ">
				<comments desc="Docking on the top is allowed. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockBottom" value="niBit ( 5 ) ">
				<comments desc="Docking on the bottom is allowed. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockHorizontal" value="eWidgetDockingManagerFlags_DockLeft|eWidgetDockingManagerFlags_DockRight ">
				<comments desc="Horizontal docking. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockVertical" value="eWidgetDockingManagerFlags_DockTop|eWidgetDockingManagerFlags_DockBottom ">
				<comments desc="Vertical docking. "/>
			</value>
			<value name="eWidgetDockingManagerFlags_DockAll" value="eWidgetDockingManagerFlags_DockHorizontal|eWidgetDockingManagerFlags_DockVertical ">
				<comments desc="All docking "/>
			</value>
			<value name="eWidgetDockingManagerFlags_Default" value="eWidgetDockingManagerFlags_DockAll|eWidgetDockingManagerFlags_Navigator ">
				<comments desc="Default manager flags. "/>
			</value>
		</enum>
		<interface name="iWidgetDockingManager" uuid1="3ECF2B94-14CF-4E24-B5A9-C2F0BFB8F501" uuid2="0x3ecf2b94,0x14cf,0x4e24,0xb5,0xa9,0xc2,0xf0,0xbf,0xb8,0xf5,0x01">
			<comments desc="Widget docking manager. ">
				<remark text="The docking manager is a normal widget that implements iWidgetSink. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setFlags"
				name="SetFlags"
				num_parameters="1"
				property="set"
				property_name2="flags"
				property_name="flags">
				<comments desc="Set the docking manager&apos;s flags. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFlags"
					type="tWidgetDockingManagerFlags"
					typec="tWidgetDockingManagerFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the docking manager&apos;s flags. "/>
				<return type="tWidgetDockingManagerFlags" typec="tWidgetDockingManagerFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getDockAreaFromPageName"
				name="GetDockAreaFromPageName"
				num_parameters="1"
				property="get"
				property_name2="dockAreaFromPageName"
				property_name="dock_area_from_page_name">
				<comments desc="Get the first dock area that contains a tab page with the specified name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDockAreaHovered"
				name="GetDockAreaHovered"
				num_parameters="1"
				property="get"
				property_name2="dockAreaHovered"
				property_name="dock_area_hovered">
				<comments desc="Get the dock area that is hovered by the specified absolute cursor position. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="avPos"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="dockWidget" name="DockWidget" num_parameters="2">
				<comments desc="Dock the specified widget inside the specified dock area. ">
					<remark text="If anDock == eInvalidHandle the widget will be docked inside the dock area created by eWidgetDockingManagerMessage_CreateHoveredDockArea, if none has been created the method will return eFalse. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anDock"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="undockWidget" name="UndockWidget" num_parameters="1">
				<comments desc="Undock the specified widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumDockedWidgets"
				name="GetNumDockedWidgets"
				num_parameters="0"
				property="get"
				property_name2="numDockedWidgets"
				property_name="num_docked_widgets">
				<comments desc="Get the number of widgets docked. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDockedWidget"
				name="GetDockedWidget"
				num_parameters="1"
				property="get"
				property_name2="dockedWidget"
				property_name="docked_widget">
				<comments desc="Get the docked widget at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumDockAreas"
				name="GetNumDockAreas"
				num_parameters="0"
				property="get"
				property_name2="numDockAreas"
				property_name="num_dock_areas">
				<comments desc="Get the number of dock area. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDockArea"
				name="GetDockArea"
				num_parameters="1"
				property="get"
				property_name2="dockArea"
				property_name="dock_area">
				<comments desc="Get the dock area at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setDockAreaTabContextMenu"
				name="SetDockAreaTabContextMenu"
				num_parameters="1"
				property="set"
				property_name2="dockAreaTabContextMenu"
				property_name="dock_area_tab_context_menu">
				<comments desc="Set the context menu of the dock areas tabs. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apMenu"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDockAreaTabContextMenu"
				name="GetDockAreaTabContextMenu"
				num_parameters="0"
				property="get"
				property_name2="dockAreaTabContextMenu"
				property_name="dock_area_tab_context_menu">
				<comments desc="Get the context menu of the dock areas tabs. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addDockArea" name="AddDockArea" num_parameters="4">
				<comments desc="Add a new empty dock area. " return="The index of the new dock area. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="anParent"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aPos"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aRect"
					type="sRectf"
					typec="sRectf"
					typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="abLocal"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="clearDockAreas" name="ClearDockAreas" num_parameters="0">
				<comments desc="Remove all dock areas. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="cleanDockAreas" name="CleanDockAreas" num_parameters="0">
				<comments desc="Clean all invalid/empty dock areas. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetEditBox.h.idl.xml">
		<enum name="eWidgetEditBoxStyle">
			<comments desc="Simple edit box styles. "/>
			<value name="eWidgetEditBoxStyle_MultiLine" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Multi-line edit box. "/>
			</value>
			<value name="eWidgetEditBoxStyle_ReadOnly" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Read-only edit box. "/>
			</value>
			<value name="eWidgetEditBoxStyle_AutoScroll" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="Auto scroll edit box. Scrolling made in function of the cursor&apos;s position. "/>
			</value>
			<value name="eWidgetEditBoxStyle_PasteValidate" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="Validate on paste. "/>
			</value>
			<value name="eWidgetEditBoxStyle_NoCursor" value="niBit ( eWidgetStyle_MaxBit+5 ) ">
				<comments desc="Dont draw the cursor. "/>
			</value>
			<value name="eWidgetEditBoxStyle_NoSelect" value="niBit ( eWidgetStyle_MaxBit+6 ) ">
				<comments desc="Dont allow selection. ">
					<remark text="The clipboard is also disabled in this case. "/>
				</comments>
			</value>
			<value name="eWidgetEditBoxStyle_DontLoseSelection" value="niBit ( eWidgetStyle_MaxBit+7 ) ">
				<comments desc="Dont clear selection when lost focus. "/>
			</value>
			<value name="eWidgetEditBoxStyle_ValidateOnLostFocus" value="niBit ( eWidgetStyle_MaxBit+8 ) ">
				<comments desc="Validate when lost focus "/>
			</value>
			<value name="eWidgetEditBoxStyle_SelectAllOnSetFocus" value="niBit ( eWidgetStyle_MaxBit+9 ) ">
				<comments desc="Select all when gaining focus "/>
			</value>
			<value name="eWidgetEditBoxStyle_CanInsertTabs" value="niBit ( eWidgetStyle_MaxBit+10 ) ">
				<comments desc="Can insert tabs, but capture the MoveFocus message. "/>
			</value>
		</enum>
		<enum name="eWidgetEditBoxCmd">
			<comments desc="Simple edit box notification messages. "/>
			<value name="eWidgetEditBoxCmd_Validated" value="0 ">
				<comments desc="Sent when the edit box has been validated. "/>
			</value>
			<value name="eWidgetEditBoxCmd_Modified" value="1 ">
				<comments desc="Sent when the edit box&apos;s text has been modified. "/>
			</value>
			<value name="eWidgetEditBoxCmd_LostFocus" value="2 ">
				<comments desc="Sent when the edit box has lost focus. "/>
			</value>
		</enum>
		<interface name="iWidgetEditBox" uuid1="E1F70622-8A53-4F98-AB3C-D8E99036A5AB" uuid2="0xe1f70622,0x8a53,0x4f98,0xab,0x3c,0xd8,0xe9,0x90,0x36,0xa5,0xab">
			<comments desc="Simple editbox widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="addText" name="AddText" num_parameters="1">
				<comments desc="Add the specified text at the end of the edit box. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setReplaceChar"
				name="SetReplaceChar"
				num_parameters="1"
				property="set"
				property_name2="replaceChar"
				property_name="replace_char">
				<comments desc="Set the replacement character for all text displayed. ">
					<remark text="0 will disable the feature "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getReplaceChar"
				name="GetReplaceChar"
				num_parameters="0"
				property="get"
				property_name2="replaceChar"
				property_name="replace_char">
				<comments desc="Get the replacement character for all text displayed. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="moveCursorHome" name="MoveCursorHome" num_parameters="1">
				<comments desc="Move the cursor to the begining of the line or the text. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abLine"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="moveCursorEnd" name="MoveCursorEnd" num_parameters="1">
				<comments desc="Move the cursor at the end of the line or the text. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abLine"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="moveCursor" name="MoveCursor" num_parameters="2">
				<comments desc="Move the cursor to the specified position (line,column) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="pos"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abForceLogicalCol"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="moveCursorLineDelta" name="MoveCursorLineDelta" num_parameters="1">
				<comments desc="Move the current cursor line. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="line"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="moveCursorColumnDelta" name="MoveCursorColumnDelta" num_parameters="1">
				<comments desc="Move the current cursor column. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="line"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getCursorPosition"
				name="GetCursorPosition"
				num_parameters="0"
				property="get"
				property_name2="cursorPosition"
				property_name="cursor_position">
				<comments desc="Get the cursor&apos;s position. ">
					<remark text="Vec2(line,column) "/>
				</comments>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
			</method>
			<method
				const="yes"
				java_name="getCursorLine"
				name="GetCursorLine"
				num_parameters="0"
				property="get"
				property_name2="cursorLine"
				property_name="cursor_line">
				<comments desc="Get the cursor&apos;s current line. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCursorColumn"
				name="GetCursorColumn"
				num_parameters="0"
				property="get"
				property_name2="cursorColumn"
				property_name="cursor_column">
				<comments desc="Get the cursor&apos;s current column. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="autoScroll" name="AutoScroll" num_parameters="0">
				<comments desc="Scroll to the current cursor position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getTextInRange"
				name="GetTextInRange"
				num_parameters="1">
				<comments desc="Get the text in the specified range, Vec4(startLine,startCol,endLine,endCol). "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aRange"
					type="const sVec4i &amp;"
					typec="const sVec4i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAllTextRange"
				name="GetAllTextRange"
				num_parameters="0"
				property="get"
				property_name2="allTextRange"
				property_name="all_text_range">
				<comments desc="Get the text range which includes the whole text. "/>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
			</method>
			<method
				java_name="setSelection"
				name="SetSelection"
				num_parameters="1"
				property="set"
				property_name2="selection"
				property_name="selection">
				<comments desc="Set the selection to the specified range, Vec4(startLine,startCol,endLine,endCol) "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aSelection"
					type="const sVec4i &amp;"
					typec="const sVec4i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSelection"
				name="GetSelection"
				num_parameters="0"
				property="get"
				property_name2="selection"
				property_name="selection">
				<comments desc="Get the current selection range, Vec4(startLine,startCol,endLine,endCol). "/>
				<return type="sVec4i" typec="sVec4i" typei="ni::eType_Vec4i"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetForm.h.idl.xml">
		<enum name="eWidgetFormStyle">
			<comments desc="Widget form flags. "/>
			<value name="eWidgetFormStyle_Dock" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Allow the form to dock by a parent docking manager. "/>
			</value>
			<value name="eWidgetFormStyle_Move" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Allow the form to be moved. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeTopLeftCorner" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="The form can be resized using the top left corner. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeTopRightCorner" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="The form can be resized using the top right corner. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeBottomLeftCorner" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="The form can be resized using the bottom left corner. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeBottomRightCorner" value="niBit ( eWidgetStyle_MaxBit+5 ) ">
				<comments desc="The form can be resized using the bottom right corner. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeAnyCorner" value="eWidgetFormStyle_ResizeTopLeftCorner|eWidgetFormStyle_ResizeTopRightCorner|eWidgetFormStyle_ResizeBottomLeftCorner|eWidgetFormStyle_ResizeBottomRightCorner ">
				<comments desc="The form can be resized from any corner. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeLeftEdge" value="niBit ( eWidgetStyle_MaxBit+6 ) ">
				<comments desc="The form can be resized using the left edge. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeRightEdge" value="niBit ( eWidgetStyle_MaxBit+7 ) ">
				<comments desc="The form can be resized using the right edge. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeTopEdge" value="niBit ( eWidgetStyle_MaxBit+8 ) ">
				<comments desc="The form can be resized using the top edge. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeBottomEdge" value="niBit ( eWidgetStyle_MaxBit+9 ) ">
				<comments desc="The form can be resized using the bottom edge. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeAnyEdge" value="eWidgetFormStyle_ResizeLeftEdge|eWidgetFormStyle_ResizeRightEdge|eWidgetFormStyle_ResizeTopEdge|eWidgetFormStyle_ResizeBottomEdge ">
				<comments desc="The form can be resized from any edge. "/>
			</value>
			<value name="eWidgetFormStyle_ResizeAny" value="eWidgetFormStyle_ResizeAnyCorner|eWidgetFormStyle_ResizeAnyEdge ">
				<comments desc="The form can be resized using any of the edges and corners. "/>
			</value>
			<value name="eWidgetFormStyle_CloseButton" value="niBit ( eWidgetStyle_MaxBit+10 ) ">
				<comments desc="The form has a close button. (ID_Close) ">
					<remark text="The default handler will destroy the form. "/>
				</comments>
			</value>
			<value name="eWidgetFormStyle_FormManagerButtons" value="niBit ( eWidgetStyle_MaxBit+11 ) ">
				<comments desc="The form has the form manager buttons, these are the minimize, maximize and restore buttons. (ID_Minimize, ID_Maximize, ID_Restore) ">
					<remark text="The default handler will call the parent form manager with the command corresponding to the pressed button. "/>
				</comments>
			</value>
			<value name="eWidgetFormStyle_DockNoInputModifier" value="niBit ( eWidgetStyle_MaxBit+12 ) ">
				<comments desc="The docking overlays are always displayed when moving. The default behavior is that the &apos;Control&apos; input modifier needs to be pressed while moving the form to display the docking overlays. "/>
			</value>
			<value name="eWidgetFormStyle_Default" value="eWidgetFormStyle_Dock|eWidgetFormStyle_ResizeAny|eWidgetFormStyle_Move ">
				<comments desc="Default form flags. "/>
			</value>
			<value name="eWidgetFormStyle_DefaultButtons" value="eWidgetFormStyle_Dock|eWidgetFormStyle_ResizeAny|eWidgetFormStyle_Move|eWidgetFormStyle_CloseButton|eWidgetFormStyle_FormManagerButtons ">
				<comments desc="Default form flags with close button. "/>
			</value>
			<value name="eWidgetFormStyle_DefaultManagerButtons" value="eWidgetFormStyle_Dock|eWidgetFormStyle_ResizeAny|eWidgetFormStyle_Move ">
				<comments desc="Default form flags with close and form manager buttons. "/>
			</value>
		</enum>
		<interface name="iWidgetForm" uuid1="3B96EE80-4AE2-4AED-851C-7FBFD5FD3AFB" uuid2="0x3b96ee80,0x4ae2,0x4aed,0x85,0x1c,0x7f,0xbf,0xd5,0xfd,0x3a,0xfb">
			<comments desc="Form widget interface. ">
				<remark text="Form widgets implements iWidgetDockable. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setTitle"
				name="SetTitle"
				num_parameters="1"
				property="set"
				property_name2="title"
				property_name="title">
				<comments desc="Set the form&apos;s title. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTitle"
				name="GetTitle"
				num_parameters="0"
				property="get"
				property_name2="title"
				property_name="title">
				<comments desc="Get the form&apos;s title. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setResizeBorderArea"
				name="SetResizeBorderArea"
				num_parameters="1"
				property="set"
				property_name2="resizeBorderArea"
				property_name="resize_border_area">
				<comments desc="Set the size/area of the resize border. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getResizeBorderArea"
				name="GetResizeBorderArea"
				num_parameters="0"
				property="get"
				property_name2="resizeBorderArea"
				property_name="resize_border_area">
				<comments desc="Get the size/area of the resize border. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getNumTitleWidgets"
				name="GetNumTitleWidgets"
				num_parameters="0"
				property="get"
				property_name2="numTitleWidgets"
				property_name="num_title_widgets">
				<comments desc="Get the number of widgets in the title bar. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTitleWidget"
				name="GetTitleWidget"
				num_parameters="1"
				property="get"
				property_name2="titleWidget"
				property_name="title_widget">
				<comments desc="Get the title bar widget at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTitleWidgetIndex"
				name="GetTitleWidgetIndex"
				num_parameters="1"
				property="get"
				property_name2="titleWidgetIndex"
				property_name="title_widget_index">
				<comments desc="Get the index of the specified title bar widget. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTitleWidgetFromID"
				name="GetTitleWidgetFromID"
				num_parameters="1"
				property="get"
				property_name2="titleWidgetFromID"
				property_name="title_widget_from_id">
				<comments desc="Get the title bar widget with the specified ID. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addTitleWidget" name="AddTitleWidget" num_parameters="2">
				<comments desc="Add a title bar widget. ">
					<remark text="The widget&apos;s parent is always set to the form&apos;s &apos;title dock area&apos;. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afWidth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setFormFrameFlags"
				name="SetFormFrameFlags"
				num_parameters="1"
				property="set"
				property_name2="formFrameFlags"
				property_name="form_frame_flags">
				<comments desc="Set the border frame flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tRectFrameFlags"
					typec="tRectFrameFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFormFrameFlags"
				name="GetFormFrameFlags"
				num_parameters="0"
				property="get"
				property_name2="formFrameFlags"
				property_name="form_frame_flags">
				<comments desc="Get the form frame flags. "/>
				<return type="tRectFrameFlags" typec="tRectFrameFlags" typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetGroup.h.idl.xml">
		<enum name="eWidgetGroupStyle">
			<comments desc="Group styles. "/>
			<value name="eWidgetGroupStyle_Fold" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Toggle the folded state when double clicking on the title. "/>
			</value>
		</enum>
		<interface name="iWidgetGroup" uuid1="EE88A289-FBC6-4741-A20E-E500E51D7E50" uuid2="0xee88a289,0xfbc6,0x4741,0xa2,0x0e,0xe5,0x00,0xe5,0x1d,0x7e,0x50">
			<comments desc="Group widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setFolded"
				name="SetFolded"
				num_parameters="1"
				property="set"
				property_name2="folded"
				property_name="folded">
				<comments desc="Set whether the group is folded. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abFolded"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFolded"
				name="GetFolded"
				num_parameters="0"
				property="get"
				property_name2="folded"
				property_name="folded">
				<comments desc="Get whether the group is folded. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetLabel.h.idl.xml">
		<enum name="eWidgetLabelStyle">
			<comments desc="Label widget style. "/>
			<value name="eWidgetLabelStyle_TransparentBackground" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc=""/>
			</value>
			<value name="eWidgetLabelStyle_DWORD" value="0xFFFFFFFF">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iWidgetLabel" uuid1="A407259F-7FA3-4EAC-9BF0-582C5CB34E76" uuid2="0xa407259f,0x7fa3,0x4eac,0x9b,0xf0,0x58,0x2c,0x5c,0xb3,0x4e,0x76">
			<comments desc="Label widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setFontFormatFlags"
				name="SetFontFormatFlags"
				num_parameters="1"
				property="set"
				property_name2="fontFormatFlags"
				property_name="font_format_flags">
				<comments desc="Set the label&apos;s font format flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFlags"
					type="tFontFormatFlags"
					typec="tFontFormatFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFontFormatFlags"
				name="GetFontFormatFlags"
				num_parameters="0"
				property="get"
				property_name2="fontFormatFlags"
				property_name="font_format_flags">
				<comments desc="Get the label&apos;s font format flags. "/>
				<return type="tFontFormatFlags" typec="tFontFormatFlags" typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetListBox.h.idl.xml">
		<enum name="eWidgetListBoxCmd">
			<comments desc="Listbox notification messages "/>
			<value name="eWidgetListBoxCmd_SelectionChanged" value="0 ">
				<comments desc="Sent when the selection has changed "/>
			</value>
		</enum>
		<enum name="eWidgetListBoxStyle">
			<comments desc="Listbox style "/>
			<value name="eWidgetListBoxStyle_HasHeader" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Has header. "/>
			</value>
			<value name="eWidgetListBoxStyle_HeaderSort" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Clicking the Header will sort the items Ascendant/Descendant. "/>
			</value>
			<value name="eWidgetListBoxStyle_Multiselect" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Allow multiple selection. "/>
			</value>
			<value name="eWidgetListBoxStyle_SelectOnMove" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="Select when mouse moves. "/>
			</value>
			<value name="eWidgetListBoxStyle_ClickAddSelection" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="Click down add selection, Ctrl+Click set selection. (This is the opposite of the default) "/>
			</value>
		</enum>
		<interface name="iWidgetListBox" uuid1="72906A6E-E5D6-4A1C-B0D9-AC687986BFF6" uuid2="0x72906a6e,0xe5d6,0x4a1c,0xb0,0xd9,0xac,0x68,0x79,0x86,0xbf,0xf6">
			<comments desc="Listbox widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="addColumn" name="AddColumn" num_parameters="2">
				<comments desc="Add a column with the specified name and size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="removeColumn" name="RemoveColumn" num_parameters="1">
				<comments desc="Remove the specified columns. ">
					<remark text="The listbox must have at least one column, so deleting the last column will always fail. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumColumns"
				name="GetNumColumns"
				num_parameters="0"
				property="get"
				property_name2="numColumns"
				property_name="num_columns">
				<comments desc="Get the number of columns in the list box. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setColumnName"
				name="SetColumnName"
				num_parameters="2"
				property="set"
				property_name2="columnName"
				property_name="column_name">
				<comments desc="Set the name/header of the column. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getColumnName"
				name="GetColumnName"
				num_parameters="1"
				property="get"
				property_name2="columnName"
				property_name="column_name">
				<comments desc="Get the name/header of the column. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setColumnWidth"
				name="SetColumnWidth"
				num_parameters="2"
				property="set"
				property_name2="columnWidth"
				property_name="column_width">
				<comments desc="Set the width of the specified column. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getColumnWidth"
				name="GetColumnWidth"
				num_parameters="1"
				property="get"
				property_name2="columnWidth"
				property_name="column_width">
				<comments desc="Get the width of the specified column. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setColumn" name="SetColumn" num_parameters="3">
				<comments desc="Set a column name and width. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumItems"
				name="GetNumItems"
				num_parameters="0"
				property="get"
				property_name2="numItems"
				property_name="num_items">
				<comments desc="Get the number of items in the listbox. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="clearItems" name="ClearItems" num_parameters="0">
				<comments desc="Remove all items in the list box. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="addItem" name="AddItem" num_parameters="1">
				<comments desc="Add an item. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeItem" name="RemoveItem" num_parameters="1">
				<comments desc="Remove an item. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setItemText" name="SetItemText" num_parameters="3">
				<comments desc="Set the text of an item element. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getItemText"
				name="GetItemText"
				num_parameters="2">
				<comments desc="Get the text of an item element. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setItemWidget" name="SetItemWidget" num_parameters="3">
				<comments desc="Set the widget of an item element. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getItemWidget"
				name="GetItemWidget"
				num_parameters="2">
				<comments desc="Get the widget of an item element. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setItemIcon"
				name="SetItemIcon"
				num_parameters="2"
				property="set"
				property_name2="itemIcon"
				property_name="item_icon">
				<comments desc="Set the icon of an item. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apIcon"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getItemIcon"
				name="GetItemIcon"
				num_parameters="1"
				property="get"
				property_name2="itemIcon"
				property_name="item_icon">
				<comments desc="Get the icon of an item. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setItemData"
				name="SetItemData"
				num_parameters="2"
				property="set"
				property_name2="itemData"
				property_name="item_data">
				<comments desc="Set the data of an item. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apData"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getItemData"
				name="GetItemData"
				num_parameters="1"
				property="get"
				property_name2="itemData"
				property_name="item_data">
				<comments desc="Get the data of an item. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSortKey"
				name="SetSortKey"
				num_parameters="1"
				property="set"
				property_name2="sortKey"
				property_name="sort_key">
				<comments desc="Set the sorting key column. " return="If the key index is invalid sorting is disabled, and false is returned. ">
					<params text="anKeyColumn is the column to use as key for sorting. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anKeyColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSortKey"
				name="GetSortKey"
				num_parameters="0"
				property="get"
				property_name2="sortKey"
				property_name="sort_key">
				<comments desc="Get the sorting key column. " return="The current sort key column index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSortAscendant"
				name="SetSortAscendant"
				num_parameters="1"
				property="set"
				property_name2="sortAscendant"
				property_name="sort_ascendant">
				<comments desc="Set whether to use ascendant or descendant sorting. ">
					<params text="abAscendant decide the sorting Mode. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abAscendant"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getSortAscendant"
				name="GetSortAscendant"
				num_parameters="0"
				property="get"
				property_name2="sortAscendant"
				property_name="sort_ascendant">
				<comments desc="Get whether to use ascendant or descendant sorting. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getItemFromText"
				name="GetItemFromText"
				num_parameters="2">
				<comments desc="Get the index of the first item that has the specified text in the specified column. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearSelection" name="ClearSelection" num_parameters="0">
				<comments desc="Clear the selection. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="addSelection" name="AddSelection" num_parameters="1">
				<comments desc="Add a selection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="removeSelection" name="RemoveSelection" num_parameters="1">
				<comments desc="Remove a selection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumSelections"
				name="GetNumSelections"
				num_parameters="0"
				property="get"
				property_name2="numSelections"
				property_name="num_selections">
				<comments desc="Get the number of selections. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSelection"
				name="GetSelection"
				num_parameters="1"
				property="get"
				property_name2="selection"
				property_name="selection">
				<comments desc="Get the active selection at the specified index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSelected"
				name="SetSelected"
				num_parameters="1"
				property="set"
				property_name2="selected"
				property_name="selected">
				<comments desc="Set all selections to the selection specified. ">
					<remark text="This will set one active selection. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anSelection"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSelected"
				name="GetSelected"
				num_parameters="0"
				property="get"
				property_name2="selected"
				property_name="selected">
				<comments desc="Get the first selection. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsItemSelected"
				name="GetIsItemSelected"
				num_parameters="1"
				property="get"
				property_name2="isItemSelected"
				property_name="is_item_selected">
				<comments desc="Check if the specified item is selected. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="addSelectedItem" name="AddSelectedItem" num_parameters="2">
				<comments desc="Get the first item with the selected text in the specified column and add it to the selection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSelectedItemText"
				name="GetSelectedItemText"
				num_parameters="2">
				<comments desc="Get the text in the column of the selection at the specified index. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSelectedItemWidget"
				name="GetSelectedItemWidget"
				num_parameters="2">
				<comments desc="Get the widget in the column of the selection at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSelectedItem"
				name="SetSelectedItem"
				num_parameters="2"
				property="set"
				property_name2="selectedItem"
				property_name="selected_item">
				<comments desc="Get the first item with the selected text in the specified column and set it as the selection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSelectedItem"
				name="GetSelectedItem"
				num_parameters="1"
				property="get"
				property_name2="selectedItem"
				property_name="selected_item">
				<comments desc="Get the text in the specified column of the first selection. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setItemHeight"
				name="SetItemHeight"
				num_parameters="1"
				property="set"
				property_name2="itemHeight"
				property_name="item_height">
				<comments desc="Set the height of an item. ">
					<remark text="This is meant to be used to define the maximum size of controls embedded in the listbox. "/>
					<remark text="The height will always be &gt;= than the font height no matter what this value is. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afHeight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getItemHeight"
				name="GetItemHeight"
				num_parameters="0"
				property="get"
				property_name2="itemHeight"
				property_name="item_height">
				<comments desc="Get the height of an item. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="autoScroll" name="AutoScroll" num_parameters="0">
				<comments desc="Auto scroll to the selection or last item if no item is selected. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="setItemTextColor" name="SetItemTextColor" num_parameters="3">
				<comments desc="Set the color of the text of the specified column/item. Set anColumn to eInvalidHandle to set all the columns at once. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anTextColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getItemTextColor"
				name="GetItemTextColor"
				num_parameters="2">
				<comments desc="Set the color of the text of the specified column/item. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="anColumn"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anItem"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setMaxNumItems"
				name="SetMaxNumItems"
				num_parameters="1"
				property="set"
				property_name2="maxNumItems"
				property_name="max_num_items">
				<comments desc="Set the maximum number of items. ">
					<remark text="When the maximum number of items the items at the top of the list are removed, this is meant to be used for a log window or similar. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMaxItems"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMaxNumItems"
				name="GetMaxNumItems"
				num_parameters="0"
				property="get"
				property_name2="maxNumItems"
				property_name="max_num_items">
				<comments desc="Get the maximum number of items. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetMenu.h.idl.xml">
		<enum name="eWidgetMenuItemFlags">
			<comments desc="Menu item flags. "/>
			<value name="eWidgetMenuItemFlags_None" value="0 ">
				<comments desc="No flags. "/>
			</value>
			<value name="eWidgetMenuItemFlags_SubMenu" value="niBit ( 1 ) ">
				<comments desc="The item will open a submenu. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Separator" value="niBit ( 2 ) ">
				<comments desc="The item is a separator. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Check" value="niBit ( 3 ) ">
				<comments desc="The item is a check. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Group" value="niBit ( 4 ) ">
				<comments desc="The item is in a group. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Dummy" value="niBit ( 5 ) ">
				<comments desc="The item is a dummy, aka it isnt clickable. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Title" value="niBit ( 6 ) ">
				<comments desc="The item is a title, will be drawn with a different background color. "/>
			</value>
			<value name="eWidgetMenuItemFlags_Disabled" value="niBit ( 7 ) ">
				<comments desc="The item is disabled, text will be drawn in a different color. "/>
			</value>
			<value name="eWidgetMenuItemFlags_SortAdd" value="niBit ( 8 ) ">
				<comments desc="Sort when adding the item. "/>
			</value>
		</enum>
		<enum name="eWidgetMenuCmd">
			<comments desc="Menu notify message ">
				<remark text="Sent through eUIMessage_Command to the parent widget, extra1 contains the iWidgetMenuItem of the item concerned. "/>
				<remark text="Sub menus are considered part of the parent menu, they will send messages as if they were the parent menu. "/>
			</comments>
			<value name="eWidgetMenuCmd_Checked" value="0 ">
				<comments desc="A check menu item has been checked. ">
					<params text="A: iWidgetMenuItem "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_UnChecked" value="1 ">
				<comments desc="A check menu item has been unchecked. ">
					<params text="A: iWidgetMenuItem "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_GroupChanged" value="2 ">
				<comments desc="A group menu item has been changed. ">
					<params text="A: iWidgetMenuItem "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_Clicked" value="3 ">
				<comments desc="A menu item has been clicked. ">
					<params text="A: iWidgetMenuItem "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_Opened" value="4 ">
				<comments desc="Menu has just been opened. ">
					<params text="A: iWidgetMenu opened "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_Closed" value="5 ">
				<comments desc="Menu has just been closed. ">
					<params text="A: iWidgetMenu closed "/>
				</comments>
			</value>
			<value name="eWidgetMenuCmd_FocusedItem" value="6 ">
				<comments desc="The menu item focused has changed. ">
					<params text="A: newly selected iWidgetMenuItem "/>
					<params text="B: previously selected iWidgetMenuItem if any "/>
				</comments>
			</value>
		</enum>
		<enum name="eWidgetMenuStyle">
			<comments desc="Menu style. ">
				<remark text="The menu style is used only by the parent menu, sub menus will ignore these flags. "/>
			</comments>
			<value name="eWidgetMenuStyle_NoCloseOnGroupChange" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Dont close the menu on group change. "/>
			</value>
			<value name="eWidgetMenuStyle_NoCloseOnCheckChange" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Dont close the menu on check change. "/>
			</value>
			<value name="eWidgetMenuStyle_NoCloseOnItemClicked" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Dont close the menu on item clicked. "/>
			</value>
			<value name="eWidgetMenuStyle_NoCloseOnNCClick" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="Dont close the menu when clicking outside of the client area. "/>
			</value>
			<value name="eWidgetMenuStyle_NoClose" value="eWidgetMenuStyle_NoCloseOnGroupChange|eWidgetMenuStyle_NoCloseOnCheckChange|eWidgetMenuStyle_NoCloseOnItemClicked|eWidgetMenuStyle_NoCloseOnNCClick ">
				<comments desc="Dont close the menu automatically "/>
			</value>
			<value name="eWidgetMenuStyle_NoCloseOnGroupOrCheckChange" value="eWidgetMenuStyle_NoCloseOnGroupChange|eWidgetMenuStyle_NoCloseOnCheckChange ">
				<comments desc="Dont close the menu on group or check change. "/>
			</value>
		</enum>
		<interface name="iWidgetMenuItem" uuid1="5C063F02-4C0E-4828-9D0A-ECCAC5F392B0" uuid2="0x5c063f02,0x4c0e,0x4828,0x9d,0x0a,0xec,0xca,0xc5,0xf3,0x92,0xb0">
			<comments desc="Menu item interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getMenu"
				name="GetMenu"
				num_parameters="0"
				property="get"
				property_name2="menu"
				property_name="menu">
				<comments desc="Get the item&apos;s menu. "/>
				<return type="iWidgetMenu *" typec="iWidgetMenu*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setName"
				name="SetName"
				num_parameters="1"
				property="set"
				property_name2="name"
				property_name="name">
				<comments desc="Set the item&apos;s name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the item&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setID"
				name="SetID"
				num_parameters="1"
				property="set"
				property_name2="id"
				property_name="id">
				<comments desc="Set the item&apos;s ID. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getID"
				name="GetID"
				num_parameters="0"
				property="get"
				property_name2="id"
				property_name="id">
				<comments desc="Get the item&apos;s ID. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFlags"
				name="SetFlags"
				num_parameters="1"
				property="set"
				property_name2="flags"
				property_name="flags">
				<comments desc="Set the item&apos;s flags. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tWidgetMenuItemFlags"
					typec="tWidgetMenuItemFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the item&apos;s flags. "/>
				<return type="tWidgetMenuItemFlags" typec="tWidgetMenuItemFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setIcon"
				name="SetIcon"
				num_parameters="1"
				property="set"
				property_name2="icon"
				property_name="icon">
				<comments desc="Set the item&apos;s icon "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIcon"
				name="GetIcon"
				num_parameters="0"
				property="get"
				property_name2="icon"
				property_name="icon">
				<comments desc="Get the item&apos;s icon "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSubmenu"
				name="SetSubmenu"
				num_parameters="1"
				property="set"
				property_name2="submenu"
				property_name="submenu">
				<comments desc="Set the item&apos;s submenu ID. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSubmenu"
				name="GetSubmenu"
				num_parameters="0"
				property="get"
				property_name2="submenu"
				property_name="submenu">
				<comments desc="Get the item&apos;s submenu ID. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSelected"
				name="SetSelected"
				num_parameters="1"
				property="set"
				property_name2="selected"
				property_name="selected">
				<comments desc="Set the item&apos;s selected status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getSelected"
				name="GetSelected"
				num_parameters="0"
				property="get"
				property_name2="selected"
				property_name="selected">
				<comments desc="Get the item&apos;s selected status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setGroupID"
				name="SetGroupID"
				num_parameters="1"
				property="set"
				property_name2="groupID"
				property_name="group_id">
				<comments desc="Set the item&apos;s group id. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGroupID"
				name="GetGroupID"
				num_parameters="0"
				property="get"
				property_name2="groupID"
				property_name="group_id">
				<comments desc="Get the item&apos;s group id. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setKey"
				name="SetKey"
				num_parameters="1"
				property="set"
				property_name2="key"
				property_name="key">
				<comments desc="Set the item&apos;s key shortcut. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="eKey"
					typec="eKey"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getKey"
				name="GetKey"
				num_parameters="0"
				property="get"
				property_name2="key"
				property_name="key">
				<comments desc="Get the item&apos;s key shortcut. "/>
				<return type="eKey" typec="eKey" typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface name="iWidgetMenu" uuid1="1BBB53A4-F078-4D46-87D4-DD86DEAD1B95" uuid2="0x1bbb53a4,0xf078,0x4d46,0x87,0xd4,0xdd,0x86,0xde,0xad,0x1b,0x95">
			<comments desc="Menu interface. ">
				<remark text="The keyboard input for the menu is :&lt;br&gt; Escape : Close the current menu.&lt;br&gt; Home/End : Select the first/last menu item.&lt;br&gt; Up/Down : Select the previous/next menu item.&lt;br&gt; Ctrl/Shit+Up/Down or PgUp/PgDn : Select the next menu item before/after a separator.&lt;br&gt; Left : Close the current sub-menu. Wont close the main menu.&lt;br&gt; Right : Open the current sub-menu.&lt;br&gt; Enter/Space : Select/Click the current menu item.&lt;br&gt; "/>
				<remark text="If the NoCloseOnNCClick style is set the main menu will not close when escape is pressed. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="clearItems" name="ClearItems" num_parameters="0">
				<comments desc="Clear/removes all the items in the menu. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="addItem" name="AddItem" num_parameters="3">
				<comments desc="Add a menu item. " return="The index of the item, or eInvalidHandle if the item can&apos;t be added. ">
					<params text="aaszName is the name and text of the item. It can contain a &amp; that will notify the shortcut key to use. "/>
					<params text="ahspID is the ID of the item. "/>
					<params text="aFlags are the flags of the item. "/>
				</comments>
				<return type="iWidgetMenuItem *" typec="iWidgetMenuItem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tWidgetMenuItemFlags"
					typec="tWidgetMenuItemFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="removeItem" name="RemoveItem" num_parameters="1">
				<comments desc="Remove the item at the specified index. " return="eFalse if the index is invalid, eTrue if the item has been removed. ">
					<remark text="This function will search the item in the sub menus. "/>
					<params text="apItem is the item to remove. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apItem"
					type="iWidgetMenuItem *"
					typec="iWidgetMenuItem*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumItems"
				name="GetNumItems"
				num_parameters="0"
				property="get"
				property_name2="numItems"
				property_name="num_items">
				<comments desc="Get the number of items. ">
					<remark text="This function doesn&apos;t include the sub menus. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getItem"
				name="GetItem"
				num_parameters="1"
				property="get"
				property_name2="item"
				property_name="item">
				<comments desc="Get the item at the specified index. ">
					<remark text="This function doesn&apos;t include the sub menus. "/>
				</comments>
				<return type="iWidgetMenuItem *" typec="iWidgetMenuItem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getItemFromName"
				name="GetItemFromName"
				num_parameters="1"
				property="get"
				property_name2="itemFromName"
				property_name="item_from_name">
				<comments desc="Get the index of the first item with the specified name. ">
					<remark text="This function will search the item in the sub menus. "/>
				</comments>
				<return type="iWidgetMenuItem *" typec="iWidgetMenuItem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getItemFromID"
				name="GetItemFromID"
				num_parameters="1"
				property="get"
				property_name2="itemFromID"
				property_name="item_from_id">
				<comments desc="Get the index of the first item with the specified id. ">
					<remark text="This function will search the item in the sub menus. "/>
				</comments>
				<return type="iWidgetMenuItem *" typec="iWidgetMenuItem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="open" name="Open" num_parameters="0">
				<comments desc="Open the menu. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="close" name="Close" num_parameters="0">
				<comments desc="Close the menu. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="sortItems" name="SortItems" num_parameters="0">
				<comments desc="Sort the items. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMenuWidth"
				name="GetMenuWidth"
				num_parameters="0"
				property="get"
				property_name2="menuWidth"
				property_name="menu_width">
				<comments desc="Get the menu&apos;s width in pixels. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMenuHeight"
				name="GetMenuHeight"
				num_parameters="0"
				property="get"
				property_name2="menuHeight"
				property_name="menu_height">
				<comments desc="Get the menu&apos;s height in pixels. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getItemWidth"
				name="GetItemWidth"
				num_parameters="0"
				property="get"
				property_name2="itemWidth"
				property_name="item_width">
				<comments desc="Get the item&apos;s width in pixels. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getItemHeight"
				name="GetItemHeight"
				num_parameters="0"
				property="get"
				property_name2="itemHeight"
				property_name="item_height">
				<comments desc="Get the item&apos;s height in pixels. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="updateSizes" name="UpdateSizes" num_parameters="0">
				<comments desc="Update the menu&apos;s sizes. ">
					<remark text="If the item list changed since the last call this is done automatically when Open, GetMenuWidth/Height or GetItemWidth/Height is called. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetProgressBar.h.idl.xml">
		<enum name="eWidgetProgressBarStyle">
			<comments desc=""/>
			<value name="eWidgetProgressBarStyle_Vert" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc=""/>
			</value>
			<value name="eWidgetProgressBarStyle_DWORD" value="0xFFFFFFFF">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iWidgetProgressBar" uuid1="05AB2A34-0AD3-4C69-AF6B-D6298B01EB8A" uuid2="0x05ab2a34,0x0ad3,0x4c69,0xaf,0x6b,0xd6,0x29,0x8b,0x01,0xeb,0x8a">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="setRange" name="SetRange" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="afMin"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afMax"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setProgress"
				name="SetProgress"
				num_parameters="1"
				property="set"
				property_name2="progress"
				property_name="progress">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getProgress"
				name="GetProgress"
				num_parameters="0"
				property="get"
				property_name2="progress"
				property_name="progress">
				<comments desc=""/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetPropertyBox.h.idl.xml">
		<interface
			dispatchwrapper="yes"
			min_features="20"
			name="iWidgetPropertyBox"
			uuid1="A0370D2B-9D59-416F-9394-35C0EE08C928"
			uuid2="0xa0370d2b,0x9d59,0x416f,0x93,0x94,0x35,0xc0,0xee,0x08,0xc9,0x28">
			<comments desc="PropertyBox widget interface. ">
				<remark text="To notifications of the datatable&apos;s modifications register a iDataTableSink int the datatable of the property box. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setDataTable"
				min_features="20"
				name="SetDataTable"
				num_parameters="1"
				property="set"
				property_name2="dataTable"
				property_name="data_table">
				<comments desc="Set the property box&apos;s data table. ">
					<remark text="By default an empty data table is created with the property box. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDataTable"
				min_features="20"
				name="GetDataTable"
				num_parameters="0"
				property="get"
				property_name2="dataTable"
				property_name="data_table">
				<comments desc="Get the property box&apos;s data table. ">
					<remark text="By default an empty data table is created with the property box. "/>
				</comments>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetScrollBar.h.idl.xml">
		<enum name="eWidgetScrollBarStyle">
			<comments desc="Scroll bar style "/>
			<value name="eWidgetScrollBarStyle_Slider" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="The scroll bar is a slider. "/>
			</value>
			<value name="eWidgetScrollBarStyle_Horz" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="The scroll bar is horizontal. "/>
			</value>
			<value name="eWidgetScrollBarStyle_Right" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="The slider should be on the right. (On the left by default) ">
					<remark text="This affects only sliders. "/>
				</comments>
			</value>
			<value name="eWidgetScrollBarStyle_Bottom" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="The slider should be on the bottom. (On top by default) ">
					<remark text="This affects only sliders. "/>
				</comments>
			</value>
		</enum>
		<enum name="eWidgetScrollBarCmd">
			<comments desc="Scroll bar commands "/>
			<value name="eWidgetScrollBarCmd_Scrolled" value="0 ">
				<comments desc="The scroll bar has been scrolled. ">
					<params text="A previous scroll position. "/>
					<params text="B true if generated by the mouse wheel, else false. "/>
				</comments>
			</value>
		</enum>
		<interface name="iWidgetScrollBar" uuid1="8DDD8646-8921-4760-8DDC-2E89507399F2" uuid2="0x8ddd8646,0x8921,0x4760,0x8d,0xdc,0x2e,0x89,0x50,0x73,0x99,0xf2">
			<comments desc="Scroll bar widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setScrollRange"
				name="SetScrollRange"
				num_parameters="1"
				property="set"
				property_name2="scrollRange"
				property_name="scroll_range">
				<comments desc="Set the scroll bar range. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avRange"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getScrollRange"
				name="GetScrollRange"
				num_parameters="0"
				property="get"
				property_name2="scrollRange"
				property_name="scroll_range">
				<comments desc="Get the scroll bar range. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setScrollPosition"
				name="SetScrollPosition"
				num_parameters="1"
				property="set"
				property_name2="scrollPosition"
				property_name="scroll_position">
				<comments desc="Set the scroll bar position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afScrollPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScrollPosition"
				name="GetScrollPosition"
				num_parameters="0"
				property="get"
				property_name2="scrollPosition"
				property_name="scroll_position">
				<comments desc="Get the scroll bar position. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setNormalizedScrollPosition"
				name="SetNormalizedScrollPosition"
				num_parameters="1"
				property="set"
				property_name2="normalizedScrollPosition"
				property_name="normalized_scroll_position">
				<comments desc="Set the normalized scroll bar position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afScrollPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getNormalizedScrollPosition"
				name="GetNormalizedScrollPosition"
				num_parameters="0"
				property="get"
				property_name2="normalizedScrollPosition"
				property_name="normalized_scroll_position">
				<comments desc="Get the normalized scroll bar position. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setPageSize"
				name="SetPageSize"
				num_parameters="1"
				property="set"
				property_name2="pageSize"
				property_name="page_size">
				<comments desc="Set the scroll bar page size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afPageSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getPageSize"
				name="GetPageSize"
				num_parameters="0"
				property="get"
				property_name2="pageSize"
				property_name="page_size">
				<comments desc="Get the scroll bar page size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="computeRoundedPosition"
				name="ComputeRoundedPosition"
				num_parameters="1">
				<comments desc="Compute a position rounded by the page size in function of the scroll bar&apos;s flags. ">
					<remark text="This is to be used by slider bars with a set page/step size. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afNewPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetSearchBar.h.idl.xml">
		<enum min_features="20" name="eWidgetSearchBarCmd">
			<comments desc="Search bar widget notify messages. "/>
			<value min_features="20" name="eWidgetSearchBarCmd_SelectionChanged" value="0 ">
				<comments desc="Sent when the selection changed "/>
			</value>
			<value min_features="20" name="eWidgetSearchBarCmd_Begin" value="1 ">
				<comments desc="Sent when the search bar becomes visible "/>
			</value>
			<value min_features="20" name="eWidgetSearchBarCmd_End" value="2 ">
				<comments desc="This is a good time to destroy or hide the search bar "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iSearchContainer"
			uuid1="80858780-8FE7-44C2-B3CD-FEB9F8B5DD86"
			uuid2="0x80858780,0x8fe7,0x44c2,0xb3,0xcd,0xfe,0xb9,0xf8,0xb5,0xdd,0x86">
			<comments desc="Search container "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="addResult"
				min_features="20"
				name="AddResult"
				num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			min_features="20"
			name="iSearchable"
			uuid1="C55FFA63-D700-4D67-B913-9CC9E482287A"
			uuid2="0xc55ffa63,0xd700,0x4d67,0xb9,0x13,0x9c,0xc9,0xe4,0x82,0x28,0x7a">
			<comments desc="Searchable interface, to be searched impl it "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onSelect"
				min_features="20"
				name="OnSelect"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="nIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getCorpus"
				min_features="20"
				name="GetCorpus"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apContainer"
					type="iSearchContainer *"
					typec="iSearchContainer*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iWidgetSearchBar"
			uuid1="E46216F9-1735-4482-8EAD-793591ED7DC2"
			uuid2="0xe46216f9,0x1735,0x4482,0x8e,0xad,0x79,0x35,0x91,0xed,0x7d,0xc2">
			<comments desc="Search bar widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setSearchable"
				min_features="20"
				name="SetSearchable"
				num_parameters="1"
				property="set"
				property_name2="searchable"
				property_name="searchable">
				<comments desc="Set a searchable to be search "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aS"
					type="iSearchable *"
					typec="iSearchable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSearchable"
				min_features="20"
				name="GetSearchable"
				num_parameters="0"
				property="get"
				property_name2="searchable"
				property_name="searchable">
				<comments desc="Get a searchable object. "/>
				<return type="iSearchable *" typec="iSearchable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetSplitter.h.idl.xml">
		<enum name="eWidgetSplitterStyle">
			<comments desc="Splitter widget style. "/>
			<value name="eWidgetSplitterStyle_Horizontal" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="The splitter is horizontal. "/>
			</value>
			<value name="eWidgetSplitterStyle_NoCursorResize" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="The splitter cant be resized with the mouse cursor. "/>
			</value>
			<value name="eWidgetSplitterStyle_Empty" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="The splitter will start empty. ">
					<remark text="By default the splitter is created with one splitter. "/>
				</comments>
			</value>
		</enum>
		<enum name="eWidgetSplitterFoldMode">
			<comments desc="Splitter folding mode. "/>
			<value name="eWidgetSplitterFoldMode_None" value="0 ">
				<comments desc="No folding. "/>
			</value>
			<value name="eWidgetSplitterFoldMode_Auto" value="1 ">
				<comments desc="Fold left/top or right/bottom based on the resizable borders enabled. (default) "/>
			</value>
			<value name="eWidgetSplitterFoldMode_All" value="2 ">
				<comments desc="Fold left/top &amp; right/bottom regardless of the resizable borders. "/>
			</value>
		</enum>
		<interface name="iWidgetSplitter" uuid1="78BC04F6-9B0C-446C-87A2-46BC8BB6FBA1" uuid2="0x78bc04f6,0x9b0c,0x446c,0x87,0xa2,0x46,0xbc,0x8b,0xb6,0xfb,0xa1">
			<comments desc="Splitter widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="addSplitterFront" name="AddSplitterFront" num_parameters="1">
				<comments desc="Add a splitter in the front (top or left). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="addSplitterBack" name="AddSplitterBack" num_parameters="1">
				<comments desc="Add a splitter in the back (bottom or right). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="removeSplitter" name="RemoveSplitter" num_parameters="1">
				<comments desc="Remove the splitter at the specified index. ">
					<remark text="The widget at the bottom (right if horizontal) will be removed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumSplitters"
				name="GetNumSplitters"
				num_parameters="0"
				property="get"
				property_name2="numSplitters"
				property_name="num_splitters">
				<comments desc="Get the number of splitters. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumSplitterWidgets"
				name="GetNumSplitterWidgets"
				num_parameters="0"
				property="get"
				property_name2="numSplitterWidgets"
				property_name="num_splitter_widgets">
				<comments desc="Get the number of splitter&apos;s widgets. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterWidget"
				name="GetSplitterWidget"
				num_parameters="1"
				property="get"
				property_name2="splitterWidget"
				property_name="splitter_widget">
				<comments desc="Get a splitter&apos;s widget. ">
					<remark text="Widgets are numbered from top to bottom, and left to right. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterWidgetIndex"
				name="GetSplitterWidgetIndex"
				num_parameters="1"
				property="get"
				property_name2="splitterWidgetIndex"
				property_name="splitter_widget_index">
				<comments desc="Get a splitter&apos;s widget index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeSplitterWidget" name="RemoveSplitterWidget" num_parameters="1">
				<comments desc="Remove the specified splitter widget. ">
					<remark text="At least one widget will always be available, so the last widget cant be removed. "/>
					<remark text="This will take care of removing the appropriate splitter. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="addSplitterBefore" name="AddSplitterBefore" num_parameters="2">
				<comments desc="Add a splitter before the specified widget (top or left). ">
					<remark text="afPos is relative to the widget used for insertion. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anWidget"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="afPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="addSplitterAfter" name="AddSplitterAfter" num_parameters="2">
				<comments desc="Add a splitter after the specified widget (bottom or right). ">
					<remark text="afPos is relative to the widget used for insertion. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anWidget"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="afPos"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSplitterPosition"
				name="SetSplitterPosition"
				num_parameters="2"
				property="set"
				property_name2="splitterPosition"
				property_name="splitter_position">
				<comments desc="Set the position of the splitter at the given index. ">
					<remark text="The position is in percent, relative to the size of the widget. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aVal"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterPosition"
				name="GetSplitterPosition"
				num_parameters="1"
				property="get"
				property_name2="splitterPosition"
				property_name="splitter_position">
				<comments desc="Get the position of the splitter at the given index ">
					<remark text="The position is in percent, relative to the size of the widget. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSplitterMinPosition"
				name="SetSplitterMinPosition"
				num_parameters="1"
				property="set"
				property_name2="splitterMinPosition"
				property_name="splitter_min_position">
				<comments desc="Set the splitter&apos;s minimum position. ">
					<remark text="The minimum position is the minimum distance from the parent&apos;s borders in pixels. "/>
					<remark text="If the minimum position is &lt; 0 no limit is applied. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterMinPosition"
				name="GetSplitterMinPosition"
				num_parameters="0"
				property="get"
				property_name2="splitterMinPosition"
				property_name="splitter_min_position">
				<comments desc="Get the splitter&apos;s minimum position. ">
					<remark text="The minimum position is the minimum distance from the parent&apos;s borders in pixels. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSplitterSize"
				name="SetSplitterSize"
				num_parameters="1"
				property="set"
				property_name2="splitterSize"
				property_name="splitter_size">
				<comments desc="Set the splitter size. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterSize"
				name="GetSplitterSize"
				num_parameters="0"
				property="get"
				property_name2="splitterSize"
				property_name="splitter_size">
				<comments desc="Get the splitter size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="swapSplitterWidget" name="SwapSplitterWidget" num_parameters="2">
				<comments desc="Swap two splitter widgets. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anA"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anB"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSplitterBorderSize"
				name="SetSplitterBorderSize"
				num_parameters="1"
				property="set"
				property_name2="splitterBorderSize"
				property_name="splitter_border_size">
				<comments desc="Set the splitter&apos;s border size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afSize"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterBorderSize"
				name="GetSplitterBorderSize"
				num_parameters="0"
				property="get"
				property_name2="splitterBorderSize"
				property_name="splitter_border_size">
				<comments desc="Get the splitter&apos;s border size. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setSplitterResizableBorders"
				name="SetSplitterResizableBorders"
				num_parameters="1"
				property="set"
				property_name2="splitterResizableBorders"
				property_name="splitter_resizable_borders">
				<comments desc="Set the splitter&apos;s resizable borders. ">
					<params text="aEdges: edges flags. \see eRectEdges "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aEdges"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterResizableBorders"
				name="GetSplitterResizableBorders"
				num_parameters="0"
				property="get"
				property_name2="splitterResizableBorders"
				property_name="splitter_resizable_borders">
				<comments desc="Get the splitter&apos;s resizable borders. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSplitterParentDockRectMinimumSize"
				name="SetSplitterParentDockRectMinimumSize"
				num_parameters="1"
				property="set"
				property_name2="splitterParentDockRectMinimumSize"
				property_name="splitter_parent_dock_rect_minimum_size">
				<comments desc="Set the minimum size that the parent dock rect can have. ">
					<remark text="This value is used only if a border is resizable, if the min size &gt;= 0 and if the splitter is docked. "/>
					<remark text="By default the value is (20,20) "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avMinSize"
					type="sVec2f"
					typec="sVec2f"
					typei="ni::eType_Vec2f"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterParentDockRectMinimumSize"
				name="GetSplitterParentDockRectMinimumSize"
				num_parameters="0"
				property="get"
				property_name2="splitterParentDockRectMinimumSize"
				property_name="splitter_parent_dock_rect_minimum_size">
				<comments desc="Get the minimum size that the parent dock rect can have. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setSplitterFillerIndex"
				name="SetSplitterFillerIndex"
				num_parameters="1"
				property="set"
				property_name2="splitterFillerIndex"
				property_name="splitter_filler_index">
				<comments desc="Set the index of the filling splitter. ">
					<remark text="The filling splitter correspond to the index of the canvas that will fill the whole splitter&apos;s rectangle, so that it&apos;ll be the only widget visible. This is meant to be used as a special mode to allow &apos;fullscreen&apos; widgets with toggle to a splitted/composite view. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anIndex"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterFillerIndex"
				name="GetSplitterFillerIndex"
				num_parameters="0"
				property="get"
				property_name2="splitterFillerIndex"
				property_name="splitter_filler_index">
				<comments desc="Set the index of the filling splitter. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setSplitterFoldMode"
				name="SetSplitterFoldMode"
				num_parameters="1"
				property="set"
				property_name2="splitterFoldMode"
				property_name="splitter_fold_mode">
				<comments desc="Set the splitter&apos;s fold mode. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFoldMode"
					type="eWidgetSplitterFoldMode"
					typec="eWidgetSplitterFoldMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSplitterFoldMode"
				name="GetSplitterFoldMode"
				num_parameters="0"
				property="get"
				property_name2="splitterFoldMode"
				property_name="splitter_fold_mode">
				<comments desc="Get the splitter&apos;s fold mode. "/>
				<return type="eWidgetSplitterFoldMode" typec="eWidgetSplitterFoldMode" typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetTab.h.idl.xml">
		<enum name="eWidgetTabCmd">
			<comments desc="Tab widget notify message. "/>
			<value name="eWidgetTabCmd_ActivatePage" value="0 ">
				<comments desc="A page has been activated. "/>
			</value>
			<value name="eWidgetTabCmd_AddPage" value="1 ">
				<comments desc="A page has been added. "/>
			</value>
			<value name="eWidgetTabCmd_RemovePage" value="2 ">
				<comments desc="A page has been removed. "/>
			</value>
		</enum>
		<interface name="iWidgetTab" uuid1="D7908465-A722-4BD3-BDE1-27E7C2C95819" uuid2="0xd7908465,0xa722,0x4bd3,0xbd,0xe1,0x27,0xe7,0xc2,0xc9,0x58,0x19">
			<comments desc="Tab widget. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="addPage" name="AddPage" num_parameters="2">
				<comments desc="Add a page. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removePage" name="RemovePage" num_parameters="1">
				<comments desc="Remove a page. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasPage"
				name="HasPage"
				num_parameters="1">
				<comments desc="Check if the specified page is in the tab. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumPages"
				name="GetNumPages"
				num_parameters="0"
				property="get"
				property_name2="numPages"
				property_name="num_pages">
				<comments desc="Get the number of pages. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPage"
				name="GetPage"
				num_parameters="1"
				property="get"
				property_name2="page"
				property_name="page">
				<comments desc="Get the page at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageButton"
				name="GetPageButton"
				num_parameters="1"
				property="get"
				property_name2="pageButton"
				property_name="page_button">
				<comments desc="Get the button associated with the page at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageFromName"
				name="GetPageFromName"
				num_parameters="1"
				property="get"
				property_name2="pageFromName"
				property_name="page_from_name">
				<comments desc="Get the page with the specified name. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPageFromID"
				name="GetPageFromID"
				num_parameters="1"
				property="get"
				property_name2="pageFromID"
				property_name="page_from_id">
				<comments desc="Get the page with the specified ID. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPageName"
				name="SetPageName"
				num_parameters="2"
				property="set"
				property_name2="pageName"
				property_name="page_name">
				<comments desc="Set the name of the specified page. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPageName"
				name="GetPageName"
				num_parameters="1"
				property="get"
				property_name2="pageName"
				property_name="page_name">
				<comments desc="Get the name of the specified page. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPageIndex"
				name="SetPageIndex"
				num_parameters="2"
				property="set"
				property_name2="pageIndex"
				property_name="page_index">
				<comments desc="Set the index of the specified page. ">
					<remark text="Will swap with the page at the specified index. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageIndex"
				name="GetPageIndex"
				num_parameters="1"
				property="get"
				property_name2="pageIndex"
				property_name="page_index">
				<comments desc="Get the index of the specified page. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="movePageLeft" name="MovePageLeft" num_parameters="2">
				<comments desc="Move the specified type to the left. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anLeft"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="movePageRight" name="MovePageRight" num_parameters="2">
				<comments desc="Move the specified type to the right. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCount"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setMinNumPagesToShowTabs"
				name="SetMinNumPagesToShowTabs"
				num_parameters="1"
				property="set"
				property_name2="minNumPagesToShowTabs"
				property_name="min_num_pages_to_show_tabs">
				<comments desc="Set the number of pages necessary to show the tabs. ">
					<remark text="Default is two. If set to &lt;= 1 when any page is added the tabs are displayed, otherwise can be set to 2 for example to show the tab page only if they are at least two pages visible. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMinNumPages"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMinNumPagesToShowTabs"
				name="GetMinNumPagesToShowTabs"
				num_parameters="0"
				property="get"
				property_name2="minNumPagesToShowTabs"
				property_name="min_num_pages_to_show_tabs">
				<comments desc="Get the number of pages necessary to show the tabs. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setActivePage"
				name="SetActivePage"
				num_parameters="1"
				property="set"
				property_name2="activePage"
				property_name="active_page">
				<comments desc="Activate the specified page. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apPage"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActivePage"
				name="GetActivePage"
				num_parameters="0"
				property="get"
				property_name2="activePage"
				property_name="active_page">
				<comments desc="Get the active page. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setActivePageName"
				name="SetActivePageName"
				num_parameters="1"
				property="set"
				property_name2="activePageName"
				property_name="active_page_name">
				<comments desc="Activate the page with the specified name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActivePageName"
				name="GetActivePageName"
				num_parameters="0"
				property="get"
				property_name2="activePageName"
				property_name="active_page_name">
				<comments desc="Get the name of the active page. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setActivePageIndex"
				name="SetActivePageIndex"
				num_parameters="1"
				property="set"
				property_name2="activePageIndex"
				property_name="active_page_index">
				<comments desc="Activate the page with the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getActivePageIndex"
				name="GetActivePageIndex"
				num_parameters="0"
				property="get"
				property_name2="activePageIndex"
				property_name="active_page_index">
				<comments desc="Get the index of the active page. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setActivePageID"
				name="SetActivePageID"
				num_parameters="1"
				property="set"
				property_name2="activePageID"
				property_name="active_page_id">
				<comments desc="Activate the page with the specified id. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActivePageID"
				name="GetActivePageID"
				num_parameters="0"
				property="get"
				property_name2="activePageID"
				property_name="active_page_id">
				<comments desc="Get the id of the active page. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setForceActivated"
				name="SetForceActivated"
				num_parameters="1"
				property="set"
				property_name2="forceActivated"
				property_name="force_activated">
				<comments desc="Set the forced activated state. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abForce"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getForceActivated"
				name="GetForceActivated"
				num_parameters="1"
				property="get"
				property_name2="forceActivated"
				property_name="force_activated">
				<comments desc="Get the forced activated state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abForce"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetText.h.idl.xml">
		<enum min_features="20" name="eWidgetTextStyle">
			<comments desc="Widget text style "/>
			<value min_features="20" name="eWidgetTextStyle_MouseSelect" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Allow text selection with the mouse "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iWidgetText"
			uuid1="4C922F2D-7732-4093-8D68-5C77006FA68E"
			uuid2="0x4c922f2d,0x7732,0x4093,0x8d,0x68,0x5c,0x77,0x00,0x6f,0xa6,0x8e">
			<comments desc="iWidgetText interface ">
				<remark text="Implements the iWidgetText interface. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getTextObject"
				min_features="20"
				name="GetTextObject"
				num_parameters="0"
				property="get"
				property_name2="textObject"
				property_name="text_object">
				<comments desc="Get the text object of the text widget "/>
				<return type="iTextObject *" typec="iTextObject*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetToolbar.h.idl.xml">
		<interface
			min_features="20"
			name="iWidgetToolbarGroup"
			uuid1="F0AD342B-5139-4DEA-988F-1EFA94871659"
			uuid2="0xf0ad342b,0x5139,0x4dea,0x98,0x8f,0x1e,0xfa,0x94,0x87,0x16,0x59">
			<comments desc="Toolbar group widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setWidthFromChildren"
				min_features="20"
				name="SetWidthFromChildren"
				num_parameters="0">
				<comments desc="Set the width of the group from the total with of the children. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setCommandDestination"
				min_features="20"
				name="SetCommandDestination"
				num_parameters="1"
				property="set"
				property_name2="commandDestination"
				property_name="command_destination">
				<comments desc="Set the destination message handler for the commands received by the group. ">
					<remark text="Set to eInvalidHandle to disable. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apMT"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCommandDestination"
				min_features="20"
				name="GetCommandDestination"
				num_parameters="0"
				property="get"
				property_name2="commandDestination"
				property_name="command_destination">
				<comments desc="Get the destination message handler for the commands received by the toolbar. "/>
				<return type="iMessageHandler *" typec="iMessageHandler*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iWidgetToolbar"
			uuid1="8E50495C-6577-4693-8059-8E9BAB98DE8E"
			uuid2="0x8e50495c,0x6577,0x4693,0x80,0x59,0x8e,0x9b,0xab,0x98,0xde,0x8e">
			<comments desc="Toolbar widget interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setHeight"
				min_features="20"
				name="SetHeight"
				num_parameters="1"
				property="set"
				property_name2="height"
				property_name="height">
				<comments desc="Set the toolbar&apos;s height in pixels. ">
					<remark text="Default is 120 pixels. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afHeight"
					type="ni::tF32"
					typec="ni::tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				min_features="20"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the toolbar&apos;s height. "/>
				<return type="ni::tF32" typec="ni::tF32" typei="ni::eType_F32"/>
			</method>
			<method
				java_name="setAutoHide"
				min_features="20"
				name="SetAutoHide"
				num_parameters="1"
				property="set"
				property_name2="autoHide"
				property_name="auto_hide">
				<comments desc="Set whether the toolbar should auto-hide. ">
					<remark text="Default is true. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abAutoHide"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getAutoHide"
				min_features="20"
				name="GetAutoHide"
				num_parameters="0"
				property="get"
				property_name2="autoHide"
				property_name="auto_hide">
				<comments desc="Get whether the toolbar should auto-hide. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setAutoHideBackground"
				min_features="20"
				name="SetAutoHideBackground"
				num_parameters="1"
				property="set"
				property_name2="autoHideBackground"
				property_name="auto_hide_background">
				<comments desc="Set whether the toolbar should draw the bottom background when unfolded in auto-hide mode. ">
					<remark text="Default is false. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abAutoHide"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getAutoHideBackground"
				min_features="20"
				name="GetAutoHideBackground"
				num_parameters="0"
				property="get"
				property_name2="autoHideBackground"
				property_name="auto_hide_background">
				<comments desc="Get whether the toolbar should draw the bottom background when unfolded in auto-hide mode. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setShowPage"
				min_features="20"
				name="SetShowPage"
				num_parameters="1"
				property="set"
				property_name2="showPage"
				property_name="show_page">
				<comments desc="Set whether the toolbar&apos;s active page should be visible. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abShowPage"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getShowPage"
				min_features="20"
				name="GetShowPage"
				num_parameters="0"
				property="get"
				property_name2="showPage"
				property_name="show_page">
				<comments desc="Get whether the toolbar&apos;s active page is visible. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTopBar"
				min_features="20"
				name="GetTopBar"
				num_parameters="0"
				property="get"
				property_name2="topBar"
				property_name="top_bar">
				<comments desc="Get the top bar widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBottomBar"
				min_features="20"
				name="GetBottomBar"
				num_parameters="0"
				property="get"
				property_name2="bottomBar"
				property_name="bottom_bar">
				<comments desc="Get the bottom bar widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setCommandDestination"
				min_features="20"
				name="SetCommandDestination"
				num_parameters="1"
				property="set"
				property_name2="commandDestination"
				property_name="command_destination">
				<comments desc="Set the destination message target for the commands received by the toolbar. ">
					<remark text="Set to eInvalidHandle to disable. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apMH"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCommandDestination"
				min_features="20"
				name="GetCommandDestination"
				num_parameters="0"
				property="get"
				property_name2="commandDestination"
				property_name="command_destination">
				<comments desc="Get the destination message for the commands received by the toolbar. "/>
				<return type="iMessageHandler *" typec="iMessageHandler*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="updateToolbar"
				min_features="20"
				name="UpdateToolbar"
				num_parameters="0">
				<comments desc="Updates the toolbar. ">
					<remark text="Removes all empty or invalid pages, removes all invalid top widgets and recomputes the layout. "/>
					<remark text="Should be called after invalidating any toolbar group. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="hidePopup"
				min_features="20"
				name="HidePopup"
				num_parameters="0">
				<comments desc="Hide the toolbar pop-up. ">
					<remark text="Hides the toolbar pop-up shown in &quot;AutoHide&quot; mode. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumPages"
				min_features="20"
				name="GetNumPages"
				num_parameters="0"
				property="get"
				property_name2="numPages"
				property_name="num_pages">
				<comments desc="Get the number of pages in the toolbar. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageWidget"
				min_features="20"
				name="GetPageWidget"
				num_parameters="1"
				property="get"
				property_name2="pageWidget"
				property_name="page_widget">
				<comments desc="Get the widget of the page at the specified index. "/>
				<return type="ni::iWidget *" typec="ni::iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPageIndex"
				min_features="20"
				name="GetPageIndex"
				num_parameters="1"
				property="get"
				property_name2="pageIndex"
				property_name="page_index">
				<comments desc="Get the index of the page with the specified ID. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspID"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="initPage"
				min_features="20"
				name="InitPage"
				num_parameters="2">
				<comments desc="Initialize/Add a toolbar with the specified ID and name. ">
					<remark text="Empty and invalid pages are removed automatically when UpdateToolbar is called. "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPageName"
				min_features="20"
				name="SetPageName"
				num_parameters="2"
				property="set"
				property_name2="pageName"
				property_name="page_name">
				<comments desc="Set the name/title of the specified page. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPageName"
				min_features="20"
				name="GetPageName"
				num_parameters="1"
				property="get"
				property_name2="pageName"
				property_name="page_name">
				<comments desc="Get the name/title of the specified page. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setPageEnabled"
				min_features="20"
				name="SetPageEnabled"
				num_parameters="2"
				property="set"
				property_name2="pageEnabled"
				property_name="page_enabled">
				<comments desc="Set whether the specifed page is enabled. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPageEnabled"
				min_features="20"
				name="GetPageEnabled"
				num_parameters="1"
				property="get"
				property_name2="pageEnabled"
				property_name="page_enabled">
				<comments desc="Get whether the specifed page is enabled. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setActivePageIndex"
				min_features="20"
				name="SetActivePageIndex"
				num_parameters="1"
				property="set"
				property_name2="activePageIndex"
				property_name="active_page_index">
				<comments desc="Set the active&apos;s page index. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anActivePage"
					type="ni::tU32"
					typec="ni::tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getActivePageIndex"
				min_features="20"
				name="GetActivePageIndex"
				num_parameters="0"
				property="get"
				property_name2="activePageIndex"
				property_name="active_page_index">
				<comments desc="Get the active&apos;s pages index. "/>
				<return type="ni::tU32" typec="ni::tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setActivePageID"
				min_features="20"
				name="SetActivePageID"
				num_parameters="1"
				property="set"
				property_name2="activePageID"
				property_name="active_page_id">
				<comments desc="Set the active&apos;s page ID. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspID"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getActivePageID"
				min_features="20"
				name="GetActivePageID"
				num_parameters="0"
				property="get"
				property_name2="activePageID"
				property_name="active_page_id">
				<comments desc="Get the active&apos;s page ID. "/>
				<return type="ni::iHString *" typec="ni::iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumTopWidgets"
				min_features="20"
				name="GetNumTopWidgets"
				num_parameters="0"
				property="get"
				property_name2="numTopWidgets"
				property_name="num_top_widgets">
				<comments desc="Get the number of widgets in the top bar. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTopWidget"
				min_features="20"
				name="GetTopWidget"
				num_parameters="1"
				property="get"
				property_name2="topWidget"
				property_name="top_widget">
				<comments desc="Get the top bar widget at the specified index. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTopWidgetIndex"
				min_features="20"
				name="GetTopWidgetIndex"
				num_parameters="1"
				property="get"
				property_name2="topWidgetIndex"
				property_name="top_widget_index">
				<comments desc="Get the index of the specified top bar widget. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTopWidgetFromID"
				min_features="20"
				name="GetTopWidgetFromID"
				num_parameters="1"
				property="get"
				property_name2="topWidgetFromID"
				property_name="top_widget_from_id">
				<comments desc="Get the top bar widget with the specified ID. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setTopWidgetCommandDestination"
				min_features="20"
				name="SetTopWidgetCommandDestination"
				num_parameters="2"
				property="set"
				property_name2="topWidgetCommandDestination"
				property_name="top_widget_command_destination">
				<comments desc="Set the command destination of the specified top widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apCmdDest"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTopWidgetCommandDestination"
				min_features="20"
				name="GetTopWidgetCommandDestination"
				num_parameters="1"
				property="get"
				property_name2="topWidgetCommandDestination"
				property_name="top_widget_command_destination">
				<comments desc="Get the command destination of the specified top widget. "/>
				<return type="iMessageHandler *" typec="iMessageHandler*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="addTopWidget"
				min_features="20"
				name="AddTopWidget"
				num_parameters="3">
				<comments desc="Add a top bar widget. ">
					<remark text="Invalid top bar widgets are removed automatically when UpdateToolbar is called. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afWidth"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="apCmdDest"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="addGroup"
				min_features="20"
				name="AddGroup"
				num_parameters="5">
				<comments desc="Add a group in the specified page. If the page doesn&apos;t already exist it is added. ">
					<remark text="Calls UpdateToolbar "/>
				</comments>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspPageID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspPageName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspGroupID"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspGroupName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apCmdDest"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGroup"
				min_features="20"
				name="GetGroup"
				num_parameters="1"
				property="get"
				property_name2="group"
				property_name="group">
				<comments desc="Get the group with the specified ID. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspID"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="removeGroup"
				min_features="20"
				name="RemoveGroup"
				num_parameters="1">
				<comments desc="Remove the specified group. ">
					<remark text="Calls UpdateToolbar "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspID"
					type="ni::iHString *"
					typec="ni::iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/IWidgetTree.h.idl.xml">
		<enum name="eWidgetTreeNodeDropMode">
			<comments desc="Widget tree node drop mode. "/>
			<value name="eWidgetTreeNodeDropMode_On" value="0 ">
				<comments desc="Drop on the node. "/>
			</value>
			<value name="eWidgetTreeNodeDropMode_Below" value="1 ">
				<comments desc="Drop below the node. "/>
			</value>
			<value name="eWidgetTreeNodeDropMode_Above" value="2 ">
				<comments desc="Drop above the node. "/>
			</value>
			<value name="eWidgetTreeNodeDropMode_Invalid" value="3 ">
				<comments desc="Invalid drop area. "/>
			</value>
		</enum>
		<enum name="eWidgetTreeStyle">
			<comments desc="Widget tree style. "/>
			<value name="eWidgetTreeStyle_ClickDownSelect" value="niBit ( eWidgetStyle_MaxBit+0 ) ">
				<comments desc="Select the item on left click down. Note that this disables the secondary selection. "/>
			</value>
			<value name="eWidgetTreeStyle_NoHScroll" value="niBit ( eWidgetStyle_MaxBit+1 ) ">
				<comments desc="Don&apos;t show the horizontal scrollbar. "/>
			</value>
			<value name="eWidgetTreeStyle_NoVScroll" value="niBit ( eWidgetStyle_MaxBit+2 ) ">
				<comments desc="Don&apos;t show the vertical scrollbar. "/>
			</value>
			<value name="eWidgetTreeStyle_Autoscroll" value="niBit ( eWidgetStyle_MaxBit+3 ) ">
				<comments desc="Automaticall scroll to the selected nodes. "/>
			</value>
			<value name="eWidgetTreeStyle_DontDrawRoot" value="niBit ( eWidgetStyle_MaxBit+4 ) ">
				<comments desc="Don&apos;t draw the root node. "/>
			</value>
			<value name="eWidgetTreeStyle_AlwaysHScroll" value="niBit ( eWidgetStyle_MaxBit+5 ) ">
				<comments desc="Always show the horizontal scrollbar. "/>
			</value>
			<value name="eWidgetTreeStyle_AlwaysVScroll" value="niBit ( eWidgetStyle_MaxBit+6 ) ">
				<comments desc="Always show the vertical scrollbar. "/>
			</value>
			<value name="eWidgetTreeStyle_SingleSelection" value="niBit ( eWidgetStyle_MaxBit+7 ) ">
				<comments desc="Single selection only. "/>
			</value>
		</enum>
		<enum name="eWidgetTreeCmd">
			<comments desc="Widget tree notify message "/>
			<value name="eWidgetTreeCmd_Selected" value="0 ">
				<comments desc="A tree node has been selected. "/>
			</value>
			<value name="eWidgetTreeCmd_Unselected" value="1 ">
				<comments desc="">
					<params text="A iWidgetTreeNode A tree node has been unselected. "/>
					<params text="A iWidgetTreeNode "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_Expanded" value="2 ">
				<comments desc="A tree node has been expanded. ">
					<remark text="This is sent before the node is actually drawn so it&apos;s the good time to fill the node with the appropriate children if it&apos;s not already done. "/>
					<params text="A iWidgetTreeNode "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_Collapsed" value="3 ">
				<comments desc="A tree node has been collapsed. ">
					<params text="A iWidgetTreeNode "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_SecondarySelected" value="4 ">
				<comments desc="A tree node has been selected as a secondary selection. ">
					<params text="A iWidgetTreeNode "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_SecondaryUnselected" value="5 ">
				<comments desc="A tree node has been unselected as a secondary selection. ">
					<params text="A iWidgetTreeNode "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_SetAttributes" value="6 ">
				<comments desc="A tree node&apos;s attribute have changed. ">
					<params text="A iWidgetTreeNode "/>
					<params text="B the previous attributes "/>
				</comments>
			</value>
			<value name="eWidgetTreeCmd_SetName" value="7 ">
				<comments desc="A tree node&apos;s name has changed. ">
					<params text="A iWidgetTreeNode "/>
					<params text="B the previous attributes "/>
				</comments>
			</value>
		</enum>
		<enum name="eWidgetTreeNodeFlags">
			<comments desc="Widget tree node flags. "/>
			<value name="eWidgetTreeNodeFlags_Selected" value="niBit ( 0 ) ">
				<comments desc="The node is selected. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_Expanded" value="niBit ( 1 ) ">
				<comments desc="The node is expanded. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_DontDrawName" value="niBit ( 2 ) ">
				<comments desc="Don&apos;t draw the name of the node. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_Expandable" value="niBit ( 3 ) ">
				<comments desc="The node is expandable even if it doesn&apos;t have any children. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_WidgetPlaceV" value="niBit ( 4 ) ">
				<comments desc="The widget in the tree node will be placed vertically. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_WidgetPlaceH" value="niBit ( 5 ) ">
				<comments desc="The widget in the tree node will be placed horizontally. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_WidgetPlace" value="eWidgetTreeNodeFlags_WidgetPlaceV|eWidgetTreeNodeFlags_WidgetPlaceH ">
				<comments desc="The widget in the tree node will be placed vertically and horizontally. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_WidgetSize" value="niBit ( 6 ) ">
				<comments desc="The widget in the tree node will be sized to fit in the tree. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_WidgetLeft" value="niBit ( 7 ) ">
				<comments desc="The widget in the tree node will be placed at the left of the text. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_UseTextColor" value="niBit ( 8 ) ">
				<comments desc="Use the tree node&apos;s text color. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_Visible" value="niBit ( 9 ) ">
				<comments desc="The widget tree node is visible. "/>
			</value>
			<value name="eWidgetTreeNodeFlags_Default" value="eWidgetTreeNodeFlags_WidgetPlace|eWidgetTreeNodeFlags_Visible ">
				<comments desc="Default tree node flags. "/>
			</value>
		</enum>
		<interface name="iWidgetTreeNode" uuid1="96FA976D-C757-42D9-B8EF-DE82359D1A6C" uuid2="0x96fa976d,0xc757,0x42d9,0xb8,0xef,0xde,0x82,0x35,0x9d,0x1a,0x6c">
			<comments desc="Widget tree node interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getParentWidget"
				name="GetParentWidget"
				num_parameters="0"
				property="get"
				property_name2="parentWidget"
				property_name="parent_widget">
				<comments desc="Get the parent widget tree. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getParentNode"
				name="GetParentNode"
				num_parameters="0"
				property="get"
				property_name2="parentNode"
				property_name="parent_node">
				<comments desc="Get the parent node. ">
					<remark text="NULL if root node. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNodeRect"
				name="GetNodeRect"
				num_parameters="0"
				property="get"
				property_name2="nodeRect"
				property_name="node_rect">
				<comments desc="Get the node&apos;s rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getScrolledNodeRect"
				name="GetScrolledNodeRect"
				num_parameters="0"
				property="get"
				property_name2="scrolledNodeRect"
				property_name="scrolled_node_rect">
				<comments desc="Get the node&apos;s scrolled rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteNodeRect"
				name="GetAbsoluteNodeRect"
				num_parameters="0"
				property="get"
				property_name2="absoluteNodeRect"
				property_name="absolute_node_rect">
				<comments desc="Get the node&apos;s absolute rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getTextRect"
				name="GetTextRect"
				num_parameters="0"
				property="get"
				property_name2="textRect"
				property_name="text_rect">
				<comments desc="Get the node&apos;s text rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getScrolledTextRect"
				name="GetScrolledTextRect"
				num_parameters="0"
				property="get"
				property_name2="scrolledTextRect"
				property_name="scrolled_text_rect">
				<comments desc="Get the node&apos;s scrolled text rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getAbsoluteTextRect"
				name="GetAbsoluteTextRect"
				num_parameters="0"
				property="get"
				property_name2="absoluteTextRect"
				property_name="absolute_text_rect">
				<comments desc="Get the node&apos;s absolute rectangle. ">
					<remark text="Zero if the node is not visible. "/>
				</comments>
				<return type="sRectf" typec="sRectf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="getIndex"
				name="GetIndex"
				num_parameters="0"
				property="get"
				property_name2="index"
				property_name="index">
				<comments desc="Get the node index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTreeIndex"
				name="GetTreeIndex"
				num_parameters="0"
				property="get"
				property_name2="treeIndex"
				property_name="tree_index">
				<comments desc="Get the tree index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumChildNodes"
				name="GetNumChildNodes"
				num_parameters="0"
				property="get"
				property_name2="numChildNodes"
				property_name="num_child_nodes">
				<comments desc="Get the number of child nodes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getChildNode"
				name="GetChildNode"
				num_parameters="1"
				property="get"
				property_name2="childNode"
				property_name="child_node">
				<comments desc="Get the child node at the specified index. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getChildNodeIndex"
				name="GetChildNodeIndex"
				num_parameters="1"
				property="get"
				property_name2="childNodeIndex"
				property_name="child_node_index">
				<comments desc="Get the index of the specified child node. ">
					<remark text="Return eInvalidHandle if the specified node isnt a child of this node. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apNode"
					type="const iWidgetTreeNode *"
					typec="const iWidgetTreeNode*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChildNodeFromName"
				name="GetChildNodeFromName"
				num_parameters="1"
				property="get"
				property_name2="childNodeFromName"
				property_name="child_node_from_name">
				<comments desc="Get the first child node with the specified name. ">
					<remark text="This function will search in the children nodes as well. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addChildNode" name="AddChildNode" num_parameters="1">
				<comments desc="Add a new child node. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addChildNodeBefore" name="AddChildNodeBefore" num_parameters="2">
				<comments desc="Add a new child node before the specified index. ">
					<remark text="If the index is out of range it behaves like AddChildNode (aka add a node at the end) "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="removeChildNode" name="RemoveChildNode" num_parameters="1">
				<comments desc="Remove a child node. ">
					<remark text="This function will search in the children nodes as well. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apNode"
					type="iWidgetTreeNode *"
					typec="iWidgetTreeNode*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Remove all children. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="findNodeFromName"
				name="FindNodeFromName"
				num_parameters="1">
				<comments desc="Find the first node with the specified name. ">
					<remark text="This include this node. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findNodeFromUserdata"
				name="FindNodeFromUserdata"
				num_parameters="1">
				<comments desc="Find the first node with the specified userdata. ">
					<remark text="This include this node. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apUserdata"
					type="const iUnknown *"
					typec="const iUnknown*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findNodeFromWidget"
				name="FindNodeFromWidget"
				num_parameters="1">
				<comments desc="Find the first node with the specified widget. ">
					<remark text="This include this node. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apWidget"
					type="const iWidget *"
					typec="const iWidget*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findNodeFromPosition"
				name="FindNodeFromPosition"
				num_parameters="1">
				<comments desc="Find the node that is below the specified position, position in absolute coordinates. ">
					<remark text="This include this node. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPrevSibling"
				name="GetPrevSibling"
				num_parameters="0"
				property="get"
				property_name2="prevSibling"
				property_name="prev_sibling">
				<comments desc="Get the previous sibiling of this tree node. ">
					<remark text="Return NULL if it&apos;s the first child of its parent. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNextSibling"
				name="GetNextSibling"
				num_parameters="0"
				property="get"
				property_name2="nextSibling"
				property_name="next_sibling">
				<comments desc="Get the next sibiling of this tree node. ">
					<remark text="Return NULL if it&apos;s the last child of its parent. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAbove"
				name="GetAbove"
				num_parameters="0"
				property="get"
				property_name2="above"
				property_name="above">
				<comments desc="Get the node above of this node, can be in another parent node. ">
					<remark text="Return null if its the node the most above. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBelow"
				name="GetBelow"
				num_parameters="0"
				property="get"
				property_name2="below"
				property_name="below">
				<comments desc="Get the node below of this node, can be in another parent node. ">
					<remark text="Return null if its the node the most below. "/>
				</comments>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFlags"
				name="SetFlags"
				num_parameters="1"
				property="set"
				property_name2="flags"
				property_name="flags">
				<comments desc="Set the node&apos;s flags. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aFlags"
					type="tWidgetTreeNodeFlags"
					typec="tWidgetTreeNodeFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the node&apos;s flags. "/>
				<return type="tWidgetTreeNodeFlags" typec="tWidgetTreeNodeFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setName"
				name="SetName"
				num_parameters="1"
				property="set"
				property_name2="name"
				property_name="name">
				<comments desc="Set the node&apos;s name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the node&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIcon"
				name="SetIcon"
				num_parameters="1"
				property="set"
				property_name2="icon"
				property_name="icon">
				<comments desc="Set the node&apos;s icon "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVal"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIcon"
				name="GetIcon"
				num_parameters="0"
				property="get"
				property_name2="icon"
				property_name="icon">
				<comments desc="Get the node&apos;s icon "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSelected"
				name="SetSelected"
				num_parameters="1"
				property="set"
				property_name2="selected"
				property_name="selected">
				<comments desc="Set the node&apos;s selected status. ">
					<remark text="When set/unset selected the node&apos;s tree selection list will be automatically updated. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abSelected"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getSelected"
				name="GetSelected"
				num_parameters="0"
				property="get"
				property_name2="selected"
				property_name="selected">
				<comments desc="Get the node&apos;s selected status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setExpanded"
				name="SetExpanded"
				num_parameters="1"
				property="set"
				property_name2="expanded"
				property_name="expanded">
				<comments desc="Set the node&apos;s expanded status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abExpanded"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getExpanded"
				name="GetExpanded"
				num_parameters="0"
				property="get"
				property_name2="expanded"
				property_name="expanded">
				<comments desc="Get the node&apos;s expanded status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setUserdata"
				name="SetUserdata"
				num_parameters="1"
				property="set"
				property_name2="userdata"
				property_name="userdata">
				<comments desc="Set the node&apos;s user data. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apUserData"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getUserdata"
				name="GetUserdata"
				num_parameters="0"
				property="get"
				property_name2="userdata"
				property_name="userdata">
				<comments desc="Get the node&apos;s user data. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setWidget"
				name="SetWidget"
				num_parameters="1"
				property="set"
				property_name2="widget"
				property_name="widget">
				<comments desc="Set the node&apos;s widget. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apWidget"
					type="iWidget *"
					typec="iWidget*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidget"
				name="GetWidget"
				num_parameters="0"
				property="get"
				property_name2="widget"
				property_name="widget">
				<comments desc="Get the node&apos;s widget. "/>
				<return type="iWidget *" typec="iWidget*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setTextColor"
				name="SetTextColor"
				num_parameters="1"
				property="set"
				property_name2="textColor"
				property_name="text_color">
				<comments desc="Set the text foreground color. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTextColor"
				name="GetTextColor"
				num_parameters="0"
				property="get"
				property_name2="textColor"
				property_name="text_color">
				<comments desc="Get the text foreground color. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setTextBackColor"
				name="SetTextBackColor"
				num_parameters="1"
				property="set"
				property_name2="textBackColor"
				property_name="text_back_color">
				<comments desc="Set the text background color. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getTextBackColor"
				name="GetTextBackColor"
				num_parameters="0"
				property="get"
				property_name2="textBackColor"
				property_name="text_back_color">
				<comments desc="Get the text background color. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setRowColor"
				name="SetRowColor"
				num_parameters="1"
				property="set"
				property_name2="rowColor"
				property_name="row_color">
				<comments desc="Set an explicit row background color. ">
					<remark text="Enabled if the color is different of 0x00000000 "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anRow"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getRowColor"
				name="GetRowColor"
				num_parameters="0"
				property="get"
				property_name2="rowColor"
				property_name="row_color">
				<comments desc="Get an explicit row background color. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setAttributes"
				name="SetAttributes"
				num_parameters="1"
				property="set"
				property_name2="attributes"
				property_name="attributes">
				<comments desc="Set the node&apos;s attributes. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anAttributes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getAttributes"
				name="GetAttributes"
				num_parameters="0"
				property="get"
				property_name2="attributes"
				property_name="attributes">
				<comments desc="Get the node&apos;s attributes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setVisibleAttributesMask"
				name="SetVisibleAttributesMask"
				num_parameters="1"
				property="set"
				property_name2="visibleAttributesMask"
				property_name="visible_attributes_mask">
				<comments desc="Set the visible attributes mask. ">
					<remark text="By default is 0xFFFFFFFF, all visible "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anAttributes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVisibleAttributesMask"
				name="GetVisibleAttributesMask"
				num_parameters="0"
				property="get"
				property_name2="visibleAttributesMask"
				property_name="visible_attributes_mask">
				<comments desc="Set the visible attributes mask. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iWidgetTree" uuid1="B9CD35A1-6AD7-442D-877B-FDC0AA9F6CF9" uuid2="0xb9cd35a1,0x6ad7,0x442d,0x87,0x7b,0xfd,0xc0,0xaa,0x9f,0x6c,0xf9">
			<comments desc="Widget tree interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getRootNode"
				name="GetRootNode"
				num_parameters="0"
				property="get"
				property_name2="rootNode"
				property_name="root_node">
				<comments desc="Get the root tree node. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumNodes"
				name="GetNumNodes"
				num_parameters="0"
				property="get"
				property_name2="numNodes"
				property_name="num_nodes">
				<comments desc="Get the number of nodes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNode"
				name="GetNode"
				num_parameters="1"
				property="get"
				property_name2="node"
				property_name="node">
				<comments desc="Get the node at the specified index. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumSelectedNodes"
				name="GetNumSelectedNodes"
				num_parameters="0"
				property="get"
				property_name2="numSelectedNodes"
				property_name="num_selected_nodes">
				<comments desc="Get the number of nodes selected. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSelectedNode"
				name="GetSelectedNode"
				num_parameters="1"
				property="get"
				property_name2="selectedNode"
				property_name="selected_node">
				<comments desc="Get the selected node at the specified index. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the tree. ">
					<remark text="This clear the root node, notify node and selection. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="clearSelection" name="ClearSelection" num_parameters="0">
				<comments desc="Clear the selection of all nodes. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getNodeFromPosition"
				name="GetNodeFromPosition"
				num_parameters="1">
				<comments desc="Get a node from an absolute position. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avAbsPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNodeDropMode"
				name="GetNodeDropMode"
				num_parameters="2">
				<comments desc="Get the drop mode of the specified node from the specified absolute position. "/>
				<return type="eWidgetTreeNodeDropMode" typec="eWidgetTreeNodeDropMode" typei="ni::eType_Enum"/>
				<parameter
					name="apNode"
					type="iWidgetTreeNode *"
					typec="iWidgetTreeNode*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avAbsPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setSecondarySelection"
				name="SetSecondarySelection"
				num_parameters="1"
				property="set"
				property_name2="secondarySelection"
				property_name="secondary_selection">
				<comments desc="Set the secondary selection item. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apNode"
					type="iWidgetTreeNode *"
					typec="iWidgetTreeNode*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSecondarySelection"
				name="GetSecondarySelection"
				num_parameters="0"
				property="get"
				property_name2="secondarySelection"
				property_name="secondary_selection">
				<comments desc="Get the secondary selection item. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPivotSelection"
				name="GetPivotSelection"
				num_parameters="0"
				property="get"
				property_name2="pivotSelection"
				property_name="pivot_selection">
				<comments desc="Get the pivot selection. "/>
				<return type="iWidgetTreeNode *" typec="iWidgetTreeNode*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="scrollToNode"
				name="ScrollToNode"
				num_parameters="1"
				propety="yes">
				<comments desc="Scroll to the specified item node. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apNode"
					type="iWidgetTreeNode *"
					typec="iWidgetTreeNode*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="saveTreeStates" name="SaveTreeStates" num_parameters="1">
				<comments desc="Save tree states. ">
					<remark text="Tree states are the expanded status, selected status and scrolling. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apStates"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadTreeStates" name="LoadTreeStates" num_parameters="2">
				<comments desc="Load tree states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apStates"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abLoadMatchingNames"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="pushStates" name="PushStates" num_parameters="0">
				<comments desc="Push the tree&apos;s states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="popStates" name="PopStates" num_parameters="1">
				<comments desc="Pop the tree&apos;s states. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abLoadMatchingNames"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setNumVisibleAttributes"
				name="SetNumVisibleAttributes"
				num_parameters="1"
				property="set"
				property_name2="numVisibleAttributes"
				property_name="num_visible_attributes">
				<comments desc="Set the number of visible attributes. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anCount"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumVisibleAttributes"
				name="GetNumVisibleAttributes"
				num_parameters="0"
				property="get"
				property_name2="numVisibleAttributes"
				property_name="num_visible_attributes">
				<comments desc="Get the number of visible attributes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setAttributeIcon"
				name="SetAttributeIcon"
				num_parameters="2"
				property="set"
				property_name2="attributeIcon"
				property_name="attribute_icon">
				<comments desc="Set the specified attribute&apos;s icon. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apIcon"
					type="iOverlay *"
					typec="iOverlay*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAttributeIcon"
				name="GetAttributeIcon"
				num_parameters="1"
				property="get"
				property_name2="attributeIcon"
				property_name="attribute_icon">
				<comments desc="Get the specified attribute&apos;s icon. "/>
				<return type="iOverlay *" typec="iOverlay*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setAttributeName"
				name="SetAttributeName"
				num_parameters="2"
				property="set"
				property_name2="attributeName"
				property_name="attribute_name">
				<comments desc="Set the specified attribute&apos;s name. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAttributeName"
				name="GetAttributeName"
				num_parameters="1"
				property="get"
				property_name2="attributeName"
				property_name="attribute_name">
				<comments desc="Get the specified attribute&apos;s name. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setHoverNode"
				name="SetHoverNode"
				num_parameters="1"
				property="set"
				property_name2="hoverNode"
				property_name="hover_node">
				<comments desc="Set the hover node. ">
					<remark text="The id should be the node&apos;s tree index. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anNodeTreeIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHoverNode"
				name="GetHoverNode"
				num_parameters="0"
				property="get"
				property_name2="hoverNode"
				property_name="hover_node">
				<comments desc="Get the hover node. ">
					<remark text="The id is the node&apos;s tree index. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niUI/src/_idl/UIMessages.h.idl.xml">
		<enum name="eUIMessage">
			<comments desc="UI message ">
				<remark text="G, general messages "/>
				<remark text="L, layout messages "/>
				<remark text="P, painting/drawing messages "/>
				<remark text="I, input messages "/>
				<remark text="F, finger messages "/>
				<remark text="A, action messages "/>
				<remark text="C, click messages "/>
				<remark text="S, serialization messages "/>
				<remark text="Z, user messages "/>
				<remark text="X, context messages, sent only to the root widget "/>
			</comments>
			<value name="eUIMessage_SinkAttached" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 0 ) ">
				<comments desc="Message sent to the sink being added. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_SinkDetached" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 1 ) ">
				<comments desc="Message sent to the sink being removed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_ChildAdded" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 2 ) ">
				<comments desc="A child widget has been added. ">
					<params text="A: the child added "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_ChildRemoved" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 3 ) ">
				<comments desc="A child widget has been removed. ">
					<params text="A: the child removed "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Destroy" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 4 ) ">
				<comments desc="The widget has been destroyed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Notify" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 5 ) ">
				<comments desc="Notification of message received by a child widget. ">
					<params text="A: the widget that received the notified message. "/>
					<params text="B: iMessage instance that contains the message. "/>
				</comments>
			</value>
			<value name="eUIMessage_SetCursor" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 6 ) ">
				<comments desc="Received when the widget should set the cursor. ">
					<remark text="If no cursor is set the default cursor will be set. "/>
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_SetFocus" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 7 ) ">
				<comments desc="Received when the widget gets focus. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_LostFocus" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 8 ) ">
				<comments desc="">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Activate" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 9 ) ">
				<comments desc="The widget has been activated. ">
					<remark text="A widget can be activated manually using iUIContext::Activate, or before receiving focus if the style eWidgetStyle_FocusActivate is set. "/>
					<remark text="When a widget is activated it is not put on Top of the ZOrder, if it&apos;s the desired behavior then the widget should set itself on the top when this message is received. "/>
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Deactivate" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 10 ) ">
				<comments desc="The widget has been deactivated. ">
					<remark text="A widget is deactivated when another widget is activated. "/>
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Command" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 11 ) ">
				<comments desc="A child widget has send a command. ">
					<remark text="The command message is sent to the parent widget if it is not handled. "/>
					<remark text="The standard Form widget always handle this message. "/>
					<params text="A: a iWidgetCommand instance. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_Timer" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 12 ) ">
				<comments desc="Message sent when a timer expires. ">
					<params text="A: timer id "/>
					<params text="B: timer duration "/>
				</comments>
			</value>
			<value name="eUIMessage_Enabled" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 13 ) ">
				<comments desc="Enabled message, sent when a widget is enabled or disabled. ">
					<params text="A: eTrue if the widget is enabled, eFalse if the widget is disabled. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Visible" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 14 ) ">
				<comments desc="Visible message, sent when a widget is made visible or invisible. ">
					<params text="A: eTrue if the widget is made visible, eFalse if the widget is made invisible. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Layout" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 15 ) ">
				<comments desc="The widget should update its layout. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_StyleChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 16 ) ">
				<comments desc="The widget&apos;s style has been changed. ">
					<params text="A: previous style "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_FontChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 17 ) ">
				<comments desc="The widget&apos;s font has been changed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_TextChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 18 ) ">
				<comments desc="Text changed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_SetText" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 19 ) ">
				<comments desc="Called when the text should be set, when iWidget::GetText is called. ">
					<params text="A: true if serializing the text property, else false "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_SkinChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 20 ) ">
				<comments desc="Called when the skin is changed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextMenuChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 21 ) ">
				<comments desc="The context menu has changed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_HoverTextChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 22 ) ">
				<comments desc="Hover text changed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_LoadConfig" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 23 ) ">
				<comments desc="Configuration files should be loaded. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_SaveConfig" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 24 ) ">
				<comments desc="Configuration files should be saved. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextResized" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 25 ) ">
				<comments desc="The context (root widget) has been resized. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_LocaleChanged" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;G&apos; , 26 ) ">
				<comments desc="Locale has changed. ">
					<remark text="This is sent when the active locale&apos;s translations has changed or when the current locale is changed. "/>
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_NCSize" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 0 ) ">
				<comments desc="Non-client area resized. ">
					<params text="A: new widget size "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Size" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 1 ) ">
				<comments desc="Client area resized. ">
					<params text="A: new client size "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Padding" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 2 ) ">
				<comments desc="The widget&apos;s padding has been modified. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Border" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 3 ) ">
				<comments desc="The widget&apos;s border has been modified. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_BorderStyle" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 4 ) ">
				<comments desc="The widget&apos;s border style has been modified. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Margin" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 5 ) ">
				<comments desc="The widget&apos;s margin has been modified. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_MarginMerge" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 6 ) ">
				<comments desc="The widget&apos;s margin merge has been modified. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Folded" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 7 ) ">
				<comments desc="The widget has been folded. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Unfolded" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 8 ) ">
				<comments desc="The widget has been unfolded. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_BeforeDocked" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 9 ) ">
				<comments desc="The widget has been docked or undocked. ">
					<params text="A: the widget the form is going to be docked in. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_AfterDocked" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 10 ) ">
				<comments desc="The widget has been docked or undocked. ">
					<params text="A: the tab widget inside which the widget has just been docked. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Undocked" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;L&apos; , 11 ) ">
				<comments desc="The widget has been docked or undocked. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCPaint" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;P&apos; , 1 ) ">
				<comments desc="Draw the non-client area. ">
					<params text="A: cursor position, non-client relative. "/>
					<params text="B: the iCanvas to draw into "/>
				</comments>
			</value>
			<value name="eUIMessage_Paint" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;P&apos; , 2 ) ">
				<comments desc="Draw the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: the iCanvas to draw into "/>
				</comments>
			</value>
			<value name="eUIMessage_NCLeftClickDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 0 ) ">
				<comments desc="Left click down in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_LeftClickDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 1 ) ">
				<comments desc="Left click down in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCLeftClickUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 2 ) ">
				<comments desc="Left click up in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_LeftClickUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 3 ) ">
				<comments desc="Left click up in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCRightClickDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 4 ) ">
				<comments desc="Right click down in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_RightClickDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 5 ) ">
				<comments desc="Right click down in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCRightClickUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 6 ) ">
				<comments desc="Right click up in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_RightClickUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 7 ) ">
				<comments desc="Right click up in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCMouseMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 8 ) ">
				<comments desc="The cursor moved inside the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_MouseMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 9 ) ">
				<comments desc="The cursor moved inside the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCWheel" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 10 ) ">
				<comments desc="The wheel button has been pressed in the non client area. ">
					<params text="A: wheel movement value "/>
					<params text="B: absolute cursor position. "/>
				</comments>
			</value>
			<value name="eUIMessage_Wheel" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 11 ) ">
				<comments desc="The wheel button has been pressed in the client area. ">
					<params text="A: wheel movement value "/>
					<params text="B: absolute cursor position. "/>
				</comments>
			</value>
			<value name="eUIMessage_KeyChar" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 12 ) ">
				<comments desc="A character has been entered. ">
					<params text="A: &apos;achar&apos; code "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Submit" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 13 ) ">
				<comments desc="Submit message. ">
					<remark text="The submit message is sent to the parent widget if it is not handled. "/>
					<remark text="The standard Form widget always handle this message. "/>
					<params text="A: iWidget, sender widget "/>
					<params text="B: iMessage, input message that triggered the submit "/>
				</comments>
			</value>
			<value name="eUIMessage_NCMouseEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 15 ) ">
				<comments desc="Sent when the mouse enter the widget non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_MouseEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 16 ) ">
				<comments desc="Sent when the mouse enter the widget client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCMouseLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 17 ) ">
				<comments desc="Sent when the mouse leaves the widget non-client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_MouseLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 18 ) ">
				<comments desc="Sent when the mouse leaves the widget client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCMouseHover" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 19 ) ">
				<comments desc="Sent when the mouse stand over the client area without moving for the time specified in the widget&apos;s hover delay. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_MouseHover" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 20 ) ">
				<comments desc="Sent when the mouse stand over the non-client area without moving for the time specified in the widget&apos;s hover delay. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragMouseMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 21 ) ">
				<comments desc="The cursor moved inside the non-client area when dragging an item. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragMouseMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 22 ) ">
				<comments desc="The cursor moved inside the client area when dragging an item. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragMouseEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 23 ) ">
				<comments desc="Sent when the mouse enter the widget non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragMouseEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 24 ) ">
				<comments desc="Sent when the mouse enter the widget client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragMouseLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 25 ) ">
				<comments desc="Sent when the mouse leaves the widget non-client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragMouseLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 26 ) ">
				<comments desc="Sent when the mouse leaves the widget client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragBegin" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 27 ) ">
				<comments desc="Sent when the mouse movement is considered to begin dragging in the non-client area. That is the left mouse button has been pressed and a movement of at least &apos;drag threshold&apos; pixel has been made. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: Drag start position in screen space. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragBegin" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 28 ) ">
				<comments desc="Sent when the mouse movement is considered to begin dragging in the client area. That is the left mouse button has been pressed and a movement of at least &apos;drag threshold&apos; pixel has been made. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: Drag start position in screen space. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragEnd" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 29 ) ">
				<comments desc="Sent when the drag button has been released, aka when the dragging ended in the non-client area. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: Drag end position in screen space. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragEnd" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 30 ) ">
				<comments desc="Sent when the drag button has been released, aka when the dragging ended. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: Drag end position in screen space. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_KeyDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 32 ) ">
				<comments desc="A key has been pressed. ">
					<params text="A: eKey code "/>
					<params text="B: eKeyMod "/>
				</comments>
			</value>
			<value name="eUIMessage_KeyUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 33 ) ">
				<comments desc="A key has been release. ">
					<params text="A: &apos;achar&apos; code "/>
					<params text="B: eKeyMod "/>
				</comments>
			</value>
			<value name="eUIMessage_GameCtrl" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 34 ) ">
				<comments desc="A game controller&apos;s state changed. ">
					<params text="A: the game controller "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_GameCtrlButtonDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 35 ) ">
				<comments desc="A game controller&apos;s button is down. ">
					<params text="A: the game controller "/>
					<params text="B: the game controller button pressed "/>
				</comments>
			</value>
			<value name="eUIMessage_GameCtrlButtonUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;I&apos; , 36 ) ">
				<comments desc="A game controller&apos;s button is up. ">
					<params text="A: the game controller "/>
					<params text="B: the game controller button released "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 0 ) ">
				<comments desc="Finger down in the non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerDown" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 1 ) ">
				<comments desc="Finger click down in the client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 2 ) ">
				<comments desc="Finger up in the non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerUp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 3 ) ">
				<comments desc="Finger click up in the client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 8 ) ">
				<comments desc="The finger moved inside the non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 9 ) ">
				<comments desc="The finger moved inside the client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 15 ) ">
				<comments desc="Sent when a finger enter the widget non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 16 ) ">
				<comments desc="Sent when a finger enter the widget client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 17 ) ">
				<comments desc="Sent when a finger leaves the widget non-client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 18 ) ">
				<comments desc="Sent when a finger leaves the widget client area. ">
					<params text="A: unused. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragFingerMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 21 ) ">
				<comments desc="The cursor moved inside the non-client area when dragging an item. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_DragFingerMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 22 ) ">
				<comments desc="The cursor moved inside the client area when dragging an item. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, client relative, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragFingerEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 23 ) ">
				<comments desc="Sent when a finger enter the widget non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, absolute, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_DragFingerEnter" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 24 ) ">
				<comments desc="Sent when a finger enter the widget client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger position, absolute, and pressure. Vec3(client x, client y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragFingerLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 25 ) ">
				<comments desc="Sent when a finger leaves the widget non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragFingerLeave" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 26 ) ">
				<comments desc="Sent when a finger leaves the widget client area. ">
					<params text="A: finger index. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragFingerBegin" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 27 ) ">
				<comments desc="Sent when a finger movement is considered to begin dragging in the non-client area. That is the left finger button has been pressed and a movement of at least &apos;drag threshold&apos; pixel has been made. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: finger index. "/>
					<params text="B: Drag start position in screen space. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragFingerBegin" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 28 ) ">
				<comments desc="Sent when a finger movement is considered to begin dragging in the client area. That is the left finger button has been pressed and a movement of at least &apos;drag threshold&apos; pixel has been made. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: finger index. "/>
					<params text="B: Drag start position in screen space. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCDragFingerEnd" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 29 ) ">
				<comments desc="Sent when the drag button has been released, aka when the dragging ended in the non-client area. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. \param A: unused. "/>
					<params text="A: finger index. "/>
					<params text="B: Drag end position in screen space. "/>
				</comments>
			</value>
			<value name="eUIMessage_DragFingerEnd" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 30 ) ">
				<comments desc="Sent when the drag button has been released, aka when the dragging ended. ">
					<remark text="The message is sent to all widgets, including the ones that aren&apos;t drag sources or targets. "/>
					<params text="A: finger index. "/>
					<params text="B: Drag end position in screen space. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCFingerRelativeMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 31 ) ">
				<comments desc="The finger moved inside the non-client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger relative position and pressure. Vec3(rel x, rel y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_FingerRelativeMove" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 32 ) ">
				<comments desc="The finger moved inside the client area. ">
					<params text="A: finger index. "/>
					<params text="B: finger relative position and pressure. Vec3(rel x, rel y, pressure). "/>
				</comments>
			</value>
			<value name="eUIMessage_Pinch" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;F&apos; , 33 ) ">
				<comments desc="Pinch gesture. ">
					<params text="A: scale. "/>
					<params text="B: eGestureState. "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextMenu" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 0 ) ">
				<comments desc="Sent when the context menu should be opened. ">
					<remark text="This message is sent from the default RightClickUp message handler. "/>
					<params text="A: true if a mouse click generated the message, else false, meaning that the widget should generate the context menu position from the current selection or it&apos;s top left position. "/>
					<params text="B: cursor position, client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextHelp" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 1 ) ">
				<comments desc="Context help. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Copy" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 2 ) ">
				<comments desc="Copy. ">
					<params text="A: clipboard datatable. \see ni::iDataTable "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Cut" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 3 ) ">
				<comments desc="Cut. ">
					<params text="A: clipboard datatable. \see ni::iDataTable "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Paste" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 4 ) ">
				<comments desc="Paste. ">
					<params text="A: clipboard datatable. \see ni::iDataTable "/>
					<params text="A: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Undo" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 5 ) ">
				<comments desc="Undo. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Redo" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 6 ) ">
				<comments desc="Redo. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_MoveFocus" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 7 ) ">
				<comments desc="Move focus. ">
					<params text="A: true if the focus should be moved to the previous widget, false if it should be moved to the next widget "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_Cancel" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;A&apos; , 8 ) ">
				<comments desc="Cancel message. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eUIMessage_NCLeftClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 0 ) ">
				<comments desc="Left click in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_LeftClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 1 ) ">
				<comments desc="Left click in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCLeftDoubleClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 2 ) ">
				<comments desc="Left double-click in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_LeftDoubleClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 3 ) ">
				<comments desc="Left double-click in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCRightClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 4 ) ">
				<comments desc="Right click in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_RightClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 5 ) ">
				<comments desc="Right click in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_NCRightDoubleClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 6 ) ">
				<comments desc="Right double-click in the non-client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_RightDoubleClick" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;C&apos; , 7 ) ">
				<comments desc="Right double-click in the client area. ">
					<params text="A: cursor position, client relative. "/>
					<params text="B: cursor position, non-client relative. "/>
				</comments>
			</value>
			<value name="eUIMessage_SerializeLayout" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;S&apos; , 0 ) ">
				<comments desc="SerializeLayout message. ">
					<remark text="Not called if the NoRoot serialize flag is set. "/>
					<params text="A: iDataTable interface where the widget should be serialized. "/>
					<params text="B: the widget serialize flags \see eWidgetSerializeFlags. \see ni::iUIContext::SerializeWidget \see ni::iWidget::SerializeLayout "/>
				</comments>
			</value>
			<value name="eUIMessage_SerializeWidget" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;S&apos; , 1 ) ">
				<comments desc="SerializeWidget message. ">
					<remark text="This is always called, no matter what the serialize flags are. "/>
					<params text="A: iDataTable interface where the widget should be serialized. "/>
					<params text="B: the widget serialize flags \see eWidgetSerializeFlags. \see ni::iUIContext::SerializeWidget "/>
				</comments>
			</value>
			<value name="eUIMessage_SerializeChildren" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;S&apos; , 2 ) ">
				<comments desc="SerializeChildren message. ">
					<remark text="Not called if the Children serialize flag is not set. "/>
					<params text="A: iDataTable interface where the widget should be serialized. "/>
					<params text="B: the widget serialize flags \see eWidgetSerializeFlags. \see ni::iUIContext::SerializeWidget \see ni::iWidget::SerializeChildren "/>
				</comments>
			</value>
			<value name="eUIMessage_SerializeFinalize" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;S&apos; , 3 ) ">
				<comments desc="SerializeFinalize message. ">
					<remark text="Called at the end of the serialization. "/>
					<params text="A: iDataTable interface where the widget should be serialized. "/>
					<params text="B: the widget serialize flags \see eWidgetSerializeFlags. \see ni::iUIContext::SerializeWidget \see ni::iWidget::SerializeFinalize "/>
				</comments>
			</value>
			<value name="eUIMessage_UserMessage" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;Z&apos; , 0 ) ">
				<comments desc="First user message id "/>
			</value>
			<value name="eUIMessage_ContextUpdate" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;X&apos; , &apos;u&apos; ) ">
				<comments desc="Sent after the context is updated. ">
					<params text="A: tF32 FrameTime. "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextBeforeDraw" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;X&apos; , &apos;d&apos; ) ">
				<comments desc="Sent before the context is drawn. ">
					<params text="A: the Canvas of the root widget (rootCanvas) "/>
					<params text="B: unused. "/>
				</comments>
			</value>
			<value name="eUIMessage_ContextAfterDraw" value="niMessageID ( &apos;_&apos; , &apos;U&apos; , &apos;I&apos; , &apos;X&apos; , &apos;D&apos; ) ">
				<comments desc="Sent after the context is drawn. ">
					<params text="A: the Canvas of the root widget (rootCanvas) "/>
					<params text="B: unused. "/>
				</comments>
			</value>
		</enum>
	</namespace>
</niIDL>