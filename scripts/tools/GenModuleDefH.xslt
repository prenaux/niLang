<?xml version="1.0" encoding="UTF-8" ?>
<!-- (c) 2022 The niLang Authors -->

<!DOCTYPE stylesheet [
  <!ENTITY SAFEIDLNAME "translate(/niIDL/@name,'.-','__')">
  <!ENTITY PARAMETERS "parameter[not(@deprecated='yes')]">
  <!ENTITY METHODS "method[not(contains(@name,'operator')) and not(@name=../@name) and not(@name='niDeclareInterface') and not(@deprecated='yes') and not(@deprecated='yes')]">
  <!ENTITY PARENTS "parents/parent[not(@deprecated='yes') and not(../@deprecated='yes')]">
  <!ENTITY INTERFACES "/niIDL/namespace/interface[not(@noautomation='yes') and not(@deprecated='yes')]">
  <!ENTITY INCS "/niIDL/includes/include">
  <!ENTITY ALLINTERFACES "/niIDL/namespace/interface[not(@deprecated='yes')]">
  <!ENTITY CONSTANTS "/niIDL/namespace/variable[not(@noautomation='yes') and not(@deprecated='yes') and starts-with(@name,'k')]">
  <!ENTITY EMPTYENUMVALUES "/niIDL/namespace/enum[(@name='') and not(@noautomation='yes') and not(@deprecated='yes')]/value">
  <!ENTITY NAMEDENUMS "/niIDL/namespace/enum[not(@name='') and not(@noautomation='yes') and not(@deprecated='yes') and not(count(value)=0)]">
  <!ENTITY ALLENUMS "/niIDL/namespace/enum[not(@noautomation='yes') and not(@deprecated='yes') and not(count(value)=0)]">
  <!ENTITY OBJECTTYPES "/niIDL/objecttypes/objecttype">
  <!ENTITY DISPATCHWRAPPER "((@dispatchwrapper='yes') or (@dispatchwrappercreate) or (starts-with(@name,'i') and contains(@name,'Sink') and not(@name='iSinkList')))">
  <!ENTITY DEPENDENCIES "/niIDL/dependencies/dependency">
  <!ENTITY IDDEPENDENCIES "/niIDL/dependencies/dependency[not(@weak='yes') and not(@noid='yes')]">
  <!ENTITY AISPTR "(contains($A,'*') or contains($A,'&amp;') or contains($A,'Ptr&lt;'))">
  <!ENTITY AISINTERFACE "(starts-with($A,'i') or starts-with($A,'const i') or contains($A,'::i')) and not(starts-with($A,'int')) or contains($A,'Ptr&lt;')">
  <!ENTITY AISENUM "(starts-with($A,'e') or starts-with($A,'const e') or contains($A,'::e'))">
  <!ENTITY AISFLAGS "(((starts-with($A,'t') or starts-with($A,'const t')) and contains($A,'Flags')) or (contains($A,'::t') and contains($A,'Flags')))">
  <!ENTITY MATCH_VAR "starts-with($A,'Var') or starts-with($A,'const Var') or starts-with($A,'ni::Var') or starts-with($A,'const ni::Var')">
  <!ENTITY AISVEC "(contains($A,'CVec'))">
  <!ENTITY AISLST "(contains($A,'CLst') or contains($A,'SinkLst'))">
  <!ENTITY AISMAP "(contains($A,'CMap'))">
  <!ENTITY AISCOLLECTION "(contains($A,'CVec')) or (contains($A,'CLst') or contains($A,'SinkLst')) or (contains($A,'CMap'))">
  ]>

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:math="http://exslt.org/math"
                xmlns:date="http://exslt.org/dates-and-times">

  <xsl:include href="GenModuleBase.xslt"/>
  <xsl:output method="text" />

  <!-- ROOT ****************************************************** -->
  <xsl:template match="/">

    <xsl:if test="not(/niIDL/@name)">
      <xsl:message terminate="yes">E/ Unnamed IDL cannot be used to generate automation wrapper !</xsl:message>
    </xsl:if>

    <xsl:if test="not(/niIDL/@version)">
      <xsl:message terminate="yes">E/ Unversionned IDL cannot be used to generate automation wrapper !</xsl:message>
    </xsl:if>

    <!-- <xsl:if test="not(/niIDL/namespace/@name)"> -->
      <!-- <xsl:message terminate="yes">E/ No namespace defined !</xsl:message> -->
    <!-- </xsl:if> -->

    <xsl:call-template name="write_header"/>

    <xsl:call-template name="newline"/>
    <xsl:text>namespace </xsl:text><xsl:value-of select="/niIDL/namespace/@name"/><xsl:text> {
/** \addtogroup niLang
 * @{
 */</xsl:text>

    <xsl:call-template name="newline"/>
    <xsl:call-template name="newline"/>

    <xsl:text>static const char *const kVersion_</xsl:text><xsl:value-of select="&SAFEIDLNAME;"/><xsl:text></xsl:text> = "<xsl:value-of select="/niIDL/@version" /><xsl:text>";</xsl:text>
    <xsl:call-template name="newline"/>
    <xsl:text>niExportFunc(const ni::iModuleDef*) GetModuleDef_</xsl:text><xsl:value-of select="&SAFEIDLNAME;"/><xsl:text>();</xsl:text>
    <xsl:call-template name="newline"/>

    <xsl:call-template name="get_module"/>

    <xsl:call-template name="newline"/>
    <xsl:text>
/**@}*/
} // end of namespace </xsl:text><xsl:value-of select="/niIDL/namespace/@name"/><xsl:call-template name="newline"/>

    <xsl:call-template name="write_footer"/>
  </xsl:template>

  <!-- ************************************************************ -->
  <xsl:template name="write_header">
    <xsl:text>#ifndef __MODULEDEF_</xsl:text><xsl:value-of select="&SAFEIDLNAME;"/><xsl:text>_H__</xsl:text>
    <xsl:call-template name="newline"/>
    <xsl:text>#define __MODULEDEF_</xsl:text><xsl:value-of select="&SAFEIDLNAME;"/><xsl:text>_H__</xsl:text>
    <xsl:call-template name="newline"/>

    <xsl:text>/*
 * Autogenerated module definition, for </xsl:text><xsl:value-of select="/niIDL/namespace/@name"/>::<xsl:value-of select="&SAFEIDLNAME;"/><xsl:text>.
 */

#include &lt;niLang/ObjModel.h&gt;
</xsl:text>
  </xsl:template>

  <!-- ************************************************************ -->
  <xsl:template name="write_footer">

    <xsl:call-template name="newline"/>
    <xsl:text>/// EOF //////////////////////////////////////////////////////////////////////////////////////</xsl:text>
    <xsl:call-template name="newline"/>
    <xsl:text>#endif /// __MODULEDEF_</xsl:text><xsl:value-of select="&SAFEIDLNAME;"/><xsl:text>_H__</xsl:text>
    <xsl:call-template name="newline"/>
  </xsl:template>

  <!-- ************************************************************ -->
  <xsl:template name="get_module">

    <!-- OBJECT TYPES ARRAY -->
    <xsl:if test="not(count(&OBJECTTYPES;)=0)">
      <xsl:for-each select="&OBJECTTYPES;">
        <xsl:text>niExportFunc(ni::iUnknown*) New_</xsl:text>
        <xsl:choose>
          <xsl:when test="@category">
            <xsl:value-of select="@category"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="&SAFEIDLNAME;"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>_</xsl:text><xsl:value-of select="@name"/>
        <xsl:text>(const ni::Var&amp;, const ni::Var&amp;);</xsl:text>
        <xsl:call-template name="newline"/>
      </xsl:for-each>
      <xsl:call-template name="newline"/>
    </xsl:if>

    <!-- INTERFACES ARRAY -->
    <xsl:if test="not(count(&INTERFACES;)=0)">
      <xsl:for-each select="&INTERFACES;">
        <xsl:text>niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_</xsl:text><xsl:value-of select="@name"/><xsl:text>();</xsl:text>
        <xsl:call-template name="newline"/>
      </xsl:for-each>
      <xsl:call-template name="newline"/>
    </xsl:if>

    <!-- ENUMERATIONS ARRAY -->
    <xsl:if test="not(count(&ALLENUMS;)=0)">
      <xsl:if test="not(count(&EMPTYENUMVALUES;)=0)">
        <xsl:text>niExportFunc(const ni::sEnumDef*) GetEnumDef_Unnamed();</xsl:text>
        <xsl:call-template name="newline"/>
      </xsl:if>
      <xsl:for-each select="&NAMEDENUMS;">
        <xsl:text>niExportFunc(const ni::sEnumDef*) GetEnumDef_</xsl:text><xsl:value-of select="@name"/><xsl:text>();</xsl:text>
        <xsl:call-template name="newline"/>
      </xsl:for-each>
    </xsl:if>

  </xsl:template>

  <!-- ************************************************************ -->
  <xsl:template name="get_min_features_begin">
    <xsl:if test="@min_features > 0">
      <xsl:text>#if niMinFeatures(</xsl:text>
      <xsl:value-of select="@min_features" />
      <xsl:text>)</xsl:text>
      <xsl:call-template name="newline" />
    </xsl:if>
  </xsl:template>

  <!-- ************************************************************ -->
  <xsl:template name="get_min_features_end">
    <xsl:if test="@min_features > 0">
      <xsl:text>#endif // niMinFeatures(</xsl:text>
      <xsl:value-of select="@min_features" />
      <xsl:text>)</xsl:text>
      <xsl:call-template name="newline" />
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
