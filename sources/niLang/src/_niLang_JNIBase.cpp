/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;


static void ni_ni_types_BytePointer_deallocateArray(signed char* address) {
    delete[] address;
}
static void ni_ni_types_CharPointer_deallocateArray(unsigned short* address) {
    delete[] address;
}
static void ni_ni_types_CLongPointer_deallocateArray(long* address) {
    delete[] address;
}
static void ni_ni_types_DoublePointer_deallocateArray(double* address) {
    delete[] address;
}
static void ni_ni_types_FloatPointer_deallocateArray(float* address) {
    delete[] address;
}
static void ni_ni_types_IntPointer_deallocateArray(int* address) {
    delete[] address;
}
static void ni_ni_types_LongPointer_deallocateArray(jlong* address) {
    delete[] address;
}
static void ni_ni_types_PointerPointer_deallocateArray(void** address) {
    delete[] address;
}
static void ni_ni_types_ShortPointer_deallocateArray(short* address) {
    delete[] address;
}
static void ni_ni_types_SizeTPointer_deallocateArray(size_t* address) {
    delete[] address;
}

static const char *ni_classNames[12] = {
        "ni/types/BytePointer",
        "ni/types/CharPointer",
        "ni/types/CLongPointer",
        "ni/types/DoublePointer",
        "ni/types/FloatPointer",
        "ni/types/IntPointer",
        "ni/types/IUnknown",
        "ni/types/LongPointer",
        "ni/types/Pointer",
        "ni/types/PointerPointer",
        "ni/types/ShortPointer",
        "ni/types/SizeTPointer" };
static jclass ni_classes[12] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

niExportFunc(jint) niJVM_OnLoad_Base(JNIEnv* e) {
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

niExportFunc(void) niJVM_OnUnload_Base(JNIEnv* e) {
    for (int i = 0; i < 12; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}


JNIEXPORT jint JNICALL Java_ni_types_RefCountedPointer_IUnknownDispose(JNIEnv *e, jclass c, jlong p0, jlong p1) {
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = niJVM_IUnknownDispose(e,p0,p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_Pointer_00024ReferenceDeallocator_deallocate(JNIEnv *e, jobject o, jlong p0, jlong p1) {
    void *allocatedAddress = jlong_to_ptr(p0);
    void (*deallocatorAddress)(void *) = (void(*)(void*))jlong_to_ptr(p1);
    if (deallocatorAddress != NULL && allocatedAddress != NULL) {
        (*deallocatorAddress)(allocatedAddress);
    }
}

JNIEXPORT jobject JNICALL Java_ni_types_Pointer_asDirectBuffer(JNIEnv *e, jobject o, jint p0) {
    char* pointer = (char*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = NULL;
    char *rpointer;
    rpointer = pointer;
    jlong capacity = p0;
    if (rpointer != NULL) {
        r = e->NewDirectByteBuffer(rpointer, capacity);
    }
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_BytePointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 0))) {
        return;
    }
    signed char* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new signed char[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_BytePointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jbyte JNICALL Java_ni_types_BytePointer_get(JNIEnv *e, jobject o) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jbyte r = 0;
    signed char rvalue = *pointer;
    r = (jbyte)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_BytePointer_put(JNIEnv *e, jobject o, jbyte p0) {
    signed char* pointer = (signed char*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_ShortPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 10))) {
        return;
    }
    short* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new short[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_ShortPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jshort JNICALL Java_ni_types_ShortPointer_get(JNIEnv *e, jobject o) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jshort r = 0;
    short rvalue = *pointer;
    r = (jshort)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_ShortPointer_put(JNIEnv *e, jobject o, jshort p0) {
    short* pointer = (short*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_IntPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 5))) {
        return;
    }
    int* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new int[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_IntPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_types_IntPointer_get(JNIEnv *e, jobject o) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jint r = 0;
    int rvalue = *pointer;
    r = (jint)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_IntPointer_put(JNIEnv *e, jobject o, jint p0) {
    int* pointer = (int*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_LongPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 7))) {
        return;
    }
    jlong* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new jlong[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_LongPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jlong JNICALL Java_ni_types_LongPointer_get(JNIEnv *e, jobject o) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = *pointer;
    r = (jlong)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_LongPointer_put(JNIEnv *e, jobject o, jlong p0) {
    jlong* pointer = (jlong*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_FloatPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 4))) {
        return;
    }
    float* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new float[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_FloatPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_types_FloatPointer_get(JNIEnv *e, jobject o) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jfloat r = 0;
    float rvalue = *pointer;
    r = (jfloat)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_FloatPointer_put(JNIEnv *e, jobject o, jfloat p0) {
    float* pointer = (float*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_DoublePointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 3))) {
        return;
    }
    double* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new double[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_DoublePointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jdouble JNICALL Java_ni_types_DoublePointer_get(JNIEnv *e, jobject o) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jdouble r = 0;
    double rvalue = *pointer;
    r = (jdouble)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_DoublePointer_put(JNIEnv *e, jobject o, jdouble p0) {
    double* pointer = (double*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_CharPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 1))) {
        return;
    }
    unsigned short* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new unsigned short[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_CharPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jchar JNICALL Java_ni_types_CharPointer_get(JNIEnv *e, jobject o) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jchar r = 0;
    unsigned short rvalue = *pointer;
    r = (jchar)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_CharPointer_put(JNIEnv *e, jobject o, jchar p0) {
    unsigned short* pointer = (unsigned short*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_PointerPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 9))) {
        return;
    }
    void** rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new void*[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_PointerPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_types_PointerPointer_get(JNIEnv *e, jobject o) {
    void** pointer = (void**)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = NULL;
    void* rpointer;
    rpointer = *pointer;
    if (rpointer != NULL) {
        r = e->AllocObject(ni_getClass(e, 8));
        e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
    }
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_PointerPointer_put(JNIEnv *e, jobject o, jobject p0) {
    void** pointer = (void**)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jobject r = o;
    *pointer = pointer0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_CLongPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 2))) {
        return;
    }
    long* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new long[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_CLongPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jlong JNICALL Java_ni_types_CLongPointer_get(JNIEnv *e, jobject o) {
    long* pointer = (long*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = *pointer;
    r = (jlong)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_CLongPointer_put(JNIEnv *e, jobject o, jlong p0) {
    long* pointer = (long*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_SizeTPointer_allocateArray(JNIEnv *e, jobject o, jint p0) {
    if (!e->IsSameObject(e->GetObjectClass(o), ni_getClass(e, 11))) {
        return;
    }
    size_t* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = new size_t[p0];
        jvalue args[2];
        args[0].j = ptr_to_jlong(rpointer);
        args[1].j = ptr_to_jlong(&ni_ni_types_SizeTPointer_deallocateArray);
        e->CallNonvirtualVoidMethodA(o, ni_getClass(e, 8), _JVM->initMethodID, args);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jlong JNICALL Java_ni_types_SizeTPointer_get(JNIEnv *e, jobject o) {
    size_t* pointer = (size_t*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jlong r = 0;
    jlong rvalue = *pointer;
    r = (jlong)rvalue;
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_SizeTPointer_put(JNIEnv *e, jobject o, jlong p0) {
    size_t* pointer = (size_t*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = o;
    *pointer = p0;
    return r;
}

JNIEXPORT jint JNICALL Java_ni_types_IUnknown_getNumRefs(JNIEnv *e, jobject o) {
    ni::iUnknown* pointer = niJVM_GetIUnknown(e,o,ni::iUnknown);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumRefs();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_types_IUnknown_invalidate(JNIEnv *e, jobject o) {
    ni::iUnknown* pointer = niJVM_GetIUnknown(e,o,ni::iUnknown);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Invalidate();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_types_IUnknown_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iUnknown>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_types_IUnknown_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iUnknown>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
