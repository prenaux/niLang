<niIDL
	author="niLang Authors"
	copyright="(c) 2022 The niLang Authors"
	desc="niLang module"
	genentrypoint="no"
	initfunctions="yes"
	interfacesheaderpath="Lang.h"
	name="niLang"
	unknowntype="Ptr"
	version="1,0,0">
	<dependencies/>
	<objecttypes>
		<objecttype name="Lang"/>
		<objecttype name="CryptoRand"/>
		<objecttype name="CryptoHash"/>
		<objecttype name="Crypto"/>
		<objecttype name="Math"/>
		<objecttype name="Concurrent"/>
		<objecttype name="FilePatternRegex"/>
		<objecttype name="PCRE"/>
		<objecttype name="DataTable"/>
		<objecttype name="Console"/>
		<objecttype name="OSWindowGeneric"/>
		<objecttype name="Zip"/>
		<objecttype name="URLFileHandlerManifestFileSystem"/>
		<objecttype name="URLFileHandlerURL"/>
		<objecttype name="URLFileHandlerFileSystem"/>
		<objecttype name="URLFileHandlerZip"/>
		<objecttype name="URLFileHandlerPrefixed"/>
	</objecttypes>
	<includes>
		<include>niLang/src/_idl/ICollection.h.idl.xml</include>
		<include>niLang/src/_idl/IConcurrent.h.idl.xml</include>
		<include>niLang/src/_idl/IConsole.h.idl.xml</include>
		<include>niLang/src/_idl/ICrypto.h.idl.xml</include>
		<include>niLang/src/_idl/IDataTable.h.idl.xml</include>
		<include>niLang/src/_idl/IDeviceResource.h.idl.xml</include>
		<include>niLang/src/_idl/IExpression.h.idl.xml</include>
		<include>niLang/src/_idl/IFile.h.idl.xml</include>
		<include>niLang/src/_idl/IFileSystem.h.idl.xml</include>
		<include>niLang/src/_idl/IGameCtrl.h.idl.xml</include>
		<include>niLang/src/_idl/IHString.h.idl.xml</include>
		<include>niLang/src/_idl/IJson.h.idl.xml</include>
		<include>niLang/src/_idl/ILang.h.idl.xml</include>
		<include>niLang/src/_idl/IMath.h.idl.xml</include>
		<include>niLang/src/_idl/IOSProcess.h.idl.xml</include>
		<include>niLang/src/_idl/IOSWindow.h.idl.xml</include>
		<include>niLang/src/_idl/IProf.h.idl.xml</include>
		<include>niLang/src/_idl/IRegex.h.idl.xml</include>
		<include>niLang/src/_idl/IScriptingHost.h.idl.xml</include>
		<include>niLang/src/_idl/ISerializable.h.idl.xml</include>
		<include>niLang/src/_idl/ISinkList.h.idl.xml</include>
		<include>niLang/src/_idl/ISocket.h.idl.xml</include>
		<include>niLang/src/_idl/IStringTokenizer.h.idl.xml</include>
		<include>niLang/src/_idl/ITime.h.idl.xml</include>
		<include>niLang/src/_idl/IToString.h.idl.xml</include>
		<include>niLang/src/_idl/IXml.h.idl.xml</include>
		<include>niLang/src/_idl/IZip.h.idl.xml</include>
		<include>niLang/src/_idl/ObjModel.h.idl.xml</include>
		<include>niLang/src/_idl/StringBase.h.idl.xml</include>
		<include>niLang/src/_idl/StringDef.h.idl.xml</include>
		<include>niLang/src/_idl/StringLib.h.idl.xml</include>
		<include>niLang/src/_idl/StringLibIt.h.idl.xml</include>
		<include>niLang/src/_idl/Types.h.idl.xml</include>
		<include>niLang/src/_idl/Var.h.idl.xml</include>
	</includes>
	<namespace name="ni" source="niLang/src/_idl/ICollection.h.idl.xml">
		<interface name="iIterator" uuid1="B33C7B41-8EDD-4699-9538-0E2F9CF4E543" uuid2="0xb33c7b41,0x8edd,0x4699,0x95,0x38,0x0e,0x2f,0x9c,0xf4,0xe5,0x43">
			<comments desc="Collection iterator interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getCollection"
				name="GetCollection"
				num_parameters="0"
				property="get"
				property_name2="collection"
				property_name="collection">
				<comments desc="Get the collection in which the iterator operates. "/>
				<return type="iCollection *" typec="iCollection*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasNext"
				name="HasNext"
				num_parameters="0">
				<comments desc="Check whether their is more elements to iterate. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="next" name="Next" num_parameters="0">
				<comments desc="Get the next value. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="key"
				name="Key"
				num_parameters="0">
				<comments desc="Get the current key. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="value"
				name="Value"
				num_parameters="0">
				<comments desc="Get the current value. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iCollection" uuid1="9917D8A6-A85F-4F30-B668-E3176E334BF2" uuid2="0x9917d8a6,0xa85f,0x4f30,0xb6,0x68,0xe3,0x17,0x6e,0x33,0x4b,0xf2">
			<comments desc="Immutable Collection interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getKeyType"
				name="GetKeyType"
				num_parameters="0"
				property="get"
				property_name2="keyType"
				property_name="key_type">
				<comments desc="Get the collection&apos;s key type. ">
					<remark text="Only Associative collections return a valid type here. Although Vector collections can use Put/Get with an index, it is not considered a &quot;key&quot; type. "/>
				</comments>
				<return type="tType" typec="tType" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getValueType"
				name="GetValueType"
				num_parameters="0"
				property="get"
				property_name2="valueType"
				property_name="value_type">
				<comments desc="Get the collection&apos;s value type. "/>
				<return type="tType" typec="tType" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="isEmpty"
				name="IsEmpty"
				num_parameters="0">
				<comments desc="Returns true if this collection contains no elements. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0">
				<comments desc="Returns the number of elements in this collection. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="contains"
				name="Contains"
				num_parameters="1">
				<comments desc="Returns true if this collection contains the specified key. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="containsAll"
				name="ContainsAll"
				num_parameters="1">
				<comments desc="Returns true if this collection contains all of the elements in the specified collection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apCollection"
					type="const iCollection *"
					typec="const iCollection*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="iterator"
				name="Iterator"
				num_parameters="0">
				<comments desc="Returns an iterator over the elements in this collection. "/>
				<return type="iIterator *" typec="iIterator*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="find"
				name="Find"
				num_parameters="1">
				<comments desc="Returns an iterator over starting at the specified elements in this collection. "/>
				<return type="iIterator *" typec="iIterator*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="get"
				name="Get"
				num_parameters="1">
				<comments desc="Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="aKey"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFirst"
				name="GetFirst"
				num_parameters="0"
				property="get"
				property_name2="first"
				property_name="first">
				<comments desc="Returns the first value in the container. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
			<method
				const="yes"
				java_name="getLast"
				name="GetLast"
				num_parameters="0"
				property="get"
				property_name2="last"
				property_name="last">
				<comments desc="Returns the last value in the container. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
		</interface>
		<interface name="iMutableCollection" uuid1="F88402A3-D533-426E-BE12-E69FDFEA0A66" uuid2="0xf88402a3,0xd533,0x426e,0xbe,0x12,0xe6,0x9f,0xdf,0xea,0x0a,0x66">
			<comments desc="Mutable Collection interface. "/>
			<parents>
				<parent name="iCollection"/>
			</parents>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Removes all of the elements from this collection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy a collection of the same type in this collection. " return="eFalse if the specified collection cannot be copied in this collection. ">
					<remark text="Invalidates all the iterators. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apCollection"
					type="const iCollection *"
					typec="const iCollection*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="reserve" name="Reserve" num_parameters="1">
				<comments desc="Reserve memory for the specified number of elements. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="resize" name="Resize" num_parameters="1">
				<comments desc="Resize the collection to the specified number of elements. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="add" name="Add" num_parameters="1">
				<comments desc="Ensures that this collection contains the specified key. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addAll" name="AddAll" num_parameters="1">
				<comments desc="Adds all of the elements in the specified collection to this collection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apCollection"
					type="const iCollection *"
					typec="const iCollection*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="remove" name="Remove" num_parameters="1">
				<comments desc="Removes a single instance of the specified key from this collection, if it is present (optional operation). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeIterator" name="RemoveIterator" num_parameters="1">
				<comments desc="Removes the element pointed by the specified iterator. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apIterator"
					type="iIterator *"
					typec="iIterator*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeAll" name="RemoveAll" num_parameters="1">
				<comments desc="Removes all of this collection&apos;s elements that are also contained in the specified collection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apCollection"
					type="const iCollection *"
					typec="const iCollection*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeFirst" name="RemoveFirst" num_parameters="0">
				<comments desc="Retrieve and remove the first element of the container. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="removeLast" name="RemoveLast" num_parameters="0">
				<comments desc="Retrieve and remove the last element of the container. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="put" name="Put" num_parameters="2">
				<comments desc="Associates the specified value with the specified key. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aKey"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aValue"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setFirst"
				name="SetFirst"
				num_parameters="1"
				property="set"
				property_name2="first"
				property_name="first">
				<comments desc="Sets the first value in the container. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aValue"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setLast"
				name="SetLast"
				num_parameters="1"
				property="set"
				property_name2="last"
				property_name="last">
				<comments desc="Sets the last value in the container. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aValue"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDataPtr"
				name="GetDataPtr"
				num_parameters="0">
				<comments desc="Get a pointer to continous memory that can be read/written directly. ">
					<remark text="Optional "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getDataSize"
				name="GetDataSize"
				num_parameters="0">
				<comments desc="Get the size in bytes of the memory pointed by the data pointer. ">
					<remark text="Optional "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IConcurrent.h.idl.xml">
		<interface name="iRunnable" uuid1="D9BA854F-6310-4BE8-A9B7-0DF74ECE7B35" uuid2="0xd9ba854f,0x6310,0x4be8,0xa9,0xb7,0x0d,0xf7,0x4e,0xce,0x7b,0x35">
			<comments desc="Runnable interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="run" name="Run" num_parameters="0">
				<comments desc=""/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
		</interface>
		<interface name="iCallback" uuid1="8CCC2096-A1B2-4BF3-9C78-410278419F4C" uuid2="0x8ccc2096,0xa1b2,0x4bf3,0x9c,0x78,0x41,0x02,0x78,0x41,0x9f,0x4c">
			<comments desc="Callback interface. ">
				<remark text="A callback is similar to a runnable excepted that it accepts up to two parameters. If it used as a runnable both parameters are set to null. "/>
			</comments>
			<parents>
				<parent name="iRunnable"/>
			</parents>
			<method java_name="runCallback" name="RunCallback" num_parameters="2">
				<comments desc=""/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iRunnableQueue" uuid1="3C6398C4-7AEA-4AEA-8426-2F4CC71DA0A9" uuid2="0x3c6398c4,0x7aea,0x4aea,0x84,0x26,0x2f,0x4c,0xc7,0x1d,0xa0,0xa9">
			<comments desc="Runnable queue interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getThreadID"
				name="GetThreadID"
				num_parameters="0"
				property="get"
				property_name2="threadID"
				property_name="thread_id">
				<comments desc="Get the runnable queue&apos;s owner thread. "/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the number of runnable currently in the queue. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="isEmpty"
				name="IsEmpty"
				num_parameters="0">
				<comments desc="Check whether any runnable is in the queue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="add" name="Add" num_parameters="1">
				<comments desc="Queue a runnable. " return="eFalse if the queue is full, else eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="peek" name="Peek" num_parameters="0">
				<comments desc="Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty or if called from another thread than the owner thread. "/>
				<return type="Ptr&lt;iRunnable&gt;" typec="Ptr&lt;iRunnable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="poll" name="Poll" num_parameters="0">
				<comments desc="Retrieves and removes the head of this queue, or returns null if this queue is empty or if called from another thread than the owner thread. "/>
				<return type="Ptr&lt;iRunnable&gt;" typec="Ptr&lt;iRunnable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="waitForRunnable" name="WaitForRunnable" num_parameters="1">
				<comments desc="Wait for a runnable to be in the queue. " return="eFalse if the called from another thread than the other thread. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeOut"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface
			dispatchwrappercreate="iMessageHandler_CreateDispatchWrapper"
			name="iMessageHandler"
			uuid1="A38A4904-29BF-462A-9E84-BAF90EDD6DC3"
			uuid2="0xa38a4904,0x29bf,0x462a,0x9e,0x84,0xba,0xf9,0x0e,0xdd,0x6d,0xc3">
			<comments desc="Message handler interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getThreadID"
				name="GetThreadID"
				num_parameters="0"
				optional="yes"
				property="get"
				property_name2="threadID"
				property_name="thread_id">
				<comments desc="Get the message handler&apos;s owner thread. That is the thread where HandleMessage will be called. "/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method java_name="handleMessage" name="HandleMessage" num_parameters="3">
				<comments desc="Called when a message should be handled. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anMsg"
					type="const tU32"
					typec="const tU32"
					typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iMessageDesc" uuid1="EBA551C4-82A5-4269-AC3E-A175F5A04FFD" uuid2="0xeba551c4,0x82a5,0x4269,0xac,0x3e,0xa1,0x75,0xf5,0xa0,0x4f,0xfd">
			<comments desc="Message description interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getHandler"
				name="GetHandler"
				num_parameters="0"
				property="get"
				property_name2="handler"
				property_name="handler">
				<comments desc="Get the message handler. "/>
				<return type="iMessageHandler *" typec="iMessageHandler*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getID"
				name="GetID"
				num_parameters="0"
				property="get"
				property_name2="id"
				property_name="id">
				<comments desc="Get the message id. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getA"
				name="GetA"
				num_parameters="0"
				property="get"
				property_name2="a"
				property_name="a">
				<comments desc="Get the message parameter A. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getB"
				name="GetB"
				num_parameters="0"
				property="get"
				property_name2="b"
				property_name="b">
				<comments desc="Get the message parameter B. "/>
				<return type="const Var &amp;" typec="const Var&amp;" typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iMessageQueue" uuid1="DA9D184A-DFDB-49E0-91B8-CF17AE02CA1C" uuid2="0xda9d184a,0xdfdb,0x49e0,0x91,0xb8,0xcf,0x17,0xae,0x02,0xca,0x1c">
			<comments desc="Message queue interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getThreadID"
				name="GetThreadID"
				num_parameters="0"
				property="get"
				property_name2="threadID"
				property_name="thread_id">
				<comments desc="Get the message queue&apos;s owner thread. "/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the number of message currently in the queue. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="isEmpty"
				name="IsEmpty"
				num_parameters="0">
				<comments desc="Check whether any message is in the queue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="add" name="Add" num_parameters="4">
				<comments desc="Queue a message. " return="eFalse if the queue is full or if the message handler&apos;s thread is not the same as the message queue&apos;s thread, else eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apHandler"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="peek"
				name="Peek"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Retrieves, but does not remove, the head of this queue, or returns eFalse if this queue is empty or if called from another thread than the owner thread. "/>
				<return type="tBool" typec="tBool"/>
				<parameter
					last="1"
					name="apMessageDesc"
					type="sMessageDesc *"
					typec="sMessageDesc*"/>
			</method>
			<method java_name="peekDesc" name="PeekDesc" num_parameters="0">
				<comments desc="Same as \see Peek but returns a new iMessageDesc object. "/>
				<return type="Ptr&lt;iMessageDesc&gt;" typec="Ptr&lt;iMessageDesc&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="poll"
				name="Poll"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Retrieves and removes the head of this queue, or returns eFalse if this queue is empty or if called from another thread than the owner thread. "/>
				<return type="tBool" typec="tBool"/>
				<parameter
					last="1"
					name="apMessageDesc"
					type="sMessageDesc *"
					typec="sMessageDesc*"/>
			</method>
			<method java_name="pollDesc" name="PollDesc" num_parameters="0">
				<comments desc="Same as \see Poll but returns a new iMessageDesc object. "/>
				<return type="Ptr&lt;iMessageDesc&gt;" typec="Ptr&lt;iMessageDesc&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pollAndDispatch" name="PollAndDispatch" num_parameters="0">
				<comments desc="Retrieves, removes and call the message handler of the head of this queue, or returns eFalse if this queue is empty or if called from another thread than the owner thread. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="waitForMessage" name="WaitForMessage" num_parameters="1">
				<comments desc="Wait for a message to be in the queue. " return="eFalse if the called from another thread than the other thread. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeOut"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iFuture" uuid1="CA4F4D13-5556-4177-BB7F-41855A4093AC" uuid2="0xca4f4d13,0x5556,0x4177,0xbb,0x7f,0x41,0x85,0x5a,0x40,0x93,0xac">
			<comments desc="Future interface.  A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="cancel" name="Cancel" num_parameters="0">
				<comments desc="Cancel the task associated with the future. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getIsCancelled"
				name="GetIsCancelled"
				num_parameters="0"
				property="get"
				property_name2="isCancelled"
				property_name="is_cancelled">
				<comments desc="Check whether the task has been cancelled. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsDone"
				name="GetIsDone"
				num_parameters="0"
				property="get"
				property_name2="isDone"
				property_name="is_done">
				<comments desc="Return true if this task completed. ">
					<remark text="Equivalent to Wait(0). "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="doWait" name="Wait" num_parameters="1">
				<comments desc="Wait for the value to be set. " return="eFalse if the value hasn&apos;t be set in the specified timeout. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeOut"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getValue"
				name="GetValue"
				num_parameters="0"
				property="get"
				property_name2="value"
				property_name="value">
				<comments desc="Return the result of the computation, returns null if the task is not completed. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
		</interface>
		<interface name="iFutureValue" uuid1="B79D1F47-0F71-495A-8D23-5550CE576A59" uuid2="0xb79d1f47,0x0f71,0x495a,0x8d,0x23,0x55,0x50,0xce,0x57,0x6a,0x59">
			<comments desc="Future value. "/>
			<parents>
				<parent name="iFuture"/>
			</parents>
			<method
				java_name="setValue"
				name="SetValue"
				num_parameters="1"
				property="set"
				property_name2="value"
				property_name="value">
				<comments desc="Sets and signal the future. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aValue"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="reset" name="Reset" num_parameters="0">
				<comments desc="Reset the future to the unset &amp; not-canceled state. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
		<interface name="iExecutor" uuid1="4990B16A-D3CF-42C0-B933-5A9BC06B655F" uuid2="0x4990b16a,0xd3cf,0x42c0,0xb9,0x33,0x5a,0x9b,0xc0,0x6b,0x65,0x5f">
			<comments desc="Executes the submitted iRunnable tasks.  This interface provides a way of decoupling task submission from the mechanism of how each task will be run, including the details of thread use, scheduling, etc.  An executor is normally used instead of explicitly creating threads. However the it does not strictly require the execution to be asynchronous. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getIsShutdown"
				name="GetIsShutdown"
				num_parameters="0"
				property="get"
				property_name2="isShutdown"
				property_name="is_shutdown">
				<comments desc="Returns true if this executor has been shut down. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsTerminated"
				name="GetIsTerminated"
				num_parameters="0"
				property="get"
				property_name2="isTerminated"
				property_name="is_terminated">
				<comments desc="Returns true if all tasks have completed following shut down. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="execute" name="Execute" num_parameters="1">
				<comments desc="Executes the given runnable at some time in the future.  The runnable might execute in a new thread, a thread pool, or in the calling thread, at the discretion of the executor implementation.  " return="false if the executor has been invalidated and cannot execute anymore runnable. ">
					<params text="aRunnable the runnable to execute. "/>
				</comments>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="submit" name="Submit" num_parameters="1">
				<comments desc="Executes the given runnable at some time in the future.  The runnable might execute in a new thread, a thread pool, or in the calling thread, at the discretion of the executor implementation.  " return="A iFuture that is set to the return value of the runnable when it returns. NULL if the executor has been invalidated and cannot execute anymore runnable. ">
					<params text="aRunnable the runnable to execute. "/>
				</comments>
				<return type="Ptr&lt;ni::iFuture&gt;" typec="Ptr&lt;ni::iFuture&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="shutdown" name="Shutdown" num_parameters="1">
				<comments desc="Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Blocks until all tasks have completed execution or the timeout occurs. " return="true if this executor terminated and false if the timeout elapsed before termination. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeOut"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="shutdownNow" name="ShutdownNow" num_parameters="1">
				<comments desc="Attempts to cancel all actively executing tasks, halts the processing of waiting tasks. Blocks until all tasks have completed execution or the timeout occurs. " return="true if this executor terminated and false if the timeout elapsed before termination. ">
					<remark text="Invalidate calls ShutdownNow(eInvalidHandle). "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeOut"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="update" name="Update" num_parameters="1">
				<comments desc="Update the executor. " return="The duration (in milliseconds) of the execution of the runnables. Always 0 for immediate and thread pool executors. ">
					<remark text="On multi-threaded platforms this call is superflous for all but the cooperative executors. For the default executors provided in iConcurrent this should be called in the main app&apos;s for the main executor (which is always cooperative). "/>
					<params text="anTimeSliceInMs the suggested maximum time allocated to execute the runnables queued in the executor, at least one runnable is executed per update if any are queued. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anTimeSliceInMs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="interruptUpdate" name="InterruptUpdate" num_parameters="0">
				<comments desc="Interrupts the update cycle of a cooperative executor early. ">
					<remark text="A use case is to make the next runnables execute on the next frame by using InterruptUpdate() in the current runnable. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
		<interface name="iConcurrent" uuid1="8553D3D4-95F9-4438-B970-06A9F06A74A7" uuid2="0x8553d3d4,0x95f9,0x4438,0xb9,0x70,0x06,0xa9,0xf0,0x6a,0x74,0xa7">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getMainThreadID"
				name="GetMainThreadID"
				num_parameters="0"
				property="get"
				property_name2="mainThreadID"
				property_name="main_thread_id">
				<comments desc=""/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentThreadID"
				name="GetCurrentThreadID"
				num_parameters="0"
				property="get"
				property_name2="currentThreadID"
				property_name="current_thread_id">
				<comments desc=""/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method java_name="createRunnableQueue" name="CreateRunnableQueue" num_parameters="2">
				<comments desc="Create a runnable queue for the specified thread. "/>
				<return type="iRunnableQueue *" typec="iRunnableQueue*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aThreadID"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="aMaxItems"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createExecutorCooperative" name="CreateExecutorCooperative" num_parameters="2">
				<comments desc="Create a cooperative executor. "/>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aThreadID"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="aMaxItems"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createExecutorImmediate" name="CreateExecutorImmediate" num_parameters="0">
				<comments desc="Create an immediate executor. "/>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createExecutorThreadPool" name="CreateExecutorThreadPool" num_parameters="1">
				<comments desc="Create a threaded executor. ">
					<remark text="Always fails on single-threaded platforms. "/>
				</comments>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aNumThreads"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				java_name="getExecutorCPU"
				name="GetExecutorCPU"
				num_parameters="0"
				property="get"
				property_name2="executorCPU"
				property_name="executor_cpu">
				<comments desc="Get the default executor.  The default executor is created with one thread for 2 logical cores, with at least one thread. It should be used for CPU intensive tasks.  ">
					<remark text="On purely single-threaded platforms returns GetExecutorMain().  "/>
				</comments>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="getExecutorIO"
				name="GetExecutorIO"
				num_parameters="0"
				property="get"
				property_name2="executorIO"
				property_name="executor_io">
				<comments desc="Get the IO executor.  The IO executor is created with 2 threads per logical core. It should be used for IO bound tasks.  ">
					<remark text="On purely single-threaded platforms returns GetExecutorMain().  "/>
				</comments>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="getExecutorMain"
				name="GetExecutorMain"
				num_parameters="0"
				property="get"
				property_name2="executorMain"
				property_name="executor_main">
				<comments desc="Get the cooperative executor bound to the main thread. ">
					<remark text="All the runnable submitted to this executor are garanteed to be executed in the main thread. "/>
				</comments>
				<return type="iExecutor *" typec="iExecutor*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="threadRun" name="ThreadRun" num_parameters="1">
				<comments desc="Creates a new thread and run the runnable in it. "/>
				<return type="Ptr&lt;iFuture&gt;" typec="Ptr&lt;iFuture&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFutureValue" name="CreateFutureValue" num_parameters="0">
				<comments desc="Create a future value object. "/>
				<return type="iFutureValue *" typec="iFutureValue*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createMessageDesc" name="CreateMessageDesc" num_parameters="4">
				<comments desc="Create a message desc object. "/>
				<return type="Ptr&lt;iMessageDesc&gt;" typec="Ptr&lt;iMessageDesc&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apHandler"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createMessageQueue" name="CreateMessageQueue" num_parameters="2">
				<comments desc="Create a message queue for the specified thread. ">
					<remark text="Only one message queue can be created per thread, subsequent calls to create a queue for the same thread will fail. "/>
				</comments>
				<return type="Ptr&lt;iMessageQueue&gt;" typec="Ptr&lt;iMessageQueue&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anThreadID"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="aMaxItems"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMessageQueue"
				name="GetMessageQueue"
				num_parameters="1"
				property="get"
				property_name2="messageQueue"
				property_name="message_queue">
				<comments desc="Get the message queue associated with the specified thread. "/>
				<return type="Ptr&lt;iMessageQueue&gt;" typec="Ptr&lt;iMessageQueue&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anThreadID"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method java_name="sendMessage" name="SendMessage" num_parameters="4">
				<comments desc="Send a message to the specified message handler. " return="eTrue if the message as been added to the handler&apos;s thread message queue or if the handler has been called immediatly. Otherwise returns eFalse. ">
					<remark text="If the handler&apos;s thread is the same as the current thread then the handler is called immediatly. Otherwise the message queue&apos;s of the handler&apos;s thread is retrieved and the message is pushed in the queue. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apHandler"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="queueMessage" name="QueueMessage" num_parameters="4">
				<comments desc="Queue a message in the messge queue of the message handler&apos;s thread. " return="eTrue if the message as been added to the handler&apos;s thread message queue. Otherwise returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apHandler"
					type="iMessageHandler *"
					typec="iMessageHandler*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IConsole.h.idl.xml">
		<interface
			dispatchwrapper="yes"
			name="iCommandSink"
			uuid1="4C99779B-AEDF-404C-9543-70C3786E6FAC"
			uuid2="0x4c99779b,0xaedf,0x404c,0x95,0x43,0x70,0xc3,0x78,0x6e,0x6f,0xac">
			<comments desc="Command sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0">
				<comments desc="Name of the command. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNamespace"
				name="GetNamespace"
				num_parameters="0">
				<comments desc="Namespace of the command. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDescription"
				name="GetDescription"
				num_parameters="0">
				<comments desc="Description of the command "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="onRun" name="OnRun" num_parameters="2">
				<comments desc="Run the command. " return="the result of the command execution. ">
					<params text="avArgs are the arguments. "/>
					<params text="apConsole is the console instance the command is run from. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="avArgs"
					type="const tStringCVec *"
					typec="const tStringCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apConsole"
					type="iConsole *"
					typec="iConsole*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			name="iConsoleSink"
			uuid1="415F0FC4-3E03-49EA-B21B-68A510821E19"
			uuid2="0x415f0fc4,0x3e03,0x49ea,0xb2,0x1b,0x68,0xa5,0x10,0x82,0x1e,0x19">
			<comments desc="Console sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="onConsoleSink_NamespaceVariableChanged" name="OnConsoleSink_NamespaceVariableChanged" num_parameters="3">
				<comments desc="Called when a variable value changed "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aNamespace"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="onConsoleSink_BeforeRunCommand" name="OnConsoleSink_BeforeRunCommand" num_parameters="1">
				<comments desc="Called before a console command is ran. " return="false to disallow the command run "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="onConsoleSink_AfterRunCommand" name="OnConsoleSink_AfterRunCommand" num_parameters="1">
				<comments desc="Called after a console command is ran. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="onConsoleSink_BeforeRunScript" name="OnConsoleSink_BeforeRunScript" num_parameters="2">
				<comments desc="Called before a script command is ran. " return="false to disallow the script run "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apHost"
					type="iScriptingHost *"
					typec="iScriptingHost*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="onConsoleSink_AfterRunScript" name="OnConsoleSink_AfterRunScript" num_parameters="2">
				<comments desc="Called after a script command is ran. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apHost"
					type="iScriptingHost *"
					typec="iScriptingHost*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iConsole" uuid1="064C5F0A-32BB-4A7C-9A8D-F88CBDC51350" uuid2="0x064c5f0a,0x32bb,0x4a7c,0x9a,0x8d,0xf8,0x8c,0xbd,0xc5,0x13,0x50">
			<comments desc="Console interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getSinkList"
				name="GetSinkList"
				num_parameters="0"
				property="get"
				property_name2="sinkList"
				property_name="sink_list">
				<comments desc="Get the console sink list. "/>
				<return type="tConsoleSinkLst *" typec="tConsoleSinkLst*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addNamespace" name="AddNamespace" num_parameters="1">
				<comments desc="Add a namespace. ">
					<remark text="if the namespace already exists add a reference to it. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aszNamespace"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeNamespace" name="RemoveNamespace" num_parameters="1">
				<comments desc="Remove a namespace. Delete all sinks, commands and variables in the namespace. " return="eFalse if the namespace don&apos;t exists, else return eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszNamespace"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addVariable" name="AddVariable" num_parameters="2">
				<comments desc="Add a new string variable. " return="eFalse if the variable already exists or that the namespace is not registered, else eTrue. ">
					<params text="aszName name of the variable to create. "/>
					<params text="aszValue is the string value to give to the variable. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="NULL "
					last="1"
					name="aszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeVariable" name="RemoveVariable" num_parameters="1">
				<comments desc="Remove a variable. " return="eFalse if the variable can&apos;t be found and so can&apos;t be removed, else eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setVariable" name="SetVariable" num_parameters="2">
				<comments desc="Set the string value of a variable. " return="eFalse if the variable don&apos;t exists and so can&apos;t be set, else eTrue. ">
					<params text="aszName name of the variable to set. "/>
					<params text="aszValue is the string value to give to the variable. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getVariable" name="GetVariable" num_parameters="1">
				<comments desc="Get the string value of a variable. " return="the value of the variable or an empty string if it doesn&apos;t exist ">
					<params text="aszName name of the variable to get. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="commandExists" name="CommandExists" num_parameters="1">
				<comments desc="Return eTrue if the given command exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addCommand" name="AddCommand" num_parameters="1">
				<comments desc="Add a command in the console. " return="eFalse if the command already exists or that the namespace don&apos;t exists, else eTrue. ">
					<params text="pCmd is the command sink that will be called when the command is runned. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="pCmd"
					type="iCommandSink *"
					typec="iCommandSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeCommand" name="RemoveCommand" num_parameters="1">
				<comments desc="Remove a command of the console. " return="eFalse if the command can&apos;t be found and so can&apos;t be removed, else eTrue. ">
					<params text="aszName is the name of the command to remove. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCommandDescription"
				name="GetCommandDescription"
				num_parameters="1">
				<comments desc="Get the description of a command. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aszCommand"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="runCommand" name="RunCommand" num_parameters="1">
				<comments desc="Run a command. " return="the value returned by the Run() method of iCommandSink or eFalse if the command don&apos;t exists. ">
					<params text="aszCommand is the raw command to parse. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszCommand"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="completeCommandLine" name="CompleteCommandLine" num_parameters="2">
				<comments desc="Complete the given command line. " return="The completed command line, if no match is found returns an empty string. ">
					<params text="aaszCmd is the command line to complete. "/>
					<params text="abNext if eTrue returns the next match, else the previous one. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eTrue "
					last="1"
					name="abNext"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getNumCommands"
				name="GetNumCommands"
				num_parameters="0">
				<comments desc="Get the number of commands in the queue. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="pushCommand" name="PushCommand" num_parameters="1">
				<comments desc="Queue a command to be run later on. " return="eFalse if the command can&apos;t be queue, else eTrue. ">
					<params text="aszCommand is the raw command to parse. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszCommand"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="popCommand" name="PopCommand" num_parameters="0">
				<comments desc="Pop a command from the queue. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method java_name="popAndRunAllCommands" name="PopAndRunAllCommands" num_parameters="0">
				<comments desc="Pop and run all commands in the queue. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ICrypto.h.idl.xml">
		<interface
			min_features="15"
			name="iCryptoRand"
			uuid1="3215A36E-7A27-4CD2-99E3-FE955F94EA3A"
			uuid2="0x3215a36e,0x7a27,0x4cd2,0x99,0xe3,0xfe,0x95,0x5f,0x94,0xea,0x3a">
			<comments desc="Crypto random number generator. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setEntropyLength"
				min_features="15"
				name="SetEntropyLength"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anEntropyLen"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="setReseedInterval"
				min_features="15"
				name="SetReseedInterval"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anInterval"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
			</method>
			<method
				java_name="setPredictionResistance"
				min_features="15"
				name="SetPredictionResistance"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abPR"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="reseed"
				min_features="15"
				name="Reseed"
				num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anAddSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="reseedRaw"
				min_features="15"
				name="ReseedRaw"
				num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apData"
					type="const tPtr"
					typec="const tPtr"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anAddSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="update"
				min_features="15"
				name="Update"
				num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anAddSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="updateRaw"
				min_features="15"
				name="UpdateRaw"
				num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apAdd"
					type="const tPtr"
					typec="const tPtr"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anAddSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="randFile"
				min_features="15"
				name="RandFile"
				num_parameters="2">
				<comments desc=""/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anOutLen"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="randRaw"
				min_features="15"
				name="RandRaw"
				num_parameters="2">
				<comments desc=""/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apOut"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anOutLen"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="randInt"
				min_features="15"
				name="RandInt"
				num_parameters="0">
				<comments desc=""/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method
				java_name="randFloat"
				min_features="15"
				name="RandFloat"
				num_parameters="0">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				java_name="randUUID"
				min_features="15"
				name="RandUUID"
				num_parameters="0">
				<comments desc=""/>
				<return type="tUUID" typec="tUUID" typei="ni::eType_UUID"/>
			</method>
		</interface>
		<interface
			min_features="15"
			name="iCrypto"
			uuid1="E3352941-F1E7-4E62-997D-4EBBF7BD477E"
			uuid2="0xe3352941,0xf1e7,0x4e62,0x99,0x7d,0x4e,0xbb,0xf7,0xbd,0x47,0x7e">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="digest"
				min_features="15"
				name="Digest"
				num_parameters="3">
				<comments desc="Compute the hash of the specified string. Does not include the end zero. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aaszData"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eRawToStringEncoding_Hex "
					last="1"
					name="aEncoding"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="digestRaw"
				min_features="15"
				name="DigestRaw"
				num_parameters="4">
				<comments desc="Compute the hash of the specified data. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="apData"
					type="const tPtr"
					typec="const tPtr"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="aType"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aEncoding"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="digestFile"
				min_features="15"
				name="DigestFile"
				num_parameters="4">
				<comments desc="Compute the hash of the specified data read from the specified file. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="aType"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aEncoding"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="createRand"
				min_features="15"
				name="CreateRand"
				num_parameters="0">
				<comments desc="Create a new random number generator. "/>
				<return type="iCryptoRand *" typec="iCryptoRand*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="getRand"
				min_features="15"
				name="GetRand"
				num_parameters="0"
				property="get"
				property_name2="rand"
				property_name="rand">
				<comments desc="Get the default crypto random number generator. "/>
				<return type="iCryptoRand *" typec="iCryptoRand*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="kdfgenSaltBlowfish"
				min_features="15"
				name="KDFGenSaltBlowfish"
				num_parameters="2">
				<comments desc="Generate a salt for KDFCrypt. \see CryptoKDFGenSaltBlowfish ">
					<remark text="If apRand is NULL the default random number generator is used. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="apRand"
					type="iCryptoRand *"
					typec="iCryptoRand*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRounds"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="kdfcrypt"
				min_features="15"
				name="KDFCrypt"
				num_parameters="2">
				<comments desc="Calculates a crypt(3)-style hash of password. \see CryptoKDFCrypt "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aKey"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSalt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="sigVerify"
				min_features="15"
				name="SigVerify"
				num_parameters="3">
				<comments desc="Verify a RSA signature for a specified payload. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="signatureHex"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="publicKeyPEM"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="payload"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="hmacSignature"
				min_features="15"
				name="HmacSignature"
				num_parameters="6">
				<comments desc="Generate a keyed hash value using the HMAC method. "/>
				<return type="ni::iFile *" typec="ni::iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aAlgo"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apOutput"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apPayload"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPayloadSize"
					type="ni::tSize"
					typec="ni::tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="aSecret"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSecretFormat"
					type="ni::eRawToStringEncoding"
					typec="ni::eRawToStringEncoding"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			min_features="15"
			name="iCryptoHash"
			uuid1="A299806D-929E-40E0-B6B5-E8AF580250AF"
			uuid2="0xa299806d,0x929e,0x40e0,0xb6,0xb5,0xe8,0xaf,0x58,0x02,0x50,0xaf">
			<comments desc="Secure hash interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getHashType"
				min_features="15"
				name="GetHashType"
				num_parameters="0"
				property="get"
				property_name2="hashType"
				property_name="hash_type">
				<comments desc="Get the hash type. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDigestSize"
				min_features="15"
				name="GetDigestSize"
				num_parameters="0"
				property="get"
				property_name2="digestSize"
				property_name="digest_size">
				<comments desc="Get the digest size. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="restart"
				min_features="15"
				name="Restart"
				num_parameters="0">
				<comments desc="Ends the calculation of the current digest and reset the states for a new calculation. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="update"
				min_features="15"
				name="Update"
				num_parameters="2">
				<comments desc="Adds data to the hash calculation, from the current file position for size bytes. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="updateBlock"
				min_features="15"
				name="UpdateBlock"
				num_parameters="3">
				<comments desc="Adds data to the hash calculation, specifing a data range. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aStart"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="aSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="updateRaw"
				min_features="15"
				name="UpdateRaw"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Adds raw data to the hash calculation. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="apData" type="tPtr" typec="tPtr"/>
				<parameter
					last="1"
					name="aSize"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="finalString"
				min_features="15"
				name="FinalString"
				num_parameters="1">
				<comments desc="Ends the calculation of the current digest, return the digest as a string. ">
					<remark text="After final is called new calls to Update can be made to compute a new hash. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aEncoding"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="finalFile"
				min_features="15"
				name="FinalFile"
				num_parameters="1">
				<comments desc="Ends the calculation of the current digest, put the digest in the specified file. ">
					<remark text="After final is called new calls to Update can be made to compute a new hash. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="apOutput"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="finalRaw"
				min_features="15"
				name="FinalRaw"
				num_parameters="2">
				<comments desc="Ends the calculation of the current digest, put the digest in the specified raw memory. ">
					<remark text="After final is called new calls to Update can be made to compute a new hash. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apData"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IDataTable.h.idl.xml">
		<enum name="eDataTablePropertyType">
			<comments desc="Data table property types. "/>
			<value name="eDataTablePropertyType_Unknown" value="eType_Null ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_String" value="eType_String ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Int" value="eType_I64 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Int32" value="eType_I32 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Int64" value="eType_I64 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Bool" value="eType_I8 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Float" value="eType_F64 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Float32" value="eType_F32 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Float64" value="eType_F64 ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Vec2" value="eType_Vec2f ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Vec3" value="eType_Vec3f ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Vec4" value="eType_Vec4f ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_Matrix" value="eType_Matrixf ">
				<comments desc=""/>
			</value>
			<value name="eDataTablePropertyType_IUnknown" value="eType_IUnknown|eTypeFlags_Pointer">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eDataTableCopyFlags">
			<comments desc="Data table copy mode. "/>
			<value name="eDataTableCopyFlags_Default" value="0 ">
				<comments desc="No special flags, will overwrite properties, and wont be recursive. "/>
			</value>
			<value name="eDataTableCopyFlags_Skip" value="niBit ( 0 ) ">
				<comments desc="If a property is already in the destination it&apos;ll be left as is. "/>
			</value>
			<value name="eDataTableCopyFlags_Recursive" value="niBit ( 1 ) ">
				<comments desc="Recursive, children tables will be copied as well (and their own children). "/>
			</value>
			<value name="eDataTableCopyFlags_AppendAllChildren" value="niBit ( 2 ) ">
				<comments desc="All children of the source will be appended. By default children which are in the same sequential order and have the same name as the destination are merged. "/>
			</value>
			<value name="eDataTableCopyFlags_UniqueChild" value="niBit ( 3 ) ">
				<comments desc="Each child data table has a unique name. "/>
			</value>
			<value name="eDataTableCopyFlags_Clone" value="niBit ( 4 ) ">
				<comments desc="Clone all appended children tables. "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iDataTableSink"
			uuid1="3C187C5E-45D3-42C2-9E59-0E2B3315FC48"
			uuid2="0x3c187c5e,0x45d3,0x42c2,0x9e,0x59,0x0e,0x2b,0x33,0x15,0xfc,0x48">
			<comments desc="Data table sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onDataTableSink_SetName"
				name="OnDataTableSink_SetName"
				num_parameters="1"
				optional="yes">
				<comments desc="The name of the data table has been set. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onDataTableSink_AddChild"
				name="OnDataTableSink_AddChild"
				num_parameters="2"
				optional="yes">
				<comments desc="A child data table has been added. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apChild"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onDataTableSink_RemoveChild"
				name="OnDataTableSink_RemoveChild"
				num_parameters="2"
				optional="yes">
				<comments desc="A child data table has been removed. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apChild"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onDataTableSink_SetProperty"
				name="OnDataTableSink_SetProperty"
				num_parameters="2"
				optional="yes">
				<comments desc="A property has been set. ">
					<remark text="Recall that OnDataTableSink_GetProperty will be called from any iDataTable::Get(Index)Property(Type), so it should probably return niVarNull when SetProperty is entered. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anProperty"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="onDataTableSink_SetMetadata"
				name="OnDataTableSink_SetMetadata"
				num_parameters="2"
				optional="yes">
				<comments desc="A property&apos;s meta-data has been set. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anProperty"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="onDataTableSink_RemoveProperty"
				name="OnDataTableSink_RemoveProperty"
				num_parameters="2"
				optional="yes">
				<comments desc="A property is going to be removed. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anProperty"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="onDataTableSink_GetProperty"
				name="OnDataTableSink_GetProperty"
				num_parameters="2"
				optional="yes">
				<comments desc="Get the value of the specified property. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anProperty"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iDataTable" uuid1="6A1F95C1-4D23-4C62-9686-561CB92C36D5" uuid2="0x6a1f95c1,0x4d23,0x4c62,0x96,0x86,0x56,0x1c,0xb9,0x2c,0x36,0xd5">
			<comments desc="Data table. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setName"
				name="SetName"
				num_parameters="1"
				property="set"
				property_name2="name"
				property_name="name">
				<comments desc="Set the table name. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the table name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRoot"
				name="GetRoot"
				num_parameters="0"
				property="get"
				property_name2="root"
				property_name="root">
				<comments desc="Get the root table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getParent"
				name="GetParent"
				num_parameters="0"
				property="get"
				property_name2="parent"
				property_name="parent">
				<comments desc="Get the parent table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPrevSibling"
				name="GetPrevSibling"
				num_parameters="0"
				property="get"
				property_name2="prevSibling"
				property_name="prev_sibling">
				<comments desc="Get the previous sibling of this data table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNextSibling"
				name="GetNextSibling"
				num_parameters="0"
				property="get"
				property_name2="nextSibling"
				property_name="next_sibling">
				<comments desc="Get the next sibling of this data table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIndex"
				name="GetIndex"
				num_parameters="0"
				property="get"
				property_name2="index"
				property_name="index">
				<comments desc="Get the index of this datatable. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this table. ">
					<remark text="Shortcut for CloneEx(eDataTableCopyFlags_Clone|eDataTableCopyFlags_Recursive|eDataTableCopyFlags_AppendAllChildren). "/>
				</comments>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="cloneEx"
				name="CloneEx"
				num_parameters="1">
				<comments desc="Clone this table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMode"
					type="tDataTableCopyFlags"
					typec="tDataTableCopyFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="2">
				<comments desc="Copy the source table inside this table. ">
					<remark text="Automatically convert to this type if the type is not the same as this table. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apSource"
					type="const iDataTable *"
					typec="const iDataTable*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMode"
					type="tDataTableCopyFlags"
					typec="tDataTableCopyFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the children datatables and properties. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getHasSink"
				name="GetHasSink"
				num_parameters="0"
				property="get"
				property_name2="hasSink"
				property_name="has_sink">
				<comments desc="Check if any sink is inside the data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getSinkList"
				name="GetSinkList"
				num_parameters="0"
				property="get"
				property_name2="sinkList"
				property_name="sink_list">
				<comments desc="Get the data table&apos;s sink list. "/>
				<return type="tDataTableSinkLst *" typec="tDataTableSinkLst*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clearChildren" name="ClearChildren" num_parameters="0">
				<comments desc="Clear the child tables. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumChildren"
				name="GetNumChildren"
				num_parameters="0"
				property="get"
				property_name2="numChildren"
				property_name="num_children">
				<comments desc="Get the number of child tables. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getChildIndex"
				name="GetChildIndex"
				num_parameters="1"
				property="get"
				property_name2="childIndex"
				property_name="child_index">
				<comments desc="Get the index of the first child table with the specified name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChild"
				name="GetChild"
				num_parameters="1"
				property="get"
				property_name2="child"
				property_name="child">
				<comments desc="Get the child table with the specified name. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getChildFromIndex"
				name="GetChildFromIndex"
				num_parameters="1"
				property="get"
				property_name2="childFromIndex"
				property_name="child_from_index">
				<comments desc="Get the child table at the specified index. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="addChild" name="AddChild" num_parameters="1">
				<comments desc="Append a child table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apTable"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeChild" name="RemoveChild" num_parameters="1">
				<comments desc="Remove the child table at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clearProperties" name="ClearProperties" num_parameters="0">
				<comments desc="Clear the properties. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="removeProperty" name="RemoveProperty" num_parameters="1">
				<comments desc="Remove the property with the specified name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removePropertyFromIndex" name="RemovePropertyFromIndex" num_parameters="1">
				<comments desc="Remove the property at the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumProperties"
				name="GetNumProperties"
				num_parameters="0"
				property="get"
				property_name2="numProperties"
				property_name="num_properties">
				<comments desc="Get the number of properties in the table. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPropertyIndex"
				name="GetPropertyIndex"
				num_parameters="1"
				property="get"
				property_name2="propertyIndex"
				property_name="property_index">
				<comments desc="Get the index of the specified property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPropertyName"
				name="GetPropertyName"
				num_parameters="1"
				property="get"
				property_name2="propertyName"
				property_name="property_name">
				<comments desc="Get the name of the property at the specified index. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPropertyType"
				name="GetPropertyType"
				num_parameters="1"
				property="get"
				property_name2="propertyType"
				property_name="property_type">
				<comments desc="Get the type of a property. "/>
				<return type="eDataTablePropertyType" typec="eDataTablePropertyType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPropertyTypeFromIndex"
				name="GetPropertyTypeFromIndex"
				num_parameters="1"
				property="get"
				property_name2="propertyTypeFromIndex"
				property_name="property_type_from_index">
				<comments desc="Get the type of the property at the specified index. "/>
				<return type="eDataTablePropertyType" typec="eDataTablePropertyType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="hasProperty"
				name="HasProperty"
				num_parameters="1">
				<comments desc="Check whether the data table has a property with the specified name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMetadata"
				name="SetMetadata"
				num_parameters="2"
				property="set"
				property_name2="metadata"
				property_name="metadata">
				<comments desc="Set a property meta-data. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspData"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMetadata"
				name="GetMetadata"
				num_parameters="1"
				property="get"
				property_name2="metadata"
				property_name="metadata">
				<comments desc="Get a property meta-data. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMetadataFromIndex"
				name="SetMetadataFromIndex"
				num_parameters="2"
				property="set"
				property_name2="metadataFromIndex"
				property_name="metadata_from_index">
				<comments desc="Set a property meta-data. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="ahspData"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMetadataFromIndex"
				name="GetMetadataFromIndex"
				num_parameters="1"
				property="get"
				property_name2="metadataFromIndex"
				property_name="metadata_from_index">
				<comments desc="Get a property meta-data. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVar"
				name="GetVar"
				num_parameters="1"
				property="get"
				property_name2="var"
				property_name="var">
				<comments desc="Get a Var property. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVarFromIndex"
				name="GetVarFromIndex"
				num_parameters="1"
				property="get"
				property_name2="varFromIndex"
				property_name="var_from_index">
				<comments desc="Get a Var property from the specified index. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVarDefault"
				name="GetVarDefault"
				num_parameters="2">
				<comments desc="Get a Var property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getString"
				name="GetString"
				num_parameters="1"
				property="get"
				property_name2="string"
				property_name="string">
				<comments desc="Get a String property. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStringFromIndex"
				name="GetStringFromIndex"
				num_parameters="1"
				property="get"
				property_name2="stringFromIndex"
				property_name="string_from_index">
				<comments desc="Get a String property from the specified index. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getStringDefault"
				name="GetStringDefault"
				num_parameters="2">
				<comments desc="Get a String property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHString"
				name="GetHString"
				num_parameters="1"
				property="get"
				property_name2="hstring"
				property_name="hstring">
				<comments desc="Get a HString property. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHStringFromIndex"
				name="GetHStringFromIndex"
				num_parameters="1"
				property="get"
				property_name2="hstringFromIndex"
				property_name="hstring_from_index">
				<comments desc="Get a HString property from the specified index. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHStringDefault"
				name="GetHStringDefault"
				num_parameters="2">
				<comments desc="Get a HString property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getInt"
				name="GetInt"
				num_parameters="1"
				property="get"
				property_name2="int"
				property_name="int">
				<comments desc="Get a Int property. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIntFromIndex"
				name="GetIntFromIndex"
				num_parameters="1"
				property="get"
				property_name2="intFromIndex"
				property_name="int_from_index">
				<comments desc="Get a Int property from the specified index. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIntDefault"
				name="GetIntDefault"
				num_parameters="2">
				<comments desc="Get a Int property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getBool"
				name="GetBool"
				num_parameters="1"
				property="get"
				property_name2="bool"
				property_name="bool">
				<comments desc="Get a Bool property. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBoolFromIndex"
				name="GetBoolFromIndex"
				num_parameters="1"
				property="get"
				property_name2="boolFromIndex"
				property_name="bool_from_index">
				<comments desc="Get a Bool property from the specified index. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getBoolDefault"
				name="GetBoolDefault"
				num_parameters="2">
				<comments desc="Get a Bool property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFloat"
				name="GetFloat"
				num_parameters="1"
				property="get"
				property_name2="float"
				property_name="float">
				<comments desc="Get a Float property. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFloatFromIndex"
				name="GetFloatFromIndex"
				num_parameters="1"
				property="get"
				property_name2="floatFromIndex"
				property_name="float_from_index">
				<comments desc="Get a Float property from the specified index. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFloatDefault"
				name="GetFloatDefault"
				num_parameters="2">
				<comments desc="Get a Float property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getVec2"
				name="GetVec2"
				num_parameters="1"
				property="get"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Get a Vec2 property. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec2FromIndex"
				name="GetVec2FromIndex"
				num_parameters="1"
				property="get"
				property_name2="vec2FromIndex"
				property_name="vec2from_index">
				<comments desc="Get a Vec2 property from the specified index. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVec2Default"
				name="GetVec2Default"
				num_parameters="2">
				<comments desc="Get a Vec2 property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec3"
				name="GetVec3"
				num_parameters="1"
				property="get"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Get a Vec3 property. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec3FromIndex"
				name="GetVec3FromIndex"
				num_parameters="1"
				property="get"
				property_name2="vec3FromIndex"
				property_name="vec3from_index">
				<comments desc="Get a Vec3 property from the specified index. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVec3Default"
				name="GetVec3Default"
				num_parameters="2">
				<comments desc="Get a Vec3 property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec4"
				name="GetVec4"
				num_parameters="1"
				property="get"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Get a Vec4 property. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec4FromIndex"
				name="GetVec4FromIndex"
				num_parameters="1"
				property="get"
				property_name2="vec4FromIndex"
				property_name="vec4from_index">
				<comments desc="Get a Vec4 property from the specified index. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getVec4Default"
				name="GetVec4Default"
				num_parameters="2">
				<comments desc="Get a Vec4 property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCol3"
				name="GetCol3"
				num_parameters="1"
				property="get"
				property_name2="col3"
				property_name="col3">
				<comments desc="Get a Color3 property. ">
					<remark text="Returns sVec3f::One() if the property cannot found. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCol3FromIndex"
				name="GetCol3FromIndex"
				num_parameters="1"
				property="get"
				property_name2="col3FromIndex"
				property_name="col3from_index">
				<comments desc="Get a Color3 property from the specified index. ">
					<remark text="Returns sVec3f::One() if the property cannot found. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getCol4"
				name="GetCol4"
				num_parameters="1"
				property="get"
				property_name2="col4"
				property_name="col4">
				<comments desc="Get a Color4 property. ">
					<remark text="Returns sVec4f::One() if the property cannot found. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCol4FromIndex"
				name="GetCol4FromIndex"
				num_parameters="1"
				property="get"
				property_name2="col4FromIndex"
				property_name="col4from_index">
				<comments desc="Get a Color4 property from the specified index. ">
					<remark text="Returns sVec4f::One() if the property cannot found. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				name="GetMatrix"
				num_parameters="1"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get a Matrix property. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrixFromIndex"
				name="GetMatrixFromIndex"
				num_parameters="1"
				property="get"
				property_name2="matrixFromIndex"
				property_name="matrix_from_index">
				<comments desc="Get a Matrix property from the specified index. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMatrixDefault"
				name="GetMatrixDefault"
				num_parameters="2">
				<comments desc="Get a Matrix property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknown"
				name="GetIUnknown"
				num_parameters="1"
				property="get"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Get a IUnknown property. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknownFromIndex"
				name="GetIUnknownFromIndex"
				num_parameters="1"
				property="get"
				property_name2="iunknownFromIndex"
				property_name="iunknown_from_index">
				<comments desc="Get a IUnknown property from the specified index. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknownDefault"
				name="GetIUnknownDefault"
				num_parameters="2">
				<comments desc="Get a IUnknown property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEnum"
				name="GetEnum"
				num_parameters="3">
				<comments desc="Get a Enum property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getEnumFromIndex"
				name="GetEnumFromIndex"
				num_parameters="3">
				<comments desc="Get a Enum property from the specified index. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getEnumDefault"
				name="GetEnumDefault"
				num_parameters="4">
				<comments desc="Get a Enum property. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="v"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setVar"
				name="SetVar"
				num_parameters="2"
				property="set"
				property_name2="var"
				property_name="var">
				<comments desc="Set a Var property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVarFromIndex"
				name="SetVarFromIndex"
				num_parameters="2"
				property="set"
				property_name2="varFromIndex"
				property_name="var_from_index">
				<comments desc="Set a Var property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setString"
				name="SetString"
				num_parameters="2"
				property="set"
				property_name2="string"
				property_name="string">
				<comments desc="Set a String property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setStringFromIndex"
				name="SetStringFromIndex"
				num_parameters="2"
				property="set"
				property_name2="stringFromIndex"
				property_name="string_from_index">
				<comments desc="Set a String property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setHString"
				name="SetHString"
				num_parameters="2"
				property="set"
				property_name2="hstring"
				property_name="hstring">
				<comments desc="Set a HString property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setHStringFromIndex"
				name="SetHStringFromIndex"
				num_parameters="2"
				property="set"
				property_name2="hstringFromIndex"
				property_name="hstring_from_index">
				<comments desc="Set a HString property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setInt"
				name="SetInt"
				num_parameters="2"
				property="set"
				property_name2="int"
				property_name="int">
				<comments desc="Set a Int property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="setIntFromIndex"
				name="SetIntFromIndex"
				num_parameters="2"
				property="set"
				property_name2="intFromIndex"
				property_name="int_from_index">
				<comments desc="Set a Int property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="setBool"
				name="SetBool"
				num_parameters="2"
				property="set"
				property_name2="bool"
				property_name="bool">
				<comments desc="Set a Bool property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setBoolFromIndex"
				name="SetBoolFromIndex"
				num_parameters="2"
				property="set"
				property_name2="boolFromIndex"
				property_name="bool_from_index">
				<comments desc="Set a Bool property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFloat"
				name="SetFloat"
				num_parameters="2"
				property="set"
				property_name2="float"
				property_name="float">
				<comments desc="Set a Float property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setFloatFromIndex"
				name="SetFloatFromIndex"
				num_parameters="2"
				property="set"
				property_name2="floatFromIndex"
				property_name="float_from_index">
				<comments desc="Set a Float property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setVec2"
				name="SetVec2"
				num_parameters="2"
				property="set"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Set a Vec2 property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec2FromIndex"
				name="SetVec2FromIndex"
				num_parameters="2"
				property="set"
				property_name2="vec2FromIndex"
				property_name="vec2from_index">
				<comments desc="Set a Vec2 property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec3"
				name="SetVec3"
				num_parameters="2"
				property="set"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Set a Vec3 property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec3FromIndex"
				name="SetVec3FromIndex"
				num_parameters="2"
				property="set"
				property_name2="vec3FromIndex"
				property_name="vec3from_index">
				<comments desc="Set a Vec3 property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec4"
				name="SetVec4"
				num_parameters="2"
				property="set"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Set a Vec4 property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec4FromIndex"
				name="SetVec4FromIndex"
				num_parameters="2"
				property="set"
				property_name2="vec4FromIndex"
				property_name="vec4from_index">
				<comments desc="Set a Vec4 property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMatrix"
				name="SetMatrix"
				num_parameters="2"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set a Matrix property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMatrixFromIndex"
				name="SetMatrixFromIndex"
				num_parameters="2"
				property="set"
				property_name2="matrixFromIndex"
				property_name="matrix_from_index">
				<comments desc="Set a Matrix property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIUnknown"
				name="SetIUnknown"
				num_parameters="2"
				property="set"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Set a IUnknown property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIUnknownFromIndex"
				name="SetIUnknownFromIndex"
				num_parameters="2"
				property="set"
				property_name2="iunknownFromIndex"
				property_name="iunknown_from_index">
				<comments desc="Set a IUnknown property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setEnum" name="SetEnum" num_parameters="4">
				<comments desc="Set an Enum property. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anVal"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="setEnumFromIndex" name="SetEnumFromIndex" num_parameters="4">
				<comments desc="Set an Enum property from the specified index. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anVal"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setRawVar"
				name="SetRawVar"
				num_parameters="2"
				property="set"
				property_name2="rawVar"
				property_name="raw_var">
				<comments desc="Set a Var property without ever calling the callback sink. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setRawVarFromIndex"
				name="SetRawVarFromIndex"
				num_parameters="2"
				property="set"
				property_name2="rawVarFromIndex"
				property_name="raw_var_from_index">
				<comments desc="Set a Var property from the specified index without ever calling the callback sink. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRawVar"
				name="GetRawVar"
				num_parameters="1"
				property="get"
				property_name2="rawVar"
				property_name="raw_var">
				<comments desc="Get a Var property without ever calling the callback sink. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRawVarFromIndex"
				name="GetRawVarFromIndex"
				num_parameters="1"
				property="get"
				property_name2="rawVarFromIndex"
				property_name="raw_var_from_index">
				<comments desc="Get a Var property from the specified index without ever calling the callback sink.. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getRawVarDefault"
				name="GetRawVarDefault"
				num_parameters="2">
				<comments desc="Get a Var property without ever calling the callback sink. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="newVarFromPath" name="NewVarFromPath" num_parameters="2">
				<comments desc="Set a new variant property. Property name being a path. " return="false if the the path doesnt exist and cant be created. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVal"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setVarFromPath" name="SetVarFromPath" num_parameters="2">
				<comments desc="Set a variant property. Property name being a path. Return false if the path doesnt exist. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVal"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVarFromPath"
				name="GetVarFromPath"
				num_parameters="2">
				<comments desc="Get a variant property. Property name being a path. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					name="aPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aDefault"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDataTableReadStack" uuid1="8FD58593-F9BC-4368-8257-9975CABE193F" uuid2="0x8fd58593,0xf9bc,0x4368,0x82,0x57,0x99,0x75,0xca,0xbe,0x19,0x3f">
			<comments desc="Data table read stack interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getTop"
				name="GetTop"
				num_parameters="0"
				property="get"
				property_name2="top"
				property_name="top">
				<comments desc="Get the top of the data table stack. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the name of the top data table. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumChildren"
				name="GetNumChildren"
				num_parameters="0"
				property="get"
				property_name2="numChildren"
				property_name="num_children">
				<comments desc="Get the number of child data table of the top data table. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="pushChild" name="PushChild" num_parameters="1">
				<comments desc="Push the specified child data table on top of the stack. Push a NULL data table if it doesn&apos;t exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="pushChildFail" name="PushChildFail" num_parameters="1">
				<comments desc="Push the specified child data table on top of the stack. Do not push a data table if it doesn&apos;t exists and returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="push" name="Push" num_parameters="1">
				<comments desc="Push the specified data table on top of the stack. Push a NULL data table if it doesn&apos;t exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushFail" name="PushFail" num_parameters="1">
				<comments desc="Push the specified data table on top of the stack. Do not push a data table if it doesn&apos;t exists and returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushEx" name="PushEx" num_parameters="3">
				<comments desc="Push the specified data table on top of the stack. Push a NULL data table if it doesn&apos;t exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushFailEx" name="PushFailEx" num_parameters="3">
				<comments desc="Push the specified data table on top of the stack. Do not push a data table if it doesn&apos;t exists and returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pop" name="Pop" num_parameters="0">
				<comments desc="Pop the top data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="hasProperty"
				name="HasProperty"
				num_parameters="1">
				<comments desc="Check whether the top data table has a property with the specified name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeProperty" name="RemoveProperty" num_parameters="1">
				<comments desc="Remove a property of the top data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getString"
				name="GetString"
				num_parameters="1"
				property="get"
				property_name2="string"
				property_name="string">
				<comments desc="Get a String of the top data table. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getStringDefault"
				name="GetStringDefault"
				num_parameters="2">
				<comments desc="Get a String of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHString"
				name="GetHString"
				num_parameters="1"
				property="get"
				property_name2="hstring"
				property_name="hstring">
				<comments desc="Get a HString of the top data table. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHStringDefault"
				name="GetHStringDefault"
				num_parameters="2">
				<comments desc="Get a HString of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getInt"
				name="GetInt"
				num_parameters="1"
				property="get"
				property_name2="int"
				property_name="int">
				<comments desc="Get a Int of the top data table. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIntDefault"
				name="GetIntDefault"
				num_parameters="2">
				<comments desc="Get a Int of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getBool"
				name="GetBool"
				num_parameters="1"
				property="get"
				property_name2="bool"
				property_name="bool">
				<comments desc="Get a Bool of the top data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getBoolDefault"
				name="GetBoolDefault"
				num_parameters="2">
				<comments desc="Get a Bool of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFloat"
				name="GetFloat"
				num_parameters="1"
				property="get"
				property_name2="float"
				property_name="float">
				<comments desc="Get a Float of the top data table. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFloatDefault"
				name="GetFloatDefault"
				num_parameters="2">
				<comments desc="Get a Float of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getVec2"
				name="GetVec2"
				num_parameters="1"
				property="get"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Get a Vec2 of the top data table. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec2Default"
				name="GetVec2Default"
				num_parameters="2">
				<comments desc="Get a Vec2 of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec3"
				name="GetVec3"
				num_parameters="1"
				property="get"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Get a Vec3 of the top data table. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec3Default"
				name="GetVec3Default"
				num_parameters="2">
				<comments desc="Get a Vec3 of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec4"
				name="GetVec4"
				num_parameters="1"
				property="get"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Get a Vec4 of the top data table. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec4Default"
				name="GetVec4Default"
				num_parameters="2">
				<comments desc="Get a Vec4 of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCol3"
				name="GetCol3"
				num_parameters="1"
				property="get"
				property_name2="col3"
				property_name="col3">
				<comments desc="Get a Color3 of the top data table. ">
					<remark text="This is equivalent to GetVec3Default(name,sVec3f(1,1,1)) "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCol4"
				name="GetCol4"
				num_parameters="1"
				property="get"
				property_name2="col4"
				property_name="col4">
				<comments desc="Get a Color4 of the top data table. ">
					<remark text="This is equivalent to GetVec3Default(name,sVec3f(1,1,1,1)) "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				name="GetMatrix"
				num_parameters="1"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get a Matrix of the top data table. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrixDefault"
				name="GetMatrixDefault"
				num_parameters="2">
				<comments desc="Get a Matrix of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknown"
				name="GetIUnknown"
				num_parameters="1"
				property="get"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Get a IUnknown of the top data table. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknownDefault"
				name="GetIUnknownDefault"
				num_parameters="2">
				<comments desc="Get a IUnknown of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEnum"
				name="GetEnum"
				num_parameters="3">
				<comments desc="Get a Enum of the top data table. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getEnumDefault"
				name="GetEnumDefault"
				num_parameters="4">
				<comments desc="Get a Enum of the top data table. ">
					<remark text="Allow to specify the default value. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="v"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMetadata"
				name="GetMetadata"
				num_parameters="1"
				property="get"
				property_name2="metadata"
				property_name="metadata">
				<comments desc="Get a property meta-data. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDataTableWriteStack" uuid1="3F35C253-8A23-4D2F-9AF9-4715BC807F31" uuid2="0x3f35c253,0x8a23,0x4d2f,0x9a,0xf9,0x47,0x15,0xbc,0x80,0x7f,0x31">
			<comments desc="Data table write stack interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getTop"
				name="GetTop"
				num_parameters="0"
				property="get"
				property_name2="top"
				property_name="top">
				<comments desc="Get the top of the data table stack. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="setName"
				name="SetName"
				num_parameters="1"
				property="set"
				property_name2="name"
				property_name="name">
				<comments desc="Set the name of the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Get the name of the top data table. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumChildren"
				name="GetNumChildren"
				num_parameters="0"
				property="get"
				property_name2="numChildren"
				property_name="num_children">
				<comments desc="Get the number of child data table of the top data table. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="pushChild" name="PushChild" num_parameters="1">
				<comments desc="Push the specified child data table on top of the stack. Push a NULL data table if it doesn&apos;t exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="pushChildFail" name="PushChildFail" num_parameters="1">
				<comments desc="Push the specified child data table on top of the stack. Do not push a data table if it doesn&apos;t exists and returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="push" name="Push" num_parameters="1">
				<comments desc="Push a data table with the given name on top of the stack. If a child data table with the given name doesn&apos;t exists, creates it. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushFail" name="PushFail" num_parameters="1">
				<comments desc="Push a data table with the given name on top of the stack. If a child data table with the given name doesn&apos;t exists, return eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushNew" name="PushNew" num_parameters="1">
				<comments desc="Push a new data table on top of the stack. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushAppend" name="PushAppend" num_parameters="1">
				<comments desc="Append the given data table, and push it on top of the stack. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushEx" name="PushEx" num_parameters="3">
				<comments desc="Push the specified data table on top of the stack. Push a NULL data table if it doesn&apos;t exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pushFailEx" name="PushFailEx" num_parameters="3">
				<comments desc="Push the specified data table on top of the stack. Do not push a data table if it doesn&apos;t exists and returns eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszVal"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pop" name="Pop" num_parameters="0">
				<comments desc="Pop the top data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="hasProperty"
				name="HasProperty"
				num_parameters="1">
				<comments desc="Check whether the top data table has a property with the specified name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeProperty" name="RemoveProperty" num_parameters="1">
				<comments desc="Remove a property of the top data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setString"
				name="SetString"
				num_parameters="2"
				property="set"
				property_name2="string"
				property_name="string">
				<comments desc="Set a String in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setHString"
				name="SetHString"
				num_parameters="2"
				property="set"
				property_name2="hstring"
				property_name="hstring">
				<comments desc="Set a HString in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setInt"
				name="SetInt"
				num_parameters="2"
				property="set"
				property_name2="int"
				property_name="int">
				<comments desc="Set a Int in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="setBool"
				name="SetBool"
				num_parameters="2"
				property="set"
				property_name2="bool"
				property_name="bool">
				<comments desc="Set a Bool in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setFloat"
				name="SetFloat"
				num_parameters="2"
				property="set"
				property_name2="float"
				property_name="float">
				<comments desc="Set a Float in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setVec2"
				name="SetVec2"
				num_parameters="2"
				property="set"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Set a Vec2 in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec3"
				name="SetVec3"
				num_parameters="2"
				property="set"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Set a Vec3 in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setVec4"
				name="SetVec4"
				num_parameters="2"
				property="set"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Set a Vec4 in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMatrix"
				name="SetMatrix"
				num_parameters="2"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set a Matrix in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setIUnknown"
				name="SetIUnknown"
				num_parameters="2"
				property="set"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Set a IUnknown in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="v"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setEnum" name="SetEnum" num_parameters="4">
				<comments desc="Set a Enum in the top data table. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anVal"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setMetadata"
				name="SetMetadata"
				num_parameters="2"
				property="set"
				property_name2="metadata"
				property_name="metadata">
				<comments desc="Set a property meta-data. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszProp"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspData"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IDeviceResource.h.idl.xml">
		<interface name="iDeviceResource" uuid1="BD49FEA5-D9E4-4798-A3FE-1EF390980CE7" uuid2="0xbd49fea5,0xd9e4,0x4798,0xa3,0xfe,0x1e,0xf3,0x90,0x98,0x0c,0xe7">
			<comments desc="Device resource interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getDeviceResourceName"
				name="GetDeviceResourceName"
				num_parameters="0"
				property="get"
				property_name2="deviceResourceName"
				property_name="device_resource_name">
				<comments desc="Get the resource&apos;s name. " return="NULL if the resource is not named. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="hasDeviceResourceBeenReset" name="HasDeviceResourceBeenReset" num_parameters="1">
				<comments desc="Check whether the device resource has just been reset. ">
					<params text="abClearFlag: if true the next call to HasDeviceResourceBeenReset will return false. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abClearFlag"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="resetDeviceResource" name="ResetDeviceResource" num_parameters="0">
				<comments desc="Reset the device resource. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="bind" name="Bind" num_parameters="1">
				<comments desc="Called when the resource is going to be used by the device. ">
					<remark text="Should return a device-compatible resource to be used. "/>
					<remark text="This allows resources to be virtual, proxy &apos;resources&apos; can be created to mimic the device resource and return a valid device-compatible resource only when Bind is called. "/>
					<remark text="Object that make use of this method documents it in the interface declaration with the remark &quot;Bindable&quot; "/>
					<params text="apDevice is an implementation/device specific object passed to bind to support things such as virtual device resources. "/>
				</comments>
				<return type="iDeviceResource *" typec="iDeviceResource*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDevice"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iDeviceResourceManager" uuid1="96AA6BB9-898D-4D68-AD3F-5A390BDC6205" uuid2="0x96aa6bb9,0x898d,0x4d68,0xad,0x3f,0x5a,0x39,0x0b,0xdc,0x62,0x05">
			<comments desc="Device resource manager interface. ">
				<remark text="When the inteface is released it invalidates all the device resources contained. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Resource type. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Clear the resource manager and invalidate all resources. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the number of resources in the manager. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFromName"
				name="GetFromName"
				num_parameters="1"
				property="get"
				property_name2="fromName"
				property_name="from_name">
				<comments desc="Get a resource in the manager. "/>
				<return type="iDeviceResource *" typec="iDeviceResource*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFromIndex"
				name="GetFromIndex"
				num_parameters="1"
				property="get"
				property_name2="fromIndex"
				property_name="from_index">
				<comments desc="Get the resource at the specified index. "/>
				<return type="iDeviceResource *" typec="iDeviceResource*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="register" name="Register" num_parameters="1">
				<comments desc="Register a resource in the manager. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apRes"
					type="iDeviceResource *"
					typec="iDeviceResource*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="unregister" name="Unregister" num_parameters="1">
				<comments desc="Unregister a resource in the manager. ">
					<remark text="When you unregister a resource in an Invalidate method or destructor you need to prevent against double unregistrations which would lead to problems in unexpected places down the line. Two ways to do so are to set the device resource&apos;s name to null once unregistered, or better yet, to make sure that Unregister is never called twice even if the Invalidate method or destructor are called more than once. Note that just setting the device resource&apos;s name to null will still require the device resource manager to lookup the resource by pointer which is inefficient. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apRes"
					type="iDeviceResource *"
					typec="iDeviceResource*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IExpression.h.idl.xml">
		<enum name="eExpressionVariableType">
			<comments desc="Expression variables types. "/>
			<value name="eExpressionVariableType_Float" value="0 ">
				<comments desc="Real number variable type. Constructors: -x, x, x.y, -x.y "/>
			</value>
			<value name="eExpressionVariableType_Vec2" value="1 ">
				<comments desc="2D vector variable type. Constructors: Vec2() "/>
			</value>
			<value name="eExpressionVariableType_Vec3" value="2 ">
				<comments desc="3D vector variable type. Constructors: Vec3(), RGB() "/>
			</value>
			<value name="eExpressionVariableType_Vec4" value="3 ">
				<comments desc="4D vector variable type. Constructors: Vec4(), RGBA(), Quat(), Plane() "/>
			</value>
			<value name="eExpressionVariableType_Matrix" value="4 ">
				<comments desc="Matrix variable type. Constructors: Matrix() "/>
			</value>
			<value name="eExpressionVariableType_String" value="5 ">
				<comments desc="String type. Constructors: &quot;string&quot;, &apos;string&apos; "/>
			</value>
			<value name="eExpressionVariableType_IUnknown" value="6 ">
				<comments desc="Pointer type. Constructors: "/>
			</value>
		</enum>
		<enum name="eExpressionVariableFlags">
			<comments desc="Expression variables flags. "/>
			<value name="eExpressionVariableFlags_Default" value="0 ">
				<comments desc="Default flags value. "/>
			</value>
			<value name="eExpressionVariableFlags_Reserved" value="niBit ( 0 ) ">
				<comments desc="Variable is reserved. ">
					<remark text="Reserved variables cant be removed. "/>
				</comments>
			</value>
			<value name="eExpressionVariableFlags_Constant" value="niBit ( 1 ) ">
				<comments desc="Constant variable, read-only. "/>
			</value>
			<value name="eExpressionVariableFlags_Color" value="niBit ( 2 ) ">
				<comments desc="Variable is the result of a color function. "/>
			</value>
			<value name="eExpressionVariableFlags_Quat" value="niBit ( 3 ) ">
				<comments desc="Variable is the result of a quaternion function. "/>
			</value>
		</enum>
		<interface name="iExpressionVariable" uuid1="69569E99-6B3A-444C-B375-D2CEB3749B4B" uuid2="0x69569e99,0x6b3a,0x444c,0xb3,0x75,0xd2,0xce,0xb3,0x74,0x9b,0x4b">
			<comments desc="Expression variable interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="setName" name="SetName" num_parameters="1">
				<comments desc="Set the variable name. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspString"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0">
				<comments desc="Get the variable name. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified variable. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apVar"
					type="const iExpressionVariable *"
					typec="const iExpressionVariable*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this variable. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the variable&apos;s type. "/>
				<return type="eExpressionVariableType" typec="eExpressionVariableType" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFlags"
				name="GetFlags"
				num_parameters="0"
				property="get"
				property_name2="flags"
				property_name="flags">
				<comments desc="Get the variable&apos;s flags. "/>
				<return type="tExpressionVariableFlags" typec="tExpressionVariableFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setFloat"
				name="SetFloat"
				num_parameters="1"
				property="set"
				property_name2="float"
				property_name="float">
				<comments desc="Set the float value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getFloat"
				name="GetFloat"
				num_parameters="0"
				property="get"
				property_name2="float"
				property_name="float">
				<comments desc="Get the float value of the variable. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				java_name="setVec2"
				name="SetVec2"
				num_parameters="1"
				property="set"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Set the vector2 value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec2"
				name="GetVec2"
				num_parameters="0"
				property="get"
				property_name2="vec2"
				property_name="vec2">
				<comments desc="Get the vector2 value of the variable. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method
				java_name="setVec3"
				name="SetVec3"
				num_parameters="1"
				property="set"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Set the vector3 value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec3"
				name="GetVec3"
				num_parameters="0"
				property="get"
				property_name2="vec3"
				property_name="vec3">
				<comments desc="Get the vector3 value of the variable. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
			</method>
			<method
				java_name="setVec4"
				name="SetVec4"
				num_parameters="1"
				property="set"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Set the vector4 value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVec4"
				name="GetVec4"
				num_parameters="0"
				property="get"
				property_name2="vec4"
				property_name="vec4">
				<comments desc="Get the vector4 value of the variable. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
			</method>
			<method
				java_name="setMatrix"
				name="SetMatrix"
				num_parameters="1"
				property="set"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Set the matrix value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getMatrix"
				name="GetMatrix"
				num_parameters="0"
				property="get"
				property_name2="matrix"
				property_name="matrix">
				<comments desc="Get the matrix value of the variable. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				java_name="setString"
				name="SetString"
				num_parameters="1"
				property="set"
				property_name2="string"
				property_name="string">
				<comments desc="Set the string value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aV"
					type="const cString &amp;"
					typec="const cString&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getString"
				name="GetString"
				num_parameters="0"
				property="get"
				property_name2="string"
				property_name="string">
				<comments desc="Get the string value of the variable. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method
				java_name="setIUnknown"
				name="SetIUnknown"
				num_parameters="1"
				property="set"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Set the iunknown value of the variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anV"
					type="const iUnknown *"
					typec="const iUnknown*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIUnknown"
				name="GetIUnknown"
				num_parameters="0"
				property="get"
				property_name2="iunknown"
				property_name="iunknown">
				<comments desc="Get the iunknown value of the variable. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iExpression" uuid1="0506909D-5223-4D8B-876B-01F5A40C92F9" uuid2="0x0506909d,0x5223,0x4d8b,0x87,0x6b,0x01,0xf5,0xa4,0x0c,0x92,0xf9">
			<comments desc="Expression interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="eval" name="Eval" num_parameters="0">
				<comments desc="Eval the expression and returns the result. "/>
				<return type="Ptr&lt;iExpressionVariable&gt;" typec="Ptr&lt;iExpressionVariable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEvalResult"
				name="GetEvalResult"
				num_parameters="0"
				property="get"
				property_name2="evalResult"
				property_name="eval_result">
				<comments desc="Get the result returned by the last Eval. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getContext"
				name="GetContext"
				num_parameters="0"
				property="get"
				property_name2="context"
				property_name="context">
				<comments desc="Get the context. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			name="iExpressionURLResolver"
			uuid1="7802DC51-FDAF-4DE0-B07E-8B5D08901368"
			uuid2="0x7802dc51,0xfdaf,0x4de0,0xb0,0x7e,0x8b,0x5d,0x08,0x90,0x13,0x68">
			<comments desc="Expression URL resolver interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="resolveURL" name="ResolveURL" num_parameters="1">
				<comments desc=""/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iExpressionContext" uuid1="A870ED3F-D227-467C-98A2-8AF1411ABEE2" uuid2="0xa870ed3f,0xd227,0x467c,0x98,0xa2,0x8a,0xf1,0x41,0x1a,0xbe,0xe2">
			<comments desc="Expression context. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getParentContext"
				name="GetParentContext"
				num_parameters="0"
				property="get"
				property_name2="parentContext"
				property_name="parent_context">
				<comments desc="Get the parent context. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createContext" name="CreateContext" num_parameters="0">
				<comments desc="Create a child context. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createVariable" name="CreateVariable" num_parameters="3">
				<comments desc="Create a new variable. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eExpressionVariableType"
					typec="eExpressionVariableType"
					typei="ni::eType_Enum"/>
				<parameter
					default="eExpressionVariableFlags_Default "
					last="1"
					name="aFlags"
					type="tExpressionVariableFlags"
					typec="tExpressionVariableFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createVariableFromExpr" name="CreateVariableFromExpr" num_parameters="3">
				<comments desc="Create a variable from an expression. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eExpressionVariableFlags_Default "
					last="1"
					name="aFlags"
					type="tExpressionVariableFlags"
					typec="tExpressionVariableFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createVariableFromRunnable" name="CreateVariableFromRunnable" num_parameters="4">
				<comments desc="Create a variable whos value is fetched from a runnable. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aType"
					type="eExpressionVariableType"
					typec="eExpressionVariableType"
					typei="ni::eType_Enum"/>
				<parameter
					name="apRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eExpressionVariableFlags_Default "
					last="1"
					name="aFlags"
					type="tExpressionVariableFlags"
					typec="tExpressionVariableFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createVariableFromVar" name="CreateVariableFromVar" num_parameters="3">
				<comments desc="Create a variable initialized with the value of the specified variant. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aInitialValue"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					default="eExpressionVariableFlags_Default "
					last="1"
					name="aFlags"
					type="tExpressionVariableFlags"
					typec="tExpressionVariableFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="addVariable" name="AddVariable" num_parameters="1">
				<comments desc="Add a variable to the expression context. ">
					<remark text="Not duplicate or empty variable names are allowed. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apVar"
					type="iExpressionVariable *"
					typec="iExpressionVariable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeVariable" name="RemoveVariable" num_parameters="1">
				<comments desc="Remove a variable from the expression context. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apVariable"
					type="iExpressionVariable *"
					typec="iExpressionVariable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findVariable"
				name="FindVariable"
				num_parameters="1">
				<comments desc="Find the variable with the specified name. "/>
				<return type="iExpressionVariable *" typec="iExpressionVariable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createExpression" name="CreateExpression" num_parameters="1">
				<comments desc="Create a new expression. "/>
				<return type="iExpression *" typec="iExpression*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="eval" name="Eval" num_parameters="1">
				<comments desc="Evaluate an expression. "/>
				<return type="Ptr&lt;iExpressionVariable&gt;" typec="Ptr&lt;iExpressionVariable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getUnknownSymbols" name="GetUnknownSymbols" num_parameters="2">
				<comments desc="Get the unknown symbols into the specified expression. ">
					<params text="aaszExpr the expression to retrieve the symbols from. "/>
					<params text="apList the string list where the symbols will be place \see ni::tStringCVec "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apList"
					type="tStringCVec *"
					typec="tStringCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setGlobalEnumSearch"
				name="SetGlobalEnumSearch"
				num_parameters="1"
				property="set"
				property_name2="globalEnumSearch"
				property_name="global_enum_search">
				<comments desc="Allows the parser to search in all registered modules enumerations. ">
					<remark text="Disabled by default. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abEnabled"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getGlobalEnumSearch"
				name="GetGlobalEnumSearch"
				num_parameters="0"
				property="get"
				property_name2="globalEnumSearch"
				property_name="global_enum_search">
				<comments desc="Get the global enum search status. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="addEnumDef" name="AddEnumDef" num_parameters="1">
				<comments desc="Add an enumeration definition. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEnumDef"
				name="GetEnumDef"
				num_parameters="1"
				property="get"
				property_name2="enumDef"
				property_name="enum_def">
				<comments desc="Get the specified enumeration. "/>
				<return type="const sEnumDef *" typec="const sEnumDef*" typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDefaultEnumDef"
				name="SetDefaultEnumDef"
				num_parameters="1"
				property="set"
				property_name2="defaultEnumDef"
				property_name="default_enum_def">
				<comments desc="Set the default enumeration definition. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultEnumDef"
				name="GetDefaultEnumDef"
				num_parameters="0"
				property="get"
				property_name2="defaultEnumDef"
				property_name="default_enum_def">
				<comments desc="Get the default enumeration definition. "/>
				<return type="const sEnumDef *" typec="const sEnumDef*" typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEnumValueString"
				name="GetEnumValueString"
				num_parameters="1">
				<comments desc="Get an enumeration value string. ">
					<remark text="Uses the registered enumerations. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="anValue"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getEnumFlagsString"
				name="GetEnumFlagsString"
				num_parameters="1">
				<comments desc="Get an enumeration flags string. ">
					<remark text="Uses the registered enumerations. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="anValue"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="registerURLResolver" name="RegisterURLResolver" num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszProtocol"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apResolver"
					type="iExpressionURLResolver *"
					typec="iExpressionURLResolver*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="unregisterURLResolver" name="UnregisterURLResolver" num_parameters="1">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszProtocol"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="findURLResolver"
				name="FindURLResolver"
				num_parameters="1">
				<comments desc=""/>
				<return type="iExpressionURLResolver *" typec="iExpressionURLResolver*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszProtocol"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IFile.h.idl.xml">
		<enum name="eTextEncodingFormat">
			<comments desc="Text encoding formats. "/>
			<value name="eTextEncodingFormat_Unknown" value="eInvalidHandle ">
				<comments desc="Text encoding format header is unknown/invalid. "/>
			</value>
			<value name="eTextEncodingFormat_UTF8" value="0 ">
				<comments desc="UTF8 encoding. "/>
			</value>
			<value name="eTextEncodingFormat_UTF8BOM" value="1 ">
				<comments desc="UTF8 encoding, with explicit BOM. "/>
			</value>
			<value name="eTextEncodingFormat_UTF16LE" value="2 ">
				<comments desc="UTF16 Little Endian. "/>
			</value>
			<value name="eTextEncodingFormat_UTF16BE" value="3 ">
				<comments desc="UTF16 Big Endian. "/>
			</value>
			<value name="eTextEncodingFormat_UTF32LE" value="4 ">
				<comments desc="UTF32 Little Endian. "/>
			</value>
			<value name="eTextEncodingFormat_UTF32BE" value="5 ">
				<comments desc="UTF32 Big Endian. "/>
			</value>
			<value name="eTextEncodingFormat_BitStream" value="6 ">
				<comments desc="Bit stream encoding. ">
					<remark text="Read/WriteChar(Ex) is not supported for this format. "/>
				</comments>
			</value>
			<value name="eTextEncodingFormat_Unicode" value="eTextEncodingFormat_UTF32LE ">
				<comments desc=""/>
			</value>
			<value name="eTextEncodingFormat_Native" value="eTextEncodingFormat_UTF8 ">
				<comments desc="Native encoding. "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iFileEnumSink"
			uuid1="0298D5B5-B4E5-4975-91BF-5014834AC95C"
			uuid2="0x0298d5b5,0xb4e5,0x4975,0x91,0xbf,0x50,0x14,0x83,0x4a,0xc9,0x5c">
			<comments desc="Callback interface used by the FileEnum() method of the iLang interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="onFound" name="OnFound" num_parameters="3">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFileAttrs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anFileSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
		</interface>
		<variable
			name="kfccSerializedObject"
			type="const tU32"
			typec="const tU32"
			typei="ni::eTypeFlags_Constant|ni::eType_U32"
			value="niFourCC(&apos;S&apos;,&apos;E&apos;,&apos;Z&apos;,&apos;O&apos;)"/>
		<enum name="eFileFlags">
			<comments desc="File flags. "/>
			<value name="eFileFlags_Read" value="niBit ( 0 ) ">
				<comments desc="File can be read. "/>
			</value>
			<value name="eFileFlags_Write" value="niBit ( 1 ) ">
				<comments desc="File can be written. "/>
			</value>
			<value name="eFileFlags_Append" value="niBit ( 2 ) ">
				<comments desc="File opened in append mode. "/>
			</value>
			<value name="eFileFlags_PartialRead" value="niBit ( 16 ) ">
				<comments desc="The previous read operation read past the end of the file (could not read all bytes). "/>
			</value>
			<value name="eFileFlags_PartialWrite" value="niBit ( 17 ) ">
				<comments desc="The previous write operation could not write all bytes to the file. "/>
			</value>
			<value name="eFileFlags_Encoder" value="niBit ( 18 ) ">
				<comments desc="The file is an encoder/decoder (compressor/decompressor/encryptor/decryptor). ">
					<remark text="Encoders might not move the file cursor by as many bytes as passed to the read/write methods since they usually compress or uncompress data. That is to say that Tell() might not match the the straight number of byte read or written to the file. "/>
				</comments>
			</value>
			<value name="eFileFlags_NoSeek" value="niBit ( 19 ) ">
				<comments desc="Seek, SeekSet and SeekEnd are not supported and will always fail. "/>
			</value>
			<value name="eFileFlags_Dummy" value="niBit ( 20 ) ">
				<comments desc="The file is a dummy, it wont really read or write anything. ">
					<remark text="Used mainly to compute size of future serialization. "/>
				</comments>
			</value>
			<value name="eFileFlags_Stream" value="niBit ( 21 ) ">
				<comments desc="The file is based on a stream. ">
					<remark text="A stream is a &apos;connection&apos; that can be interrupted/paused/restarted at any time, mainly it means that Read/Write could block for an undefined amount of time waiting for more data to come or a write queue to be consumed. In general seeking is not supported for streams. "/>
				</comments>
			</value>
		</enum>
		<interface name="iFileBase" uuid1="49C35546-8A90-4650-98AA-2E7C6845ABC0" uuid2="0x49c35546,0x8a90,0x4650,0x98,0xaa,0x2e,0x7c,0x68,0x45,0xab,0xc0">
			<comments desc="Base file interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getFileFlags"
				name="GetFileFlags"
				num_parameters="0"
				property="get"
				property_name2="fileFlags"
				property_name="file_flags">
				<comments desc="Get the file flags. "/>
				<return type="tFileFlags" typec="tFileFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getSourcePath"
				name="GetSourcePath"
				num_parameters="0"
				property="get"
				property_name2="sourcePath"
				property_name="source_path">
				<comments desc="Get the path from where this file has been opened. " return="the path from where this file has been opened. If it has not been opened from a file, by example it&apos;s a system memory file, return NULL. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="seek" name="Seek" num_parameters="1">
				<comments desc="Moves the file pointer from the current position. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the number of bytes to add to the current position. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="seekSet" name="SeekSet" num_parameters="1">
				<comments desc="Set the file pointer position from the begining of the file. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the position, in bytes, from the begining of the file. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="readRaw" name="ReadRaw" num_parameters="2">
				<comments desc="Read data from the file. " return="the number of bytes really read. ">
					<params text="apOut is the buffer where the data will be copied. "/>
					<params text="anSize is the number of bytes to read from the file. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apOut"
					type="void *"
					typec="void*"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="writeRaw" name="WriteRaw" num_parameters="2">
				<comments desc="Write data in the file. " return="the number of bytes really written. ">
					<params text="apIn is the source buffer which contain the data to write. "/>
					<params text="anSize is the number of bytes to write in the file. Usually the size of the pIn buffer. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apIn"
					type="const void *"
					typec="const void*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="tell" name="Tell" num_parameters="0">
				<comments desc="Tell the current cursor position in the file in bytes. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size of the file. " return="the size of the file. ">
					<remark text="If the file is write only, this method can return (0). "/>
				</comments>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method java_name="seekEnd" name="SeekEnd" num_parameters="1">
				<comments desc="Moves the file pointer from the end of the file. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the number of bytes to move from the end of the file. By example if you pass 4, the cursor will be passed four bytes before the end of the file. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="flush" name="Flush" num_parameters="0">
				<comments desc="Flush the file content. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTime"
				name="GetTime"
				num_parameters="2">
				<comments desc="Get the file time. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFileTime"
					type="eFileTime"
					typec="eFileTime"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apTime"
					type="iTime *"
					typec="iTime*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setTime" name="SetTime" num_parameters="2">
				<comments desc="Set the file time. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFileTime"
					type="eFileTime"
					typec="eFileTime"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apTime"
					type="const iTime *"
					typec="const iTime*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="resize" name="Resize" num_parameters="1">
				<comments desc="Resize the file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="newSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
		</interface>
		<interface name="iFile" uuid1="AC326EAE-8870-4F15-B893-30E832600F3C" uuid2="0xac326eae,0x8870,0x4f15,0xb8,0x93,0x30,0xe8,0x32,0x60,0x0f,0x3c">
			<comments desc="File interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getFileBase"
				name="GetFileBase"
				num_parameters="0"
				property="get"
				property_name2="fileBase"
				property_name="file_base">
				<comments desc="Get the file base. ">
					<remark text="This shouldnt be used directly unless you really know what you are doing. "/>
				</comments>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSourcePath"
				name="GetSourcePath"
				num_parameters="0"
				property="get"
				property_name2="sourcePath"
				property_name="source_path">
				<comments desc="Get the path from where this file has been opened. " return="the path from where this file has been opened. If it has not been opened from a file, by example it&apos;s a system memory file, return NULL. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="seek" name="Seek" num_parameters="1">
				<comments desc="Moves the file pointer from the current position. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the number of bytes to add to the current position. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="seekSet" name="SeekSet" num_parameters="1">
				<comments desc="Set the file pointer position from the begining of the file. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the position, in bytes, from the begining of the file. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="readRaw" name="ReadRaw" num_parameters="2">
				<comments desc="Read data from the file. " return="the number of bytes really read. ">
					<params text="pOut is the buffer where the data will be copied. "/>
					<params text="nSize is the number of bytes to read from the file. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="pOut"
					type="void *"
					typec="void*"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="nSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="writeRaw" name="WriteRaw" num_parameters="2">
				<comments desc="Write data in the file. " return="the number of bytes really written. ">
					<params text="pIn is the source buffer which contain the data to write. "/>
					<params text="nSize is the number of bytes to write in the file. Usually the size of the pIn buffer. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="pIn"
					type="const void *"
					typec="const void*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr"/>
				<parameter
					last="1"
					name="nSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="tell" name="Tell" num_parameters="0">
				<comments desc="Tell the current cursor position in the file in bytes. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the size of the file. " return="the size of the file. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method java_name="seekEnd" name="SeekEnd" num_parameters="1">
				<comments desc="Moves the file pointer from the end of the file. " return="eTrue if successful, else eFalse. ">
					<params text="offset is the number of bytes to move from the end of the file. By example if you pass 4, the cursor will be passed four bytes before the end of the file. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="offset"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="flush" name="Flush" num_parameters="0">
				<comments desc="Flush the file content. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getTime"
				name="GetTime"
				num_parameters="2">
				<comments desc="Get the file time. " return="eFalse if the file time can&apos;t be retrieved "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFileTime"
					type="eFileTime"
					typec="eFileTime"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apTime"
					type="iTime *"
					typec="iTime*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setTime" name="SetTime" num_parameters="2">
				<comments desc="Set the file time. " return="eFalse if the file time can&apos;t be changed "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aFileTime"
					type="eFileTime"
					typec="eFileTime"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apTime"
					type="const iTime *"
					typec="const iTime*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="resize" name="Resize" num_parameters="1">
				<comments desc="Resize the file. " return="eFalse if the file can&apos;t be resized "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="newSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getBase"
				name="GetBase"
				num_parameters="0">
				<comments desc="Get the base pointer. ">
					<remark text="Only for base file that implement iFileMemory. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getHere"
				name="GetHere"
				num_parameters="0">
				<comments desc="Get the here/current position pointer. ">
					<remark text="Only for base file that implement iFileMemory. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getStop"
				name="GetStop"
				num_parameters="0">
				<comments desc="Get the stop/end pointer. ">
					<remark text="Only for base file that implement iFileMemory. "/>
				</comments>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="setMemPtr" name="SetMemPtr" num_parameters="4">
				<comments desc="Set the memory buffer to use with this file. " return="eFalse if the file doesnt support this operation, else eTrue. ">
					<remark text="Only for base file that implement iFileMemory. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apMem"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="abFree"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abKeepHere"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="reset" name="Reset" num_parameters="0">
				<comments desc="Reset the file. Put it at the begining, and set the memory size to 0 if it&apos;s a dynamic memory file. ">
					<remark text="Only for base file that implement iFileMemory. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="writeFile" name="WriteFile" num_parameters="2">
				<comments desc="Write another file in this file "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					name="apFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					last="1"
					name="anSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getFileFlags"
				name="GetFileFlags"
				num_parameters="0"
				property="get"
				property_name2="fileFlags"
				property_name="file_flags">
				<comments desc="Get the file flags. "/>
				<return type="tFileFlags" typec="tFileFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCanRead"
				name="GetCanRead"
				num_parameters="0"
				property="get"
				property_name2="canRead"
				property_name="can_read">
				<comments desc="Check whether file can be read. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCanWrite"
				name="GetCanWrite"
				num_parameters="0"
				property="get"
				property_name2="canWrite"
				property_name="can_write">
				<comments desc="Check whether File can be written. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCanSeek"
				name="GetCanSeek"
				num_parameters="0"
				property="get"
				property_name2="canSeek"
				property_name="can_seek">
				<comments desc="Check whether the file supports seeking. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPartialRead"
				name="GetPartialRead"
				num_parameters="0"
				property="get"
				property_name2="partialRead"
				property_name="partial_read">
				<comments desc="Check whether the previous read operation could not read all bytes. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPartialWrite"
				name="GetPartialWrite"
				num_parameters="0">
				<comments desc="Check whether the previous write operation could not write all bytes to the file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsEncoder"
				name="GetIsEncoder"
				num_parameters="0"
				property="get"
				property_name2="isEncoder"
				property_name="is_encoder">
				<comments desc="Check whether the file is an encoder/decoder. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsDummy"
				name="GetIsDummy"
				num_parameters="0"
				property="get"
				property_name2="isDummy"
				property_name="is_dummy">
				<comments desc="Check whether the file is a dummy. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsMemory"
				name="GetIsMemory"
				num_parameters="0"
				property="get"
				property_name2="isMemory"
				property_name="is_memory">
				<comments desc="Check if the file is a memory file (implements iFileMemory). "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsStream"
				name="GetIsStream"
				num_parameters="0"
				property="get"
				property_name2="isStream"
				property_name="is_stream">
				<comments desc="Check whether the file is a stream. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="readF32" name="ReadF32" num_parameters="0">
				<comments desc="Read a 32 bits float and move the file pointer forward of 4 bytes. " return="a 32 bits float. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="readF64" name="ReadF64" num_parameters="0">
				<comments desc="Read a 64 bits float and move the file pointer forward of 8 bytes. " return="a 64 bits float. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method java_name="read8" name="Read8" num_parameters="0">
				<comments desc="Read a single byte (8 bits integer) and move the file pointer forward of 1 byte. " return="a 8 bits integer. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method java_name="readLE16" name="ReadLE16" num_parameters="0">
				<comments desc="Read a 16 bits little endian interger and move the file pointer forward of 2 bytes. " return="a 16 bits little endian interger. "/>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method java_name="readBE16" name="ReadBE16" num_parameters="0">
				<comments desc="Read a 16 bits big endian interger and move the file pointer forward of 2 bytes. " return="a big endian 16 bits integer. "/>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method java_name="readLE32" name="ReadLE32" num_parameters="0">
				<comments desc="Read a 32 bits little endian interger and move the file pointer forward of 4 bytes. " return="a 32 bits little endian interger. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="readBE32" name="ReadBE32" num_parameters="0">
				<comments desc="Read a 32 bits big endian interger and move the file pointer forward of 4 bytes. " return="a big endian 32 bits integer. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="readLE64" name="ReadLE64" num_parameters="0">
				<comments desc="Read a 64 bits little endian interger and move the file pointer forward of 8 bytes. " return="a 64 bits little endian interger. "/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method java_name="readBE64" name="ReadBE64" num_parameters="0">
				<comments desc="Read a 64 bits big endian interger and move the file pointer forward of 8 bytes. " return="a big endian 64 bits integer. "/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				java_name="readF32Array"
				name="ReadF32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 32 bits float array and move the file pointer forward of 4 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tF32 *" typec="tF32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readF64Array"
				name="ReadF64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 64 bits float array and move the file pointer forward of 8 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tF64 *" typec="tF64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readLE16Array"
				name="ReadLE16Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 16 bits little endian interger array and move the file pointer forward of 2 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU16 *" typec="tU16*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readBE16Array"
				name="ReadBE16Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 16 bits big endian interger array and move the file pointer forward of 2 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU16 *" typec="tU16*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readLE32Array"
				name="ReadLE32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 32 bits little endian interger array and move the file pointer forward of 4 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU32 *" typec="tU32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readBE32Array"
				name="ReadBE32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 32 bits big endian interger array and move the file pointer forward of 4 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU32 *" typec="tU32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readLE64Array"
				name="ReadLE64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 64 bits little endian interger array and move the file pointer forward of 8 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU64 *" typec="tU64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="readBE64Array"
				name="ReadBE64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Read a 64 bits big endian interger array and move the file pointer forward of 8 bytes * anNumElements. " return="the size read in bytes. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apOut" type="tU64 *" typec="tU64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tSize"
					typec="tSize"/>
			</method>
			<method java_name="writeF32" name="WriteF32" num_parameters="1">
				<comments desc="Write a 32 bits float and move the file pointer forward of 4 bytes. " return="the number of bytes effectivly written in the file. ">
					<params text="v is the 32 bits float to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method java_name="writeF64" name="WriteF64" num_parameters="1">
				<comments desc="Write a 64 bits float and move the file pointer forward of 8 bytes. " return="the number of bytes effectivly written in the file. ">
					<params text="v is the 64 bits float to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method java_name="write8" name="Write8" num_parameters="1">
				<comments desc="Write a single byte (8 bits integer) and move the file pointer forward of one byte. " return="the number of bytes effectibly written in the file. ">
					<params text="v is the byte to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method java_name="writeLE16" name="WriteLE16" num_parameters="1">
				<comments desc="Write a little endian 16 bits integer and move the file pointer forward of 2 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the little endian 16 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method java_name="writeBE16" name="WriteBE16" num_parameters="1">
				<comments desc="Write a big endian 16 bits integer and move the file pointer forward of 2 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the big endian 16 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method java_name="writeLE32" name="WriteLE32" num_parameters="1">
				<comments desc="Write a little endian 32 bits integer and move the file pointer forward of 4 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the little endian 32 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBE32" name="WriteBE32" num_parameters="1">
				<comments desc="Write a big endian 32 bits integer and move the file pointer forward of 4 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the big endian 32 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeLE64" name="WriteLE64" num_parameters="1">
				<comments desc="Write a little endian 64 bits integer and move the file pointer forward of 8 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the little endian 64 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method java_name="writeBE64" name="WriteBE64" num_parameters="1">
				<comments desc="Write a big endian 64 bits integer and move the file pointer forward of 8 bytes. " return="the number of bytes effectivly written. ">
					<params text="v is the big endian 64 bits integer to write. "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="v"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method
				java_name="writeF32Array"
				name="WriteF32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a 32 bits float array and move the file pointer forward of 4 bytes * anNumElements. " return="the number of bytes effectivly written in the file. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tF32 *" typec="const tF32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeF64Array"
				name="WriteF64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a 64 bits float and move the file pointer forward of 8 bytes * anNumElements. " return="the number of bytes effectivly written in the file. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tF64 *" typec="const tF64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeLE16Array"
				name="WriteLE16Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a little endian 16 bits integer and move the file pointer forward of 2 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU16 *" typec="const tU16*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeBE16Array"
				name="WriteBE16Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a big endian 16 bits integer and move the file pointer forward of 2 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU16 *" typec="const tU16*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeLE32Array"
				name="WriteLE32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a little endian 32 bits integer and move the file pointer forward of 4 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU32 *" typec="const tU32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeBE32Array"
				name="WriteBE32Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a big endian 32 bits integer and move the file pointer forward of 4 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU32 *" typec="const tU32*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeLE64Array"
				name="WriteLE64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a little endian 64 bits integer and move the file pointer forward of 8 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU64 *" typec="const tU64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="writeBE64Array"
				name="WriteBE64Array"
				noautomation="yes"
				num_parameters="2">
				<comments desc="Write a big endian 64 bits integer and move the file pointer forward of 8 bytes * anNumElements. " return="the number of bytes effectivly written. "/>
				<return type="tSize" typec="tSize"/>
				<parameter name="apIn" type="const tU64 *" typec="const tU64*"/>
				<parameter
					last="1"
					name="anNumElements"
					type="tU32"
					typec="tU32"/>
			</method>
			<method java_name="getTextEncodingFormat" name="GetTextEncodingFormat" num_parameters="0">
				<comments desc="Get the text encoding format. "/>
				<return type="eTextEncodingFormat" typec="eTextEncodingFormat" typei="ni::eType_Enum"/>
			</method>
			<method java_name="setTextEncodingFormat" name="SetTextEncodingFormat" num_parameters="1">
				<comments desc="Set the text encoding format. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aFormat"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="beginTextFileRead" name="BeginTextFileRead" num_parameters="1">
				<comments desc="Read text file header. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					default="eTrue "
					last="1"
					name="abSeekSetZero"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="beginTextFileWrite" name="BeginTextFileWrite" num_parameters="2">
				<comments desc="Write text file header. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					default="eTextEncodingFormat_UTF8 "
					name="aFormat"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
				<parameter
					default="eTrue "
					last="1"
					name="abSeekSetZero"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="readString" name="ReadString" num_parameters="0">
				<comments desc="Read a string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method java_name="readStringLine" name="ReadStringLine" num_parameters="0">
				<comments desc="Read a string line. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method java_name="writeString" name="WriteString" num_parameters="1">
				<comments desc="Write a string. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="writeStringZ" name="WriteStringZ" num_parameters="1">
				<comments desc="Write a string with a end zero. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readChar" name="ReadChar" num_parameters="0">
				<comments desc="Read a character with the current encoding. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="writeChar" name="WriteChar" num_parameters="1">
				<comments desc="Write a character with the current encoding. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readStringEx" name="ReadStringEx" num_parameters="1">
				<comments desc="Read a string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="readStringLineEx" name="ReadStringLineEx" num_parameters="1">
				<comments desc="Read a string line. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="writeStringEx" name="WriteStringEx" num_parameters="2">
				<comments desc="Write a string. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="writeStringZEx" name="WriteStringZEx" num_parameters="2">
				<comments desc="Write a string with a end zero. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readCharEx" name="ReadCharEx" num_parameters="1">
				<comments desc="Read a character with the current encoding. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="writeCharEx" name="WriteCharEx" num_parameters="2">
				<comments desc="Write a character with the current encoding. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="aFmt"
					type="eTextEncodingFormat"
					typec="eTextEncodingFormat"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anChar"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="beginWriteBits" name="BeginWriteBits" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="endWriteBits" name="EndWriteBits" num_parameters="0">
				<comments desc=""/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method java_name="isWriteBitsBegan" name="IsWriteBitsBegan" num_parameters="0">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="writeBit" name="WriteBit" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abBit"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="writeBits" name="WriteBits" num_parameters="3">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apData"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="abInvertBytesOrder"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="writeBits8" name="WriteBits8" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anData"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBits16" name="WriteBits16" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anData"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBits32" name="WriteBits32" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anData"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBits64" name="WriteBits64" num_parameters="2">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anData"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="beginReadBits" name="BeginReadBits" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="endReadBits" name="EndReadBits" num_parameters="0">
				<comments desc=""/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method java_name="isReadBitsBegan" name="IsReadBitsBegan" num_parameters="0">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="readBit" name="ReadBit" num_parameters="0">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="readBits" name="ReadBits" num_parameters="3">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apData"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="abInvertBytesOrder"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="readBitsU8" name="ReadBitsU8" num_parameters="1">
				<comments desc=""/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsU16" name="ReadBitsU16" num_parameters="1">
				<comments desc=""/>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsU32" name="ReadBitsU32" num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsU64" name="ReadBitsU64" num_parameters="1">
				<comments desc=""/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsI8" name="ReadBitsI8" num_parameters="1">
				<comments desc=""/>
				<return type="tI8" typec="tI8" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsI16" name="ReadBitsI16" num_parameters="1">
				<comments desc=""/>
				<return type="tI16" typec="tI16" typei="ni::eType_I16"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsI32" name="ReadBitsI32" num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsI64" name="ReadBitsI64" num_parameters="1">
				<comments desc=""/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="anBits"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="getMinNumBitsU32" name="GetMinNumBitsU32" num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="getMinNumBitsI32" name="GetMinNumBitsI32" num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="getMinNumBitsU64" name="GetMinNumBitsU64" num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method java_name="getMinNumBitsI64" name="GetMinNumBitsI64" num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="writeBitsPackedU64" name="WriteBitsPackedU64" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method java_name="writeBitsPackedU48" name="WriteBitsPackedU48" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
			</method>
			<method java_name="writeBitsPackedU32" name="WriteBitsPackedU32" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBitsPackedU24" name="WriteBitsPackedU24" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="writeBitsPackedU16" name="WriteBitsPackedU16" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU16"
					typec="tU16"
					typei="ni::eType_U16"/>
			</method>
			<method java_name="writeBitsPackedU8" name="WriteBitsPackedU8" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method java_name="readBitsPackedU64" name="ReadBitsPackedU64" num_parameters="0">
				<comments desc=""/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method java_name="readBitsPackedU48" name="ReadBitsPackedU48" num_parameters="0">
				<comments desc=""/>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method java_name="readBitsPackedU32" name="ReadBitsPackedU32" num_parameters="0">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsPackedU24" name="ReadBitsPackedU24" num_parameters="0">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="readBitsPackedU16" name="ReadBitsPackedU16" num_parameters="0">
				<comments desc=""/>
				<return type="tU16" typec="tU16" typei="ni::eType_U16"/>
			</method>
			<method java_name="readBitsPackedU8" name="ReadBitsPackedU8" num_parameters="0">
				<comments desc=""/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method java_name="writeBitsPackedI64" name="WriteBitsPackedI64" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="writeBitsPackedI48" name="WriteBitsPackedI48" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method java_name="writeBitsPackedI32" name="WriteBitsPackedI32" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="writeBitsPackedI24" name="WriteBitsPackedI24" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="writeBitsPackedI16" name="WriteBitsPackedI16" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI16"
					typec="tI16"
					typei="ni::eType_I16"/>
			</method>
			<method java_name="writeBitsPackedI8" name="WriteBitsPackedI8" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anNumber"
					type="tI8"
					typec="tI8"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="readBitsPackedI64" name="ReadBitsPackedI64" num_parameters="0">
				<comments desc=""/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method java_name="readBitsPackedI48" name="ReadBitsPackedI48" num_parameters="0">
				<comments desc=""/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method java_name="readBitsPackedI32" name="ReadBitsPackedI32" num_parameters="0">
				<comments desc=""/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method java_name="readBitsPackedI24" name="ReadBitsPackedI24" num_parameters="0">
				<comments desc=""/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method java_name="readBitsPackedI16" name="ReadBitsPackedI16" num_parameters="0">
				<comments desc=""/>
				<return type="tI16" typec="tI16" typei="ni::eType_I16"/>
			</method>
			<method java_name="readBitsPackedI8" name="ReadBitsPackedI8" num_parameters="0">
				<comments desc=""/>
				<return type="tI8" typec="tI8" typei="ni::eType_I8"/>
			</method>
			<method java_name="readBitsString" name="ReadBitsString" num_parameters="0">
				<comments desc=""/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method java_name="writeBitsString" name="WriteBitsString" num_parameters="1">
				<comments desc=""/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="aaszIn"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="writeVar" name="WriteVar" num_parameters="1">
				<comments desc="Write a variant. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readVar" name="ReadVar" num_parameters="0">
				<comments desc="Read a variant. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
			<method
				java_name="readVarEx"
				name="ReadVarEx"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Read a variant. "/>
				<return type="tBool" typec="tBool"/>
				<parameter
					last="1"
					name="aVar"
					type="Var &amp;"
					typec="Var&amp;"/>
			</method>
			<method java_name="writeBitsPackedVar" name="WriteBitsPackedVar" num_parameters="1">
				<comments desc="Write a variant. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aVar"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readBitsPackedVar" name="ReadBitsPackedVar" num_parameters="0">
				<comments desc="Read a variant. "/>
				<return type="Var" typec="Var" typei="ni::eType_Variant"/>
			</method>
			<method
				java_name="readBitsPackedVarEx"
				name="ReadBitsPackedVarEx"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Read a variant. "/>
				<return type="tBool" typec="tBool"/>
				<parameter
					last="1"
					name="aVar"
					type="Var &amp;"
					typec="Var&amp;"/>
			</method>
			<method java_name="readRawToString" name="ReadRawToString" num_parameters="2">
				<comments desc="Reads the specified number of bytes and return them encoded as a string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aFormat"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anNumBytes"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
			</method>
			<method java_name="writeRawFromString" name="WriteRawFromString" num_parameters="2">
				<comments desc="Write bytes encoded in a string. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
				<parameter
					name="aFormat"
					type="eRawToStringEncoding"
					typec="eRawToStringEncoding"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="readQuotedLine" name="ReadQuotedLine" num_parameters="0">
				<comments desc="Reads a line of text that potentially use quotes &quot; and escaped quotes &quot;&quot; &amp; \&quot; to join a single &apos;line&apos; with embedded newlines inside. ">
					<remark text="This is how CSV files handle multi-line fields. "/>
				</comments>
				<return type="ni::cString" typec="ni::cString" typei="ni::eType_String"/>
			</method>
		</interface>
		<interface name="iFileMemory" uuid1="8D0AF9A2-1C6F-4F50-B062-33F4974028F2" uuid2="0x8d0af9a2,0x1c6f,0x4f50,0xb0,0x62,0x33,0xf4,0x97,0x40,0x28,0xf2">
			<comments desc="Memory file. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getBase"
				name="GetBase"
				num_parameters="0">
				<comments desc="Get the base pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getHere"
				name="GetHere"
				num_parameters="0">
				<comments desc="Get the here/current position pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method
				const="yes"
				java_name="getStop"
				name="GetStop"
				num_parameters="0">
				<comments desc="Get the stop/end pointer. "/>
				<return type="tPtr" typec="tPtr" typei="ni::eType_Ptr"/>
			</method>
			<method java_name="setMemPtr" name="SetMemPtr" num_parameters="4">
				<comments desc="Set the memory buffer to use with this file. " return="eFalse if the file doesnt support this operation, else eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apMem"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="abFree"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abKeepHere"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="reset" name="Reset" num_parameters="0">
				<comments desc="Reset the file. Put it at the begining, and set the memory size to 0 if it&apos;s a dynamic memory file. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
		<interface
			dispatchwrapper="yes"
			name="iURLFileHandler"
			uuid1="443A9E8F-8DB6-4CAA-8092-239201152101"
			uuid2="0x443a9e8f,0x8db6,0x4caa,0x80,0x92,0x23,0x92,0x01,0x15,0x21,0x01">
			<comments desc="URL File handler interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="urlopen" name="URLOpen" num_parameters="1">
				<comments desc="Open a synchronous stream to the specified URL. ">
					<remark text="The operation is blocking, if necessary the whole file is downloaded before the function returns. "/>
				</comments>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlexists" name="URLExists" num_parameters="1">
				<comments desc="Validates the specified URL and if possible checks whether the resource the URL points to actually exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iBufferEncoder" uuid1="5E522B3F-32D1-4968-8162-A1042FA47786" uuid2="0x5e522b3f,0x32d1,0x4968,0x81,0x62,0xa1,0x04,0x2f,0xa4,0x77,0x86">
			<comments desc="Buffer encoder "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="encodeMarker"
				name="EncodeMarker"
				num_parameters="0">
				<comments desc="Get the encoder&apos;s buffer marker. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="encodeMaxDestSize" name="EncodeMaxDestSize" num_parameters="1">
				<comments desc="Get the maximum size that could be required by the specified buffer size. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="encodeBuffer" name="EncodeBuffer" num_parameters="4">
				<comments desc="Encodes the specified data buffer in the specified output buffer. " return="0 on encoding error. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anDestSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
		</interface>
		<interface name="iBufferDecoder" uuid1="FE58C80F-8878-4537-9F70-6DB77F641A58" uuid2="0xfe58c80f,0x8878,0x4537,0x9f,0x70,0x6d,0xb7,0x7f,0x64,0x1a,0x58">
			<comments desc="Buffer decoder "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="decodeMarker"
				name="DecodeMarker"
				num_parameters="0">
				<comments desc="Get the decoder&apos;s buffer marker. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="decodeMaxDestSize" name="DecodeMaxDestSize" num_parameters="1">
				<comments desc="Get the maximum size that could be required by the specified buffer size. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="decodeBuffer" name="DecodeBuffer" num_parameters="4">
				<comments desc="Decodes the specified data buffer in the specified output buffer. " return="0 on decoding error. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anDestSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IFileSystem.h.idl.xml">
		<enum name="eFileSystemRightsFlags">
			<comments desc="File system rights. "/>
			<value name="eFileSystemRightsFlags_Enum" value="niBit ( 0 ) ">
				<comments desc="Right to enumerate files. "/>
			</value>
			<value name="eFileSystemRightsFlags_Read" value="niBit ( 1 ) ">
				<comments desc="Right to read from files. "/>
			</value>
			<value name="eFileSystemRightsFlags_Write" value="niBit ( 2 ) ">
				<comments desc="Right to write in files, but not to create files. "/>
			</value>
			<value name="eFileSystemRightsFlags_Create" value="niBit ( 3 ) ">
				<comments desc="Right to create files. "/>
			</value>
			<value name="eFileSystemRightsFlags_Delete" value="niBit ( 4 ) ">
				<comments desc="Right to delete files. "/>
			</value>
			<value name="eFileSystemRightsFlags_Execute" value="niBit ( 5 ) ">
				<comments desc="Right to execute files. "/>
			</value>
			<value name="eFileSystemRightsFlags_ReadOnly" value="eFileSystemRightsFlags_Enum|eFileSystemRightsFlags_Read ">
				<comments desc="Read-only system "/>
			</value>
			<value name="eFileSystemRightsFlags_WriteOnly" value="eFileSystemRightsFlags_Write ">
				<comments desc="Write-only system "/>
			</value>
			<value name="eFileSystemRightsFlags_ReadWriteOnly" value="eFileSystemRightsFlags_Enum|eFileSystemRightsFlags_Read|eFileSystemRightsFlags_Write ">
				<comments desc="Read-Write-only system "/>
			</value>
			<value name="eFileSystemRightsFlags_IOOnly" value="eFileSystemRightsFlags_Read|eFileSystemRightsFlags_Enum|eFileSystemRightsFlags_Write|eFileSystemRightsFlags_Create|eFileSystemRightsFlags_Delete ">
				<comments desc="IO rights only. All excepted execution. "/>
			</value>
			<value name="eFileSystemRightsFlags_All" value="eFileSystemRightsFlags_Read|eFileSystemRightsFlags_Enum|eFileSystemRightsFlags_Write|eFileSystemRightsFlags_Create|eFileSystemRightsFlags_Delete|eFileSystemRightsFlags_Execute ">
				<comments desc="All rights "/>
			</value>
		</enum>
		<interface name="iFileSystemEnumerator" uuid1="85FB1784-1A48-4581-A3AF-A7D9653F5F77" uuid2="0x85fb1784,0x1a48,0x4581,0xa3,0xaf,0xa7,0xd9,0x65,0x3f,0x5f,0x77">
			<comments desc="File system enumerator interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getFileSystem"
				name="GetFileSystem"
				num_parameters="0"
				property="get"
				property_name2="fileSystem"
				property_name="file_system">
				<comments desc="Get the owner file system. "/>
				<return type="iFileSystem *" typec="iFileSystem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="findFirst" name="FindFirst" num_parameters="1">
				<comments desc="Find the first file matching the specified pattern. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszFilePattern"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="findNext" name="FindNext" num_parameters="0">
				<comments desc="Find the next file matching the specified pattern. " return="eFalse if there&apos;s no more file matching the specified pattern. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getFileName"
				name="GetFileName"
				num_parameters="0"
				property="get"
				property_name2="fileName"
				property_name="file_name">
				<comments desc="Get the current file name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getFileSize"
				name="GetFileSize"
				num_parameters="0"
				property="get"
				property_name2="fileSize"
				property_name="file_size">
				<comments desc="Get the current file size. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getFileAttributes"
				name="GetFileAttributes"
				num_parameters="0"
				property="get"
				property_name2="fileAttributes"
				property_name="file_attributes">
				<comments desc="Get the current file attributes. "/>
				<return type="tFileAttrFlags" typec="tFileAttrFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getFileTime"
				name="GetFileTime"
				num_parameters="0"
				property="get"
				property_name2="fileTime"
				property_name="file_time">
				<comments desc="Get the current file last write time. "/>
				<return type="iTime *" typec="iTime*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iFileSystem" uuid1="0A9C86EB-E95E-43A1-A724-58B579697176" uuid2="0x0a9c86eb,0xe95e,0x43a1,0xa7,0x24,0x58,0xb5,0x79,0x69,0x71,0x76">
			<comments desc="File system interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getRightsFlags"
				name="GetRightsFlags"
				num_parameters="0"
				property="get"
				property_name2="rightsFlags"
				property_name="rights_flags">
				<comments desc="Get the file system&apos;s rights. "/>
				<return type="tFileSystemRightsFlags" typec="tFileSystemRightsFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getBaseContainer"
				name="GetBaseContainer"
				num_parameters="0"
				property="get"
				property_name2="baseContainer"
				property_name="base_container">
				<comments desc="Get the file system&apos;s base container. ">
					<remark text="This depend on the type of file system, it can be a file, a folder, a remote location, and so on... "/>
				</comments>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileMakeDir" name="FileMakeDir" num_parameters="1">
				<comments desc="Create a directory. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileDeleteDir" name="FileDeleteDir" num_parameters="1">
				<comments desc="Delete a directory. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileCopy" name="FileCopy" num_parameters="2">
				<comments desc="Copy a file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszDest"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszSrc"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileMove" name="FileMove" num_parameters="2">
				<comments desc="Move a file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aszDest"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszSrc"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileDelete" name="FileDelete" num_parameters="1">
				<comments desc="Delete a file. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileEnum" name="FileEnum" num_parameters="3">
				<comments desc="Enumerate files in the specified directory. \see ni::FileEnum " return="The number of files found. eInvalidHandle indicates an error. ">
					<params text="aszFile is the path with filter of what to enumerate. "/>
					<params text="aAttribs is a filter that defines the attributes that will be enumerated. "/>
					<params text="pSink is the callback interface that will be called when a file is found. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aAttribs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="pSink"
					type="iFileEnumSink *"
					typec="iFileEnumSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileExists" name="FileExists" num_parameters="2">
				<comments desc="Checks if a file exists. " return="0 if the file doesnt exist else its attributes. ">
					<params text="aszFile is the path to check. "/>
					<params text="aAttribs is a filter that defines the attributes that will be enumerated. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aAttribs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="fileSize" name="FileSize" num_parameters="1">
				<comments desc="Get the size of a file. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
				<parameter
					last="1"
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileOpen" name="FileOpen" num_parameters="2">
				<comments desc="Open a file for a read and/or write operation. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMode"
					type="eFileOpenMode"
					typec="eFileOpenMode"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="fileBaseOpen" name="FileBaseOpen" num_parameters="2">
				<comments desc="Open a file for a read and/or write operation. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMode"
					type="eFileOpenMode"
					typec="eFileOpenMode"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getAbsolutePath"
				name="GetAbsolutePath"
				num_parameters="1">
				<comments desc="Get the absolute path of the given file or directory. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createEnumerator" name="CreateEnumerator" num_parameters="0">
				<comments desc="Create a file system enumerator. "/>
				<return type="iFileSystemEnumerator *" typec="iFileSystemEnumerator*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IGameCtrl.h.idl.xml">
		<enum name="eGameCtrlAxis">
			<comments desc="Game controller axis "/>
			<value name="eGameCtrlAxis_LX" value="0 ">
				<comments desc="Left X Axis. "/>
			</value>
			<value name="eGameCtrlAxis_LY" value="1 ">
				<comments desc="Left Y Axis. "/>
			</value>
			<value name="eGameCtrlAxis_LZ" value="2 ">
				<comments desc="Left Z Axis. "/>
			</value>
			<value name="eGameCtrlAxis_RX" value="3 ">
				<comments desc="Right X Axis. "/>
			</value>
			<value name="eGameCtrlAxis_RY" value="4 ">
				<comments desc="Right Y Axis. "/>
			</value>
			<value name="eGameCtrlAxis_RZ" value="5 ">
				<comments desc="Right Z AXis. "/>
			</value>
			<value name="eGameCtrlAxis_Last" value="6 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGameCtrlButton">
			<comments desc="Game controller buttons. "/>
			<value name="eGameCtrlButton_A" value="0 ">
				<comments desc="A "/>
			</value>
			<value name="eGameCtrlButton_B" value="1 ">
				<comments desc="B "/>
			</value>
			<value name="eGameCtrlButton_X" value="2 ">
				<comments desc="X "/>
			</value>
			<value name="eGameCtrlButton_Y" value="3 ">
				<comments desc="Y "/>
			</value>
			<value name="eGameCtrlButton_LeftBlock" value="4 ">
				<comments desc="Left Block "/>
			</value>
			<value name="eGameCtrlButton_RightBlock" value="5 ">
				<comments desc="Right Block "/>
			</value>
			<value name="eGameCtrlButton_Back" value="6 ">
				<comments desc="Back "/>
			</value>
			<value name="eGameCtrlButton_Start" value="7 ">
				<comments desc="Start "/>
			</value>
			<value name="eGameCtrlButton_LeftThumb" value="8 ">
				<comments desc="Left Thumb "/>
			</value>
			<value name="eGameCtrlButton_RightThumb" value="9 ">
				<comments desc="Right Thumb "/>
			</value>
			<value name="eGameCtrlButton_LeftTrigger" value="10 ">
				<comments desc="LeftTrigger "/>
			</value>
			<value name="eGameCtrlButton_RightTrigger" value="11 ">
				<comments desc="RightTrigger "/>
			</value>
			<value name="eGameCtrlButton_DPadUp" value="12 ">
				<comments desc="Up "/>
			</value>
			<value name="eGameCtrlButton_DPadDown" value="13 ">
				<comments desc="Down "/>
			</value>
			<value name="eGameCtrlButton_DPadLeft" value="14 ">
				<comments desc="Left "/>
			</value>
			<value name="eGameCtrlButton_DPadRight" value="15 ">
				<comments desc="Right "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iGameCtrl"
			uuid1="14F09DF7-3842-46EF-9967-BBC6557758B7"
			uuid2="0x14f09df7,0x3842,0x46ef,0x99,0x67,0xbb,0xc6,0x55,0x77,0x58,0xb7">
			<comments desc="Game controller interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="update" name="Update" num_parameters="0">
				<comments desc="Update the device states. ">
					<remark text="All the get methods depends on Update being called first to get the latest value as most game controllers are polled and not event based. "/>
					<remark text="Return true if any state changed since the last update, eFalse otherwise. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsConnected"
				name="GetIsConnected"
				num_parameters="0"
				property="get"
				property_name2="isConnected"
				property_name="is_connected">
				<comments desc="Return eTrue if the device is connected. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0"
				property="get"
				property_name2="name"
				property_name="name">
				<comments desc="Name of the input device. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIndex"
				name="GetIndex"
				num_parameters="0"
				property="get"
				property_name2="index"
				property_name="index">
				<comments desc="Get the index of the game controller. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumButtons"
				name="GetNumButtons"
				num_parameters="0"
				property="get"
				property_name2="numButtons"
				property_name="num_buttons">
				<comments desc="Return the number of buttons of the game controller. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getButton"
				name="GetButton"
				num_parameters="1"
				property="get"
				property_name2="button"
				property_name="button">
				<comments desc="Return the force applied on the button. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="ulButton"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumAxis"
				name="GetNumAxis"
				num_parameters="0"
				property="get"
				property_name2="numAxis"
				property_name="num_axis">
				<comments desc="Return the number of axis of the game controller. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getAxis"
				name="GetAxis"
				num_parameters="1"
				property="get"
				property_name2="axis"
				property_name="axis">
				<comments desc="Return the position of the given axis "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="axis"
					type="eGameCtrlAxis"
					typec="eGameCtrlAxis"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCanVibrate"
				name="GetCanVibrate"
				num_parameters="0"
				property="get"
				property_name2="canVibrate"
				property_name="can_vibrate">
				<comments desc="Get whether the game controller can vibrate. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="vibrate" name="Vibrate" num_parameters="1">
				<comments desc="Set the left &amp; right motor vibrations. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aSpeed"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasBattery"
				name="GetHasBattery"
				num_parameters="0"
				property="get"
				property_name2="hasBattery"
				property_name="has_battery">
				<comments desc="Get whether the controller has a battery. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getBatteryLevel"
				name="GetBatteryLevel"
				num_parameters="0"
				property="get"
				property_name2="batteryLevel"
				property_name="battery_level">
				<comments desc="Get the battery level. ">
					<remark text="0 is empty, 1.0 is full. "/>
				</comments>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IHString.h.idl.xml">
		<interface name="iHString" uuid1="0F0162E8-64C3-4276-9E1E-42BC02424323" uuid2="0x0f0162e8,0x64c3,0x4276,0x9e,0x1e,0x42,0xbc,0x02,0x42,0x43,0x23">
			<comments desc="HString interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getChars"
				name="GetChars"
				num_parameters="0"
				property="get"
				property_name2="chars"
				property_name="chars">
				<comments desc="Get the string&apos;s characters. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLength"
				name="GetLength"
				num_parameters="0"
				property="get"
				property_name2="length"
				property_name="length">
				<comments desc="Get the string&apos;s length. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="cmp"
				name="Cmp"
				num_parameters="1">
				<comments desc="Compare this string with another HString. ">
					<remark text="If the passed string is not from the same string table a regular string compare will be performed. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="ahspString"
					type="const iHString *"
					typec="const iHString*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="icmp"
				name="ICmp"
				num_parameters="1">
				<comments desc="Case insensitive compare with another HString. ">
					<remark text="If the passed string is not from the same string table a regular string compare will be performed. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="ahspString"
					type="const iHString *"
					typec="const iHString*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalized"
				name="GetLocalized"
				num_parameters="0"
				property="get"
				property_name2="localized"
				property_name="localized">
				<comments desc="Get the string localized in the default locale. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalizedEx"
				name="GetLocalizedEx"
				num_parameters="1">
				<comments desc="Get the string localized in the specified locale. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="locale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="isLocalized"
				name="IsLocalized"
				num_parameters="1">
				<comments desc="Get the whether the string is localized in the specified locale. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="locale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createCharIt"
				name="CreateCharIt"
				num_parameters="1">
				<comments desc="Return a character iterator to iterate over the string starting at the specified byte offset. " return="NULL if the offset is out of range, else the new iterator. "/>
				<return type="iHStringCharIt *" typec="iHStringCharIt*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="offset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="createRangeIt"
				name="CreateRangeIt"
				num_parameters="2">
				<comments desc="Return a character iterator to iterate over the specifed byte range in the string. " return="NULL if the offset or size is out of range, else the new iterator. "/>
				<return type="iHStringCharIt *" typec="iHStringCharIt*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="offset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="size"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iHStringCharIt" uuid1="A6885894-F6A9-40FB-8206-571F3C974278" uuid2="0xa6885894,0xf6a9,0x40fb,0x82,0x06,0x57,0x1f,0x3c,0x97,0x42,0x78">
			<comments desc="HString character iterator interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getString"
				name="GetString"
				num_parameters="0"
				property="get"
				property_name2="string"
				property_name="string">
				<comments desc="Get the string being iterated. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the iterator. "/>
				<return type="iHStringCharIt *" typec="iHStringCharIt*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getIsStart"
				name="GetIsStart"
				num_parameters="0"
				property="get"
				property_name2="isStart"
				property_name="is_start">
				<comments desc="Get whether the current position is the start of the iterator. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsEnd"
				name="GetIsEnd"
				num_parameters="0"
				property="get"
				property_name2="isEnd"
				property_name="is_end">
				<comments desc="Get whether the current position is the end of the iterator. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getPosition"
				name="GetPosition"
				num_parameters="0"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the current position from the start of the iterator in bytes. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="toStart" name="ToStart" num_parameters="0">
				<comments desc="Move the iterator to its starting point. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="toEnd" name="ToEnd" num_parameters="0">
				<comments desc="Move the iterator to its end point. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				const="yes"
				java_name="getNumChars"
				name="GetNumChars"
				num_parameters="0"
				property="get"
				property_name2="numChars"
				property_name="num_chars">
				<comments desc="Get the number of characters covered by the iterator. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				const="yes"
				java_name="getNumBytes"
				name="GetNumBytes"
				num_parameters="0"
				property="get"
				property_name2="numBytes"
				property_name="num_bytes">
				<comments desc="Get the number of bytes covered by the iterator. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
			</method>
			<method
				const="yes"
				java_name="peekNext"
				name="PeekNext"
				num_parameters="0">
				<comments desc="Return the next character in the string without moving the iterator. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="next" name="Next" num_parameters="0">
				<comments desc="Return the next character in the string moving the iterator forward. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="peekPrior"
				name="PeekPrior"
				num_parameters="0">
				<comments desc="Return the previous character in the string without moving the iterator. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="prior" name="Prior" num_parameters="0">
				<comments desc="Return the next character in the string moving the iterator backward. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="peekAdvance"
				name="PeekAdvance"
				num_parameters="1">
				<comments desc="Return the nth character in the string without moving the iterator. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="fwd"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="advance" name="Advance" num_parameters="1">
				<comments desc="Return the nth character in the string moving the iterator forward. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="n"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="peekRewind"
				name="PeekRewind"
				num_parameters="1">
				<comments desc="Return the nth previous character in the string without moving the iterator. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="back"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="rewind" name="Rewind" num_parameters="1">
				<comments desc="Return the nth previous character in the string moving the iterator backward. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="n"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="toPosition" name="ToPosition" num_parameters="1">
				<comments desc="Move the iterator to the specified position in bytes. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anOffsetInBytes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="astl" source="niLang/src/_idl/IHString.h.idl.xml"/>
	<namespace name="eastl" source="niLang/src/_idl/IHString.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/IJson.h.idl.xml">
		<enum min_features="20" name="eJsonType">
			<comments desc="Json value types "/>
			<value min_features="20" name="eJsonType_Syntax" value="0 ">
				<comments desc="Syntax parsing. "/>
			</value>
			<value min_features="20" name="eJsonType_Name" value="1 ">
				<comments desc="Pair Name (string) "/>
			</value>
			<value min_features="20" name="eJsonType_String" value="2 ">
				<comments desc="String "/>
			</value>
			<value min_features="20" name="eJsonType_Number" value="3 ">
				<comments desc="Number "/>
			</value>
			<value min_features="20" name="eJsonType_True" value="4 ">
				<comments desc="true "/>
			</value>
			<value min_features="20" name="eJsonType_False" value="5 ">
				<comments desc="false "/>
			</value>
			<value min_features="20" name="eJsonType_Null" value="6 ">
				<comments desc="null "/>
			</value>
			<value min_features="20" name="eJsonType_ObjectBegin" value="7 ">
				<comments desc="Object begining "/>
			</value>
			<value min_features="20" name="eJsonType_ObjectEnd" value="8 ">
				<comments desc="Object end "/>
			</value>
			<value min_features="20" name="eJsonType_ArrayBegin" value="9 ">
				<comments desc="Array begining "/>
			</value>
			<value min_features="20" name="eJsonType_ArrayEnd" value="10 ">
				<comments desc="Array end "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iJsonParserSink"
			uuid1="A565ABA5-71AF-4045-A999-F8EF4C055CFA"
			uuid2="0xa565aba5,0x71af,0x4045,0xa9,0x99,0xf8,0xef,0x4c,0x05,0x5c,0xfa">
			<comments desc="Json parser sink interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onJsonParserSink_Error"
				min_features="20"
				name="OnJsonParserSink_Error"
				num_parameters="3">
				<comments desc="Json parser sink interface. Called when a parsing error occured. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszReason"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anLine"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anCol"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="onJsonParserSink_Value"
				min_features="20"
				name="OnJsonParserSink_Value"
				num_parameters="2">
				<comments desc="Called when a value is parsed "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aType"
					type="eJsonType"
					typec="eJsonType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iJsonWriterSink"
			uuid1="8FB94E8C-6267-4F9A-AD55-1D0601BB2989"
			uuid2="0x8fb94e8c,0x6267,0x4f9a,0xad,0x55,0x1d,0x06,0x01,0xbb,0x29,0x89">
			<comments desc="Json writer sink interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onJsonWriterSink_Error"
				min_features="20"
				name="OnJsonWriterSink_Error"
				num_parameters="1">
				<comments desc="Json writer sink interface. Called when there&apos;s a writting error. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszReason"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onJsonWriterSink_Write"
				min_features="20"
				name="OnJsonWriterSink_Write"
				num_parameters="2">
				<comments desc="Called when to write a value. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aValue"
					type="eJsonType"
					typec="eJsonType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="20"
			name="iJsonWriter"
			uuid1="265DC4DB-8A0F-4283-BC83-56241780C217"
			uuid2="0x265dc4db,0x8a0f,0x4283,0xbc,0x83,0x56,0x24,0x17,0x80,0xc2,0x17">
			<comments desc="Json writer interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="reset"
				min_features="20"
				name="Reset"
				num_parameters="0">
				<comments desc="Reset the writer&apos;s content. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="arrayBegin"
				min_features="20"
				name="ArrayBegin"
				num_parameters="0">
				<comments desc="Begin an array. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="arrayEnd"
				min_features="20"
				name="ArrayEnd"
				num_parameters="0">
				<comments desc="Ends an array. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="objectBegin"
				min_features="20"
				name="ObjectBegin"
				num_parameters="0">
				<comments desc="Begin an object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="objectEnd"
				min_features="20"
				name="ObjectEnd"
				num_parameters="0">
				<comments desc="Ends an object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="name"
				min_features="20"
				name="Name"
				num_parameters="1">
				<comments desc="Append a key name. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="valueString"
				min_features="20"
				name="ValueString"
				num_parameters="1">
				<comments desc="Append a string in the current array/object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aStr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="valueNumber"
				min_features="20"
				name="ValueNumber"
				num_parameters="1">
				<comments desc="Append an integer in the current array/object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aStr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="valueBool"
				min_features="20"
				name="ValueBool"
				num_parameters="1">
				<comments desc="Append a boolean in the current array/object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abItem"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="valueNull"
				min_features="20"
				name="ValueNull"
				num_parameters="0">
				<comments desc="Append a null value in the current array/object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="objectString"
				min_features="20"
				name="ObjectString"
				num_parameters="2">
				<comments desc="Write a string property in the current object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aStr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="objectNumber"
				min_features="20"
				name="ObjectNumber"
				num_parameters="2">
				<comments desc="Write a number property in the current object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aStr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="objectBool"
				min_features="20"
				name="ObjectBool"
				num_parameters="2">
				<comments desc="Write a boolean property in the current object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abValue"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="objectNull"
				min_features="20"
				name="ObjectNull"
				num_parameters="1">
				<comments desc="Write a null property in the current object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ILang.h.idl.xml">
		<enum name="eEnumToStringFlags">
			<comments desc="Enum to string flags "/>
			<value name="eEnumToStringFlags_Full" value="niBit ( 0 ) ">
				<comments desc="Dont use the specified enum as default enumeration (will fully qualify the enumeration value&apos;s name). "/>
			</value>
			<value name="eEnumToStringFlags_Flags" value="niBit ( 1 ) ">
				<comments desc="Handle the enumeration as a set of flags. "/>
			</value>
			<value name="eEnumToStringFlags_GlobalSearch" value="niBit ( 2 ) ">
				<comments desc="Search all registered enumerations if the specified fully qualified enumeration can&apos;t be found. "/>
			</value>
		</enum>
		<enum name="eSystemMessage">
			<comments desc="System messages id. "/>
			<value name="eSystemMessage_Exit" value="niMessageID ( &apos;_&apos; , &apos;S&apos; , &apos;Y&apos; , &apos;S&apos; , &apos;x&apos; ) ">
				<comments desc="The application exits. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eSystemMessage_SetupParentWindow" value="niMessageID ( &apos;_&apos; , &apos;S&apos; , &apos;Y&apos; , &apos;S&apos; , &apos;W&apos; ) ">
				<comments desc="Sent to a child process to notify which is the actual parent window. ">
					<params text="A: parent window handle "/>
				</comments>
			</value>
			<value name="eSystemMessage_SetupClientWindow" value="niMessageID ( &apos;_&apos; , &apos;S&apos; , &apos;Y&apos; , &apos;S&apos; , &apos;w&apos; ) ">
				<comments desc="Sent to a parent process to notify which is the actual child window created. ">
					<remark text="Sent as reply of SetupParentWindow "/>
					<params text="A: parent window handle "/>
				</comments>
			</value>
			<value name="eSystemMessage_Log" value="niMessageID ( &apos;_&apos; , &apos;S&apos; , &apos;Y&apos; , &apos;S&apos; , &apos;L&apos; ) ">
				<comments desc="Log message. ">
					<params text="A: log type "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eSystemMessage_OpenFile" value="niMessageID ( &apos;_&apos; , &apos;S&apos; , &apos;Y&apos; , &apos;S&apos; , &apos;O&apos; ) ">
				<comments desc="Open file. ">
					<params text="A: file path "/>
					<params text="B: unused "/>
				</comments>
			</value>
		</enum>
		<enum name="eClipboardType">
			<comments desc="Clipboard types "/>
			<value name="eClipboardType_System" value="0 ">
				<comments desc="System clipboard. "/>
			</value>
			<value name="eClipboardType_Memory1" value="1 ">
				<comments desc="Memory clipboard 1. "/>
			</value>
			<value name="eClipboardType_Memory2" value="2 ">
				<comments desc="Memory clipboard 2. "/>
			</value>
			<value name="eClipboardType_Memory3" value="3 ">
				<comments desc="Memory clipboard 3. "/>
			</value>
			<value name="eClipboardType_Memory4" value="4 ">
				<comments desc="Memory clipboard 4. "/>
			</value>
			<value name="eClipboardType_Memory5" value="5 ">
				<comments desc="Memory clipboard 5. "/>
			</value>
			<value name="eClipboardType_Memory6" value="6 ">
				<comments desc="Memory clipboard 6. "/>
			</value>
			<value name="eClipboardType_Memory7" value="7 ">
				<comments desc="Memory clipboard 7. "/>
			</value>
			<value name="eClipboardType_Memory8" value="8 ">
				<comments desc="Memory clipboard 8. "/>
			</value>
			<value name="eClipboardType_Memory9" value="9 ">
				<comments desc="Memory clipboard 9. "/>
			</value>
			<value name="eClipboardType_Memory10" value="10 ">
				<comments desc="Memory clipboard 10. "/>
			</value>
			<value name="eClipboardType_Last" value="11 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface name="iLang" uuid1="8E2CEBD1-783B-4B0B-B7B3-62A387D190B1" uuid2="0x8e2cebd1,0x783b,0x4b0b,0xb7,0xb3,0x62,0xa3,0x87,0xd1,0x90,0xb1">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getProcessManager"
				min_features="15"
				name="GetProcessManager"
				num_parameters="0"
				property="get"
				property_name2="processManager"
				property_name="process_manager">
				<comments desc="Get the platform&apos;s process manager. "/>
				<return type="iOSProcessManager *" typec="iOSProcessManager*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="exit" name="Exit" num_parameters="1">
				<comments desc="Forcefully exit the application. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aulErrorCode"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="onExit" name="OnExit" num_parameters="1">
				<comments desc="Adds a runnable that will be called when the application exits through iLang::Exit(). " return="eTrue if OnExit is supported, else eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apRunnable"
					type="iRunnable *"
					typec="iRunnable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fatalError" name="FatalError" num_parameters="1">
				<comments desc="Show an error message box then exit. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aszMsg"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="setEnv"
				name="SetEnv"
				num_parameters="2"
				property="set"
				property_name2="env"
				property_name="env">
				<comments desc="Set an OS environment variable. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszEnv"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getEnv"
				name="GetEnv"
				num_parameters="1"
				property="get"
				property_name2="env"
				property_name="env">
				<comments desc="Get an OS environment variable. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszEnv"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getProperties"
				name="GetProperties"
				num_parameters="0"
				property="get"
				property_name2="properties"
				property_name="properties">
				<comments desc="Get the system properties. "/>
				<return type="const tStringCMap *" typec="const tStringCMap*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="hasProperty"
				name="HasProperty"
				num_parameters="1">
				<comments desc="Check whether the specified system property exists. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setProperty"
				name="SetProperty"
				num_parameters="2"
				property="set"
				property_name2="property"
				property_name="property">
				<comments desc="Set the specified system property. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszValue"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getProperty"
				name="GetProperty"
				num_parameters="1"
				property="get"
				property_name2="property"
				property_name="property">
				<comments desc="Get the specified system property. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="registerModuleDef" name="RegisterModuleDef" num_parameters="1">
				<comments desc="Register a module definition. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDef"
					type="const iModuleDef *"
					typec="const iModuleDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumModuleDefs"
				name="GetNumModuleDefs"
				num_parameters="0"
				property="get"
				property_name2="numModuleDefs"
				property_name="num_module_defs">
				<comments desc="Get the number of modules registered. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getModuleDef"
				name="GetModuleDef"
				num_parameters="1"
				property="get"
				property_name2="moduleDef"
				property_name="module_def">
				<comments desc="Get the module at the specified index. "/>
				<return type="const iModuleDef *" typec="const iModuleDef*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getModuleDefIndex"
				name="GetModuleDefIndex"
				num_parameters="1"
				property="get"
				property_name2="moduleDefIndex"
				property_name="module_def_index">
				<comments desc="Get the index of the module with the specified name. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadModuleDef" name="LoadModuleDef" num_parameters="2">
				<comments desc="Load a module definition from a DLL. "/>
				<return type="const iModuleDef *" typec="const iModuleDef*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="NULL "
					last="1"
					name="aaszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCreateInstanceMap"
				name="GetCreateInstanceMap"
				num_parameters="0"
				property="get"
				property_name2="createInstanceMap"
				property_name="create_instance_map">
				<comments desc="Create instance map. "/>
				<return type="tCreateInstanceCMap *" typec="tCreateInstanceCMap*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createInstance" name="CreateInstance" num_parameters="3">
				<comments desc="Create instance of the specified object type. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aOID"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					default="niVarNull "
					name="aVarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					default="niVarNull "
					last="1"
					name="aVarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGlobalInstanceMap"
				name="GetGlobalInstanceMap"
				num_parameters="0"
				property="get"
				property_name2="globalInstanceMap"
				property_name="global_instance_map">
				<comments desc="Get the global instance map. "/>
				<return type="tGlobalInstanceCMap *" typec="tGlobalInstanceCMap*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setGlobalInstance"
				name="SetGlobalInstance"
				num_parameters="2"
				property="set"
				property_name2="globalInstance"
				property_name="global_instance">
				<comments desc="Set a global instance. ">
					<remark text="All registered global instance will be included in the query interface on iLang objects. By example if you register an object that implements iResource you can do QueryInterface&lt;iResource&gt;(GetLang()) and it will return the instance of the registered global instance. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apInstance"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGlobalInstance"
				name="GetGlobalInstance"
				num_parameters="1"
				property="get"
				property_name2="globalInstance"
				property_name="global_instance">
				<comments desc="Get a global instance. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="registerEnumDef" name="RegisterEnumDef" num_parameters="1">
				<comments desc="Register an enumeration definition. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getEnumDef" name="GetEnumDef" num_parameters="1">
				<comments desc="Get an enum definition from the specified name. "/>
				<return type="const sEnumDef *" typec="const sEnumDef*" typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aEID"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getInterfaceName"
				name="GetInterfaceName"
				num_parameters="1"
				property="get"
				property_name2="interfaceName"
				property_name="interface_name">
				<comments desc="Get the name of the interface with the specified UUID. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aUUID"
					type="const tUUID &amp;"
					typec="const tUUID&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getInterfaceUUID"
				name="GetInterfaceUUID"
				num_parameters="1"
				property="get"
				property_name2="interfaceUUID"
				property_name="interface_uuid">
				<comments desc="Get the UUID of the interface with the specified name. "/>
				<return type="const tUUID &amp;" typec="const tUUID&amp;" typei="ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspStr"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getInterfaceDefFromUUID"
				name="GetInterfaceDefFromUUID"
				num_parameters="1">
				<comments desc="Get the interface definition from the specified UUID. "/>
				<return type="const sInterfaceDef *" typec="const sInterfaceDef*" typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aUUID"
					type="const tUUID &amp;"
					typec="const tUUID&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDefaultLocale"
				name="SetDefaultLocale"
				num_parameters="1"
				property="set"
				property_name2="defaultLocale"
				property_name="default_locale">
				<comments desc="Set the default locale. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDefaultLocale"
				name="GetDefaultLocale"
				num_parameters="0"
				property="get"
				property_name2="defaultLocale"
				property_name="default_locale">
				<comments desc="Get the default locale. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumLocales"
				name="GetNumLocales"
				num_parameters="0"
				property="get"
				property_name2="numLocales"
				property_name="num_locales">
				<comments desc="Return the number of locales that have at least one localized string. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLocale"
				name="GetLocale"
				num_parameters="1"
				property="get"
				property_name2="locale"
				property_name="locale">
				<comments desc="Return the name of the locale at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="clearLocalization" name="ClearLocalization" num_parameters="1">
				<comments desc="Remove all localized strings of the specified locale. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setLocalization" name="SetLocalization" num_parameters="3">
				<comments desc="Set the localization of the specified &apos;native&apos; string. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspNative"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspLocalized"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="setLocalizationMap" name="SetLocalizationMap" num_parameters="2">
				<comments desc="Set the localization of the specified of all strings in the specified map. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apLocalizationMap"
					type="const tStringCMap *"
					typec="const tStringCMap*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLocalizationMap"
				name="GetLocalizationMap"
				num_parameters="2">
				<comments desc="Get all localized strings of the specified locale. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="ahspLocale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apLocalizedMap"
					type="tStringCMap *"
					typec="tStringCMap*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMarkMissingLocalization"
				name="SetMarkMissingLocalization"
				num_parameters="1"
				property="set"
				property_name2="markMissingLocalization"
				property_name="mark_missing_localization">
				<comments desc="Set whether the string table should mark missing locale translations. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abMarkMissing"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMarkMissingLocalization"
				name="GetMarkMissingLocalization"
				num_parameters="0"
				property="get"
				property_name2="markMissingLocalization"
				property_name="mark_missing_localization">
				<comments desc="Get whether the string table should mark missing locale translations. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMissingLocalization"
				name="GetMissingLocalization"
				num_parameters="1">
				<comments desc="Get all missing strings of the specified locale. ">
					<remark text="This retrieves all strings which should have been translated but are not. "/>
				</comments>
				<return type="tStringCVec *" typec="tStringCVec*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="locale"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createLocalUUID" name="CreateLocalUUID" num_parameters="0">
				<comments desc="Create a local UUID. ">
					<remark text="A local UUID is garanteed to be unique only on the local computer. "/>
					<remark text="Generating a local UUID can be considered to be faster in general. "/>
				</comments>
				<return type="tUUID" typec="tUUID" typei="ni::eType_UUID"/>
			</method>
			<method java_name="createGlobalUUID" name="CreateGlobalUUID" num_parameters="0">
				<comments desc="Create a global UUID. ">
					<remark text="A gloabl UUID is garanteed to be unique among all computers. "/>
					<remark text="Generating a global UUID should be considered as being a slow operation. "/>
				</comments>
				<return type="tUUID" typec="tUUID" typei="ni::eType_UUID"/>
			</method>
			<method
				java_name="setLogFilter"
				name="SetLogFilter"
				num_parameters="1"
				property="set"
				property_name2="logFilter"
				property_name="log_filter">
				<comments desc="Set the log filter. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="exclude"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getLogFilter"
				name="GetLogFilter"
				num_parameters="0"
				property="get"
				property_name2="logFilter"
				property_name="log_filter">
				<comments desc="Get the log filter. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method java_name="log" name="Log" num_parameters="5">
				<comments desc="Log a message. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="type"
					type="tLogFlags"
					typec="tLogFlags"
					typei="ni::eType_Enum"/>
				<parameter
					name="msg"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="file"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="line"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="func"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRootFS"
				name="GetRootFS"
				num_parameters="0"
				property="get"
				property_name2="rootFS"
				property_name="root_fs">
				<comments desc="Get the root file system. "/>
				<return type="iFileSystem *" typec="iFileSystem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createFileSystemDir"
				name="CreateFileSystemDir"
				num_parameters="2">
				<comments desc="Create a directory file system. "/>
				<return type="iFileSystem *" typec="iFileSystem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRights"
					type="tFileSystemRightsFlags"
					typec="tFileSystemRightsFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="createFileSystemHashed"
				name="CreateFileSystemHashed"
				num_parameters="1">
				<comments desc="Creates a file system that store the file using its hashed file name. ">
					<remark text="This allows to use anything as filename and use the underlying file system more as a key/value store. "/>
				</comments>
				<return type="iFileSystem *" typec="iFileSystem*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFS"
					type="const iFileSystem *"
					typec="const iFileSystem*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFile" name="CreateFile" num_parameters="1">
				<comments desc="Create a file from the specified file base. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseWriteDummy" name="CreateFileBaseWriteDummy" num_parameters="0">
				<comments desc="Create a dummy file base. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileWriteDummy" name="CreateFileWriteDummy" num_parameters="0">
				<comments desc="Create a dummy file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseMemory" name="CreateFileBaseMemory" num_parameters="4">
				<comments desc="Create a memory file base. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apMem"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="abFree"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileMemory" name="CreateFileMemory" num_parameters="4">
				<comments desc="Create a memory file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apMem"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="abFree"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseMemoryAlloc" name="CreateFileBaseMemoryAlloc" num_parameters="2">
				<comments desc="Create a memory file base. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileMemoryAlloc" name="CreateFileMemoryAlloc" num_parameters="2">
				<comments desc="Create a memory file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseDynamicMemory" name="CreateFileBaseDynamicMemory" num_parameters="2">
				<comments desc="Create a dynamic memory file base. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileDynamicMemory" name="CreateFileDynamicMemory" num_parameters="2">
				<comments desc="Create a dynamic memory file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					default="0 "
					name="anSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					default="NULL "
					last="1"
					name="aszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseWindow" name="CreateFileBaseWindow" num_parameters="5">
				<comments desc="Create a file base window. ">
					<remark text="If AutoSeekSet is true SeekSet will be called before each read/write operations which allows to have multiple file windows on the same file and read from them concurently. However that method is usually quite slow, a better approach is to open a new shared file handle of the base file with and create the file window with the offset and auto seek set disabled. "/>
				</comments>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBase"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
				<parameter
					name="anSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
				<parameter
					name="aaszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abAutoSeekSet"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createFileWindow" name="CreateFileWindow" num_parameters="5">
				<comments desc="Create a file window. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBase"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
				<parameter
					name="anSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
				<parameter
					name="aaszPath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abAutoSeekSet"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="createFileBaseBufferEncoder" name="CreateFileBaseBufferEncoder" num_parameters="2">
				<comments desc="Create a file base buffer encoder. "/>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apEnc"
					type="iBufferEncoder *"
					typec="iBufferEncoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBufferEncoder" name="CreateFileBufferEncoder" num_parameters="2">
				<comments desc="Create a file buffer encoder. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apEnc"
					type="iBufferEncoder *"
					typec="iBufferEncoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileBaseBufferDecoder" name="CreateFileBaseBufferDecoder" num_parameters="3">
				<comments desc="Create a file base buffer decoder. ">
					<params text="apBase "/>
					<params text="apDec "/>
					<params text="aDecodedSize specifies the size of the file when decoded. Pass zero to autodetect. Should be specified whenever possible, without it the whole file is decoded to determin the its size. "/>
				</comments>
				<return type="iFileBase *" typec="iFileBase*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDec"
					type="iBufferDecoder *"
					typec="iBufferDecoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aDecodedSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="createFileBufferDecoder" name="CreateFileBufferDecoder" num_parameters="3">
				<comments desc="Create a file buffer decoder. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBase"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDec"
					type="iBufferDecoder *"
					typec="iBufferDecoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aDecodedSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="fileBufferEncode" name="FileBufferEncode" num_parameters="4">
				<comments desc="Encodes a file using the specified buffer encoder. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apEnc"
					type="iBufferEncoder *"
					typec="iBufferEncoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					last="1"
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="fileBufferDecode" name="FileBufferDecode" num_parameters="5">
				<comments desc="Decodes a file using the specified buffer decoder. "/>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apDec"
					type="iBufferDecoder *"
					typec="iBufferDecoder*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anDestSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="runCommand" name="RunCommand" num_parameters="1">
				<comments desc="Run the specified OS command. ">
					<remark text="This is equivalent to typing a command on the OS&apos;s command line/console. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="aaszCmd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="startPath" name="StartPath" num_parameters="1">
				<comments desc="Start the specified file/path. ">
					<remark text="This opens a file/path with the default application set to open the file/path&apos;s type. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="aaszFile"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentTime"
				name="GetCurrentTime"
				num_parameters="0"
				property="get"
				property_name2="currentTime"
				property_name="current_time">
				<comments desc="Get the current time. "/>
				<return type="const iTime *" typec="const iTime*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="timerInSeconds"
				name="TimerInSeconds"
				num_parameters="0">
				<comments desc="Get the current value of the lowest level timer available in seconds. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method java_name="resetFrameTime" name="ResetFrameTime" num_parameters="0">
				<comments desc="Reset the frame time. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="updateFrameTime" name="UpdateFrameTime" num_parameters="1">
				<comments desc="Update the frame. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="afElapsedTime"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getTotalFrameTime"
				name="GetTotalFrameTime"
				num_parameters="0"
				property="get"
				property_name2="totalFrameTime"
				property_name="total_frame_time">
				<comments desc="Get the total time since the last ResetFrameTime. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getFrameTime"
				name="GetFrameTime"
				num_parameters="0"
				property="get"
				property_name2="frameTime"
				property_name="frame_time">
				<comments desc="Get the time taken by the last frame. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="getFrameNumber"
				name="GetFrameNumber"
				num_parameters="0"
				property="get"
				property_name2="frameNumber"
				property_name="frame_number">
				<comments desc="Get the current frame number. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFrameRate"
				name="GetFrameRate"
				num_parameters="0"
				property="get"
				property_name2="frameRate"
				property_name="frame_rate">
				<comments desc="Get the frame rate. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAverageFrameRate"
				name="GetAverageFrameRate"
				num_parameters="0"
				property="get"
				property_name2="averageFrameRate"
				property_name="average_frame_rate">
				<comments desc="Get the average frame rate per seconds. ">
					<remark text="This value is estimated every second, it shouldn&apos;t be used for accurate measurment. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="jsonParseFile"
				min_features="20"
				name="JsonParseFile"
				num_parameters="2">
				<comments desc="Parse Json contained in the specified file. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSink"
					type="ni::iJsonParserSink *"
					typec="ni::iJsonParserSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="jsonParseString"
				min_features="20"
				name="JsonParseString"
				num_parameters="2">
				<comments desc="Parse Json contained in the specified string. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="aString"
					type="const ni::cString &amp;"
					typec="const ni::cString&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSink"
					type="ni::iJsonParserSink *"
					typec="ni::iJsonParserSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="createJsonSinkWriter"
				min_features="20"
				name="CreateJsonSinkWriter"
				num_parameters="2">
				<comments desc="Create a Json writer to write to the specified sink. "/>
				<return type="ni::iJsonWriter *" typec="ni::iJsonWriter*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSink"
					type="ni::iJsonWriterSink *"
					typec="ni::iJsonWriterSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abPrettyPrint"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="createJsonFileWriter"
				min_features="20"
				name="CreateJsonFileWriter"
				num_parameters="2">
				<comments desc="Create a Json writer to write to the specified file. "/>
				<return type="ni::iJsonWriter *" typec="ni::iJsonWriter*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abPrettyPrint"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="xmlParseFile"
				min_features="20"
				name="XmlParseFile"
				num_parameters="2">
				<comments desc="Parse Xml contained in the specified file. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSink"
					type="ni::iXmlParserSink *"
					typec="ni::iXmlParserSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="xmlParseString"
				min_features="20"
				name="XmlParseString"
				num_parameters="2">
				<comments desc="Parse Xml contained in the specified string. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="aString"
					type="const ni::cString &amp;"
					typec="const ni::cString&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSink"
					type="ni::iXmlParserSink *"
					typec="ni::iXmlParserSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getExpressionContext"
				name="GetExpressionContext"
				num_parameters="0"
				property="get"
				property_name2="expressionContext"
				property_name="expression_context">
				<comments desc="Get the root expression context. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createExpressionContext" name="CreateExpressionContext" num_parameters="0">
				<comments desc="Create a new expression context. "/>
				<return type="iExpressionContext *" typec="iExpressionContext*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="eval" name="Eval" num_parameters="1">
				<comments desc="Evaluate the specified expression. ">
					<remark text="If the evaluated expression fails it returns an empty string variable named &quot;EVALERR&quot;. This means that Eval() always returns a valid variable object and so their is no need to check for a NULL pointer. "/>
				</comments>
				<return type="Ptr&lt;iExpressionVariable&gt;" typec="Ptr&lt;iExpressionVariable&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="enumToString" name="EnumToString" num_parameters="3">
				<comments desc="Convert an enum value to an expression string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="anValue"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="stringToEnum" name="StringToEnum" num_parameters="3">
				<comments desc="Convert an expression string to an enum value. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="aExpr"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnumDef"
					type="const sEnumDef *"
					typec="const sEnumDef*"
					typei="ni::eTypeFlags_Constant|ni::eType_Ptr|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tEnumToStringFlags"
					typec="tEnumToStringFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="addScriptingHost"
				min_features="15"
				name="AddScriptingHost"
				num_parameters="2">
				<comments desc="Add a scripting host. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apHost"
					type="iScriptingHost *"
					typec="iScriptingHost*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="removeScriptingHost"
				min_features="15"
				name="RemoveScriptingHost"
				num_parameters="1">
				<comments desc="Remove a scripting host. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumScriptingHosts"
				min_features="15"
				name="GetNumScriptingHosts"
				num_parameters="0"
				property="get"
				property_name2="numScriptingHosts"
				property_name="num_scripting_hosts">
				<comments desc="Get the number of scripting hosts. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getScriptingHostName"
				min_features="15"
				name="GetScriptingHostName"
				num_parameters="1"
				property="get"
				property_name2="scriptingHostName"
				property_name="scripting_host_name">
				<comments desc="Get the name of the scripting host at the specified index. "/>
				<return type="iHString *" typec="iHString*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getScriptingHost"
				min_features="15"
				name="GetScriptingHost"
				num_parameters="1"
				property="get"
				property_name2="scriptingHost"
				property_name="scripting_host">
				<comments desc="Get the scripting host at the specified index. "/>
				<return type="iScriptingHost *" typec="iScriptingHost*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="getScriptingHostFromName"
				min_features="15"
				name="GetScriptingHostFromName"
				num_parameters="1"
				property="get"
				property_name2="scriptingHostFromName"
				property_name="scripting_host_from_name">
				<comments desc="Get the scripting host from the specified name. "/>
				<return type="iScriptingHost *" typec="iScriptingHost*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspName"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getScriptingHostIndex"
				min_features="15"
				name="GetScriptingHostIndex"
				num_parameters="1"
				property="get"
				property_name2="scriptingHostIndex"
				property_name="scripting_host_index">
				<comments desc="Get the index of the specified scripting host. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apHost"
					type="iScriptingHost *"
					typec="iScriptingHost*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="serviceAllScriptingHosts"
				min_features="15"
				name="ServiceAllScriptingHosts"
				num_parameters="1">
				<comments desc="Service all scripting hosts. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abForceGC"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="findScriptingHost"
				min_features="15"
				name="FindScriptingHost"
				num_parameters="2">
				<comments desc="Get the first scripting host that can evaluate the code resources. "/>
				<return type="iScriptingHost *" typec="iScriptingHost*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspContext"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspCodeResource"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getProf"
				name="GetProf"
				num_parameters="0"
				property="get"
				property_name2="prof"
				property_name="prof">
				<comments desc="Get the profiler instance. "/>
				<return type="iProf *" typec="iProf*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlgetProtocol" name="URLGetProtocol" num_parameters="1">
				<comments desc="Get the protocol that will be used to access the specified URL. ">
					<remark text="If no protocol is specified returns the &quot;file&quot; protocol if an absolute file path is detected (the path starts with a drive letter or / or \) else return the &quot;default&quot; protocol. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlgetHandler" name="URLGetHandler" num_parameters="1">
				<comments desc="Get the URL file handler that will be used to access the specified URL. ">
					<remark text="If no protocol is specified the &quot;default&quot; protocol is assumed. "/>
				</comments>
				<return type="iURLFileHandler *" typec="iURLFileHandler*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlopen" name="URLOpen" num_parameters="1">
				<comments desc="Open a synchronous stream to the specified URL. ">
					<remark text="The operation is blocking, if necessary the whole file is downloaded before the function returns. "/>
					<remark text="The operation is handed to a URLFileHandler which is retrived according to the protocol specified in the URL. For example for http://foo.com/stuff.jpg the GlobalInstance &quot;URLFileHandler.http&quot; is retrieved as file handler. "/>
					<remark text="The RootFS is set as the default and file protocol handlers. "/>
				</comments>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlexists" name="URLExists" num_parameters="1">
				<comments desc="Validates the specified URL and if possible checks whether the resource the URL points to actually exists. ">
					<remark text="\see ni::iLang::URLOpen for precision about URL handling. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aURL"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="urlfindFilePath" name="URLFindFilePath" num_parameters="3">
				<comments desc="Find the path/url matching the specified resource, basepath and with the extensions derived from the specified loader prefix. ">
					<remark text="Example: found = URLFindFilePath(&quot;foo.bar&quot;, &quot;data/&quot;, &quot;BitmapLoader.&quot;) "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aszRes"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aszBasePath"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aLoaderPrefix"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createHString" name="CreateHString" num_parameters="1">
				<comments desc="Create a new HString. "/>
				<return type="Ptr&lt;iHString&gt;" typec="Ptr&lt;iHString&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aStr"
					type="const cString &amp;"
					typec="const cString&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="loadLocalization" name="LoadLocalization" num_parameters="1">
				<comments desc="Load a localization table. ">
					<remark text="The table&apos;s format is \&lt;Localization&gt;\&lt;String native=&quot;Hello&quot; fr=&quot;Bonjour&quot; cn=&quot;nihao&quot; /&gt;\&lt;/Localization&gt; "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="isSerializedObject" name="IsSerializedObject" num_parameters="3">
				<comments desc="Check if the file contains an object of the specified type. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aID"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apObjSize"
					type="tI64 *"
					typec="tI64*"
					typei="ni::eType_I64|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serializeObject" name="SerializeObject" num_parameters="4">
				<comments desc="Serialize an object. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apObject"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aMode"
					type="eSerializeMode"
					typec="eSerializeMode"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apObjSize"
					type="tI64 *"
					typec="tI64*"
					typei="ni::eType_I64|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="readSerializationHeader"
				name="ReadSerializationHeader"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Read serialization header. "/>
				<return type="tI64" typec="tI64"/>
				<parameter name="apFile" type="iFile *" typec="iFile*"/>
				<parameter name="apID" type="cString *" typec="cString*"/>
				<parameter
					last="1"
					name="apSize"
					type="tI64 *"
					typec="tI64*"/>
			</method>
			<method
				java_name="writeSerializationHeader"
				name="WriteSerializationHeader"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Write serialization header. "/>
				<return type="tI64" typec="tI64"/>
				<parameter name="apFile" type="iFile *" typec="iFile*"/>
				<parameter name="apID" type="const achar *" typec="const achar*"/>
				<parameter
					last="1"
					name="anSize"
					type="tI64"
					typec="tI64"/>
			</method>
			<method java_name="createDeviceResourceManager" name="CreateDeviceResourceManager" num_parameters="1">
				<comments desc="Create a new device resource manager. "/>
				<return type="iDeviceResourceManager *" typec="iDeviceResourceManager*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszType"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSystemMessageHandlers"
				name="GetSystemMessageHandlers"
				num_parameters="0"
				property="get"
				property_name2="systemMessageHandlers"
				property_name="system_message_handlers">
				<comments desc="Get the system message targets. "/>
				<return type="tMessageHandlerSinkLst *" typec="tMessageHandlerSinkLst*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDataTable" name="CreateDataTable" num_parameters="1">
				<comments desc="Create a data table. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serializeDataTable" name="SerializeDataTable" num_parameters="4">
				<comments desc="Serialize the specified data table. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszType"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aMode"
					type="eSerializeMode"
					typec="eSerializeMode"
					typei="ni::eType_Enum"/>
				<parameter
					name="apTable"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDataTableWriteStack" name="CreateDataTableWriteStack" num_parameters="1">
				<comments desc="Create a data table write stack. "/>
				<return type="iDataTableWriteStack *" typec="iDataTableWriteStack*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDataTableWriteStackFromName" name="CreateDataTableWriteStackFromName" num_parameters="1">
				<comments desc="Create a data table write stack. "/>
				<return type="iDataTableWriteStack *" typec="iDataTableWriteStack*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createDataTableReadStack" name="CreateDataTableReadStack" num_parameters="1">
				<comments desc="Create a data table read stack. "/>
				<return type="iDataTableReadStack *" typec="iDataTableReadStack*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="getAbsoluteDataTablePath" name="GetAbsoluteDataTablePath" num_parameters="2">
				<comments desc="Build an absolute path to the specified datatable and property. ">
					<remark text="If anPropIndex == eInvalidHandle the path points to the datatable and not the property "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anPropIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setClipboard"
				name="SetClipboard"
				num_parameters="2"
				property="set"
				property_name2="clipboard"
				property_name="clipboard">
				<comments desc="Set the data of the specified clipboard. ">
					<remark text="The datatable should have a at least a type member, type can be :&lt;br&gt; &lt;ul&gt; &lt;li&gt;text : Has a &apos;text&apos; property of type string containing the text&lt;/li&gt; &lt;li&gt;bitmap : Has a &apos;bitmap&apos; property of type iUnknown containing the bitmap&lt;/li&gt; &lt;/ul&gt; "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aType"
					type="eClipboardType"
					typec="eClipboardType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apDT"
					type="iDataTable *"
					typec="iDataTable*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClipboard"
				name="GetClipboard"
				num_parameters="1"
				property="get"
				property_name2="clipboard"
				property_name="clipboard">
				<comments desc="Get the data of the specified clipboard. "/>
				<return type="iDataTable *" typec="iDataTable*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aType"
					type="eClipboardType"
					typec="eClipboardType"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getNumMonitors"
				name="GetNumMonitors"
				num_parameters="0"
				property="get"
				property_name2="numMonitors"
				property_name="num_monitors">
				<comments desc="Get the number of monitors connected to the comptuer. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMonitorIndex"
				name="GetMonitorIndex"
				num_parameters="1"
				property="get"
				property_name2="monitorIndex"
				property_name="monitor_index">
				<comments desc="Get the index of the monitor with the specified OS handle. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getMonitorHandle"
				name="GetMonitorHandle"
				num_parameters="1"
				property="get"
				property_name2="monitorHandle"
				property_name="monitor_handle">
				<comments desc="Get the OS handle to the monitor at the specified index. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMonitorName"
				name="GetMonitorName"
				num_parameters="1"
				property="get"
				property_name2="monitorName"
				property_name="monitor_name">
				<comments desc="Get the name of the monitor at the specified index. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMonitorRect"
				name="GetMonitorRect"
				num_parameters="1"
				property="get"
				property_name2="monitorRect"
				property_name="monitor_rect">
				<comments desc="Get the rectangle of the monitor at the specified index. "/>
				<return type="sRecti" typec="sRecti" typei="ni::eType_Vec4i"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMonitorFlags"
				name="GetMonitorFlags"
				num_parameters="1"
				property="get"
				property_name2="monitorFlags"
				property_name="monitor_flags">
				<comments desc="Get the flags of the monitor at the specified index. "/>
				<return type="tOSMonitorFlags" typec="tOSMonitorFlags" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createWindow" name="CreateWindow" num_parameters="5">
				<comments desc="Create a new OS window. "/>
				<return type="iOSWindow *" typec="iOSWindow*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apParent"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aCreate"
					type="tOSWindowCreateFlags"
					typec="tOSWindowCreateFlags"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aStyle"
					type="tOSWindowStyleFlags"
					typec="tOSWindowStyleFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="createWindowEx" name="CreateWindowEx" num_parameters="2">
				<comments desc="Create a an OS window from a generic OS window handle. "/>
				<return type="iOSWindow *" typec="iOSWindow*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aOSWindowHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
				<parameter
					last="1"
					name="aCreate"
					type="tOSWindowCreateFlags"
					typec="tOSWindowCreateFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="messageBox" name="MessageBox" num_parameters="4">
				<comments desc="Displays a native modal message box. "/>
				<return type="eOSMessageBoxReturn" typec="eOSMessageBoxReturn" typei="ni::eType_Enum"/>
				<parameter
					name="apParent"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFlags"
					type="tOSMessageBoxFlags"
					typec="tOSMessageBoxFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="openFileDialog" name="OpenFileDialog" num_parameters="4">
				<comments desc="Displays a native file open dialog box. " return="An empty string if the user canceled, else the file path selected. ">
					<params text="aParent is the parent window. "/>
					<params text="aTitle title of the dialog. &quot;Open&quot; by default. "/>
					<params text="aFilter the file extension filters. Example &quot;pdf;txt;*&quot;, &apos;*&apos; means that all extensions are accepted. "/>
					<params text="aInitDir the directory to start from. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aParent"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFilter"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aInitDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="saveFileDialog" name="SaveFileDialog" num_parameters="4">
				<comments desc="Displays a native file save dialog box. " return="An empty string if the user canceled, else the file path selected. ">
					<params text="aParent is the parent window. "/>
					<params text="aTitle title of the dialog. &quot;Open&quot; by default. "/>
					<params text="aFilter the file extension filters. Example &quot;pdf;txt;*&quot;, &apos;*&apos; means that all extensions are accepted. "/>
					<params text="aInitDir the directory to start from. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aParent"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aFilter"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aInitDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="pickDirectoryDialog" name="PickDirectoryDialog" num_parameters="3">
				<comments desc="Displays a native directory picker dialog box. " return="An empty string if the user canceled, else the file path selected. ">
					<params text="aParent is the parent window. "/>
					<params text="aTitle title of the dialog. &quot;Open&quot; by default. "/>
					<params text="aInitDir the directory to start from. "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aParent"
					type="iOSWindow *"
					typec="iOSWindow*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aInitDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumGameCtrls"
				name="GetNumGameCtrls"
				num_parameters="0"
				property="get"
				property_name2="numGameCtrls"
				property_name="num_game_ctrls">
				<comments desc="Get the number of game controllers available on the system. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getGameCtrl"
				name="GetGameCtrl"
				num_parameters="1"
				property="get"
				property_name2="gameCtrl"
				property_name="game_ctrl">
				<comments desc="Get a game controller input device interface. " return="NULL if the interface can&apos;t be get, else a pointer to a valid iGameCtrl interface. ">
					<params text="aulIdx is the index of the game controller that will be managed by the created interface. "/>
				</comments>
				<return type="iGameCtrl *" typec="iGameCtrl*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aulIdx"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createRemoteAddressIPv4" name="CreateRemoteAddressIPv4" num_parameters="2">
				<comments desc=""/>
				<return type="iRemoteAddressIPv4 *" typec="iRemoteAddressIPv4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anIP"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anPort"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createRemoteAddressIPv4FromString" name="CreateRemoteAddressIPv4FromString" num_parameters="1">
				<comments desc=""/>
				<return type="iRemoteAddressIPv4 *" typec="iRemoteAddressIPv4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aAddress"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createRemoteAddressIPv4RO" name="CreateRemoteAddressIPv4RO" num_parameters="2">
				<comments desc=""/>
				<return type="iRemoteAddressIPv4 *" typec="iRemoteAddressIPv4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anIP"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anPort"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createRemoteAddressIPv4ROFromString" name="CreateRemoteAddressIPv4ROFromString" num_parameters="1">
				<comments desc=""/>
				<return type="iRemoteAddressIPv4 *" typec="iRemoteAddressIPv4*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aAddress"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createSocket" name="CreateSocket" num_parameters="2">
				<comments desc=""/>
				<return type="iSocket *" typec="iSocket*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aProtocol"
					type="eSocketProtocol"
					typec="eSocketProtocol"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="apAddr"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="createSocketFromHandle"
				name="CreateSocketFromHandle"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="iSocket *" typec="iSocket*"/>
				<parameter name="aSocket" type="tInt" typec="tInt"/>
				<parameter
					last="1"
					name="apAddr"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"/>
			</method>
			<method
				java_name="closeSocketHandle"
				name="CloseSocketHandle"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void"/>
				<parameter
					last="1"
					name="aSocket"
					type="tInt"
					typec="tInt"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IMath.h.idl.xml">
		<enum name="eClassify">
			<comments desc="Values returned by the classification functions ">
				<remark text="Classification values can be combined as flags. "/>
			</comments>
			<value name="eClassify_Front" value="niBit ( 0 ) ">
				<comments desc=""/>
			</value>
			<value name="eClassify_Back" value="niBit ( 1 ) ">
				<comments desc=""/>
			</value>
			<value name="eClassify_Coplanar" value="niBit ( 2 ) ">
				<comments desc=""/>
			</value>
			<value name="eClassify_Spanned" value="niBit ( 3 )">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iMath" uuid1="4B3C51E1-7B6D-4875-9961-1D43D2CB5B88" uuid2="0x4b3c51e1,0x7b6d,0x4875,0x99,0x61,0x1d,0x43,0xd2,0xcb,0x5b,0x88">
			<comments desc="Math interface. ">
				<remark text="The simple operations, +, -, *, /, ==, etc. are not implemented in this interface, they are expected to be implemented natively into the target language. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="sqrt"
				min_features="15"
				name="Sqrt"
				num_parameters="1">
				<comments desc="Square root. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="sin"
				min_features="15"
				name="Sin"
				num_parameters="1">
				<comments desc="Sinus. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="cos"
				min_features="15"
				name="Cos"
				num_parameters="1">
				<comments desc="Cosinus. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="asin"
				min_features="15"
				name="ASin"
				num_parameters="1">
				<comments desc="Arc Sinus. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="acos"
				min_features="15"
				name="ACos"
				num_parameters="1">
				<comments desc="Arc Cosinus. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="tan"
				min_features="15"
				name="Tan"
				num_parameters="1">
				<comments desc="Tan. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="atan"
				min_features="15"
				name="ATan"
				num_parameters="1">
				<comments desc="Arc Tangent. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="atan2"
				min_features="15"
				name="ATan2"
				num_parameters="2">
				<comments desc="Arc Tangent 2. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="x"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="y"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="logX"
				min_features="15"
				name="LogX"
				num_parameters="2">
				<comments desc="Log base N. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="n"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="logE"
				min_features="15"
				name="LogE"
				num_parameters="1">
				<comments desc="Log base E. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="log2"
				min_features="15"
				name="Log2"
				num_parameters="1">
				<comments desc="Log base 2. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="log10"
				min_features="15"
				name="Log10"
				num_parameters="1">
				<comments desc="Log base 10. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="pow"
				min_features="15"
				name="Pow"
				num_parameters="2">
				<comments desc="Power. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="e"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="floor"
				min_features="15"
				name="Floor"
				num_parameters="1">
				<comments desc="Floor. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="ceil"
				min_features="15"
				name="Ceil"
				num_parameters="1">
				<comments desc="Ceil. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="exp"
				min_features="15"
				name="Exp"
				num_parameters="1">
				<comments desc="Exponential. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="abs"
				min_features="15"
				name="Abs"
				num_parameters="1">
				<comments desc="Absolute value. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="toRad"
				min_features="15"
				name="ToRad"
				num_parameters="1">
				<comments desc="Convert degree to radian. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="afDeg"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="toDeg"
				min_features="15"
				name="ToDeg"
				num_parameters="1">
				<comments desc="Convert radian to degree. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="afRad"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="min"
				min_features="15"
				name="Min"
				num_parameters="2">
				<comments desc="Minimum between a and b. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="min3"
				min_features="15"
				name="Min3"
				num_parameters="3">
				<comments desc="Minimum between a, b and c. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="c"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="max"
				min_features="15"
				name="Max"
				num_parameters="2">
				<comments desc="Maximum between a and b. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="max3"
				min_features="15"
				name="Max3"
				num_parameters="3">
				<comments desc="Maximum between a, b and c. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="c"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="clamp"
				min_features="15"
				name="Clamp"
				num_parameters="3">
				<comments desc="Clamp the specified number between min and max. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="v"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="afMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="afMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="clampZeroOne"
				min_features="15"
				name="ClampZeroOne"
				num_parameters="1">
				<comments desc="Clamp the specified number between zero and one. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="lerp"
				min_features="15"
				name="Lerp"
				num_parameters="3">
				<comments desc="Linear interpolation between a and b. ">
					<remark text="The formula used is a + ((b-a)*f). "/>
				</comments>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="f"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="blendIntoAccumulator"
				min_features="15"
				name="BlendIntoAccumulator"
				num_parameters="3">
				<comments desc="Blends new values into an accumulator to produce a smoothed time series.  " return="the new smoothed value of the accumulator ">
					<params text="accumulator is the current value of the accumulator "/>
					<params text="newValue is the new value to accumulate "/>
					<params text="smoothRate typically made proportional to &quot;frameTime&quot;. If smoothRate is 0 the accumulator will not change, if smoothRate is 1 the accumulator is set to the new value (no smoothing), useful values are &quot;near zero&quot;. "/>
				</comments>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="accumulator"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="newValue"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="smoothRate"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="randSeed"
				min_features="15"
				name="RandSeed"
				num_parameters="1">
				<comments desc="Randomize. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="ulSeed"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="randInt"
				min_features="15"
				name="RandInt"
				num_parameters="0">
				<comments desc="Compute a random integer number. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="randIntRange"
				min_features="15"
				name="RandIntRange"
				num_parameters="2">
				<comments desc="Compute a random integer number between a specified range. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aMin"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="aMax"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="randFloat"
				min_features="15"
				name="RandFloat"
				num_parameters="0">
				<comments desc="Compute a random float number. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="randFloatRange"
				min_features="15"
				name="RandFloatRange"
				num_parameters="2">
				<comments desc="Compute a random float number between a specified range. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afMin"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afMax"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="randNormal"
				min_features="15"
				name="RandNormal"
				num_parameters="1">
				<comments desc="Compute a random number with a normal distribution. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="sigma"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="randomDirection"
				min_features="15"
				name="RandomDirection"
				num_parameters="1">
				<comments desc="Generates a random direction in the upper hemisphere. ">
					<remark text="Where is the upper hemisphere is defined by the specified normal. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="vN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="randomDirectionEx"
				min_features="15"
				name="RandomDirectionEx"
				num_parameters="2">
				<comments desc="Generates a random direction in the upper hemisphere. ">
					<remark text="Where is the upper hemisphere is defined by the specified normal. "/>
					<params text="avN indicates the basis/direction of the hemisphere. "/>
					<params text="afDeviAngle represents the spreading range of the ray, 180deg (pi rad) will allow the ray to be spread away from -90, to 90 degrees, 90deg (pi/2 rad) will allow the ray to be spread away from -45 to 45 degrees, and so on... "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afDeviAngle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="rotateRay"
				min_features="15"
				name="RotateRay"
				num_parameters="2">
				<comments desc="Rotates a ray to have avN as basis. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avIn"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avN"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="randColorA"
				min_features="15"
				name="RandColorA"
				num_parameters="1">
				<comments desc="Return a random color with a specified alpha. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aA"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="randColorAf"
				min_features="15"
				name="RandColorAf"
				num_parameters="1">
				<comments desc="Return a random 32 bit color with specified alpha. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aA"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="randColor"
				min_features="15"
				name="RandColor"
				num_parameters="0">
				<comments desc="Return a random 32 bit color. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Add"
				min_features="15"
				name="Vec2Add"
				num_parameters="2">
				<comments desc="Add. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Sub"
				min_features="15"
				name="Vec2Sub"
				num_parameters="2">
				<comments desc="Subtract. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Mul"
				min_features="15"
				name="Vec2Mul"
				num_parameters="2">
				<comments desc="Multiply. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Div"
				min_features="15"
				name="Vec2Div"
				num_parameters="2">
				<comments desc="Divide. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Scale"
				min_features="15"
				name="Vec2Scale"
				num_parameters="2">
				<comments desc="Scale. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Compare"
				min_features="15"
				name="Vec2Compare"
				num_parameters="2">
				<comments desc="Compare. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Length"
				min_features="15"
				name="Vec2Length"
				num_parameters="1">
				<comments desc="Length. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2LengthSq"
				min_features="15"
				name="Vec2LengthSq"
				num_parameters="1">
				<comments desc="Length squared. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Normalize"
				min_features="15"
				name="Vec2Normalize"
				num_parameters="1">
				<comments desc="Normalize. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2IsNormal"
				min_features="15"
				name="Vec2IsNormal"
				num_parameters="1">
				<comments desc="Return eTrue if it&apos;s a normal vector. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Dot"
				min_features="15"
				name="Vec2Dot"
				num_parameters="2">
				<comments desc="Dot product. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Lerp"
				min_features="15"
				name="Vec2Lerp"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afF"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Lerp2"
				min_features="15"
				name="Vec2Lerp2"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aF"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2BlendIntoAccumulator"
				min_features="15"
				name="Vec2BlendIntoAccumulator"
				num_parameters="3">
				<comments desc="Blends new values into an accumulator to produce a smoothed time series.  " return="the new smoothed value of the accumulator ">
					<params text="accumulator is the current value of the accumulator "/>
					<params text="newValue is the new value to accumulate "/>
					<params text="smoothRate typically made proportional to &quot;frameTime&quot;. If smoothRate is 0 the accumulator will not change, if smoothRate is 1 the accumulator is set to the new value (no smoothing), useful values are &quot;near zero&quot;. "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="accumulator"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="newValue"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="smoothRate"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Abs"
				min_features="15"
				name="Vec2Abs"
				num_parameters="1">
				<comments desc="Abs. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Min"
				min_features="15"
				name="Vec2Min"
				num_parameters="2">
				<comments desc="Min. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2Max"
				min_features="15"
				name="Vec2Max"
				num_parameters="2">
				<comments desc="Max. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aLeft"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2CatmullRom"
				min_features="15"
				name="Vec2CatmullRom"
				num_parameters="5">
				<comments desc="CatmullRom spline. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="V1"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Hermite"
				min_features="15"
				name="Vec2Hermite"
				num_parameters="5">
				<comments desc="Hermite spline. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="V1"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2BaryCentric"
				min_features="15"
				name="Vec2BaryCentric"
				num_parameters="5">
				<comments desc="BaryCentric. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="V1"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="u"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="v"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec2Transform"
				min_features="15"
				name="Vec2Transform"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aVec"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2TransformCoord"
				min_features="15"
				name="Vec2TransformCoord"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aVec"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2TransformNormal"
				min_features="15"
				name="Vec2TransformNormal"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aVec"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2TransformCoordArray"
				min_features="15"
				name="Vec2TransformCoordArray"
				num_parameters="2">
				<comments desc="Transform an array by the specified matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apVecs"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec2TransformNormalArray"
				min_features="15"
				name="Vec2TransformNormalArray"
				num_parameters="2">
				<comments desc="Transform an array by the specified matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apVecs"
					type="tVec2fCVec *"
					typec="tVec2fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Add"
				min_features="15"
				name="Vec3Add"
				num_parameters="2">
				<comments desc="Add. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Sub"
				min_features="15"
				name="Vec3Sub"
				num_parameters="2">
				<comments desc="Subtract. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Mul"
				min_features="15"
				name="Vec3Mul"
				num_parameters="2">
				<comments desc="Multiply. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Div"
				min_features="15"
				name="Vec3Div"
				num_parameters="2">
				<comments desc="Divide. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Scale"
				min_features="15"
				name="Vec3Scale"
				num_parameters="2">
				<comments desc="Scale. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3Compare"
				min_features="15"
				name="Vec3Compare"
				num_parameters="2">
				<comments desc="Compare. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Length"
				min_features="15"
				name="Vec3Length"
				num_parameters="1">
				<comments desc="Length. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3LengthSq"
				min_features="15"
				name="Vec3LengthSq"
				num_parameters="1">
				<comments desc="Length squared. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Normalize"
				min_features="15"
				name="Vec3Normalize"
				num_parameters="1">
				<comments desc="Normalize. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3IsNormal"
				min_features="15"
				name="Vec3IsNormal"
				num_parameters="1">
				<comments desc="Return eTrue if it&apos;s a normal vector. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Dot"
				min_features="15"
				name="Vec3Dot"
				num_parameters="2">
				<comments desc="Dot product. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Cross"
				min_features="15"
				name="Vec3Cross"
				num_parameters="2">
				<comments desc="Cross product. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Lerp"
				min_features="15"
				name="Vec3Lerp"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afF"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3Lerp2"
				min_features="15"
				name="Vec3Lerp2"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aF"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3BlendIntoAccumulator"
				min_features="15"
				name="Vec3BlendIntoAccumulator"
				num_parameters="3">
				<comments desc="Blends new values into an accumulator to produce a smoothed time series.  " return="the new smoothed value of the accumulator ">
					<params text="accumulator is the current value of the accumulator "/>
					<params text="newValue is the new value to accumulate "/>
					<params text="smoothRate typically made proportional to &quot;frameTime&quot;. If smoothRate is 0 the accumulator will not change, if smoothRate is 1 the accumulator is set to the new value (no smoothing), useful values are &quot;near zero&quot;. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="accumulator"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="newValue"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="smoothRate"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3Abs"
				min_features="15"
				name="Vec3Abs"
				num_parameters="1">
				<comments desc="Abs. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Min"
				min_features="15"
				name="Vec3Min"
				num_parameters="2">
				<comments desc="Min. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Max"
				min_features="15"
				name="Vec3Max"
				num_parameters="2">
				<comments desc="Max. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aLeft"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3CatmullRom"
				min_features="15"
				name="Vec3CatmullRom"
				num_parameters="5">
				<comments desc="CatmullRom spline. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3Hermite"
				min_features="15"
				name="Vec3Hermite"
				num_parameters="5">
				<comments desc="Hermite spline. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3BaryCentric"
				min_features="15"
				name="Vec3BaryCentric"
				num_parameters="5">
				<comments desc="BaryCentric. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="u"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="v"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3Transform"
				min_features="15"
				name="Vec3Transform"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aVec"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3TransformCoord"
				min_features="15"
				name="Vec3TransformCoord"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aVec"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3TransformNormal"
				min_features="15"
				name="Vec3TransformNormal"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aVec"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3TransformCoordArray"
				min_features="15"
				name="Vec3TransformCoordArray"
				num_parameters="2">
				<comments desc="Transform an array by the specified matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apVecs"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3TransformNormalArray"
				min_features="15"
				name="Vec3TransformNormalArray"
				num_parameters="2">
				<comments desc="Transform an array by the specified matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apVecs"
					type="tVec3fCVec *"
					typec="tVec3fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Unproject"
				min_features="15"
				name="Vec3Unproject"
				num_parameters="3">
				<comments desc="Unproject a vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avIn"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="amtxViewProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Project"
				min_features="15"
				name="Vec3Project"
				num_parameters="3">
				<comments desc="Project a vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxWVP"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3ProjectRHW"
				min_features="15"
				name="Vec3ProjectRHW"
				num_parameters="3">
				<comments desc="Project a vector. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxWVP"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3Reflect"
				min_features="15"
				name="Vec3Reflect"
				num_parameters="2">
				<comments desc="Returns a vector reflected about the plane indicated by the specified normal. ">
					<remark text="The formula is : R = (Dir - (Normal*Normal.dot(Dir)*2.0) "/>
					<remark text="The input is assumed to have been normalized "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="Dir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Normal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Add"
				min_features="15"
				name="Vec4Add"
				num_parameters="2">
				<comments desc="Add. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Sub"
				min_features="15"
				name="Vec4Sub"
				num_parameters="2">
				<comments desc="Subtract. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Mul"
				min_features="15"
				name="Vec4Mul"
				num_parameters="2">
				<comments desc="Multiply. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Div"
				min_features="15"
				name="Vec4Div"
				num_parameters="2">
				<comments desc="Divide. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Scale"
				min_features="15"
				name="Vec4Scale"
				num_parameters="2">
				<comments desc="Scale. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4Compare"
				min_features="15"
				name="Vec4Compare"
				num_parameters="2">
				<comments desc="Compare. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Length"
				min_features="15"
				name="Vec4Length"
				num_parameters="1">
				<comments desc="Length. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4LengthSq"
				min_features="15"
				name="Vec4LengthSq"
				num_parameters="1">
				<comments desc="Length squared. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Normalize"
				min_features="15"
				name="Vec4Normalize"
				num_parameters="1">
				<comments desc="Normalize. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4IsNormal"
				min_features="15"
				name="Vec4IsNormal"
				num_parameters="1">
				<comments desc="Return eTrue if it&apos;s a normal vector. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Dot"
				min_features="15"
				name="Vec4Dot"
				num_parameters="2">
				<comments desc="Dot product. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Cross"
				min_features="15"
				name="Vec4Cross"
				num_parameters="3">
				<comments desc="Cross product. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aA"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aB"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aC"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Lerp"
				min_features="15"
				name="Vec4Lerp"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afF"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4Lerp2"
				min_features="15"
				name="Vec4Lerp2"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aF"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4BlendIntoAccumulator"
				min_features="15"
				name="Vec4BlendIntoAccumulator"
				num_parameters="3">
				<comments desc="Blends new values into an accumulator to produce a smoothed time series.  " return="the new smoothed value of the accumulator ">
					<params text="accumulator is the current value of the accumulator "/>
					<params text="newValue is the new value to accumulate "/>
					<params text="smoothRate typically made proportional to &quot;frameTime&quot;. If smoothRate is 0 the accumulator will not change, if smoothRate is 1 the accumulator is set to the new value (no smoothing), useful values are &quot;near zero&quot;. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="accumulator"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="newValue"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="smoothRate"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4Abs"
				min_features="15"
				name="Vec4Abs"
				num_parameters="1">
				<comments desc="Abs. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aV"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Min"
				min_features="15"
				name="Vec4Min"
				num_parameters="2">
				<comments desc="Min. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4Max"
				min_features="15"
				name="Vec4Max"
				num_parameters="2">
				<comments desc="Max. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4CatmullRom"
				min_features="15"
				name="Vec4CatmullRom"
				num_parameters="5">
				<comments desc="CatmullRom spline. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="V1"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4Hermite"
				min_features="15"
				name="Vec4Hermite"
				num_parameters="5">
				<comments desc="Hermite spline. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="V1"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V4"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="s"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4BaryCentric"
				min_features="15"
				name="Vec4BaryCentric"
				num_parameters="5">
				<comments desc="BaryCentric. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="V1"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V3"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="u"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="v"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec4Transform"
				min_features="15"
				name="Vec4Transform"
				num_parameters="2">
				<comments desc="Transform by the specified matrix. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="aVec"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec4TransformArray"
				min_features="15"
				name="Vec4TransformArray"
				num_parameters="2">
				<comments desc="Transform an array by the specified matrix. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="apVecs"
					type="tVec4fCVec *"
					typec="tVec4fCVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixIdentity"
				min_features="15"
				name="MatrixIdentity"
				num_parameters="0">
				<comments desc="Get the identity matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
			</method>
			<method
				const="yes"
				java_name="matrixIsIdentity"
				min_features="15"
				name="MatrixIsIdentity"
				num_parameters="1">
				<comments desc="Check if a matrix is identity. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixAdd"
				min_features="15"
				name="MatrixAdd"
				num_parameters="2">
				<comments desc="Add. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aLeft"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSub"
				min_features="15"
				name="MatrixSub"
				num_parameters="2">
				<comments desc="Subtract. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aLeft"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixScale"
				min_features="15"
				name="MatrixScale"
				num_parameters="2">
				<comments desc="Scale. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aLeft"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixLerp"
				min_features="15"
				name="MatrixLerp"
				num_parameters="3">
				<comments desc="Lerp. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="A"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="B"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="fFac"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixCompare"
				min_features="15"
				name="MatrixCompare"
				num_parameters="2">
				<comments desc="Compare. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aLeft"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixMultiply"
				min_features="15"
				name="MatrixMultiply"
				num_parameters="2">
				<comments desc="Multiply two matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M1"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="M2"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixDeterminant2"
				min_features="15"
				name="MatrixDeterminant2"
				num_parameters="1">
				<comments desc="Compute the top left 2x2 matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixDeterminant3"
				min_features="15"
				name="MatrixDeterminant3"
				num_parameters="1">
				<comments desc="Compute the top left 3x3 matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixDeterminant"
				min_features="15"
				name="MatrixDeterminant"
				num_parameters="1">
				<comments desc="Compute matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetHandeness"
				min_features="15"
				name="MatrixGetHandeness"
				num_parameters="1">
				<comments desc="Compute matrix handeness. " return="a number &gt; +1 if left handed and -1 if right handed "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixInverse"
				min_features="15"
				name="MatrixInverse"
				num_parameters="1">
				<comments desc="Inverse the given matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixTransformInverse"
				min_features="15"
				name="MatrixTransformInverse"
				num_parameters="1">
				<comments desc="Inverse the transformation part. Means transpose the rotation and negate the translation. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixLookAtRH"
				min_features="15"
				name="MatrixLookAtRH"
				num_parameters="3">
				<comments desc="Make a right handed look at matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="Eye"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="At"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Up"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixLookAtLH"
				min_features="15"
				name="MatrixLookAtLH"
				num_parameters="3">
				<comments desc="Make a left handed look at matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="Eye"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="At"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Up"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixOrthoRH"
				min_features="15"
				name="MatrixOrthoRH"
				num_parameters="4">
				<comments desc="Make a right handed orthogonal projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="w"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="h"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixOrthoLH"
				min_features="15"
				name="MatrixOrthoLH"
				num_parameters="4">
				<comments desc="Make a left handed orthogonal projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="w"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="h"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixOrthoOffCenterRH"
				min_features="15"
				name="MatrixOrthoOffCenterRH"
				num_parameters="6">
				<comments desc="Make a right handed orthogonal projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="l"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="b"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixOrthoOffCenterLH"
				min_features="15"
				name="MatrixOrthoOffCenterLH"
				num_parameters="6">
				<comments desc="Make a left handed orthogonal projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="l"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="b"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveRH"
				min_features="15"
				name="MatrixPerspectiveRH"
				num_parameters="4">
				<comments desc="Make a right handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="w"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="h"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveLH"
				min_features="15"
				name="MatrixPerspectiveLH"
				num_parameters="4">
				<comments desc="Make a left handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="w"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="h"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveFovRH"
				min_features="15"
				name="MatrixPerspectiveFovRH"
				num_parameters="4">
				<comments desc="Make a right handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="fovy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aspect"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveFovLH"
				min_features="15"
				name="MatrixPerspectiveFovLH"
				num_parameters="4">
				<comments desc="Make a left handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="fovy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aspect"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveOffCenterRH"
				min_features="15"
				name="MatrixPerspectiveOffCenterRH"
				num_parameters="6">
				<comments desc="Make a right handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="l"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="b"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixPerspectiveOffCenterLH"
				min_features="15"
				name="MatrixPerspectiveOffCenterLH"
				num_parameters="6">
				<comments desc="Make a left handed perspective projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="l"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="r"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="b"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="zn"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="zf"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixReflect"
				min_features="15"
				name="MatrixReflect"
				num_parameters="1">
				<comments desc="Make a reflection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationAxis"
				min_features="15"
				name="MatrixRotationAxis"
				num_parameters="2">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationQuat"
				min_features="15"
				name="MatrixRotationQuat"
				num_parameters="1">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationX"
				min_features="15"
				name="MatrixRotationX"
				num_parameters="1">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationY"
				min_features="15"
				name="MatrixRotationY"
				num_parameters="1">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationZ"
				min_features="15"
				name="MatrixRotationZ"
				num_parameters="1">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotationYawPitchRoll"
				min_features="15"
				name="MatrixRotationYawPitchRoll"
				num_parameters="3">
				<comments desc="Make a rotation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="yaw"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="pitch"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="roll"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="matrixDecomposeYawPitchRoll"
				min_features="15"
				name="MatrixDecomposeYawPitchRoll"
				num_parameters="1">
				<comments desc="Extract the rotation contained in the provided matrix as yaw/heading/Y, pitch/X and roll/bank/Z in radians. \see MatrixRotationYawPitchRoll "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixScaling"
				min_features="15"
				name="MatrixScaling"
				num_parameters="1">
				<comments desc="Make a scaling matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixVecScale"
				min_features="15"
				name="MatrixVecScale"
				num_parameters="2">
				<comments desc="Scale a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixShadow"
				min_features="15"
				name="MatrixShadow"
				num_parameters="2">
				<comments desc="Make a shadow projection matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="vLight"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixTranslation"
				min_features="15"
				name="MatrixTranslation"
				num_parameters="1">
				<comments desc="Make a translation matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixTranspose"
				min_features="15"
				name="MatrixTranspose"
				num_parameters="1">
				<comments desc="Transpose a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixTranspose3x3"
				min_features="15"
				name="MatrixTranspose3x3"
				num_parameters="1">
				<comments desc="Transpose a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixTextureOffset"
				min_features="15"
				name="MatrixTextureOffset"
				num_parameters="3">
				<comments desc="Texture offset matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="fBias"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="nTexW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="nTexH"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				java_name="matrixTextureOffset2"
				min_features="15"
				name="MatrixTextureOffset2"
				num_parameters="4">
				<comments desc="Texture offset matrix that takes in account a bit depth. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="fBias"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="nTexW"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="nTexH"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="nDepthBits"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetForward"
				min_features="15"
				name="MatrixGetForward"
				num_parameters="1">
				<comments desc="Get the forward vector of a matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetUp"
				min_features="15"
				name="MatrixGetUp"
				num_parameters="1">
				<comments desc="Get the up vector of a matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetRight"
				min_features="15"
				name="MatrixGetRight"
				num_parameters="1">
				<comments desc="Get the right vector of a matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetTranslation"
				min_features="15"
				name="MatrixGetTranslation"
				num_parameters="1">
				<comments desc="Get the translation vector of a matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetForward"
				min_features="15"
				name="MatrixSetForward"
				num_parameters="2">
				<comments desc="Set the forward vector of a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetUp"
				min_features="15"
				name="MatrixSetUp"
				num_parameters="2">
				<comments desc="Set the up vector of a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetRight"
				min_features="15"
				name="MatrixSetRight"
				num_parameters="2">
				<comments desc="Set the right vector of a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetTranslation"
				min_features="15"
				name="MatrixSetTranslation"
				num_parameters="2">
				<comments desc="Set the translation vector of a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixIsNormal"
				min_features="15"
				name="MatrixIsNormal"
				num_parameters="1">
				<comments desc="Check if a matrix is normalized. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixIsOrthogonal"
				min_features="15"
				name="MatrixIsOrthogonal"
				num_parameters="1">
				<comments desc="Check if a matrix is orthogonal. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixIsOrthoNormal"
				min_features="15"
				name="MatrixIsOrthoNormal"
				num_parameters="1">
				<comments desc="Check if a matrix is orthonormal. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetRotation"
				min_features="15"
				name="MatrixSetRotation"
				num_parameters="2">
				<comments desc="Set the rotation part of a matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="In"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="RotM"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixToEuler"
				min_features="15"
				name="MatrixToEuler"
				num_parameters="1">
				<comments desc="Get euler angles from a rotation matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixToCoordinateSystem"
				min_features="15"
				name="MatrixToCoordinateSystem"
				num_parameters="4">
				<comments desc="Make a coordinate system conversion matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="avRight"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avUp"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avFwd"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avOrg"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixGetProjectedTranslation"
				min_features="15"
				name="MatrixGetProjectedTranslation"
				num_parameters="1">
				<comments desc="Get the translation by &apos;unprojecting&apos; the translation from the matrix&apos;s axis (translation of inverse matrix). ">
					<remark text="This can be used to get the world position from a view matrix. "/>
				</comments>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="In"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetProjectedTranslation"
				min_features="15"
				name="MatrixSetProjectedTranslation"
				num_parameters="2">
				<comments desc="Set the translation by projecting it onto the matrix&apos;s axis. ">
					<remark text="This can be used to set a world position into a view matrix. "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="In"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avT"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixSetNotRotation"
				min_features="15"
				name="MatrixSetNotRotation"
				num_parameters="2">
				<comments desc="Set the non-rotation part of the matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="In"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="matrixRotate"
				min_features="15"
				name="MatrixRotate"
				num_parameters="2">
				<comments desc="Rotate the matrix, this affects only the 3x3 top-left rotation part of the matrix. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="M1"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="M2"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixViewport"
				min_features="15"
				name="MatrixViewport"
				num_parameters="3">
				<comments desc="Compute a viewport matrix. ">
					<remark text="a Viewport matrix converts from project coordinates to viewport/window/screen coordinates. "/>
					<remark text="This is used to scale the projection to fit into a viewport which is different of the current hardware viewport. FinalProj = MatrixProjection * inverse(MatrixContextVP) * MatrixVirtualVP "/>
					<remark text="MinZ/MaxZ is usually 0/1 "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aVP"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afMinZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afMaxZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="matrixAdjustViewport"
				min_features="15"
				name="MatrixAdjustViewport"
				num_parameters="4">
				<comments desc="Compute a matrix that will compensate the projection matrix to fit into a viewport which is different of the context/physical viewport. ">
					<remark text="FinalProj = Proj * MatrixAdjustViewport(...) "/>
					<remark text="MinZ/MaxZ is usually 0/1 "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aContextVP"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aVirtualVP"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afMinZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afMaxZ"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				java_name="matrixDecomposeGetTranslation"
				min_features="15"
				name="MatrixDecomposeGetTranslation"
				num_parameters="1">
				<comments desc="Get the translation part of a matrix. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixDecomposeGetZYX"
				min_features="15"
				name="MatrixDecomposeGetZYX"
				num_parameters="1">
				<comments desc="Get the rotation part of a matrix as euler angle in the Z*Y*X rotation order. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixDecomposeGetQuat"
				min_features="15"
				name="MatrixDecomposeGetQuat"
				num_parameters="1">
				<comments desc="Get the rotation part of a matrix as a quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixDecomposeGetScale"
				min_features="15"
				name="MatrixDecomposeGetScale"
				num_parameters="1">
				<comments desc="Get the local scaling part of a matrix (x,y,z,handness) "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="aMatrix"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixCompose"
				min_features="15"
				name="MatrixCompose"
				num_parameters="3">
				<comments desc="Build a matrix from a translation, zyx euler rotation and scale. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aT"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aZYX"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aS"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matrixComposeQ"
				min_features="15"
				name="MatrixComposeQ"
				num_parameters="3">
				<comments desc="Build a matrix from a translation, rotation quaternion and scale. "/>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="aT"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aQ"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aS"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatIdentity"
				min_features="15"
				name="QuatIdentity"
				num_parameters="0">
				<comments desc="Get the identity quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
			</method>
			<method
				const="yes"
				java_name="quatIsIdentity"
				min_features="15"
				name="QuatIsIdentity"
				num_parameters="1">
				<comments desc="Check if the quaternion is identity. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatAdd"
				min_features="15"
				name="QuatAdd"
				num_parameters="2">
				<comments desc="Add. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatSub"
				min_features="15"
				name="QuatSub"
				num_parameters="2">
				<comments desc="Subtract. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatScale"
				min_features="15"
				name="QuatScale"
				num_parameters="2">
				<comments desc="Scale. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="aLeft"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRight"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatCompare"
				min_features="15"
				name="QuatCompare"
				num_parameters="2">
				<comments desc="Compare. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aLeft"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRight"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatBaryCentric"
				min_features="15"
				name="QuatBaryCentric"
				num_parameters="5">
				<comments desc="BaryCenter. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="Q1"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q2"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q3"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="f"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="g"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatConjugate"
				min_features="15"
				name="QuatConjugate"
				num_parameters="1">
				<comments desc="Quat conjugate. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatDot"
				min_features="15"
				name="QuatDot"
				num_parameters="2">
				<comments desc="Quat dot. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="Q1"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Q2"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatExp"
				min_features="15"
				name="QuatExp"
				num_parameters="1">
				<comments desc="Quat exponentials. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatInverse"
				min_features="15"
				name="QuatInverse"
				num_parameters="1">
				<comments desc="Quat inverse. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatLength"
				min_features="15"
				name="QuatLength"
				num_parameters="1">
				<comments desc="Quat length. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatLengthSq"
				min_features="15"
				name="QuatLengthSq"
				num_parameters="1">
				<comments desc="Quat length squared. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatLn"
				min_features="15"
				name="QuatLn"
				num_parameters="1">
				<comments desc="Calculates the natural logarithm. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatMultiply"
				min_features="15"
				name="QuatMultiply"
				num_parameters="2">
				<comments desc="Quat multiply. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="Q1"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="Q2"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatNormalize"
				min_features="15"
				name="QuatNormalize"
				num_parameters="1">
				<comments desc="Quat normalize. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationAxis"
				min_features="15"
				name="QuatRotationAxis"
				num_parameters="2">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationX"
				min_features="15"
				name="QuatRotationX"
				num_parameters="1">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationY"
				min_features="15"
				name="QuatRotationY"
				num_parameters="1">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationZ"
				min_features="15"
				name="QuatRotationZ"
				num_parameters="1">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="angle"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationXYZ"
				min_features="15"
				name="QuatRotationXYZ"
				num_parameters="1">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationMatrix"
				min_features="15"
				name="QuatRotationMatrix"
				num_parameters="1">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationYawPitchRoll"
				min_features="15"
				name="QuatRotationYawPitchRoll"
				num_parameters="3">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="yaw"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="pitch"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="roll"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatRotationVector"
				min_features="15"
				name="QuatRotationVector"
				num_parameters="2">
				<comments desc="Rotation quaternion. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="vFrom"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="vTo"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatSlerp"
				min_features="15"
				name="QuatSlerp"
				num_parameters="4">
				<comments desc="Quat slerp. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="Q1"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q2"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="mode"
					type="eQuatSlerp"
					typec="eQuatSlerp"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="quatSquad"
				min_features="15"
				name="QuatSquad"
				num_parameters="5">
				<comments desc="Quat squad. "/>
				<return type="sQuatf" typec="sQuatf" typei="ni::eType_Vec4f"/>
				<parameter
					name="Q1"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q2"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q3"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="Q4"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="t"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="quatToAxisAngle"
				min_features="15"
				name="QuatToAxisAngle"
				num_parameters="1">
				<comments desc="Quat to axis angle. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="quatToEuler"
				min_features="15"
				name="QuatToEuler"
				num_parameters="1">
				<comments desc="Quat to euler. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="Q"
					type="const sQuatf &amp;"
					typec="const sQuatf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeDot"
				min_features="15"
				name="PlaneDot"
				num_parameters="2">
				<comments desc="4D dot product between a plane and a 4d vector. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec4f &amp;"
					typec="const sVec4f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeDotCoord"
				min_features="15"
				name="PlaneDotCoord"
				num_parameters="2">
				<comments desc="4D dot product between a plane and a 3d vector (w is assumed 1). "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeDotNormal"
				min_features="15"
				name="PlaneDotNormal"
				num_parameters="2">
				<comments desc="3D dot product between a plane and a 3d vector. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeDistance"
				min_features="15"
				name="PlaneDistance"
				num_parameters="2">
				<comments desc="Distance between a plane and the specified point. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeFromPointNormal"
				min_features="15"
				name="PlaneFromPointNormal"
				num_parameters="2">
				<comments desc="Construct a plane from a point and a normal. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					name="vPoint"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="vNormal"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeFromPoints"
				min_features="15"
				name="PlaneFromPoints"
				num_parameters="3">
				<comments desc="Construct a plane from three points. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V3"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeIntersectLine"
				min_features="15"
				name="PlaneIntersectLine"
				num_parameters="3">
				<comments desc="Compute the intersection between a plane and a line. " return="the intersection point (x,y,z), t is stored in the w component ">
					<remark text="returns a null vector if the line is parralel to the plane. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeIntersectRay"
				min_features="15"
				name="PlaneIntersectRay"
				num_parameters="3">
				<comments desc="Compute the intersection between a plane and a ray. " return="the intersection point (x,y,z), t is stored in the w component ">
					<remark text="returns a null vector if the line is parralel to the plane. "/>
				</comments>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avRayPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avRayDir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeNormalize"
				min_features="15"
				name="PlaneNormalize"
				num_parameters="1">
				<comments desc="Normalize the specified plane. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					last="1"
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeTransform"
				min_features="15"
				name="PlaneTransform"
				num_parameters="2">
				<comments desc="Transform the plane by the specified matrix. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeTransformInversedMatrix"
				min_features="15"
				name="PlaneTransformInversedMatrix"
				num_parameters="2">
				<comments desc="Transform the plane by the inverse of the specified matrix. "/>
				<return type="sPlanef" typec="sPlanef" typei="ni::eType_Vec4f"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="M"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeIntersection"
				min_features="15"
				name="PlaneIntersection"
				num_parameters="3">
				<comments desc="Get the intersection point between 3d planes. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="PA"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="PB"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="PC"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeClosest"
				min_features="15"
				name="PlaneClosest"
				num_parameters="2">
				<comments desc="Get the closest point on the plane to the specified vector. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="P"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="A"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeType"
				min_features="15"
				name="PlaneType"
				num_parameters="1">
				<comments desc="Get the type of plane. "/>
				<return type="ePlaneType" typec="ePlaneType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeMaxType"
				min_features="15"
				name="PlaneMaxType"
				num_parameters="1">
				<comments desc="Get the type of plane&apos;s maximum component. "/>
				<return type="ePlaneType" typec="ePlaneType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeExtractCoordinateSystem"
				min_features="15"
				name="PlaneExtractCoordinateSystem"
				num_parameters="2">
				<comments desc="Extract a coordinate system from the plane. ">
					<remark text="Up vector (Y) is the plane normal. "/>
					<remark text="Right (X) and Fwd (Z) lies on the plane. "/>
					<params text="Plane "/>
					<params text="avFwdDir: if not zero is the direction toward which the forward vector should be the closest. For example if you want the forward vector to be the one that points down you&apos;d pass sVec3f::OpYAxis() here. "/>
				</comments>
				<return type="sMatrixf" typec="sMatrixf" typei="ni::eType_Matrixf"/>
				<parameter
					name="Plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avFwdDir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="planeIntersectSphere"
				min_features="15"
				name="PlaneIntersectSphere"
				num_parameters="3">
				<comments desc="Check if the specified sphere intersect the specified plane. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avCenter"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afRadius"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="triangleAreaNormal"
				min_features="15"
				name="TriangleAreaNormal"
				num_parameters="3">
				<comments desc="Compute the normal and area of a triangle. " return="The normal is in xyz and the area in w. "/>
				<return type="sVec4f" typec="sVec4f" typei="ni::eType_Vec4f"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleIsDegenerate"
				min_features="15"
				name="TriangleIsDegenerate"
				num_parameters="3">
				<comments desc="Check whether the triangle is degenerated. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleIntersectTriangle"
				min_features="15"
				name="TriangleIntersectTriangle"
				num_parameters="6">
				<comments desc="Check triangle-triangle intersection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="U0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="U1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="U2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleIntersectRay"
				min_features="15"
				name="TriangleIntersectRay"
				num_parameters="5">
				<comments desc="Check triangle-ray intersection. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avOrigin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avDir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleIntersectRayCull"
				min_features="15"
				name="TriangleIntersectRayCull"
				num_parameters="5">
				<comments desc="Check triangle-ray intersection with culling. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avOrigin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avDir"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleIntersectAABB"
				min_features="15"
				name="TriangleIntersectAABB"
				num_parameters="5">
				<comments desc="Check triangle-aabb intersection. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="V0"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V1"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="V2"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="avMin"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avMax"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="triangleBaryCentric"
				min_features="15"
				name="TriangleBaryCentric"
				num_parameters="4">
				<comments desc="Compute the barycentric coordinates of the specified point. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="A"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="B"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="P"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="wrapFloat"
				min_features="15"
				name="WrapFloat"
				num_parameters="3">
				<comments desc="Wrap a floating value between the specified min and max values. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aX"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aMin"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aMax"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="wrapInt"
				min_features="15"
				name="WrapInt"
				num_parameters="3">
				<comments desc="Wrap an integer value between the specified min and max values. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aX"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					name="aMin"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="aMax"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="wrapRad"
				min_features="15"
				name="WrapRad"
				num_parameters="1">
				<comments desc="Wrap a radian between 0 and 2pi. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aX"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="wrapRad2"
				min_features="15"
				name="WrapRad2"
				num_parameters="1">
				<comments desc="Wrap a radian between -pi and pi. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aX"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getAngleFromPoints2D"
				min_features="15"
				name="GetAngleFromPoints2D"
				num_parameters="2">
				<comments desc="Get the angle between two 2d vectors, returns an angle in [0;2pi] "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aStartPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aGoalPos"
					type="const sVec2f &amp;"
					typec="const sVec2f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAngleFromPoints3D"
				min_features="15"
				name="GetAngleFromPoints3D"
				num_parameters="2">
				<comments desc="Get the angles between two 3d vectors. ">
					<remark text="The angles returned are on the sphere that can be visualized with StartPos as center and Radius as Len(aGoalPos-aStartPos). &lt;ul&gt; &lt;li&gt;Y is the yaw/left-right/latitude angle in radians, its domain is [0;2pi]&lt;/li&gt; &lt;li&gt;X is the pitch/up-down/longitude angle in radians, its domain is [0;pi], 0 is the bottom of the sphere, and pi the top of the sphere.&lt;/li&gt; &lt;/ul&gt; "/>
				</comments>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="aStartPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aGoalPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="classifyPoint"
				min_features="15"
				name="ClassifyPoint"
				num_parameters="2">
				<comments desc="Check whether a point is in-front, behind or on a plane. "/>
				<return type="eClassify" typec="eClassify" typei="ni::eType_Enum"/>
				<parameter
					name="plane"
					type="const sPlanef &amp;"
					typec="const sPlanef&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="point"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="isPointInsideEdge"
				min_features="15"
				name="IsPointInsideEdge"
				num_parameters="3">
				<comments desc="Check whether a point is on the specified edge. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="A"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="B"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="P"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="closestPointOnLine"
				min_features="15"
				name="ClosestPointOnLine"
				num_parameters="3">
				<comments desc="Return the closest point to the specified vector P on the specified AB line. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="A"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="B"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="P"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="closestPointOnTriangle"
				min_features="15"
				name="ClosestPointOnTriangle"
				num_parameters="4">
				<comments desc="Return the closest point to the specified vector P on the specified ABC triangle. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="A"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="B"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="C"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="P"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAngularDifference"
				min_features="15"
				name="GetAngularDifference"
				num_parameters="2">
				<comments desc="Get the shortest &apos;distance&apos; (angular difference) between two angles, no matter if the angles are in the [0;pi][-0;-pi] range or the [0;2pi] range. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afA"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afB"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getScreenPosition"
				min_features="15"
				name="GetScreenPosition"
				num_parameters="3">
				<comments desc="Get the screen position of the specified 3d world position. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxVP"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3SphericalToCartesian"
				min_features="15"
				name="Vec3SphericalToCartesian"
				num_parameters="1">
				<comments desc="Convert a 3d spherical coordinate to a 3d cartesian coordinate. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="avS"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3CartesianToSpherical"
				min_features="15"
				name="Vec3CartesianToSpherical"
				num_parameters="1">
				<comments desc="Convert a 3d cartesian coordinate to a 3d spherical coordinate. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					last="1"
					name="avC"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="vec3OrbitPitch"
				min_features="15"
				name="Vec3OrbitPitch"
				num_parameters="3">
				<comments desc="Orbit/rotate a 3d position of the specified yaw (Y-axis) angle around the specified target. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aTarget"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afPitch"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3OrbitYaw"
				min_features="15"
				name="Vec3OrbitYaw"
				num_parameters="3">
				<comments desc="Orbit/rotate a 3d position of the specified pitch (X-axis) angle around the specified target. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aTarget"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="afYaw"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="vec3OrbitYawPitch"
				min_features="15"
				name="Vec3OrbitYawPitch"
				num_parameters="4">
				<comments desc="Orbit/rotate a 3d position of the specified yaw (Y-axis) and then pitch (X-axis) angle around the specified target. "/>
				<return type="sVec3f" typec="sVec3f" typei="ni::eType_Vec3f"/>
				<parameter
					name="aTarget"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="afYaw"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afPitch"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="computePixelScaleX"
				min_features="15"
				name="ComputePixelScaleX"
				num_parameters="4">
				<comments desc="Compute a pixel to world unit scale value, based on the X-axis delta. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="computePixelScaleY"
				min_features="15"
				name="ComputePixelScaleY"
				num_parameters="4">
				<comments desc="Compute a pixel to world unit scale value, based on the Y-axis delta. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="aPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="computePixelWorldSizeX"
				min_features="15"
				name="ComputePixelWorldSizeX"
				num_parameters="5">
				<comments desc="Compute the world size of the given pixel size, scale based on the X-axis delta. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afPixelSize"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="computePixelWorldSizeY"
				min_features="15"
				name="ComputePixelWorldSizeY"
				num_parameters="5">
				<comments desc="Compute the world size of the given pixel size, scale based on the Y-axis delta. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afPixelSize"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="computePixelWorldSizeVec2"
				min_features="15"
				name="ComputePixelWorldSizeVec2"
				num_parameters="5">
				<comments desc="Compute the world size of the given pixel size, scale based on the X and Y axis delta. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
				<parameter
					name="afPixelSize"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="mtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="computePixelWorldSize"
				min_features="15"
				name="ComputePixelWorldSize"
				num_parameters="5">
				<comments desc="Compute the world size of the give pixel size, scale based on the axis with the highest resolution. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afPixelSize"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="avPos"
					type="const sVec3f &amp;"
					typec="const sVec3f&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxWorldView"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					name="amtxProj"
					type="const sMatrixf &amp;"
					typec="const sMatrixf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVP"
					type="const sRectf &amp;"
					typec="const sRectf&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="det2x2f"
				min_features="15"
				name="Det2x2f"
				num_parameters="4">
				<comments desc="Computes a 2x2 matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="a"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="b"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="c"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="d"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="det3x3f"
				min_features="15"
				name="Det3x3f"
				num_parameters="9">
				<comments desc="Computes a 3x3 matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="a0"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a1"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a2"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a3"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a4"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a5"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a6"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a7"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="a8"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="det4x4f"
				min_features="15"
				name="Det4x4f"
				num_parameters="16">
				<comments desc="Computes a 4x4 matrix determinant. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="a0"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a1"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a2"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a3"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a4"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a5"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a6"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a7"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a8"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a9"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a10"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a11"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a12"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a13"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					name="a14"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
				<parameter
					last="1"
					name="a15"
					type="const tF32"
					typec="const tF32"
					typei="ni::eTypeFlags_Constant|ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="det2x2d"
				min_features="15"
				name="Det2x2d"
				num_parameters="4">
				<comments desc="Computes a 2x2 matrix determinant. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="b"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="c"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					last="1"
					name="d"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="det3x3d"
				min_features="15"
				name="Det3x3d"
				num_parameters="9">
				<comments desc="Computes a 3x3 matrix determinant. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a0"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a1"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a2"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a3"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a4"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a5"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a6"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a7"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					last="1"
					name="a8"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="det4x4d"
				min_features="15"
				name="Det4x4d"
				num_parameters="16">
				<comments desc="Computes a 4x4 matrix determinant. "/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a0"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a1"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a2"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a3"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a4"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a5"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a6"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a7"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a8"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a9"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a10"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a11"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a12"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a13"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					name="a14"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
				<parameter
					last="1"
					name="a15"
					type="const tF64"
					typec="const tF64"
					typei="ni::eTypeFlags_Constant|ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="fovHzToVt"
				min_features="15"
				name="FovHzToVt"
				num_parameters="2">
				<comments desc="Convert an horizontal fov to a vertical fov. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afHFov"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afWbyHAspect"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="fovVtToHz"
				min_features="15"
				name="FovVtToHz"
				num_parameters="2">
				<comments desc="Convert a vertical fov to an horizontal fov. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					name="afVFov"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="afWbyHAspect"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="clampT"
				min_features="15"
				name="ClampT"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="repeatT"
				min_features="15"
				name="RepeatT"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="mirrorT"
				min_features="15"
				name="MirrorT"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="cycleT"
				min_features="15"
				name="CycleT"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveStep"
				min_features="15"
				name="CurveStep"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="t"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveLinear"
				min_features="15"
				name="CurveLinear"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="V1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="s"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveCos"
				min_features="15"
				name="CurveCos"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="b"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="t"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveHermite"
				min_features="15"
				name="CurveHermite"
				num_parameters="5">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="V1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="T1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="T2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="s"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveCatmullRom"
				min_features="15"
				name="CurveCatmullRom"
				num_parameters="5">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="V1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V3"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V4"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="s"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveCardinal"
				min_features="15"
				name="CurveCardinal"
				num_parameters="4">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="V1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="s"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="curveCardinal4"
				min_features="15"
				name="CurveCardinal4"
				num_parameters="6">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="V1"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V2"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V3"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="V4"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="s"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="cycleLinear"
				min_features="15"
				name="CycleLinear"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="cycleCos"
				min_features="15"
				name="CycleCos"
				num_parameters="3">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method
				const="yes"
				java_name="cycleCardinal"
				min_features="15"
				name="CycleCardinal"
				num_parameters="4">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					name="aX"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMin"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					name="aMax"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="a"
					type="tF64"
					typec="tF64"
					typei="ni::eType_F64"/>
			</method>
			<method java_name="probSum" name="ProbSum" num_parameters="1">
				<comments desc=""/>
				<return type="tF64" typec="tF64" typei="ni::eType_F64"/>
				<parameter
					last="1"
					name="apProbs"
					type="tF64CVec *"
					typec="tF64CVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="probNormalize" name="ProbNormalize" num_parameters="1">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apProbs"
					type="tF64CVec *"
					typec="tF64CVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="probSampleBuildAliasMethodArrays" name="ProbSampleBuildAliasMethodArrays" num_parameters="3">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apProbs"
					type="const tF64CVec *"
					typec="const tF64CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apAMQ"
					type="tF64CVec *"
					typec="tF64CVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apAMA"
					type="tU32CVec *"
					typec="tU32CVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="probSampleAliasMethod" name="ProbSampleAliasMethod" num_parameters="3">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apResults"
					type="tU32CVec *"
					typec="tU32CVec*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apAMQ"
					type="const tF64CVec *"
					typec="const tF64CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apAMA"
					type="const tU32CVec *"
					typec="const tU32CVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IOSProcess.h.idl.xml">
		<enum min_features="15" name="eOSProcessSpawnFlags">
			<comments desc="OS Process spawning flags. "/>
			<value min_features="15" name="eOSProcessSpawnFlags_None" value="0 ">
				<comments desc="No flags/default "/>
			</value>
			<value min_features="15" name="eOSProcessSpawnFlags_StdFiles" value="niBit ( 0 ) ">
				<comments desc="Create stdin/out/err. ">
					<remark text="Indicates that we want to redirect stdin/ou/err to our own handles. The implication is that we can and must drain stdout/err to retrieve its output. "/>
				</comments>
			</value>
			<value min_features="15" name="eOSProcessSpawnFlags_DifferentStdOutAndStdErr" value="niBit ( 1 ) ">
				<comments desc="Indicates that we want different pipes for StdOut and StdErr. ">
					<remark text="This means that both stdout and stderr need to be drained. "/>
				</comments>
			</value>
			<value min_features="15" name="eOSProcessSpawnFlags_SandBox" value="niBit ( 2 ) ">
				<comments desc="Create the process in sand boxed environment. ">
					<remark text="A process in a SandBox will have limited rights to access sensitive informations in the OS. "/>
					<remark text="Not all OS&apos;s are capable of creating sandboxed processes. "/>
				</comments>
			</value>
			<value min_features="15" name="eOSProcessSpawnFlags_Detached" value="niBit ( 3 ) ">
				<comments desc="Create the process an independant process. ">
					<remark text="This is needed to launch other applications independantly, such as in the case of a launcher starting another app. "/>
				</comments>
			</value>
		</enum>
		<enum min_features="15" name="eOSProcessFile">
			<comments desc="OS Process standard file objects. "/>
			<value min_features="15" name="eOSProcessFile_StdIn" value="0 ">
				<comments desc="Stdin file object. "/>
			</value>
			<value min_features="15" name="eOSProcessFile_StdOut" value="1 ">
				<comments desc="Stdout file object. "/>
			</value>
			<value min_features="15" name="eOSProcessFile_StdErr" value="2 ">
				<comments desc="Stderr file object. "/>
			</value>
			<value min_features="15" name="eOSProcessFile_Last" value="3 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<interface
			min_features="15"
			name="iOSProcess"
			uuid1="F297A4C9-1C07-4E6E-B804-2336F8760FAD"
			uuid2="0xf297a4c9,0x1c07,0x4e6e,0xb8,0x04,0x23,0x36,0xf8,0x76,0x0f,0xad">
			<comments desc="OS Process object interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getExePath"
				min_features="15"
				name="GetExePath"
				num_parameters="0"
				property="get"
				property_name2="exePath"
				property_name="exe_path">
				<comments desc="Get the path of the executable from which the process has been spawned. ">
					<remark text="Might be empty. "/>
				</comments>
				<return type="const ni::achar *" typec="const ni::achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCommandLine"
				min_features="15"
				name="GetCommandLine"
				num_parameters="0"
				property="get"
				property_name2="commandLine"
				property_name="command_line">
				<comments desc="Get the command line used to spawn the process. ">
					<remark text="Might be empty. "/>
				</comments>
				<return type="const ni::achar *" typec="const ni::achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPID"
				min_features="15"
				name="GetPID"
				num_parameters="0"
				property="get"
				property_name2="pid"
				property_name="pid">
				<comments desc="Get the process&apos;s PID. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
			</method>
			<method
				const="yes"
				java_name="getParentPID"
				min_features="15"
				name="GetParentPID"
				num_parameters="0"
				property="get"
				property_name2="parentPID"
				property_name="parent_pid">
				<comments desc="Get the parent process&apos;s PID. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
			</method>
			<method
				const="yes"
				java_name="isParentProcess"
				min_features="15"
				name="IsParentProcess"
				num_parameters="1">
				<comments desc="Check whether the parent process is a parent of this process. " return="The distance of the parent, 1 is the direct parent, 2 is the parent of the parent, and so on. Returns 0 if the specified PID is not the parent of this process. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aParentPID"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
			</method>
			<method
				const="yes"
				java_name="getIsCurrent"
				min_features="15"
				name="GetIsCurrent"
				num_parameters="0"
				property="get"
				property_name2="isCurrent"
				property_name="is_current">
				<comments desc="Get whether the process is the current process. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDidCrash"
				min_features="15"
				name="GetDidCrash"
				num_parameters="0"
				property="get"
				property_name2="didCrash"
				property_name="did_crash">
				<comments desc="Get the termination status (exit code) of the process and return true if the status indicates that the process crashed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="kill"
				min_features="15"
				name="Kill"
				num_parameters="2">
				<comments desc="Attempts to kill the process, giving it a specified exit code. " return="true if successful, false otherwise. ">
					<params text="anExitCode the exit code to give to the process once terminated. "/>
					<params text="abWait: if true wait for the process to be actually be terminated before returning. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anExitCode"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
				<parameter
					last="1"
					name="abWait"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="doWait"
				min_features="15"
				name="Wait"
				num_parameters="1">
				<comments desc="Wait for the process to exit. " return="true if the process exited cleanly within the given time limit. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anTimeoutMs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="waitForExitCode"
				min_features="15"
				name="WaitForExitCode"
				num_parameters="1">
				<comments desc="Waits for process to exit. In POSIX systems, if the process hasn&apos;t been signaled then returns the exit code; otherwise it&apos;s considered a failure. On Windows the exit code is always returned. " return="&apos;x&apos; is true the process exited cleanly within the given time limit, false otherwise. &apos;y&apos; is the process&apos;s exit code. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					last="1"
					name="anTimeoutMs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="terminate"
				min_features="15"
				name="Terminate"
				num_parameters="1">
				<comments desc="Terminates the process with extreme prejudice. The given result code will be the exit code of the process. If the process has already exited, this will do nothing. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aResultCode"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
			</method>
			<method
				const="yes"
				java_name="getFile"
				min_features="15"
				name="GetFile"
				num_parameters="1"
				property="get"
				property_name2="file"
				property_name="file">
				<comments desc="Get a standard file object belonging to the process. ">
					<remark text="The file returned is always in binary mode. "/>
				</comments>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aFile"
					type="eOSProcessFile"
					typec="eOSProcessFile"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
		<interface
			min_features="15"
			name="iOSProcessEnumSink"
			uuid1="C3EDAC6C-A769-441D-890C-AB4CE299D23C"
			uuid2="0xc3edac6c,0xa769,0x441d,0x89,0x0c,0xab,0x4c,0xe2,0x99,0xd2,0x3c">
			<comments desc="OS Process enum sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onOSProcessEnumSink"
				min_features="15"
				name="OnOSProcessEnumSink"
				num_parameters="3">
				<comments desc="Called when a process has been found. " return="false to interrupt the enumeration, true to continue. "/>
				<return type="ni::tBool" typec="ni::tBool" typei="ni::eType_I8"/>
				<parameter
					name="aPID"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
				<parameter
					name="aParentPID"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
				<parameter
					last="1"
					name="aaszExeName"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="15"
			name="iOSProcessManager"
			uuid1="D396E429-444E-46FF-A2A4-BF664B328090"
			uuid2="0xd396e429,0x444e,0x46ff,0xa2,0xa4,0xbf,0x66,0x4b,0x32,0x80,0x90">
			<comments desc="OS Process Manager "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getCurrentProcessID"
				min_features="15"
				name="GetCurrentProcessID"
				num_parameters="0"
				property="get"
				property_name2="currentProcessID"
				property_name="current_process_id">
				<comments desc="Return the id of the current process. "/>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
			</method>
			<method
				const="yes"
				java_name="getCurrentProcess"
				min_features="15"
				name="GetCurrentProcess"
				num_parameters="0"
				property="get"
				property_name2="currentProcess"
				property_name="current_process">
				<comments desc="Return a process object of the current process. "/>
				<return type="iOSProcess *" typec="iOSProcess*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="createProcess"
				min_features="15"
				name="CreateProcess"
				num_parameters="1">
				<comments desc="Create a process object from the specified process id. "/>
				<return type="iOSProcess *" typec="iOSProcess*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aPID"
					type="tInt"
					typec="tInt"
					typei="ni::eType_Int"/>
			</method>
			<method
				java_name="spawnProcess"
				min_features="15"
				name="SpawnProcess"
				num_parameters="2">
				<comments desc="Spawn a new process. \see ni::iOSProcessManager::SpawnProcessEx "/>
				<return type="iOSProcess *" typec="iOSProcess*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszCmdLine"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSpawn"
					type="tOSProcessSpawnFlags"
					typec="tOSProcessSpawnFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="spawnProcessEx"
				min_features="15"
				name="SpawnProcessEx"
				num_parameters="4">
				<comments desc="Spawn a new process with the specified working directory and environment variables. ">
					<params text="aaszCmdLine the command line of the process to spawn. "/>
					<params text="aaszWorkDir if not NULL specifies the working directory from where the process will start. "/>
					<params text="apEnvs if not NULL specifies the environment variables that will be set for the new process. "/>
					<params text="aSpawn the spawn flags. \see ni::eOSProcessSpawnFlags "/>
				</comments>
				<return type="iOSProcess *" typec="iOSProcess*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszCmdLine"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszWorkDir"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apEnvs"
					type="const tStringCMap *"
					typec="const tStringCMap*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSpawn"
					type="tOSProcessSpawnFlags"
					typec="tOSProcessSpawnFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="enumProcesses"
				min_features="15"
				name="EnumProcesses"
				num_parameters="2">
				<comments desc="Enumerates all processes. " return="The number of processes enumerated. ">
					<remark text="If apSink is NULL returns the number of processes that passed the filter. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="apFilter"
					type="ni::iRegex *"
					typec="ni::iRegex*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apSink"
					type="iOSProcessEnumSink *"
					typec="iOSProcessEnumSink*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCwd"
				min_features="15"
				name="GetCwd"
				num_parameters="0"
				property="get"
				property_name2="cwd"
				property_name="cwd">
				<comments desc="Get the current working directory. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method
				const="yes"
				java_name="getEnvs"
				min_features="15"
				name="GetEnvs"
				num_parameters="0"
				property="get"
				property_name2="envs"
				property_name="envs">
				<comments desc="Get the current environment variables. ">
					<remark text="This is not named GetEnviron because MSVC has an variable called `environ`. "/>
				</comments>
				<return type="Ptr&lt;tStringCMap&gt;" typec="Ptr&lt;tStringCMap&gt;" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IOSWindow.h.idl.xml">
		<enum name="eKey">
			<comments desc="Key codes "/>
			<value name="eKey_Unknown" value="0x00 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Escape" value="0x01 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n1" value="0x02 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n2" value="0x03 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n3" value="0x04 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n4" value="0x05 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n5" value="0x06 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n6" value="0x07 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n7" value="0x08 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n8" value="0x09 ">
				<comments desc=""/>
			</value>
			<value name="eKey_n9" value="0x0A ">
				<comments desc=""/>
			</value>
			<value name="eKey_n0" value="0x0B ">
				<comments desc=""/>
			</value>
			<value name="eKey_Minus" value="0x0C ">
				<comments desc=""/>
			</value>
			<value name="eKey_Equals" value="0x0D ">
				<comments desc=""/>
			</value>
			<value name="eKey_BackSpace" value="0x0E ">
				<comments desc=""/>
			</value>
			<value name="eKey_Tab" value="0x0F ">
				<comments desc=""/>
			</value>
			<value name="eKey_Q" value="0x10 ">
				<comments desc=""/>
			</value>
			<value name="eKey_W" value="0x11 ">
				<comments desc=""/>
			</value>
			<value name="eKey_E" value="0x12 ">
				<comments desc=""/>
			</value>
			<value name="eKey_R" value="0x13 ">
				<comments desc=""/>
			</value>
			<value name="eKey_T" value="0x14 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Y" value="0x15 ">
				<comments desc=""/>
			</value>
			<value name="eKey_U" value="0x16 ">
				<comments desc=""/>
			</value>
			<value name="eKey_I" value="0x17 ">
				<comments desc=""/>
			</value>
			<value name="eKey_O" value="0x18 ">
				<comments desc=""/>
			</value>
			<value name="eKey_P" value="0x19 ">
				<comments desc=""/>
			</value>
			<value name="eKey_LBracket" value="0x1A ">
				<comments desc=""/>
			</value>
			<value name="eKey_RBracket" value="0x1B ">
				<comments desc=""/>
			</value>
			<value name="eKey_Enter" value="0x1C ">
				<comments desc=""/>
			</value>
			<value name="eKey_LControl" value="0x1D ">
				<comments desc=""/>
			</value>
			<value name="eKey_A" value="0x1E ">
				<comments desc=""/>
			</value>
			<value name="eKey_S" value="0x1F ">
				<comments desc=""/>
			</value>
			<value name="eKey_D" value="0x20 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F" value="0x21 ">
				<comments desc=""/>
			</value>
			<value name="eKey_G" value="0x22 ">
				<comments desc=""/>
			</value>
			<value name="eKey_H" value="0x23 ">
				<comments desc=""/>
			</value>
			<value name="eKey_J" value="0x24 ">
				<comments desc=""/>
			</value>
			<value name="eKey_K" value="0x25 ">
				<comments desc=""/>
			</value>
			<value name="eKey_L" value="0x26 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Semicolon" value="0x27 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Apostrophe" value="0x28 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Grave" value="0x29 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Tilde" value="0x29 ">
				<comments desc=""/>
			</value>
			<value name="eKey_LShift" value="0x2A ">
				<comments desc=""/>
			</value>
			<value name="eKey_BackSlash" value="0x2B ">
				<comments desc=""/>
			</value>
			<value name="eKey_Z" value="0x2C ">
				<comments desc=""/>
			</value>
			<value name="eKey_X" value="0x2D ">
				<comments desc=""/>
			</value>
			<value name="eKey_C" value="0x2E ">
				<comments desc=""/>
			</value>
			<value name="eKey_V" value="0x2F ">
				<comments desc=""/>
			</value>
			<value name="eKey_B" value="0x30 ">
				<comments desc=""/>
			</value>
			<value name="eKey_N" value="0x31 ">
				<comments desc=""/>
			</value>
			<value name="eKey_M" value="0x32 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Comma" value="0x33 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Period" value="0x34 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Slash" value="0x35 ">
				<comments desc=""/>
			</value>
			<value name="eKey_RShift" value="0x36 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadStar" value="0x37 ">
				<comments desc=""/>
			</value>
			<value name="eKey_LAlt" value="0x38 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Space" value="0x39 ">
				<comments desc=""/>
			</value>
			<value name="eKey_CapsLock" value="0x3A ">
				<comments desc=""/>
			</value>
			<value name="eKey_F1" value="0x3B ">
				<comments desc=""/>
			</value>
			<value name="eKey_F2" value="0x3C ">
				<comments desc=""/>
			</value>
			<value name="eKey_F3" value="0x3D ">
				<comments desc=""/>
			</value>
			<value name="eKey_F4" value="0x3E ">
				<comments desc=""/>
			</value>
			<value name="eKey_F5" value="0x3F ">
				<comments desc=""/>
			</value>
			<value name="eKey_F6" value="0x40 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F7" value="0x41 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F8" value="0x42 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F9" value="0x43 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F10" value="0x44 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumLock" value="0x45 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Scroll" value="0x46 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad7" value="0x47 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad8" value="0x48 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad9" value="0x49 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadMinus" value="0x4A ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad4" value="0x4B ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad5" value="0x4C ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad6" value="0x4D ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadPlus" value="0x4E ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad1" value="0x4F ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad2" value="0x50 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad3" value="0x51 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPad0" value="0x52 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadPeriod" value="0x53 ">
				<comments desc=""/>
			</value>
			<value name="eKey_OEM_102" value="0x56 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F11" value="0x57 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F12" value="0x58 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F13" value="0x64 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F14" value="0x65 ">
				<comments desc=""/>
			</value>
			<value name="eKey_F15" value="0x66 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Kana" value="0x70 ">
				<comments desc=""/>
			</value>
			<value name="eKey_ABNT_C1" value="0x73 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Convert" value="0x79 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NoConvert" value="0x7B ">
				<comments desc=""/>
			</value>
			<value name="eKey_Yen" value="0x7D ">
				<comments desc=""/>
			</value>
			<value name="eKey_ABNT_C2" value="0x7E ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadEquals" value="0x8D ">
				<comments desc=""/>
			</value>
			<value name="eKey_Circumflex" value="0x90 ">
				<comments desc=""/>
			</value>
			<value name="eKey_PrevTrack" value="0x90 ">
				<comments desc=""/>
			</value>
			<value name="eKey_AT" value="0x91 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Colon" value="0x92 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Underline" value="0x93 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Kanji" value="0x94 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Stop" value="0x95 ">
				<comments desc=""/>
			</value>
			<value name="eKey_AX" value="0x96 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Unlabeled" value="0x97 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NextTrack" value="0x99 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadEnter" value="0x9C ">
				<comments desc=""/>
			</value>
			<value name="eKey_RControl" value="0x9D ">
				<comments desc=""/>
			</value>
			<value name="eKey_Mute" value="0xA0 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Calculator" value="0xA1 ">
				<comments desc=""/>
			</value>
			<value name="eKey_PlayPause" value="0xA2 ">
				<comments desc=""/>
			</value>
			<value name="eKey_MediaStop" value="0xA4 ">
				<comments desc=""/>
			</value>
			<value name="eKey_VolumeDown" value="0xAE ">
				<comments desc=""/>
			</value>
			<value name="eKey_VolumeUp" value="0xB0 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebHome" value="0xB2 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadComma" value="0xB3 ">
				<comments desc=""/>
			</value>
			<value name="eKey_NumPadSlash" value="0xB5 ">
				<comments desc=""/>
			</value>
			<value name="eKey_SysRQ" value="0xB7 ">
				<comments desc=""/>
			</value>
			<value name="eKey_PrintScreen" value="0xB7 ">
				<comments desc=""/>
			</value>
			<value name="eKey_RAlt" value="0xB8 ">
				<comments desc=""/>
			</value>
			<value name="eKey_AltGr" value="0xB8 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Pause" value="0xC5 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Home" value="0xC7 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Up" value="0xC8 ">
				<comments desc=""/>
			</value>
			<value name="eKey_PgUp" value="0xC9 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Left" value="0xCB ">
				<comments desc=""/>
			</value>
			<value name="eKey_Right" value="0xCD ">
				<comments desc=""/>
			</value>
			<value name="eKey_End" value="0xCF ">
				<comments desc=""/>
			</value>
			<value name="eKey_Down" value="0xD0 ">
				<comments desc=""/>
			</value>
			<value name="eKey_PgDn" value="0xD1 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Insert" value="0xD2 ">
				<comments desc=""/>
			</value>
			<value name="eKey_Delete" value="0xD3 ">
				<comments desc=""/>
			</value>
			<value name="eKey_LWin" value="0xDB ">
				<comments desc=""/>
			</value>
			<value name="eKey_RWin" value="0xDC ">
				<comments desc=""/>
			</value>
			<value name="eKey_Apps" value="0xDD ">
				<comments desc=""/>
			</value>
			<value name="eKey_Power" value="0xDE ">
				<comments desc=""/>
			</value>
			<value name="eKey_Sleep" value="0xDF ">
				<comments desc=""/>
			</value>
			<value name="eKey_Wake" value="0xE3 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebSearch" value="0xE5 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebFavorites" value="0xE6 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebRefresh" value="0xE7 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebStop" value="0xE8 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebForward" value="0xE9 ">
				<comments desc=""/>
			</value>
			<value name="eKey_WebBack" value="0xEA ">
				<comments desc=""/>
			</value>
			<value name="eKey_MyComputer" value="0xEB ">
				<comments desc=""/>
			</value>
			<value name="eKey_Mail" value="0xEC ">
				<comments desc=""/>
			</value>
			<value name="eKey_MediaSelect" value="0xED ">
				<comments desc=""/>
			</value>
			<value name="eKey_Last" value="0xFF ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eKeyMod">
			<comments desc="Key modifier ">
				<remark text="Starts at bit 16 so that it can be or&apos;ed with a eKey value "/>
			</comments>
			<value name="eKeyMod_Control" value="niBit ( 16 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_Shift" value="niBit ( 17 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_Alt" value="niBit ( 18 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_AltGr" value="niBit ( 19 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_NumLock" value="niBit ( 20 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_CapsLock" value="niBit ( 21 ) ">
				<comments desc=""/>
			</value>
			<value name="eKeyMod_ScrollLock" value="niBit ( 22 ) ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="ePointerButton">
			<comments desc="Pointer buttons "/>
			<value name="ePointerButton_Bt0" value="0 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt1" value="1 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt2" value="2 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt3" value="3 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt4" value="4 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt5" value="5 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt6" value="6 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Bt7" value="7 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Last" value="8 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Left" value="ePointerButton_Bt0 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Right" value="ePointerButton_Bt1 ">
				<comments desc=""/>
			</value>
			<value name="ePointerButton_Middle" value="ePointerButton_Bt2 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="ePointerAxis">
			<comments desc="Pointer axis "/>
			<value name="ePointerAxis_X" value="0 ">
				<comments desc="Pointer relative X axis. "/>
			</value>
			<value name="ePointerAxis_Y" value="1 ">
				<comments desc="Pointer relative Y axis. "/>
			</value>
			<value name="ePointerAxis_Z" value="2 ">
				<comments desc="Pointer relative Z axis. "/>
			</value>
			<value name="ePointerAxis_Absolute" value="3 ">
				<comments desc="Pointer absolute X/Y cursor position. "/>
			</value>
			<value name="ePointerAxis_Last" value="4 ">
				<comments desc="\internal "/>
			</value>
		</enum>
		<enum name="eGestureState">
			<comments desc="Gesture states "/>
			<value name="eGestureState_Unknown" value="0 ">
				<comments desc="Unknown gesture state. "/>
			</value>
			<value name="eGestureState_Began" value="1 ">
				<comments desc="The gesture began. "/>
			</value>
			<value name="eGestureState_Updated" value="2 ">
				<comments desc="The gesture updated. "/>
			</value>
			<value name="eGestureState_Ended" value="3 ">
				<comments desc="The gesture ended. "/>
			</value>
			<value name="eGestureState_Cancelled" value="4 ">
				<comments desc="The gesture was cancelled. "/>
			</value>
		</enum>
		<enum name="eOSWindowMessage">
			<comments desc="OS Window messages. "/>
			<value name="eOSWindowMessage_Close" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;S&apos; , &apos;O&apos; ) ">
				<comments desc="The close button of the window has been pressed. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_SwitchIn" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;S&apos; , &apos;s&apos; ) ">
				<comments desc="The window becomes active. ">
					<params text="A: eOSWindowSwitchReason "/>
					<params text="B: eKeyMod modifier detected by the OS when the app is reactivated "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_SwitchOut" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;S&apos; , &apos;S&apos; ) ">
				<comments desc="The window becomes inactive. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_Drop" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;S&apos; , &apos;r&apos; ) ">
				<comments desc="Something has been dropped on the window. ">
					<params text="A: cString collection (tStringCVec) containing the list of file paths dropped. "/>
					<params text="B: the client position of the drop. "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_Paint" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;P&apos; , &apos;p&apos; ) ">
				<comments desc="The client should be painted. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_Size" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;Z&apos; , &apos;z&apos; ) ">
				<comments desc="The window has been resized. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_Move" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;Z&apos; , &apos;m&apos; ) ">
				<comments desc="The widnow has been moved. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_KeyDown" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;K&apos; , &apos;d&apos; ) ">
				<comments desc="A key has been pressed. ">
					<params text="A: eKey code "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_KeyUp" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;K&apos; , &apos;D&apos; ) ">
				<comments desc="A key has been release. ">
					<params text="A: eKey code "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_KeyChar" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;K&apos; , &apos;c&apos; ) ">
				<comments desc="A character has been entered. ">
					<params text="A: &apos;achar&apos; code "/>
					<params text="B: eKey code that led to the KeyChar, 0 if none (for example when coming from IME or programmatic emulation) "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_MouseMove" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;m&apos; ) ">
				<comments desc="The mouse has moved in the client area. ">
					<params text="A: client relative mouse position in device units "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_RelativeMouseMove" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;R&apos; ) ">
				<comments desc="The mouse pointer has been moved. ">
					<params text="A: vec2 movement delta in device units. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_MouseButtonDown" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;d&apos; ) ">
				<comments desc="A mouse button has been pressed in the client area. ">
					<params text="A: ePointerButton button ID. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_MouseButtonUp" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;u&apos; ) ">
				<comments desc="A mouse button has been release in the client area. ">
					<params text="A: ePointerButton button ID. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_MouseButtonDoubleClick" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;k&apos; ) ">
				<comments desc="A mouse button has been double-clicked in the client area. ">
					<params text="A: ePointerButton button ID. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_MouseWheel" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;w&apos; ) ">
				<comments desc="The mouse wheel has move in the client area. ">
					<params text="A: -1.0f if moving down, 1.0f if moving up. "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_LostFocus" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;f&apos; ) ">
				<comments desc="The window lost input focus. ">
					<params text="A: Window Handle of the window that received the focus, can be 0 "/>
					<params text="B: Process ID of the process that received the focus, can be 0 "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_SetFocus" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;I&apos; , &apos;F&apos; ) ">
				<comments desc="The window gained input focus. ">
					<params text="A: unused "/>
					<params text="B: unused "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_FingerDown" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;F&apos; , &apos;d&apos; ) ">
				<comments desc="Finger down ">
					<params text="A: finger index "/>
					<params text="B: Vec3f(clientX,clientY,pressure) in device units "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_FingerUp" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;F&apos; , &apos;u&apos; ) ">
				<comments desc="Finger up ">
					<params text="A: finger index "/>
					<params text="B: Vec3f(clientX,clientY,pressure) in device units "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_FingerMove" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;F&apos; , &apos;m&apos; ) ">
				<comments desc="Finger moved ">
					<params text="A: finger index "/>
					<params text="B: Vec3f(clientX,clientY,pressure) in device units "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_FingerRelativeMove" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;F&apos; , &apos;r&apos; ) ">
				<comments desc="Finger relative move ">
					<params text="A: touchId "/>
					<params text="B: Vec3f(rel x,rel y,pressure) in device units "/>
				</comments>
			</value>
			<value name="eOSWindowMessage_Pinch" value="niMessageID ( &apos;_&apos; , &apos;O&apos; , &apos;W&apos; , &apos;G&apos; , &apos;p&apos; ) ">
				<comments desc="Pinch gesture. ">
					<params text="A: scale "/>
					<params text="B: eGestureState "/>
				</comments>
			</value>
		</enum>
		<enum name="eOSWindowStyleFlags">
			<comments desc="OS Window style. "/>
			<value name="eOSWindowStyleFlags_Regular" value="niBit ( 0 ) ">
				<comments desc="Regular window, with a title and the regular minimize, maximized, close buttons. "/>
			</value>
			<value name="eOSWindowStyleFlags_Overlay" value="niBit ( 1 ) ">
				<comments desc="Overlay window, window without borders, buttons nor title. "/>
			</value>
			<value name="eOSWindowStyleFlags_Toolbox" value="niBit ( 2 ) ">
				<comments desc="Toolbox window, smaller title bar, only with a close button, doesn&apos;t show in the taskbar. "/>
			</value>
			<value name="eOSWindowStyleFlags_FixedSize" value="niBit ( 3 ) ">
				<comments desc="Ask the window to not be resizable, no resizing borders. "/>
			</value>
			<value name="eOSWindowStyleFlags_ClientArea" value="niBit ( 4 ) ">
				<comments desc="Client area covering window. "/>
			</value>
			<value name="eOSWindowStyleFlags_NoTitle" value="niBit ( 5 ) ">
				<comments desc="Never display a title bar. "/>
			</value>
			<value name="eOSWindowStyleFlags_FullBright" value="niBit ( 6 ) ">
				<comments desc="Full bright. ">
					<remark text="For mobile keep the screen on and fully bright when the window is visible. "/>
				</comments>
			</value>
			<value name="eOSWindowStyleFlags_FullScreen" value="eOSWindowStyleFlags_Overlay|eOSWindowStyleFlags_FixedSize ">
				<comments desc="Fullscreen window, non-resizable overlay. "/>
			</value>
			<value name="eOSWindowStyleFlags_FullScreenNoTaskBar" value="eOSWindowStyleFlags_Toolbox|eOSWindowStyleFlags_FixedSize|eOSWindowStyleFlags_NoTitle ">
				<comments desc="Fullscreen window, non-resizable overlay, doesn&apos;t appear in the taskbar. "/>
			</value>
		</enum>
		<enum name="eOSWindowCreateFlags">
			<comments desc="OS Window create. "/>
			<value name="eOSWindowCreateFlags_NoThread" value="niBit ( 0 ) ">
				<comments desc="The window&apos;s message pooling is done synchronously in iOSWindow::UpdateWindow(). "/>
			</value>
			<value name="eOSWindowCreateFlags_OwnHandle" value="niBit ( 1 ) ">
				<comments desc="For CreateWindowEx, the handle passed is owned by the window object, meaning that the OS window will be destroyed when the window object is released. "/>
			</value>
			<value name="eOSWindowCreateFlags_SetWindowProc" value="niBit ( 2 ) ">
				<comments desc="For CreateWindowEx, set our window proc as the window&apos;s message handler. "/>
			</value>
		</enum>
		<enum name="eOSWindowShowFlags">
			<comments desc="OS Window show flags. "/>
			<value name="eOSWindowShowFlags_Hide" value="niBit ( 0 ) ">
				<comments desc="Hide the window. "/>
			</value>
			<value name="eOSWindowShowFlags_Show" value="niBit ( 1 ) ">
				<comments desc="Show the window and activate it. "/>
			</value>
			<value name="eOSWindowShowFlags_ShowNoActivate" value="niBit ( 2 ) ">
				<comments desc="Show the window but dont active it. "/>
			</value>
			<value name="eOSWindowShowFlags_Maximize" value="niBit ( 3 ) ">
				<comments desc="Maximize the window. "/>
			</value>
			<value name="eOSWindowShowFlags_Minimize" value="niBit ( 4 ) ">
				<comments desc="Minimize the window. "/>
			</value>
			<value name="eOSWindowShowFlags_Restore" value="niBit ( 5 ) ">
				<comments desc="Restore the window to it&apos;s original size (after being minimized). "/>
			</value>
		</enum>
		<enum name="eOSWindowZOrder">
			<comments desc="OS Window ZOrder. "/>
			<value name="eOSWindowZOrder_Bottom" value="0 ">
				<comments desc="Put the window below all others. "/>
			</value>
			<value name="eOSWindowZOrder_Normal" value="1 ">
				<comments desc="Normal ZOrder. "/>
			</value>
			<value name="eOSWindowZOrder_TopMost" value="2 ">
				<comments desc="Put the window on top of all others. "/>
			</value>
		</enum>
		<enum name="eOSCursor">
			<comments desc="OS Cursor "/>
			<value name="eOSCursor_None" value="0 ">
				<comments desc="No cursor. "/>
			</value>
			<value name="eOSCursor_Arrow" value="1 ">
				<comments desc="Arrow cursor. "/>
			</value>
			<value name="eOSCursor_Wait" value="2 ">
				<comments desc="Wait cursor. "/>
			</value>
			<value name="eOSCursor_ResizeVt" value="3 ">
				<comments desc="Vertical (North-South) resize cursor. "/>
			</value>
			<value name="eOSCursor_ResizeHz" value="4 ">
				<comments desc="Horizontal (East-West) resize cursor. "/>
			</value>
			<value name="eOSCursor_ResizeDiag" value="5 ">
				<comments desc="Diagnoal resize cursor. "/>
			</value>
			<value name="eOSCursor_Hand" value="6 ">
				<comments desc="Hand cursor. "/>
			</value>
			<value name="eOSCursor_Text" value="7 ">
				<comments desc="Text input cursor. "/>
			</value>
			<value name="eOSCursor_Help" value="8 ">
				<comments desc="Help cursor. "/>
			</value>
			<value name="eOSCursor_Custom" value="100 ">
				<comments desc="Use the custom cursor \see ni::iOSWindow::InitCustomCursor. "/>
			</value>
		</enum>
		<enum name="eOSMonitorFlags">
			<comments desc="OS Monitor flags. "/>
			<value name="eOSMonitorFlags_Primary" value="niBit ( 0 ) ">
				<comments desc="Primary monitor. "/>
			</value>
		</enum>
		<enum name="eOSMessageBoxFlags">
			<comments desc="OS Message box flags. "/>
			<value name="eOSMessageBoxFlags_Ok" value="niBit ( 0 ) ">
				<comments desc="Message box with one [OK] button. "/>
			</value>
			<value name="eOSMessageBoxFlags_OkCancel" value="niBit ( 1 ) ">
				<comments desc="Message box with a [OK] and a [CANCEL] button. "/>
			</value>
			<value name="eOSMessageBoxFlags_YesNo" value="niBit ( 2 ) ">
				<comments desc="Message box with a [YES] and a [NO] button. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconInfo" value="niBit ( 3 ) ">
				<comments desc="Message box with an information mark icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconQuestion" value="niBit ( 4 ) ">
				<comments desc="Message box with a question mark icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconWarning" value="niBit ( 5 ) ">
				<comments desc="Message box with a warning icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconError" value="niBit ( 6 ) ">
				<comments desc="Message box with an error icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconHand" value="niBit ( 7 ) ">
				<comments desc="Message box with a hand icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_IconStop" value="niBit ( 8 ) ">
				<comments desc="Message box with a stop icon. "/>
			</value>
			<value name="eOSMessageBoxFlags_NotTopMost" value="niBit ( 9 ) ">
				<comments desc="Message box which doesn&apos;t stay over all other windows. "/>
			</value>
			<value name="eOSMessageBoxFlags_FatalError" value="niBit ( 10 ) ">
				<comments desc="Message box will display a fatal error. ">
					<remark text="Force display of a top most UI message box. "/>
				</comments>
			</value>
		</enum>
		<enum name="eOSMessageBoxReturn">
			<comments desc="eOSMessageBoxReturn "/>
			<value name="eOSMessageBoxReturn_Error" value="0 ">
				<comments desc="Message box couldn&apos;t be displayed. "/>
			</value>
			<value name="eOSMessageBoxReturn_Yes" value="1 ">
				<comments desc="Yes/Ok button pressed. "/>
			</value>
			<value name="eOSMessageBoxReturn_OK" value="1 ">
				<comments desc="Yes/Ok button pressed. "/>
			</value>
			<value name="eOSMessageBoxReturn_No" value="2 ">
				<comments desc="No/Cancel button pressed. "/>
			</value>
			<value name="eOSMessageBoxReturn_Cancel" value="2 ">
				<comments desc="No/Cancel button pressed. "/>
			</value>
		</enum>
		<enum name="eOSWindowSwitchReason">
			<comments desc="OS Window switch reason. "/>
			<value name="eOSWindowSwitchReason_Activated" value="&apos;a&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_Deactivated" value="&apos;A&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_LostFocus" value="&apos;f&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_SetFocus" value="&apos;F&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_EnterMenu" value="&apos;m&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_LeaveMenu" value="&apos;M&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_Minimized" value="&apos;z&apos; ">
				<comments desc=""/>
			</value>
			<value name="eOSWindowSwitchReason_User" value="256 ">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iOSGraphicsAPI" uuid1="0EC34553-C997-914C-8121-7EB316D9F04A" uuid2="0x0ec34553,0xc997,0x914c,0x81,0x21,0x7e,0xb3,0x16,0xd9,0xf0,0x4a">
			<comments desc="A graphics API. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0">
				<comments desc=""/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iOSWindow" uuid1="5F7DFADD-64B7-43F6-A427-4156CC9B2B1A" uuid2="0x5f7dfadd,0x64b7,0x43f6,0xa4,0x27,0x41,0x56,0xcc,0x9b,0x2b,0x1a">
			<comments desc="OS Window interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getParent"
				name="GetParent"
				num_parameters="0"
				property="get"
				property_name2="parent"
				property_name="parent">
				<comments desc="Get the parent window if any. ">
					<remark text="This is valid only if the window has been created explicitly with a parent window. To retrieve the &apos;OS&apos; parent window use GetParentHandle instead. "/>
				</comments>
				<return type="iOSWindow *" typec="iOSWindow*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setClientAreaWindow"
				name="SetClientAreaWindow"
				num_parameters="1"
				property="set"
				property_name2="clientAreaWindow"
				property_name="client_area_window">
				<comments desc="Set a child window that should always be set to cover the window&apos;s client area. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getClientAreaWindow"
				name="GetClientAreaWindow"
				num_parameters="0"
				property="get"
				property_name2="clientAreaWindow"
				property_name="client_area_window">
				<comments desc="Get the client area window of this window. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getPID"
				name="GetPID"
				num_parameters="0"
				property="get"
				property_name2="pid"
				property_name="pid">
				<comments desc="Get the process that created this window. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getHandle"
				name="GetHandle"
				num_parameters="0"
				property="get"
				property_name2="handle"
				property_name="handle">
				<comments desc="Get the os handle of the window. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getIsHandleOwned"
				name="GetIsHandleOwned"
				num_parameters="0"
				property="get"
				property_name2="isHandleOwned"
				property_name="is_handle_owned">
				<comments desc="Get whether the handle of the window is owned (aka will be destroyed) by the window object. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="activateWindow" name="ActivateWindow" num_parameters="0">
				<comments desc="Activate the window if the application is in the foreground. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getIsActive"
				name="GetIsActive"
				num_parameters="0"
				property="get"
				property_name2="isActive"
				property_name="is_active">
				<comments desc="Get whether the window is active or not. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="switchIn" name="SwitchIn" num_parameters="1">
				<comments desc="Send a switch in message and set the window in active state. ">
					<remark text="Return eTrue if the active state changed and the SwitchIn message has been sent, else eFalse. "/>
					<params text="anReason is an id that can be used to identify why the switch occurred, \see ni::eOSWindowSwitchReason "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anReason"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="switchOut" name="SwitchOut" num_parameters="1">
				<comments desc="Send a switch out message and set the window in inactive state. ">
					<remark text="Return eTrue if the active state changed and the SwitchOut message has been sent, else eFalse. "/>
					<params text="anReason is an id that can be used to identify why the switch occurred, \see ni::eOSWindowSwitchReason "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anReason"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setTitle"
				name="SetTitle"
				num_parameters="1"
				property="set"
				property_name2="title"
				property_name="title">
				<comments desc="Set the window&apos;s title. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszTitle"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getTitle"
				name="GetTitle"
				num_parameters="0"
				property="get"
				property_name2="title"
				property_name="title">
				<comments desc="Get the window&apos;s title. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setStyle"
				name="SetStyle"
				num_parameters="1"
				property="set"
				property_name2="style"
				property_name="style">
				<comments desc="Set the window&apos;s style. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aStyle"
					type="tOSWindowStyleFlags"
					typec="tOSWindowStyleFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getStyle"
				name="GetStyle"
				num_parameters="0"
				property="get"
				property_name2="style"
				property_name="style">
				<comments desc="Get the window&apos;s style. "/>
				<return type="tOSWindowStyleFlags" typec="tOSWindowStyleFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setShow"
				name="SetShow"
				num_parameters="1"
				property="set"
				property_name2="show"
				property_name="show">
				<comments desc="Set the window shown status. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aStyle"
					type="tOSWindowShowFlags"
					typec="tOSWindowShowFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getShow"
				name="GetShow"
				num_parameters="0"
				property="get"
				property_name2="show"
				property_name="show">
				<comments desc="Get the window shown status. "/>
				<return type="tOSWindowShowFlags" typec="tOSWindowShowFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setZOrder"
				name="SetZOrder"
				num_parameters="1"
				property="set"
				property_name2="zorder"
				property_name="zorder">
				<comments desc="Set the window&apos;s ZOrder. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aZOrder"
					type="eOSWindowZOrder"
					typec="eOSWindowZOrder"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getZOrder"
				name="GetZOrder"
				num_parameters="0"
				property="get"
				property_name2="zorder"
				property_name="zorder">
				<comments desc="Get the window&apos;s ZOrder. "/>
				<return type="eOSWindowZOrder" typec="eOSWindowZOrder" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setSize"
				name="SetSize"
				num_parameters="1"
				property="set"
				property_name2="size"
				property_name="size">
				<comments desc="Set the window&apos;s size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the window&apos;s size. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
			</method>
			<method
				java_name="setPosition"
				name="SetPosition"
				num_parameters="1"
				property="set"
				property_name2="position"
				property_name="position">
				<comments desc="Set the window&apos;s position. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avPos"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getPosition"
				name="GetPosition"
				num_parameters="0"
				property="get"
				property_name2="position"
				property_name="position">
				<comments desc="Get the window&apos;s position. "/>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
			</method>
			<method
				java_name="setRect"
				name="SetRect"
				num_parameters="1"
				property="set"
				property_name2="rect"
				property_name="rect">
				<comments desc="Set the window&apos;s rectangle. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getRect"
				name="GetRect"
				num_parameters="0"
				property="get"
				property_name2="rect"
				property_name="rect">
				<comments desc="Get the window&apos;s rectangle. "/>
				<return type="sRecti" typec="sRecti" typei="ni::eType_Vec4i"/>
			</method>
			<method
				java_name="setClientSize"
				name="SetClientSize"
				num_parameters="1"
				property="set"
				property_name2="clientSize"
				property_name="client_size">
				<comments desc="Set the window&apos;s client size. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avSize"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getClientSize"
				name="GetClientSize"
				num_parameters="0"
				property="get"
				property_name2="clientSize"
				property_name="client_size">
				<comments desc="Get the window&apos;s client size. ">
					<remark text="The client size can be different of the window&apos;s size. For example on retina displays with some window manager, such as on macOS, the client size is larger because it is always specified in pixels. GetContentsScale can be use to retrieve the &quot;virtual units&quot; to &quot;pixel size&quot; ratio. "/>
				</comments>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
			</method>
			<method
				const="yes"
				java_name="getContentsScale"
				name="GetContentsScale"
				num_parameters="0"
				property="get"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Get the contents&apos; scale factor. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getMessageHandlers"
				name="GetMessageHandlers"
				num_parameters="0"
				property="get"
				property_name2="messageHandlers"
				property_name="message_handlers">
				<comments desc="Get the window&apos;s message handlers. "/>
				<return type="tMessageHandlerSinkLst *" typec="tMessageHandlerSinkLst*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="updateWindow" name="UpdateWindow" num_parameters="1">
				<comments desc="Update the window&apos;s message pump and others. " return="eTrue if any window message has been processed, else eFalse if the UpdateWindow didnt do anything. In general the application&apos;s update should be called only when UpdateWindow return eFalse. ">
					<remark text="abBlockingMessage specifies whether UpdateWindow should wait for at least one os window message/event before returning. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abBlockingMessages"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="centerWindow" name="CenterWindow" num_parameters="0">
				<comments desc="Center the window in the middle of the current screen/parent window. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getRequestedClose"
				name="GetRequestedClose"
				num_parameters="0"
				property="get"
				property_name2="requestedClose"
				property_name="requested_close">
				<comments desc="Get whether window closing has been requested. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setRequestedClose"
				name="SetRequestedClose"
				num_parameters="1"
				property="set"
				property_name2="requestedClose"
				property_name="requested_close">
				<comments desc="Set the close requested flags. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abRequested"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setCursor"
				name="SetCursor"
				num_parameters="1"
				property="set"
				property_name2="cursor"
				property_name="cursor">
				<comments desc="Set the current OS cursor. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aCursor"
					type="eOSCursor"
					typec="eOSCursor"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getCursor"
				name="GetCursor"
				num_parameters="0"
				property="get"
				property_name2="cursor"
				property_name="cursor">
				<comments desc="Get the current OS cursor. "/>
				<return type="eOSCursor" typec="eOSCursor" typei="ni::eType_Enum"/>
			</method>
			<method java_name="initCustomCursor" name="InitCustomCursor" num_parameters="6">
				<comments desc="Initialize the custom cursor. " return="eTrue if the specified cursor size is supported, eFalse otherwise. ">
					<remark text="If eOSCursor_Custom is used as cursor type and no custom cursor as been successfully initialized the Arrow cursor is used as fallback. "/>
					<params text="aID is an id provided by the user that should be used to identify the current custom cursor type. "/>
					<params text="anWidth is the width of the cursor data "/>
					<params text="anHeight is the heigh of the cursor data "/>
					<params text="anHotSpotX "/>
					<params text="anHotSpotY "/>
					<params text="apData is the data of the cursor, should be a U32[w*h] array. If NULL InitCustomCursor returns eTrue if the specified custom cursor size is supported, else eFalse. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aID"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
				<parameter
					name="anWidth"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHeight"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHotSpotX"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="anHotSpotY"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apData"
					type="const tU32 *"
					typec="const tU32*"
					typei="ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCustomCursorID"
				name="GetCustomCursorID"
				num_parameters="0"
				property="get"
				property_name2="customCursorID"
				property_name="custom_cursor_id">
				<comments desc="Get the custom cursor user id. ">
					<remark text="The id is always 0 when custom cursor initialization with valid apData failed. "/>
				</comments>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				java_name="setCursorPosition"
				name="SetCursorPosition"
				num_parameters="1"
				property="set"
				property_name2="cursorPosition"
				property_name="cursor_position">
				<comments desc="Set the cursor position. ">
					<remark text="The cursor position is in client coordinate. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="avCursorPos"
					type="const sVec2i &amp;"
					typec="const sVec2i&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCursorPosition"
				name="GetCursorPosition"
				num_parameters="0"
				property="get"
				property_name2="cursorPosition"
				property_name="cursor_position">
				<comments desc="Get the last recorded cursor position. ">
					<remark text="The cursor position is in client coordinate. "/>
				</comments>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
			</method>
			<method
				java_name="setCursorCapture"
				name="SetCursorCapture"
				num_parameters="1"
				property="set"
				property_name2="cursorCapture"
				property_name="cursor_capture">
				<comments desc="Set the cursor capture. ">
					<remark text="When enabled only the RelativeMouseMove message will be sent, the absolute MouseMove message isn&apos;t sent while the cursor is captured. "/>
					<remark text="The actual absolute position of the cursor isn&apos;t defined when disabling cursor capture. While captured, on Windows the cursor is constrained to the window&apos;s boundaries; on macOS the cursor is fixed to the middle of the active window. It is recommended that you set the cursor position to a known consistent position when disabling cursor capture. "/>
					<remark text="Since the absolute cursor position is not relevant while captured, it is recommended to also hide the cursor with SetCursor(eOSCursor_None) when capture is enabled. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abCapture"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getCursorCapture"
				name="GetCursorCapture"
				num_parameters="0"
				property="get"
				property_name2="cursorCapture"
				property_name="cursor_capture">
				<comments desc="Get the cursor capture state. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsCursorOverClient"
				name="GetIsCursorOverClient"
				num_parameters="0"
				property="get"
				property_name2="isCursorOverClient"
				property_name="is_cursor_over_client">
				<comments desc="Get whether the mouse cursor is in the client area of the window. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="tryClose" name="TryClose" num_parameters="0">
				<comments desc="Try to close the window (this is equivalent to pressing the close button on the window). "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setDropTarget"
				name="SetDropTarget"
				num_parameters="1"
				property="set"
				property_name2="dropTarget"
				property_name="drop_target">
				<comments desc="Set whether the window is a drop target. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abDropTarget"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDropTarget"
				name="GetDropTarget"
				num_parameters="0"
				property="get"
				property_name2="dropTarget"
				property_name="drop_target">
				<comments desc="Get whether the window is a drop target. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Explicitly clear the window&apos;s content. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="redrawWindow" name="RedrawWindow" num_parameters="0">
				<comments desc="Force redraw of the full window "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMonitor"
				name="GetMonitor"
				num_parameters="0"
				property="get"
				property_name2="monitor"
				property_name="monitor">
				<comments desc="Get the monitor index the window is on. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setFullScreen"
				name="SetFullScreen"
				num_parameters="1"
				property="set"
				property_name2="fullScreen"
				property_name="full_screen">
				<comments desc="Set the window to fullsreen, set to eInvalidHandle to return to windowed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anMonitor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getFullScreen"
				name="GetFullScreen"
				num_parameters="0"
				property="get"
				property_name2="fullScreen"
				property_name="full_screen">
				<comments desc="Get the monitor on which the window is fullscreend, eInvalidHandle if it&apos;s not fullscreen. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsMinimized"
				name="GetIsMinimized"
				num_parameters="0"
				property="get"
				property_name2="isMinimized"
				property_name="is_minimized">
				<comments desc="Get whether the window is currently minimized. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsMaximized"
				name="GetIsMaximized"
				num_parameters="0"
				property="get"
				property_name2="isMaximized"
				property_name="is_maximized">
				<comments desc="Get whether the window is currently maximzed. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="setFocus" name="SetFocus" num_parameters="0">
				<comments desc="Set focus on this window. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getHasFocus"
				name="GetHasFocus"
				num_parameters="0"
				property="get"
				property_name2="hasFocus"
				property_name="has_focus">
				<comments desc="Get whether the window has focus. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setRefreshTimer"
				name="SetRefreshTimer"
				num_parameters="1"
				property="set"
				property_name2="refreshTimer"
				property_name="refresh_timer">
				<comments desc="Set the rate of the refresh timer in seconds. ">
					<remark text="By default windows are purely event driven so they won&apos;t be refershed/painted unless a message is sent to it for that purpose. UpdateWindow() waits for messages to arrive before continuing. The refersh timer allows UpdateWindow to continue at the specified time interval if no message is received. "/>
					<remark text="Pass a value &lt;= 0 to disable the refresh timer. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afTime"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getRefreshTimer"
				name="GetRefreshTimer"
				num_parameters="0"
				property="get"
				property_name2="refreshTimer"
				property_name="refresh_timer">
				<comments desc="Get the rate of the refresh timer. "/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method
				const="yes"
				java_name="getParentHandle"
				name="GetParentHandle"
				num_parameters="0"
				property="get"
				property_name2="parentHandle"
				property_name="parent_handle">
				<comments desc="Get the parent window handle if any. ">
					<remark text="This returns the &apos;OS&apos; parent window regardless of whether the window has been created explicitly with a parent window. "/>
				</comments>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="isParentWindow"
				name="IsParentWindow"
				num_parameters="1">
				<comments desc="Check whether the specified window is a parent window of this window. " return="s 0 if not, 1 if its the direct parent, 2 if its the parent of the parent, etc... "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aHandle"
					type="tIntPtr"
					typec="tIntPtr"
					typei="ni::eType_IntPtr"/>
			</method>
			<method java_name="attachGraphicsAPI" name="AttachGraphicsAPI" num_parameters="1">
				<comments desc="Attach a graphics API to the window. ">
					<remark text="This is OS and graphics driver dependant. "/>
					<remark text="Only one graphics API can be attached to a window during its lifetime. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apAPI"
					type="iOSGraphicsAPI *"
					typec="iOSGraphicsAPI*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getGraphicsAPI"
				name="GetGraphicsAPI"
				num_parameters="0"
				property="get"
				property_name2="graphicsAPI"
				property_name="graphics_api">
				<comments desc="Get the graphics API attached to the window. "/>
				<return type="iOSGraphicsAPI *" typec="iOSGraphicsAPI*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iOSWindowGeneric" uuid1="18265B02-E973-45F3-BC74-0DF8D0608EA2" uuid2="0x18265b02,0xe973,0x45f3,0xbc,0x74,0x0d,0xf8,0xd0,0x60,0x8e,0xa2">
			<comments desc="Generic window. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="genericInputString" name="GenericInputString" num_parameters="1">
				<comments desc="Send an input string to the window. ">
					<remark text="Send a series of eOSWindowMessage_KeyChar messages. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="genericSendMessage" name="GenericSendMessage" num_parameters="3">
				<comments desc="Send a message to the window. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="anMsg"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="avarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="avarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setContentsScale"
				name="SetContentsScale"
				num_parameters="1"
				property="set"
				property_name2="contentsScale"
				property_name="contents_scale">
				<comments desc="Set the window&apos;s content scale. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="afContentsScale"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
		</interface>
		<interface
			name="iOSWindowWindowsSink"
			noautomation="yes"
			uuid1="F667E760-BDD5-4B43-BDD0-86771C868BAF"
			uuid2="0xf667e760,0xbdd5,0x4b43,0xbd,0xd0,0x86,0x77,0x1c,0x86,0x8b,0xaf">
			<comments desc="Windows window&apos;s sink. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="onOSWindowWindowsSink_WndProc" name="OnOSWindowWindowsSink_WndProc" num_parameters="4">
				<comments desc="Called when a message is received by the window, return TRUE to override the default implementation. "/>
				<return type="tIntPtr" typec="tIntPtr"/>
				<parameter name="hWnd" type="tIntPtr" typec="tIntPtr"/>
				<parameter name="message" type="tU32" typec="tU32"/>
				<parameter name="wParam" type="tIntPtr" typec="tIntPtr"/>
				<parameter
					last="1"
					name="lParam"
					type="tIntPtr"
					typec="tIntPtr"/>
			</method>
		</interface>
		<interface
			name="iOSWindowWindows"
			noautomation="yes"
			uuid1="02A97E41-8797-4679-938A-850B135AA848"
			uuid2="0x02a97e41,0x8797,0x4679,0x93,0x8a,0x85,0x0b,0x13,0x5a,0xa8,0x48">
			<comments desc="Windows window. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getWindowsWindowSinkList"
				name="GetWindowsWindowSinkList"
				num_parameters="0">
				<comments desc="Get the window&apos;s sink list. "/>
				<return type="tOSWindowWindowsSinkList *" typec="tOSWindowWindowsSinkList*"/>
			</method>
			<method java_name="windowsTranslateKey" name="WindowsTranslateKey" num_parameters="3">
				<comments desc="Translate a windows KEYDOWN/KEYUP message to a eKey code. "/>
				<return type="ni::tU32" typec="ni::tU32"/>
				<parameter name="wParam" type="ni::tU32" typec="ni::tU32"/>
				<parameter name="lParam" type="ni::tU32" typec="ni::tU32"/>
				<parameter
					last="1"
					name="abDown"
					type="ni::tBool"
					typec="ni::tBool"/>
			</method>
			<method java_name="wndProc" name="WndProc" num_parameters="4">
				<comments desc="Default window proc "/>
				<return type="tIntPtr" typec="tIntPtr"/>
				<parameter name="hWnd" type="tIntPtr" typec="tIntPtr"/>
				<parameter name="message" type="tU32" typec="tU32"/>
				<parameter name="wParam" type="tIntPtr" typec="tIntPtr"/>
				<parameter
					last="1"
					name="lParam"
					type="tIntPtr"
					typec="tIntPtr"/>
			</method>
		</interface>
		<interface
			name="iOSWindowOSX"
			noautomation="yes"
			uuid1="460E12E2-86D4-E849-87FE-8A35A9B4BA80"
			uuid2="0x460e12e2,0x86d4,0xe849,0x87,0xfe,0x8a,0x35,0xa9,0xb4,0xba,0x80">
			<comments desc="OSX window. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getNSWindow"
				name="GetNSWindow"
				num_parameters="0">
				<comments desc="Get the window&apos;s NS window. "/>
				<return type="void *" typec="void*"/>
			</method>
		</interface>
		<interface
			name="iOSWindowQNX"
			noautomation="yes"
			uuid1="73B61729-589D-F04C-9F7E-FD3D19492386"
			uuid2="0x73b61729,0x589d,0xf04c,0x9f,0x7e,0xfd,0x3d,0x19,0x49,0x23,0x86">
			<comments desc="QNX window. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getScreenHandle"
				name="GetScreenHandle"
				num_parameters="0">
				<comments desc="Get the native screen handle "/>
				<return type="void *" typec="void*"/>
			</method>
		</interface>
		<interface
			name="iOSWindowLinux"
			noautomation="yes"
			uuid1="662A125B-3A03-0244-9F3B-4918D61F3B44"
			uuid2="0x662a125b,0x3a03,0x0244,0x9f,0x3b,0x49,0x18,0xd6,0x1f,0x3b,0x44">
			<comments desc="Linux window. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getScreenHandle"
				name="GetScreenHandle"
				num_parameters="0">
				<comments desc="Get the native screen handle "/>
				<return type="void *" typec="void*"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IProf.h.idl.xml">
		<enum name="eProfilerReportMode">
			<comments desc="Profiler report modes "/>
			<value name="eProfilerReportMode_SelfTime" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eProfilerReportMode_HierTime" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eProfilerReportMode_CallGraph" value="2 ">
				<comments desc=""/>
			</value>
			<value name="eProfilerReportMode_Last" value="3 ">
				<comments desc=""/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iProfDraw"
			uuid1="831E4FEC-92B9-434A-9329-0F5F4AFA258F"
			uuid2="0x831e4fec,0x92b9,0x434a,0x93,0x29,0x0f,0x5f,0x4a,0xfa,0x25,0x8f">
			<comments desc=""/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="beginDraw" name="BeginDraw" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abTranslucent"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method java_name="endDraw" name="EndDraw" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="drawRect" name="DrawRect" num_parameters="5">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="drawLine" name="DrawLine" num_parameters="5">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y0"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y1"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="getTextHeight" name="GetTextHeight" num_parameters="0">
				<comments desc=""/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
			</method>
			<method java_name="getTextWidth" name="GetTextWidth" num_parameters="1">
				<comments desc=""/>
				<return type="tF32" typec="tF32" typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="aText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="beginText" name="BeginText" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="endText" name="EndText" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="text" name="Text" num_parameters="4">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					name="x"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="y"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="aText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anColor"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
		<interface name="iProf" uuid1="1E2D88EE-7007-4EB3-87D4-141E6982886B" uuid2="0x1e2d88ee,0x7007,0x4eb3,0x87,0xd4,0x14,0x1e,0x69,0x82,0x88,0x6b">
			<comments desc="Profiler interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="setRecord"
				name="SetRecord"
				num_parameters="1"
				property="set"
				property_name2="record"
				property_name="record">
				<comments desc="Set whether to record profiling infos or not during the next update. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abRecord"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getRecord"
				name="GetRecord"
				num_parameters="0"
				property="get"
				property_name2="record"
				property_name="record">
				<comments desc="Get whether to record profiling infos or not during the next update. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="update" name="Update" num_parameters="0">
				<comments desc="Update the profiler, once per frame. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getZoneStackDummy"
				name="GetZoneStackDummy"
				noautomation="yes"
				num_parameters="0">
				<comments desc=""/>
				<return type="sProfilerZoneStack *" typec="sProfilerZoneStack*"/>
			</method>
			<method
				const="yes"
				java_name="getZoneStack"
				name="GetZoneStack"
				noautomation="yes"
				num_parameters="0">
				<comments desc=""/>
				<return type="sProfilerZoneStack * *" typec="sProfilerZoneStack**"/>
			</method>
			<method
				java_name="setZoneStack"
				name="SetZoneStack"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void"/>
				<parameter
					last="1"
					name="apZoneStack"
					type="sProfilerZoneStack *"
					typec="sProfilerZoneStack*"/>
			</method>
			<method
				java_name="stackAppend"
				name="StackAppend"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="sProfilerZoneStack *" typec="sProfilerZoneStack*"/>
				<parameter
					last="1"
					name="apZoneStack"
					type="sProfilerZone *"
					typec="sProfilerZone*"/>
			</method>
			<method
				const="yes"
				java_name="getTimeStamp"
				name="GetTimeStamp"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void"/>
				<parameter
					last="1"
					name="apTimeStamp"
					type="tI64 *"
					typec="tI64*"/>
			</method>
			<method java_name="setReportMode" name="SetReportMode" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aMode"
					type="eProfilerReportMode"
					typec="eProfilerReportMode"
					typei="ni::eType_Enum"/>
			</method>
			<method java_name="getReportMode" name="GetReportMode" num_parameters="0">
				<comments desc=""/>
				<return type="eProfilerReportMode" typec="eProfilerReportMode" typei="ni::eType_Enum"/>
			</method>
			<method java_name="inputMoveCursor" name="InputMoveCursor" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anDelta"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="inputSelect" name="InputSelect" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="inputSelectParent" name="InputSelectParent" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="inputMoveFrame" name="InputMoveFrame" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anDelta"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="inputSetFrame" name="InputSetFrame" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFrame"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="inputSetCursor" name="InputSetCursor" num_parameters="1">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anLine"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="textReport" name="TextReport" num_parameters="2">
				<comments desc=""/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="cols"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="rows"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="drawTable" name="DrawTable" num_parameters="6">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="drawer"
					type="ni::iProfDraw *"
					typec="ni::iProfDraw*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="sy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="full_width"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="height"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="precision"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method java_name="drawGraph" name="DrawGraph" num_parameters="5">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="drawer"
					type="ni::iProfDraw *"
					typec="ni::iProfDraw*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="sx"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="sy"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					name="x_spacing"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
				<parameter
					last="1"
					name="y_spacing"
					type="tF32"
					typec="tF32"
					typei="ni::eType_F32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IRegex.h.idl.xml">
		<enum min_features="15" name="ePCREOptionsFlags">
			<comments desc="PCRE option flags "/>
			<value min_features="15" name="ePCREOptionsFlags_Caseless" value="0x00000001 ">
				<comments desc="Do caseless (case insensitive) matching. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Multiline" value="0x00000002 ">
				<comments desc="&apos;^&apos; and &apos;$&apos; match newlines within data. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_DotAll" value="0x00000004 ">
				<comments desc="&apos;.&apos; matches anything including NL. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Extended" value="0x00000008 ">
				<comments desc="Ignore whitespace and # comments. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Anchored" value="0x00000010 ">
				<comments desc="Force pattern anchoring. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_DollarEndOnly" value="0x00000020 ">
				<comments desc="&apos;$&apos; not to match newline at end. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Extra" value="0x00000040 ">
				<comments desc="PCRE extra features (not much use currently). "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NotBOL" value="0x00000080 ">
				<comments desc="This option specifies that first character of the subject string is not the beginning of a line, so the circumflex metacharacter should not match before it. Setting this without MULTILINE (at compile time) causes circumflex never to match. This option affects only the behaviour of the circumflex metacharacter. It does not affect &apos;\\A&apos;. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NotEOL" value="0x00000100 ">
				<comments desc="This option specifies that the end of the subject string is not the end of a line, so the dollar metacharacter should not match it nor (except in multiline mode) a newline immediately before it. Setting this without PCRE_MULTILINE (at compile time) causes dollar never to match. This option affects only the behaviour of the dollar metacharacter. It does not affect &apos;\\Z&apos; or &apos;\\z&apos;. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Ungreedy" value="0x00000200 ">
				<comments desc="Invert greediness of quantifiers. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NotEmpty" value="0x00000400 ">
				<comments desc="An empty string is not considered to be a valid match if this option is set. If there are alternatives in the pattern, they are tried. If all the alternatives match the empty string, the entire match fails. For example, if the pattern. &quot;a?b?&quot; is applied to a string not beginning with &quot;a&quot; or &quot;b&quot;, it matches the empty string at the start of the subject. With NOTEMPTY set, this match is not valid, so PCRE searches further into the string for occurrences of &quot;a&quot; or &quot;b&quot;. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_UTF8" value="0x00000800 ">
				<comments desc="Run in UTF-8 mode. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NoAutoCapture" value="0x00001000 ">
				<comments desc="Disable numbered capturing parentheses (named ones available). "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NoUTF8Check" value="0x00002000 ">
				<comments desc="Do not check the pattern for UTF-8 validity. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_AutoCallout" value="0x00004000 ">
				<comments desc="Compile automatic callouts. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_DFAShortest" value="0x00010000 ">
				<comments desc="Setting this option causes the matching algorithm to stop as soon as it has found one match. Because of the way the alternative algorithm works, this is necessarily the shortest possible match at the first possible matching point in the subject string. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_FirstLine" value="0x00040000 ">
				<comments desc="Force matching to be before newline. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_DupNames" value="0x00080000 ">
				<comments desc="Allow duplicate names for subpatterns. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NewLineCR" value="0x00100000 ">
				<comments desc="Set CR as the newline sequence. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NewLineLF" value="0x00200000 ">
				<comments desc="Set LF as the newline sequence. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NewLineCRLF" value="0x00300000 ">
				<comments desc="Set CRLF as the newline sequence. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NewLineAny" value="0x00400000 ">
				<comments desc="Recognize any Unicode newline sequence. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_NewLineAnyCRLF" value="0x00500000 ">
				<comments desc="Recognize CR, LF, and CRLF as newline sequences. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_BsrAnyCRLF" value="0x00800000 ">
				<comments desc="&apos;\\R&apos; matches only CR, LF, or CRLF. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_BsrUnicode" value="0x01000000 ">
				<comments desc="&apos;\\R&apos; matches all Unicode line endings "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Global" value="niBit ( 30 ) ">
				<comments desc="Global regular expression. "/>
			</value>
			<value min_features="15" name="ePCREOptionsFlags_Optimize" value="niBit ( 31 ) ">
				<comments desc="Optimize the regular expression. "/>
			</value>
		</enum>
		<enum min_features="15" name="ePCREError">
			<comments desc="PCRE compilation error "/>
			<value min_features="15" name="ePCREError_OK" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_NoMatch" value="( tU32 ) ( -1 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_Null" value="( tU32 ) ( -2 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadOption" value="( tU32 ) ( -3 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadMagic" value="( tU32 ) ( -4 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_UnknownOpcode" value="( tU32 ) ( -5 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_NoMemory" value="( tU32 ) ( -6 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_NoSubstring" value="( tU32 ) ( -7 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_MatchLimit" value="( tU32 ) ( -8 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_Callout" value="( tU32 ) ( -9 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadUTF8" value="( tU32 ) ( -10 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadUTF8Offset" value="( tU32 ) ( -11 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_Partial" value="( tU32 ) ( -12 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadPartial" value="( tU32 ) ( -13 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_Internal" value="( tU32 ) ( -14 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadCount" value="( tU32 ) ( -15 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_DFA_UITEM" value="( tU32 ) ( -16 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_DFA_UCOND" value="( tU32 ) ( -17 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_DFA_UMLIMIT" value="( tU32 ) ( -18 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_DFA_WSSIZE" value="( tU32 ) ( -19 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_DFA_RECURSE" value="( tU32 ) ( -20 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_RecursionLimit" value="( tU32 ) ( -21 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_NullWSLimit" value="( tU32 ) ( -22 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadNewLine" value="( tU32 ) ( -23 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_LoopLimit" value="( tU32 ) ( -24 ) ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="ePCREError_BadRegexString" value="( tU32 ) ( -1000 ) ">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iRegex" uuid1="C48D7F86-D623-4327-B9DB-DB359E1BC0E6" uuid2="0xc48d7f86,0xd623,0x4327,0xb9,0xdb,0xdb,0x35,0x9e,0x1b,0xc0,0xe6">
			<comments desc="Generic regular expression interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getImplType"
				name="GetImplType"
				num_parameters="0"
				property="get"
				property_name2="implType"
				property_name="impl_type">
				<comments desc="Get the implementation type of the regular experssion. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="doesMatch"
				name="DoesMatch"
				num_parameters="1">
				<comments desc="Search for the next match of the expression. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszText"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface
			min_features="15"
			name="iPCRE"
			uuid1="B168FD05-0FA2-4238-8B44-515FEC762424"
			uuid2="0xb168fd05,0x0fa2,0x4238,0x8b,0x44,0x51,0x5f,0xec,0x76,0x24,0x24">
			<comments desc="PCRE Regular Expression interface. "/>
			<parents>
				<parent name="iRegex"/>
			</parents>
			<method
				java_name="compile"
				min_features="15"
				name="Compile"
				num_parameters="2">
				<comments desc="Compile a regular expression. ">
					<params text="aaszRegEx is the regular expression to compile. "/>
					<params text="aaszOpt is perl style character modifier.&lt;br/&gt; &lt;ul&gt; &lt;li&gt;g = ePCREOptionsFlags_Global&lt;/li&gt; &lt;li&gt;i = ePCREOptionsFlags_Caseless&lt;/li&gt; &lt;li&gt;m = ePCREOptionsFlags_Multiline&lt;/li&gt; &lt;li&gt;s = ePCREOptionsFlags_DotAll&lt;/li&gt; &lt;li&gt;x = ePCREOptionsFlags_Extended&lt;/li&gt; &lt;li&gt;U = ePCREOptionsFlags_Ungreedy&lt;/li&gt; &lt;/ul&gt; "/>
				</comments>
				<return type="ePCREError" typec="ePCREError" typei="ni::eType_Enum"/>
				<parameter
					name="aaszRegEx"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszOpt"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="compile2"
				min_features="15"
				name="Compile2"
				num_parameters="2">
				<comments desc="Compile a regular expression. ">
					<remark text="Uses option flags directly. "/>
				</comments>
				<return type="ePCREError" typec="ePCREError" typei="ni::eType_Enum"/>
				<parameter
					name="aaszRegEx"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aOpt"
					type="tPCREOptionsFlags"
					typec="tPCREOptionsFlags"
					typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getIsCompiled"
				min_features="15"
				name="GetIsCompiled"
				num_parameters="0"
				property="get"
				property_name2="isCompiled"
				property_name="is_compiled">
				<comments desc="Get whether the last compile has been successfull. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getLastCompileError"
				min_features="15"
				name="GetLastCompileError"
				num_parameters="0"
				property="get"
				property_name2="lastCompileError"
				property_name="last_compile_error">
				<comments desc="Get the last compilation error code. "/>
				<return type="ePCREError" typec="ePCREError" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getLastCompileErrorDesc"
				min_features="15"
				name="GetLastCompileErrorDesc"
				num_parameters="0"
				property="get"
				property_name2="lastCompileErrorDesc"
				property_name="last_compile_error_desc">
				<comments desc="Get the last compilation error description. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getLastCompileErrorOffset"
				min_features="15"
				name="GetLastCompileErrorOffset"
				num_parameters="0"
				property="get"
				property_name2="lastCompileErrorOffset"
				property_name="last_compile_error_offset">
				<comments desc="Get the last compilation error offset. ">
					<remark text="The offset is the &apos;index&apos; of the character in the compiled regex where the error has been detected. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getOptions"
				min_features="15"
				name="GetOptions"
				num_parameters="0"
				property="get"
				property_name2="options"
				property_name="options">
				<comments desc="Get the options used during the last compilation. "/>
				<return type="tPCREOptionsFlags" typec="tPCREOptionsFlags" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="reset"
				min_features="15"
				name="Reset"
				num_parameters="0">
				<comments desc="Resets the regex object. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				const="yes"
				java_name="getNumMarkers"
				min_features="15"
				name="GetNumMarkers"
				num_parameters="0"
				property="get"
				property_name2="numMarkers"
				property_name="num_markers">
				<comments desc="Get the number of matches returned by the last Match/Sub call. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getMarker"
				min_features="15"
				name="GetMarker"
				num_parameters="1"
				property="get"
				property_name2="marker"
				property_name="marker">
				<comments desc="Get the range of the last match. ">
					<remark text="A range is &apos;x&apos; first character index matched, &apos;y&apos; last character index matched. "/>
				</comments>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getString"
				min_features="15"
				name="GetString"
				num_parameters="1"
				property="get"
				property_name2="string"
				property_name="string">
				<comments desc="Get the substring in string matched at the specified index. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumNamed"
				min_features="15"
				name="GetNumNamed"
				num_parameters="0"
				property="get"
				property_name2="numNamed"
				property_name="num_named">
				<comments desc="Get the number of named subpatterns. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNamedName"
				min_features="15"
				name="GetNamedName"
				num_parameters="1"
				property="get"
				property_name2="namedName"
				property_name="named_name">
				<comments desc="Get the name of the subpattern at the specified index. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNamedMarker"
				min_features="15"
				name="GetNamedMarker"
				num_parameters="1"
				property="get"
				property_name2="namedMarker"
				property_name="named_marker">
				<comments desc="Get the range of a named match. ">
					<remark text="A range is &apos;x&apos; first character index matched, &apos;y&apos; last character index matched. "/>
					<remark text="Convenience for GetMarker(GetNamedIndex(NAME)) "/>
				</comments>
				<return type="sVec2i" typec="sVec2i" typei="ni::eType_Vec2i"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNamedString"
				min_features="15"
				name="GetNamedString"
				num_parameters="1"
				property="get"
				property_name2="namedString"
				property_name="named_string">
				<comments desc="Get the substring in string matched at the specified index. ">
					<remark text="Convenience for GetString(GetNamedIndex(NAME)) "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNamedIndex"
				min_features="15"
				name="GetNamedIndex"
				num_parameters="1"
				property="get"
				property_name2="namedIndex"
				property_name="named_index">
				<comments desc="Get the index of a named subpattern. " return="eInvalidHandle if the subpattern hasnt been matched. ">
					<remark text="The index points in the markers. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="matchRaw"
				min_features="15"
				name="MatchRaw"
				num_parameters="1">
				<comments desc="Match against this regular expression. " return="The number of matches found, -1 on error. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="match"
				min_features="15"
				name="Match"
				num_parameters="2">
				<comments desc="Match against this regular expression. " return="The number of matches found, -1 on error. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="ahspString"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anOffset"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="split"
				min_features="15"
				name="Split"
				num_parameters="2">
				<comments desc="Splits based on delimiters matching the regex. ">
					<params text="aaszString is the string to process "/>
					<params text="anMaxFields is the maximum number of fields to split out. Zero (0) means split all fields, but discard any trailing empty bits. Negative means split all fields and keep trailing empty bits. Positive means keep up to N fields including any empty fields lass than N. Anything remaining is in the last field. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anMaxFields"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				java_name="sub"
				min_features="15"
				name="Sub"
				num_parameters="3">
				<comments desc="Substitues out whatever matches the regex for the second parameter. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					name="aaszString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszReplacement"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="abDoDollarSub"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IScriptingHost.h.idl.xml">
		<interface
			dispatchwrapper="yes"
			name="iScriptingHost"
			uuid1="6F7E1CFC-118B-452C-8CB2-0A04DED648F2"
			uuid2="0x6f7e1cfc,0x118b,0x452c,0x8c,0xb2,0x0a,0x04,0xde,0xd6,0x48,0xf2">
			<comments desc="Scripting host interface. ">
				<remark text="The context is an indicator of a &apos;group/class&apos; of object/implementation. "/>
			</comments>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="evalString"
				min_features="15"
				name="EvalString"
				num_parameters="2">
				<comments desc="Evaluate the specified string. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspContext"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aaszCode"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="canEvalImpl"
				min_features="15"
				name="CanEvalImpl"
				num_parameters="2">
				<comments desc="Check whether the scripting host can evaluate the specified code resource. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="ahspContext"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="ahspCodeResource"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="evalImpl"
				min_features="15"
				name="EvalImpl"
				num_parameters="3">
				<comments desc="Evaluate the specified implementation from the specified &apos;code resource&apos;. ">
					<remark text="The code resource can be a file name, class name, or whathever is relevant as an implementation identifier depending on the type of the scripting host. "/>
				</comments>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspContext"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="ahspCodeResource"
					type="iHString *"
					typec="iHString*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aIID"
					type="const tUUID &amp;"
					typec="const tUUID&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="service"
				min_features="15"
				name="Service"
				num_parameters="1">
				<comments desc="Service the scripting host. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abForceGC"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ISerializable.h.idl.xml">
		<enum name="eSerializeFlags">
			<comments desc="Serialization flags. "/>
			<value name="eSerializeFlags_Write" value="niBit ( 0 ) ">
				<comments desc="Serialize write. "/>
			</value>
			<value name="eSerializeFlags_Read" value="niBit ( 1 ) ">
				<comments desc="Serialize read. "/>
			</value>
			<value name="eSerializeFlags_Category1" value="niBit ( 2 ) ">
				<comments desc="Serialization category 1. "/>
			</value>
			<value name="eSerializeFlags_Category2" value="niBit ( 3 ) ">
				<comments desc="Serialization category 2. "/>
			</value>
			<value name="eSerializeFlags_Category3" value="niBit ( 4 ) ">
				<comments desc="Serialization category 3. "/>
			</value>
			<value name="eSerializeFlags_Category4" value="niBit ( 5 ) ">
				<comments desc="Serialization category 4. "/>
			</value>
			<value name="eSerializeFlags_Category5" value="niBit ( 6 ) ">
				<comments desc="Serialization category 5. "/>
			</value>
			<value name="eSerializeFlags_Category6" value="niBit ( 7 ) ">
				<comments desc="Serialization category 6. "/>
			</value>
			<value name="eSerializeFlags_Category7" value="niBit ( 8 ) ">
				<comments desc="Serialization category 7. "/>
			</value>
			<value name="eSerializeFlags_Category8" value="niBit ( 9 ) ">
				<comments desc="Serialization category 8. "/>
			</value>
			<value name="eSerializeFlags_CategoryBase" value="eSerializeFlags_Category1|eSerializeFlags_Category2|eSerializeFlags_Category3|eSerializeFlags_Category4 ">
				<comments desc="Serialization category 1 to 4 (base). "/>
			</value>
			<value name="eSerializeFlags_CategoryExtended" value="eSerializeFlags_Category5|eSerializeFlags_Category6|eSerializeFlags_Category7|eSerializeFlags_Category8 ">
				<comments desc="Serialization category 4 to 8 (extended). "/>
			</value>
			<value name="eSerializeFlags_CategoryAll" value="eSerializeFlags_CategoryBase|eSerializeFlags_CategoryExtended ">
				<comments desc="Serialization all category. "/>
			</value>
			<value name="eSerializeFlags_TypeInfoMetadata" value="niBit ( 10 ) ">
				<comments desc="Serialize write will also write type information metadata. ">
					<remark text="The 11th bit is reserved to set whether or not &apos;edit&apos; metadata should be serialized. This can be, and is, assumed by serialization flags for other object types. This allow the C++ serialization code to be shortened a lot with the use of the DataTable serialization macros (see DataTableSerialize.h). "/>
				</comments>
			</value>
			<value name="eSerializeFlags_Raw" value="niBit ( 11 ) ">
				<comments desc="Raw serialization, dont put object serialization header. ">
					<remark text="This is relevant for file/stream serialization. "/>
				</comments>
			</value>
		</enum>
		<enum name="eSerializeMode">
			<comments desc="Serialization mode "/>
			<value name="eSerializeMode_Write" value="eSerializeFlags_Write ">
				<comments desc="Write mode. "/>
			</value>
			<value name="eSerializeMode_WriteRaw" value="eSerializeFlags_Write|eSerializeFlags_Raw ">
				<comments desc="Write raw mode. ">
					<remark text="Means that no object header will be written. "/>
				</comments>
			</value>
			<value name="eSerializeMode_Read" value="eSerializeFlags_Read ">
				<comments desc="Read mode. "/>
			</value>
			<value name="eSerializeMode_ReadRaw" value="eSerializeFlags_Read|eSerializeFlags_Raw ">
				<comments desc="Read raw mode. ">
					<remark text="Means that no object header will be checked for. "/>
				</comments>
			</value>
		</enum>
		<interface name="iSerializable" uuid1="1E9334FC-E622-4932-BB73-EDF0C9DC1C90" uuid2="0x1e9334fc,0xe622,0x4932,0xbb,0x73,0xed,0xf0,0xc9,0xdc,0x1c,0x90">
			<comments desc="iSerializable interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getSerializeObjectTypeID"
				name="GetSerializeObjectTypeID"
				num_parameters="0">
				<comments desc="Get the object type ID. " return="NULL if there is no object type. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="serialize" name="Serialize" num_parameters="2">
				<comments desc="Serialize the object. " return="The number of bytes serialized, eInvalidHandle on error. ">
					<params text="apFile is the file interface where the object must be serialized. "/>
					<params text="aMode "/>
				</comments>
				<return type="tSize" typec="tSize" typei="ni::eType_Size"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aMode"
					type="eSerializeMode"
					typec="eSerializeMode"
					typei="ni::eType_Enum"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ISinkList.h.idl.xml">
		<interface name="iSinkList" uuid1="EAACE572-345E-44F6-B0EB-D9B7995237C4" uuid2="0xeaace572,0x345e,0x44f6,0xb0,0xeb,0xd9,0xb7,0x99,0x52,0x37,0xc4">
			<comments desc="Sink list interface. "/>
			<parents>
				<parent name="iCollection"/>
			</parents>
			<method
				const="yes"
				java_name="getSinkUUID"
				name="GetSinkUUID"
				num_parameters="0"
				property="get"
				property_name2="sinkUUID"
				property_name="sink_uuid">
				<comments desc="Get the UUID of the sink. "/>
				<return type="const tUUID &amp;" typec="const tUUID&amp;" typei="ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="clear" name="Clear" num_parameters="0">
				<comments desc="Remove all the sinks. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method java_name="hasSink" name="HasSink" num_parameters="1">
				<comments desc="Check whether the specified sink has already been added. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addSink" name="AddSink" num_parameters="1">
				<comments desc="Add a sink to the sink list. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="removeSink" name="RemoveSink" num_parameters="1">
				<comments desc="Remove a sink from the sink list. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addFrontSink" name="AddFrontSink" num_parameters="1">
				<comments desc="Add a sink to the front of the sink list. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apSink"
					type="iUnknown *"
					typec="iUnknown*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setMute"
				name="SetMute"
				num_parameters="1"
				property="set"
				property_name2="mute"
				property_name="mute">
				<comments desc="Mute the sink. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abMute"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getMute"
				name="GetMute"
				num_parameters="0"
				property="get"
				property_name2="mute"
				property_name="mute">
				<comments desc="Get the muted status of the sink. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ISocket.h.idl.xml">
		<enum name="eRemoteAddressType">
			<comments desc="Remote address types. "/>
			<value name="eRemoteAddressType_Unknown" value="0 ">
				<comments desc="Unknown remote address type. "/>
			</value>
			<value name="eRemoteAddressType_IPv4" value="1 ">
				<comments desc="IP v4 address type. "/>
			</value>
			<value name="eRemoteAddressType_IPv6" value="2 ">
				<comments desc="IP v6 address type. "/>
			</value>
			<value name="eRemoteAddressType_IPC" value="3 ">
				<comments desc="IPC (inter-process communication) address. "/>
			</value>
		</enum>
		<interface name="iRemoteAddress" uuid1="3E076B8B-75A5-47C8-9E7D-4A4BA453DB58" uuid2="0x3e076b8b,0x75a5,0x47c8,0x9e,0x7d,0x4a,0x4b,0xa4,0x53,0xdb,0x58">
			<comments desc="Remote address base interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone the address. "/>
				<return type="iRemoteAddress *" typec="iRemoteAddress*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="compare" name="Compare" num_parameters="1">
				<comments desc="Compare to another address. " return="0 if the address is the same, -1 if it&apos;s &apos;smaller&apos; and 1 if it&apos;s greater. If the addresses are not of the same type the type value is compared. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="apAddr"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getType"
				name="GetType"
				num_parameters="0"
				property="get"
				property_name2="type"
				property_name="type">
				<comments desc="Get the address type. "/>
				<return type="eRemoteAddressType" typec="eRemoteAddressType" typei="ni::eType_Enum"/>
			</method>
			<method
				java_name="setAddressString"
				name="SetAddressString"
				num_parameters="1"
				property="set"
				property_name2="addressString"
				property_name="address_string">
				<comments desc="Set the address from a string. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aaszAddress"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAddressString"
				name="GetAddressString"
				num_parameters="0"
				property="get"
				property_name2="addressString"
				property_name="address_string">
				<comments desc="Get the address&apos;s string. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
			<method
				java_name="setPort"
				name="SetPort"
				num_parameters="1"
				property="set"
				property_name2="port"
				property_name="port">
				<comments desc="Set the port of the address. ">
					<params text="usPort is the port to assign the address. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anPort"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getPort"
				name="GetPort"
				num_parameters="0"
				property="get"
				property_name2="port"
				property_name="port">
				<comments desc="Get the port of the address. " return="the port assigned to the address. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsNull"
				name="GetIsNull"
				num_parameters="0"
				property="get"
				property_name2="isNull"
				property_name="is_null">
				<comments desc="Get whether the address (NOT including the port) is null / equivalent to zero. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
		<enum name="eRemoteAddressIPv4Reserved">
			<comments desc="IPv4 remote address reserved values. "/>
			<value name="eRemoteAddressIPv4Reserved_Any" value="0 ">
				<comments desc="Any address will do. Used by server/listener. "/>
			</value>
			<value name="eRemoteAddressIPv4Reserved_Broadcast" value="0xFFFFFFFF ">
				<comments desc="Address used to broadcast a packet. "/>
			</value>
		</enum>
		<interface name="iRemoteAddressIPv4" uuid1="C7BE5396-23F2-46B7-ADCA-A09F58CC94E3" uuid2="0xc7be5396,0x23f2,0x46b7,0xad,0xca,0xa0,0x9f,0x58,0xcc,0x94,0xe3">
			<comments desc="IPv4 remote address interface. "/>
			<parents>
				<parent name="iRemoteAddress"/>
			</parents>
			<method
				java_name="setHost"
				name="SetHost"
				num_parameters="1"
				property="set"
				property_name2="host"
				property_name="host">
				<comments desc="Set the ip address from a FOURCC code. ">
					<remark text="FourCC can be also a eRemoteAddressIPv4Reserved enumeration element. "/>
					<params text="ulFourCC is the FourCC code which represent the address. It can be build with the niFourCC macro. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFourCC"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHost"
				name="GetHost"
				num_parameters="0"
				property="get"
				property_name2="host"
				property_name="host">
				<comments desc="Get the ip address in FOURCC form. " return="a FourCC code which contain the address. Individual elements of the address can be retrived with the niFourCC macros. ">
					<remark text="The returned value can be also a eRemoteAddressIPv4Reserved enumeration element. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHostName"
				name="GetHostName"
				num_parameters="0"
				property="get"
				property_name2="hostName"
				property_name="host_name">
				<comments desc="Get the host name. "/>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
			</method>
		</interface>
		<enum name="eSocketProtocol">
			<comments desc="Socket protocols. "/>
			<value name="eSocketProtocol_Unknown" value="0 ">
				<comments desc="Unknown protocol. "/>
			</value>
			<value name="eSocketProtocol_UDP" value="1 ">
				<comments desc="UDP protocol. "/>
			</value>
			<value name="eSocketProtocol_TCP" value="2 ">
				<comments desc="TCP protocol "/>
			</value>
		</enum>
		<enum name="eSocketWaitFlags">
			<comments desc="Socket wait flags. "/>
			<value name="eSocketWaitFlags_None" value="0 ">
				<comments desc="No flags, failure/timeout. "/>
			</value>
			<value name="eSocketWaitFlags_Send" value="niBit ( 0 ) ">
				<comments desc="Wait for send. "/>
			</value>
			<value name="eSocketWaitFlags_Receive" value="niBit ( 1 ) ">
				<comments desc="Wait for receive. "/>
			</value>
			<value name="eSocketWaitFlags_Error" value="0xFFFFFFFF ">
				<comments desc="Wait error "/>
			</value>
		</enum>
		<enum name="eSocketErrno">
			<comments desc="Socket Error codes "/>
			<value name="eSocketErrno_OK" value="0 ">
				<comments desc="No Error "/>
			</value>
			<value name="eSocketErrno_Unknown" value="1 ">
				<comments desc="Generic &apos;unknown&apos; error. "/>
			</value>
			<value name="eSocketErrno_WouldBlock" value="2 ">
				<comments desc="(EWOULDBLOCK/EAGAIN) Resource temporarily unavailable. This is a temporary condition and later calls to the same routine may complete normally. "/>
			</value>
			<value name="eSocketErrno_Interrupted" value="3 ">
				<comments desc="(EINTR) Interrupted function call. A blocking operation was interrupted. "/>
			</value>
			<value name="eSocketErrno_Invalid" value="4 ">
				<comments desc="(EINVAL) Invalid argument. "/>
			</value>
			<value name="eSocketErrno_Already" value="5 ">
				<comments desc="(EALREADY) Operation already in progress. An operation was attempted on a non-blocking object that already had an operation in progress. "/>
			</value>
			<value name="eSocketErrno_BadFile" value="6 ">
				<comments desc="(EBADF) Bad file descriptor. "/>
			</value>
			<value name="eSocketErrno_HostDown" value="7 ">
				<comments desc="(EHOSTDOWN) Host is down. A socket operation failed because the destination host was down. A socket operation encountered a dead host. Networking activity on the local host has not been initiated. "/>
			</value>
			<value name="eSocketErrno_InProgress" value="8 ">
				<comments desc="(EINPROGRESS) Operation now in progress. An operation that takes a long time to complete (such as a Connect()) was attempted on a non-blocking socket. "/>
			</value>
			<value name="eSocketErrno_MessageTooLong" value="9 ">
				<comments desc="(EMSGSIZE) Message too long. A message sent on a socket was larger than the internal message buffer or some other network limit. "/>
			</value>
			<value name="eSocketErrno_Shutdown" value="10 ">
				<comments desc="(ESHUTDOWN) Cannot send after socket shutdown. "/>
			</value>
			<value name="eSocketErrno_Timeout" value="11 ">
				<comments desc="(ETIMEDOUT) Connection timed out. A connect or send request failed because the connected party did not properly respond after a period of time. "/>
			</value>
			<value name="eSocketErrno_TooManyUsers" value="12 ">
				<comments desc="(EUSERS) Too many users. "/>
			</value>
			<value name="eSocketErrno_AlreadyConnected" value="13 ">
				<comments desc="(EISCONN) Socket is already connected. A Connect request was made on an already connected socket; or, a send request on a connected socket specified a destination when already connected. "/>
			</value>
			<value name="eSocketErrno_NotConnected" value="14 ">
				<comments desc="(ENOTCONN) Socket is not connected. A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket) no address was supplied. "/>
			</value>
			<value name="eSocketErrno_ConnectionAborted" value="15 ">
				<comments desc="(ECONNABORTED) Software caused connection abort. "/>
			</value>
			<value name="eSocketErrno_ConnectionRefused" value="16 ">
				<comments desc="(ECONNREFUSED) Connection refused. No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host. "/>
			</value>
			<value name="eSocketErrno_ConnectionReset" value="17 ">
				<comments desc="(ECONNRESET) Connection reset by peer. A connection was forcibly closed by a peer. This normally results from a loss of the connection on the remote socket due to a timeout or a reboot. "/>
			</value>
			<value name="eSocketErrno_AddressInUser" value="18 ">
				<comments desc="(EADDRINUSE) Address already in use. An attempt was made to access a file in a way forbidden by its file access permissions. "/>
			</value>
			<value name="eSocketErrno_CannotAssignAddress" value="19 ">
				<comments desc="(EADDRNOTAVAIL) Cannot assign requested address. "/>
			</value>
			<value name="eSocketErrno_NetworkDown" value="20 ">
				<comments desc="(ENETDOWN) Network is down. "/>
			</value>
			<value name="eSocketErrno_NetworkReset" value="21 ">
				<comments desc="(ENETRESET) Network dropped connection on reset. "/>
			</value>
			<value name="eSocketErrno_NetworkUnreachable" value="22 ">
				<comments desc="(ENETUNREACH) Network is unreachable. "/>
			</value>
			<value name="eSocketErrno_NoBufferSpace" value="23 ">
				<comments desc="(ENOBUFS) No buffer space available. "/>
			</value>
			<value name="eSocketErrno_MessagePartial" value="24 ">
				<comments desc="Only a portion of the message has been received. ">
					<remark text="Currently, this can be set by ReceiveBuffers only. "/>
				</comments>
			</value>
		</enum>
		<interface name="iSocket" uuid1="9262952D-F667-47A9-8147-25C59FBB367D" uuid2="0x9262952d,0xf667,0x47a9,0x81,0x47,0x25,0xc5,0x9f,0xbb,0x36,0x7d">
			<comments desc="Network socket interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getHandle"
				name="GetHandle"
				num_parameters="0"
				property="get"
				property_name2="handle"
				property_name="handle">
				<comments desc="Get the socket&apos;s handle/descriptor. "/>
				<return type="tIntPtr" typec="tIntPtr" typei="ni::eType_IntPtr"/>
			</method>
			<method
				const="yes"
				java_name="getAddress"
				name="GetAddress"
				num_parameters="0"
				property="get"
				property_name2="address"
				property_name="address">
				<comments desc="Get the socket&apos;s associated address. "/>
				<return type="iRemoteAddress *" typec="iRemoteAddress*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getProtocol"
				name="GetProtocol"
				num_parameters="0"
				property="get"
				property_name2="protocol"
				property_name="protocol">
				<comments desc="Get the protocol. "/>
				<return type="eSocketProtocol" typec="eSocketProtocol" typei="ni::eType_Enum"/>
			</method>
			<method java_name="makeNonBlocking" name="MakeNonBlocking" num_parameters="0">
				<comments desc="Make the socket to be non-blocking. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsNonBlocking"
				name="GetIsNonBlocking"
				num_parameters="0"
				property="get"
				property_name2="isNonBlocking"
				property_name="is_non_blocking">
				<comments desc="Get whether the socket is non-blocking "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getErrno"
				name="GetErrno"
				num_parameters="0"
				property="get"
				property_name2="errno"
				property_name="errno">
				<comments desc="Get the last error code. ">
					<remark text="The error code is never reset to OK, as such it should be queried only when one of the functions return an error code. "/>
				</comments>
				<return type="eSocketErrno" typec="eSocketErrno" typei="ni::eType_Enum"/>
			</method>
			<method
				const="yes"
				java_name="getRawErrno"
				name="GetRawErrno"
				num_parameters="0"
				property="get"
				property_name2="rawErrno"
				property_name="raw_errno">
				<comments desc="Get the last raw error code. ">
					<remark text="Get the error code as returned by the platform/OS. "/>
					<remark text="The error code is never reset to OK, as such it should be queried only when one of the functions return an error code. "/>
				</comments>
				<return type="tInt" typec="tInt" typei="ni::eType_Int"/>
			</method>
			<method java_name="connect" name="Connect" num_parameters="1">
				<comments desc="Connect the socket to the specified address. " return="eFalse if the connection failed, else eTrue. ">
					<remark text="Sets the socket address to the connected address. "/>
					<remark text="Blocking on blocking sockets. "/>
					<params text="apAddress is the address to connect to. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apAddress"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="accept" name="Accept" num_parameters="0">
				<comments desc="Accept incoming connections. ">
					<remark text="Blocking on blocking sockets. "/>
				</comments>
				<return type="iSocket *" typec="iSocket*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="bindPortAny" name="BindPortAny" num_parameters="1">
				<comments desc="Bind a socket to listen on a specific port. " return="eFalse if the binding failed, else eTrue. The binding will fail if the port is already listened by another socket. ">
					<params text="usPort is the port to listen. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anPort"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="bind" name="Bind" num_parameters="1">
				<comments desc="Bind a socket to listen the specified address. " return="eFalse if the binding failed, else eTrue. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apAddr"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="listen" name="Listen" num_parameters="1">
				<comments desc="Starts listening for incoming connections. ">
					<params text="anBacklog is the maximum length of the queue of pending connections, if it is 0 or invalid a reasonable maximal value will be used. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="anBacklog"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getIsListening"
				name="GetIsListening"
				num_parameters="0"
				property="get"
				property_name2="isListening"
				property_name="is_listening">
				<comments desc="Get whether the socket is in listening mode. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="send" name="Send" num_parameters="2">
				<comments desc="Send a packet to this socket. " return="-1 if an error happen, else the number of bytes effectivly sent. ">
					<remark text="The method will try to send all required bytes unless an error occur. "/>
					<params text="apFile is the file to send. "/>
					<params text="anBytes is the number of bytes from from the current file position to send. If zero the file from it&apos;s current position to the end will be sent. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anBytes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="sendTo" name="SendTo" num_parameters="3">
				<comments desc="Send a packet to the specified address. " return="-1 if an error happen, else the number of bytes effectivly sent. An error happen if the destination address cannot be found or is invalid. ">
					<params text="apFile is the file to send. "/>
					<params text="anBytes is the number of bytes from the current file position to send. If zero the file from it&apos;s current position to the end will be sent. "/>
					<params text="apAddress is where the data must be sent. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anBytes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="pAddress"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="sendBuffers"
				name="SendBuffers"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Send the specified buffers to the specified address. "/>
				<return type="tI32" typec="tI32"/>
				<parameter name="apAddress" type="const iRemoteAddress *" typec="const iRemoteAddress*"/>
				<parameter name="apBuffers" type="const sSocketBuffer *" typec="const sSocketBuffer*"/>
				<parameter
					last="1"
					name="anBufCount"
					type="tSize"
					typec="tSize"/>
			</method>
			<method java_name="receive" name="Receive" num_parameters="1">
				<comments desc="Receive connected data. " return="-1 if an error happen, else the number of bytes effectivly received. An error can happen if the destination address cannot be found or is invalid. ">
					<remark text="If no error happen, block until data are received. "/>
					<remark text="Blocking on blocking sockets. "/>
					<params text="apFile is where the received data will be stored. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="receiveFrom" name="ReceiveFrom" num_parameters="2">
				<comments desc="Receive datagram data. " return="-1 if an error happen, else the number of bytes effectivly received. An error can happen if the destination address cannot be found or is invalid. ">
					<remark text="If no error happen, block until data are received. "/>
					<remark text="Blocking on blocking sockets. "/>
					<params text="apFile is where the received data will be stored. "/>
					<params text="apAddress will contain the address of the data sender. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apAddress"
					type="iRemoteAddress *"
					typec="iRemoteAddress*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="receiveBuffers"
				name="ReceiveBuffers"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Receive buffers. "/>
				<return type="tI32" typec="tI32"/>
				<parameter name="apAddr" type="iRemoteAddress *" typec="iRemoteAddress*"/>
				<parameter name="apBuffers" type="sSocketBuffer *" typec="sSocketBuffer*"/>
				<parameter
					last="1"
					name="anBufCount"
					type="tSize"
					typec="tSize"/>
			</method>
			<method java_name="doWait" name="Wait" num_parameters="2">
				<comments desc="Wait on the specified events. " return="The event that stopped the waiting, or ni::eSocketWaitFlags_None if timeout. "/>
				<return type="tSocketWaitFlags" typec="tSocketWaitFlags" typei="ni::eType_Enum"/>
				<parameter
					name="aFlags"
					type="tSocketWaitFlags"
					typec="tSocketWaitFlags"
					typei="ni::eType_Enum"/>
				<parameter
					default="0 "
					last="1"
					name="anTimeoutInMs"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="setNodeName"
				name="SetNodeName"
				num_parameters="1"
				property="set"
				property_name2="nodeName"
				property_name="node_name">
				<comments desc="Set the node name associated with the socket. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNodeName"
				name="GetNodeName"
				num_parameters="0"
				property="get"
				property_name2="nodeName"
				property_name="node_name">
				<comments desc="Get the node name associated with the socket. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setKeepAlive"
				name="SetKeepAlive"
				num_parameters="1"
				property="set"
				property_name2="keepAlive"
				property_name="keep_alive">
				<comments desc="Set the socket to KEEPALIVE mode "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="aKeepAlive"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getIsKeepAlive"
				name="GetIsKeepAlive"
				num_parameters="0"
				property="get"
				property_name2="isKeepAlive"
				property_name="is_keep_alive">
				<comments desc="Whether the socket is in KEEPALIVE mode "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setKeepAliveParameters"
				name="SetKeepAliveParameters"
				num_parameters="3"
				property="set"
				property_name2="keepAliveParameters"
				property_name="keep_alive_parameters">
				<comments desc="Set KEEPALIVE interval on the current socket ">
					<remark text="If you don&apos;t want to set all the parameters, just set the parameter to 0. "/>
					<params text="anTimeMS the interval to wait before probing the idle connection, in milliseconds. "/>
					<params text="anIntvlMS the interval to wait before retrying the probe after an initial failure to respond, in milliseconds. "/>
					<params text="anProbes the maximum number of times to retry the probe. Not supported on Windows. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="anTimeMS"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					name="anIntvl"
					type="tU64"
					typec="tU64"
					typei="ni::eType_U64"/>
				<parameter
					last="1"
					name="anProbes"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getKeepAliveInterval"
				name="GetKeepAliveInterval"
				num_parameters="0"
				property="get"
				property_name2="keepAliveInterval"
				property_name="keep_alive_interval">
				<comments desc="Get KEEPALIVE interval on the current socket, in milliseconds. ">
					<remark text="the interval to wait before retrying the probe after an initial failure to respond. "/>
				</comments>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				const="yes"
				java_name="getKeepAliveProbes"
				name="GetKeepAliveProbes"
				num_parameters="0"
				property="get"
				property_name2="keepAliveProbes"
				property_name="keep_alive_probes">
				<comments desc="Get KEEPALIVE probes on the current socket. ">
					<remark text="the maximum number of times to retry the probe. "/>
				</comments>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getKeepAliveTime"
				name="GetKeepAliveTime"
				num_parameters="0"
				property="get"
				property_name2="keepAliveTime"
				property_name="keep_alive_time">
				<comments desc="Get KEEPALIVE time on the current socket, in milliseconds. ">
					<remark text="the interval to wait before probing the idle connection Not supported on Windows. "/>
				</comments>
				<return type="tU64" typec="tU64" typei="ni::eType_U64"/>
			</method>
			<method
				java_name="setReuseAddress"
				name="SetReuseAddress"
				num_parameters="1"
				property="set"
				property_name2="reuseAddress"
				property_name="reuse_address">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="abReuseAddress"
					type="tBool"
					typec="tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getReuseAddress"
				name="GetReuseAddress"
				num_parameters="0"
				property="get"
				property_name2="reuseAddress"
				property_name="reuse_address">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IStringTokenizer.h.idl.xml">
		<enum name="eStringTokenizerCharType">
			<comments desc="Char type returned by the methods of the tokenizer interface. "/>
			<value name="eStringTokenizerCharType_Normal" value="0 ">
				<comments desc="The char is normal and will be added to the current token. "/>
			</value>
			<value name="eStringTokenizerCharType_Skip" value="1 ">
				<comments desc="The char will be skipped. "/>
			</value>
			<value name="eStringTokenizerCharType_Splitter" value="2 ">
				<comments desc="The char mark a split. "/>
			</value>
			<value name="eStringTokenizerCharType_SplitterStart" value="3 ">
				<comments desc="The char mark a split that include this character at the begining of the next token. "/>
			</value>
			<value name="eStringTokenizerCharType_SplitterEnd" value="4 ">
				<comments desc="The char mark a split that include this character at the end of the current token. "/>
			</value>
			<value name="eStringTokenizerCharType_SplitterAndToken" value="5 ">
				<comments desc="The char mark a split and is a token. "/>
			</value>
		</enum>
		<interface
			dispatchwrapper="yes"
			name="iStringTokenizer"
			uuid1="59CD4F04-D5BB-4E1E-BB23-BC1A5BB45BDC"
			uuid2="0x59cd4f04,0xd5bb,0x4e1e,0xbb,0x23,0xbc,0x1a,0x5b,0xb4,0x5b,0xdc">
			<comments desc="iStringTokenizer interface "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="getCharType" name="GetCharType" num_parameters="1">
				<comments desc=""/>
				<return type="eStringTokenizerCharType" typec="eStringTokenizerCharType" typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="c"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="onNewLine" name="OnNewLine" num_parameters="0">
				<comments desc=""/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ITime.h.idl.xml">
		<enum name="eTimeZone">
			<comments desc="Time zone enumeration "/>
			<value name="eTimeZone_UTC" value="( tU32 ) 0 ">
				<comments desc="Coordinated Universal Time Europe UTC "/>
			</value>
			<value name="eTimeZone_WET" value="( tU32 ) 0 ">
				<comments desc="Western European Time Europe UTC "/>
			</value>
			<value name="eTimeZone_GMT" value="( tU32 ) 0 ">
				<comments desc="Greenwich Mean Time Europe UTC "/>
			</value>
			<value name="eTimeZone_A" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Alpha Time Zone Military UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_ADT" value="( tU32 ) - 3 * 3600 ">
				<comments desc="Atlantic Daylight Time North America UTC - 3 hours "/>
			</value>
			<value name="eTimeZone_AKDT" value="( tU32 ) - 8 * 3600 ">
				<comments desc="Alaska Daylight Time North America UTC - 8 hours "/>
			</value>
			<value name="eTimeZone_AKST" value="( tU32 ) - 9 * 3600 ">
				<comments desc="Alaska Standard Time North America UTC - 9 hours "/>
			</value>
			<value name="eTimeZone_AST" value="( tU32 ) - 4 * 3600 ">
				<comments desc="Atlantic Standard Time North America UTC - 4 hours "/>
			</value>
			<value name="eTimeZone_B" value="( tU32 ) + 2 * 3600 ">
				<comments desc="Bravo Time Zone Military UTC + 2 hours "/>
			</value>
			<value name="eTimeZone_BST" value="( tU32 ) + 1 * 3600 ">
				<comments desc="British Summer Time Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_C" value="( tU32 ) + 3 * 3600 ">
				<comments desc="Charlie Time Zone Military UTC + 3 hours "/>
			</value>
			<value name="eTimeZone_CDT" value="( tU32 ) - 5 * 3600 ">
				<comments desc="Central Daylight Time North America UTC - 5 hours "/>
			</value>
			<value name="eTimeZone_CEDT" value="( tU32 ) + 2 * 3600 ">
				<comments desc="Central European Daylight Time Europe UTC + 2 hours "/>
			</value>
			<value name="eTimeZone_CEST" value="( tU32 ) + 2 * 3600 ">
				<comments desc="Central European Summer Time Europe UTC + 2 hours "/>
			</value>
			<value name="eTimeZone_CET" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Central European Time Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_CST" value="( tU32 ) - 6 * 3600 ">
				<comments desc="Central Standard Time North America UTC - 6 hours "/>
			</value>
			<value name="eTimeZone_D" value="( tU32 ) + 4 * 3600 ">
				<comments desc="Delta Time Zone Military UTC + 4 hours "/>
			</value>
			<value name="eTimeZone_E" value="( tU32 ) + 5 * 3600 ">
				<comments desc="Echo Time Zone Military UTC + 5 hours "/>
			</value>
			<value name="eTimeZone_EDT" value="( tU32 ) - 4 * 3600 ">
				<comments desc="Eastern Daylight Time North America UTC - 4 hours "/>
			</value>
			<value name="eTimeZone_EEDT" value="( tU32 ) + 3 * 3600 ">
				<comments desc="Eastern European Daylight Time Europe UTC + 3 hours "/>
			</value>
			<value name="eTimeZone_EEST" value="( tU32 ) + 3 * 3600 ">
				<comments desc="Eastern European Summer Time Europe UTC + 3 hours "/>
			</value>
			<value name="eTimeZone_EET" value="( tU32 ) + 2 * 3600 ">
				<comments desc="Eastern European Time Europe UTC + 2 hours "/>
			</value>
			<value name="eTimeZone_EST" value="( tU32 ) - 5 * 3600 ">
				<comments desc="Eastern Standard Time North America UTC - 5 hours "/>
			</value>
			<value name="eTimeZone_F" value="( tU32 ) + 6 * 3600 ">
				<comments desc="Foxtrot Time Zone Military UTC + 6 hours "/>
			</value>
			<value name="eTimeZone_G" value="( tU32 ) + 7 * 3600 ">
				<comments desc="Golf Time Zone Military UTC + 7 hours "/>
			</value>
			<value name="eTimeZone_H" value="( tU32 ) + 8 * 3600 ">
				<comments desc="Hotel Time Zone Military UTC + 8 hours "/>
			</value>
			<value name="eTimeZone_HAA" value="( tU32 ) - 3 * 3600 ">
				<comments desc="Heure Avancee de l&apos;Atlantique North America UTC - 3 hours "/>
			</value>
			<value name="eTimeZone_HAC" value="( tU32 ) - 5 * 3600 ">
				<comments desc="Heure Avancee du Centre North America UTC - 5 hours "/>
			</value>
			<value name="eTimeZone_HADT" value="( tU32 ) - 9 * 3600 ">
				<comments desc="Hawaii-Aleutian Daylight Time North America UTC - 9 hours "/>
			</value>
			<value name="eTimeZone_HAE" value="( tU32 ) - 4 * 3600 ">
				<comments desc="Heure Avancee de l&apos;Est North America UTC - 4 hours "/>
			</value>
			<value name="eTimeZone_HAP" value="( tU32 ) - 7 * 3600 ">
				<comments desc="Heure Avancee du Pacifique North America UTC - 7 hours "/>
			</value>
			<value name="eTimeZone_HAR" value="( tU32 ) - 6 * 3600 ">
				<comments desc="Heure Avancee des Rocheuses North America UTC - 6 hours "/>
			</value>
			<value name="eTimeZone_HAST" value="( tU32 ) - 10 * 3600 - 1800 ">
				<comments desc="Hawaii-Aleutian Standard Time North America UTC - 10 hours "/>
			</value>
			<value name="eTimeZone_HAT" value="( tU32 ) - 2 * 3600 - 1800 ">
				<comments desc="Heure Avancee de Terre-Neuve North America UTC - 2:30 hours "/>
			</value>
			<value name="eTimeZone_HAY" value="( tU32 ) - 8 * 3600 ">
				<comments desc="Heure Avancee du Yukon North America UTC - 8 hours "/>
			</value>
			<value name="eTimeZone_HNA" value="( tU32 ) - 4 * 3600 ">
				<comments desc="Heure Normale de l&apos;Atlantique North America UTC - 4 hours "/>
			</value>
			<value name="eTimeZone_HNC" value="( tU32 ) - 6 * 3600 ">
				<comments desc="Heure Normale du Centre North America UTC - 6 hours "/>
			</value>
			<value name="eTimeZone_HNE" value="( tU32 ) - 5 * 3600 ">
				<comments desc="Heure Normale de l&apos;Est North America UTC - 5 hours "/>
			</value>
			<value name="eTimeZone_HNP" value="( tU32 ) - 8 * 3600 ">
				<comments desc="Heure Normale du Pacifique North America UTC - 8 hours "/>
			</value>
			<value name="eTimeZone_HNR" value="( tU32 ) - 7 * 3600 ">
				<comments desc="Heure Normale des Rocheuses North America UTC - 7 hours "/>
			</value>
			<value name="eTimeZone_HNT" value="( tU32 ) - 3 * 3600 - 1800 ">
				<comments desc="Heure Normale de Terre-Neuve North America UTC - 3:30 hours "/>
			</value>
			<value name="eTimeZone_HNY" value="( tU32 ) - 9 * 3600 ">
				<comments desc="Heure Normale du Yukon North America UTC - 9 hours "/>
			</value>
			<value name="eTimeZone_I" value="( tU32 ) + 9 * 3600 ">
				<comments desc="India Time Zone Military UTC + 9 hours "/>
			</value>
			<value name="eTimeZone_IST" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Irish Summer Time Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_K" value="( tU32 ) + 10 * 3600 ">
				<comments desc="Kilo Time Zone Military UTC + 10 hours "/>
			</value>
			<value name="eTimeZone_L" value="( tU32 ) + 11 * 3600 ">
				<comments desc="Lima Time Zone Military UTC + 11 hours "/>
			</value>
			<value name="eTimeZone_M" value="( tU32 ) + 12 * 3600 ">
				<comments desc="Mike Time Zone Military UTC + 12 hours "/>
			</value>
			<value name="eTimeZone_MDT" value="( tU32 ) - 6 * 3600 ">
				<comments desc="Mountain Daylight Time North America UTC - 6 hours "/>
			</value>
			<value name="eTimeZone_MESZ" value="( tU32 ) + 2 * 3600 ">
				<comments desc="Mitteleuroaische Sommerzeit Europe UTC + 2 hours "/>
			</value>
			<value name="eTimeZone_MEZ" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Mitteleuropaische Zeit Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_MST" value="( tU32 ) - 7 * 3600 ">
				<comments desc="Mountain Standard Time North America UTC - 7 hours "/>
			</value>
			<value name="eTimeZone_N" value="( tU32 ) - 1 * 3600 ">
				<comments desc="November Time Zone Military UTC - 1 hour "/>
			</value>
			<value name="eTimeZone_NDT" value="( tU32 ) - 2 * 3600 - 1800 ">
				<comments desc="Newfoundland Daylight Time North America UTC - 2:30 hours "/>
			</value>
			<value name="eTimeZone_NST" value="( tU32 ) - 3 * 3600 - 1800 ">
				<comments desc="Newfoundland Standard Time North America UTC - 3:30 hours "/>
			</value>
			<value name="eTimeZone_O" value="( tU32 ) - 2 * 3600 ">
				<comments desc="Oscar Time Zone Military UTC - 2 hours "/>
			</value>
			<value name="eTimeZone_P" value="( tU32 ) - 3 * 3600 ">
				<comments desc="Papa Time Zone Military UTC - 3 hours "/>
			</value>
			<value name="eTimeZone_PDT" value="( tU32 ) - 7 * 3600 ">
				<comments desc="Pacific Daylight Time North America UTC - 7 hours "/>
			</value>
			<value name="eTimeZone_PST" value="( tU32 ) - 8 * 3600 ">
				<comments desc="Pacific Standard Time North America UTC - 8 hours "/>
			</value>
			<value name="eTimeZone_Q" value="( tU32 ) - 4 * 3600 ">
				<comments desc="Quebec Time Zone Military UTC - 4 hours "/>
			</value>
			<value name="eTimeZone_R" value="( tU32 ) - 5 * 3600 ">
				<comments desc="Romeo Time Zone Military UTC - 5 hours "/>
			</value>
			<value name="eTimeZone_S" value="( tU32 ) - 6 * 3600 ">
				<comments desc="Sierra Time Zone Military UTC - 6 hours "/>
			</value>
			<value name="eTimeZone_T" value="( tU32 ) - 7 * 3600 ">
				<comments desc="Tango Time Zone Military UTC - 7 hours "/>
			</value>
			<value name="eTimeZone_U" value="( tU32 ) - 8 * 3600 ">
				<comments desc="Uniform Time Zone Military UTC - 8 hours "/>
			</value>
			<value name="eTimeZone_V" value="( tU32 ) - 9 * 3600 ">
				<comments desc="Victor Time Zone Military UTC - 9 hours "/>
			</value>
			<value name="eTimeZone_W" value="( tU32 ) - 10 * 3600 ">
				<comments desc="Whiskey Time Zone Military UTC - 10 hours "/>
			</value>
			<value name="eTimeZone_WEDT" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Western European Daylight Time Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_WEST" value="( tU32 ) + 1 * 3600 ">
				<comments desc="Western European Summer Time Europe UTC + 1 hour "/>
			</value>
			<value name="eTimeZone_X" value="( tU32 ) - 11 * 3600 ">
				<comments desc="X-ray Time Zone Military UTC - 11 hours "/>
			</value>
			<value name="eTimeZone_Y" value="( tU32 ) - 12 * 3600 ">
				<comments desc="Yankee Time Zone Military UTC - 12 hours "/>
			</value>
			<value name="eTimeZone_Z" value="( tU32 ) 0 ">
				<comments desc="Zulu Time Zone Military UTC "/>
			</value>
		</enum>
		<variable
			name="knTimeYearRange"
			type="const tI32"
			typec="const tI32"
			typei="ni::eTypeFlags_Constant|ni::eType_I32"
			value="2147000000"/>
		<variable
			name="knTimeSecsPerMinute"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="60"/>
		<variable
			name="knTimeMinPerHour"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="60"/>
		<variable
			name="knTimeSecsPerHour"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="knTimeMinPerHour*knTimeSecsPerMinute"/>
		<variable
			name="knTimeHoursPerDay"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="24"/>
		<variable
			name="knTimeMinPerDay"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="knTimeMinPerHour*knTimeHoursPerDay"/>
		<variable
			name="knTimeSecsPerDay"
			type="const tI64"
			typec="const tI64"
			typei="ni::eTypeFlags_Constant|ni::eType_I64"
			value="knTimeMinPerDay*knTimeSecsPerMinute"/>
		<interface name="iTime" uuid1="2B3E468B-96FC-4ABD-8694-4810B317D42D" uuid2="0x2b3e468b,0x96fc,0x4abd,0x86,0x94,0x48,0x10,0xb3,0x17,0xd4,0x2d">
			<comments desc="Time interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="updateFromCurrentSystemTime" name="UpdateFromCurrentSystemTime" num_parameters="0">
				<comments desc="Update the time class from the current system&apos;s time. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
			<method
				java_name="setYear"
				name="SetYear"
				num_parameters="1"
				property="set"
				property_name2="year"
				property_name="year">
				<comments desc="Set the year. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anYear"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getYear"
				name="GetYear"
				num_parameters="0"
				property="get"
				property_name2="year"
				property_name="year">
				<comments desc="Get the year. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				java_name="setMonth"
				name="SetMonth"
				num_parameters="1"
				property="set"
				property_name2="month"
				property_name="month">
				<comments desc="Set the month. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMonth"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getMonth"
				name="GetMonth"
				num_parameters="0"
				property="get"
				property_name2="month"
				property_name="month">
				<comments desc="Get the month. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method
				java_name="setDay"
				name="SetDay"
				num_parameters="1"
				property="set"
				property_name2="day"
				property_name="day">
				<comments desc="Set the day. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anDay"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getDay"
				name="GetDay"
				num_parameters="0"
				property="get"
				property_name2="day"
				property_name="day">
				<comments desc="Get the day. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getWeekday"
				name="GetWeekday"
				num_parameters="0"
				property="get"
				property_name2="weekday"
				property_name="weekday">
				<comments desc="Get the weekday. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method
				java_name="setHour"
				name="SetHour"
				num_parameters="1"
				property="set"
				property_name2="hour"
				property_name="hour">
				<comments desc="Set the hour. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anHour"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getHour"
				name="GetHour"
				num_parameters="0"
				property="get"
				property_name2="hour"
				property_name="hour">
				<comments desc="Get the hour. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method
				java_name="setMinute"
				name="SetMinute"
				num_parameters="1"
				property="set"
				property_name2="minute"
				property_name="minute">
				<comments desc="Set the minute. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anMinute"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getMinute"
				name="GetMinute"
				num_parameters="0"
				property="get"
				property_name2="minute"
				property_name="minute">
				<comments desc="Get the minute. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method
				java_name="setSecond"
				name="SetSecond"
				num_parameters="1"
				property="set"
				property_name2="second"
				property_name="second">
				<comments desc="Set the second. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anSecond"
					type="tU8"
					typec="tU8"
					typei="ni::eType_U8"/>
			</method>
			<method
				const="yes"
				java_name="getSecond"
				name="GetSecond"
				num_parameters="0"
				property="get"
				property_name2="second"
				property_name="second">
				<comments desc="Get the second. "/>
				<return type="tU8" typec="tU8" typei="ni::eType_U8"/>
			</method>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified time. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apTime"
					type="const iTime *"
					typec="const iTime*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Creates a clone of this time. "/>
				<return type="iTime *" typec="iTime*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="setDayLightSaving"
				name="SetDayLightSaving"
				num_parameters="1"
				property="set"
				property_name2="dayLightSaving"
				property_name="day_light_saving">
				<comments desc="Set whether the time contains day light saving. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="abDayLightSaving"
					type="ni::tBool"
					typec="ni::tBool"
					typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getDayLightSaving"
				name="GetDayLightSaving"
				num_parameters="0"
				property="get"
				property_name2="dayLightSaving"
				property_name="day_light_saving">
				<comments desc="Get whether the time contains day light saving. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				java_name="setTimeZone"
				name="SetTimeZone"
				num_parameters="1"
				property="set"
				property_name2="timeZone"
				property_name="time_zone">
				<comments desc="Set the time zone. ">
					<remark text="Offset from UTC in seconds. "/>
				</comments>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anTimeZone"
					type="tI32"
					typec="tI32"
					typei="ni::eType_I32"/>
			</method>
			<method
				const="yes"
				java_name="getTimeZone"
				name="GetTimeZone"
				num_parameters="0"
				property="get"
				property_name2="timeZone"
				property_name="time_zone">
				<comments desc="Get the time zone. ">
					<remark text="Offset from UTC in seconds. "/>
				</comments>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
			</method>
			<method
				java_name="setUnixTimeSecs"
				name="SetUnixTimeSecs"
				num_parameters="1"
				property="set"
				property_name2="unixTimeSecs"
				property_name="unix_time_secs">
				<comments desc="Set the time from the unix time. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
				<parameter
					last="1"
					name="anFmt"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="getUnixTimeSecs"
				name="GetUnixTimeSecs"
				num_parameters="0"
				property="get"
				property_name2="unixTimeSecs"
				property_name="unix_time_secs">
				<comments desc="Get the unix time. "/>
				<return type="tI64" typec="tI64" typei="ni::eType_I64"/>
			</method>
			<method
				const="yes"
				java_name="compare"
				name="Compare"
				num_parameters="1">
				<comments desc="Compare to another time object. " return="0 if equal, -1 if this is before apTime, +1 if this is after apTime, 2 if apTime is invalid. "/>
				<return type="tI32" typec="tI32" typei="ni::eType_I32"/>
				<parameter
					last="1"
					name="apTime"
					type="const iTime *"
					typec="const iTime*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="parseString" name="ParseString" num_parameters="2">
				<comments desc="Parse a time string. " return="This time object. ">
					<remark text="Parse format: %A Full weekday name. Ex: Thursday %b Abbreviated month name. Ex: Aug %B Full month name. Ex: August %d Day of the month, zero-padded (01-31). Ex: 23 %e Day of the month, space-padded ( 1-31). Ex: 23 %h Abbreviated month name (same as %b). Ex: Aug %H Hour in 24h format (00-23). Ex: 14 %I Hour in 12h format (01-12). Ex: 02 %j Day of the year (001-366). Ex: 235 %m Month as a decimal number (01-12). Ex: 08 %M Minute (00-59). Ex: 55 %n New-line character (&apos;\n&apos;). %t Horizontal-tab character (&apos;\t&apos;). %p AM or PM designation. Ex: PM %r 12-hour clock time. Ex: 02:55:02 pm %R 24-hour HH:MM time, equivalent to %H:%M. Ex: 14:55 %S Second (00-61). Ex: 02 %w Weekday as a decimal number with Sunday as 0 (0-6). Ex: 4 %y Year, last two digits (00-99). Ex: 01 %Y Year. Ex: 2001 %z An RFC-822/ISO 8601 standard timezone specification. Ex: Z (GMT), +08 (+8 hours), -0630 (-6hrs &amp; 30 minutes) %F ISO 8601 date format (YYYY-MM-DD), equivalent to %Y-%m-%d. Ex: 2016-08-03 %T ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S. Ex: 05:55:10 %% A % sign ISO8601 or NULL or empty string, ISO8601 date time format, equivalent to: %FT%T%z &amp; %Y-%m-%dT%H:%M:%S%z "/>
				</comments>
				<return type="iTime *" typec="iTime*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="szString"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="format"
				name="Format"
				num_parameters="1">
				<comments desc="Format time. ">
					<remark text="Format syntax: YYYY year 2011 YY year 99 M month 1 2 ... 30 31 MM month 01 02 ... 30 31 MMM month Mar MMMM month March D day of month 1 2 ... 30 31 Do day of month 1st 2nd ... 30th 31st DD day of month 01 02 ... 30 31 d day of week 0 1 ... 5 6 do day of week 0th 1st ... 5th 6th dd day of week Su ddd day of week Sun dddd day of week Sunday e day of week 0 1 ... 5 6 E day of week 1 2 ... 6 7 a am/pm marker am/pm A AM/PM marker AM/PM H hour(0-23) 16 HH hour(0-23) 06 h hour(1-12) 4 hh hour(1-12) 04 m minute 6 mm minute 06 s second 6 ss second 06 Z timezone -07:00 -06:00 ... +06:00 +07:00 ZZ timezone -0700 -0600 ... +0600 +0700 RFC1123 RFC1123 Wed, 16 Feb 2011 03:34:56 Z RFC850 RFC850 Wednesday, 16-Feb-11 03:34:56 Z ASCTIME ASCTIME Wed Feb 16 03:34:56 2011 ISO8601 or NULL or empty string, ISO8601, 2014-09-08T08:02:17-05:00 [text to include verbatim] "/>
				</comments>
				<return type="cString" typec="cString" typei="ni::eType_String"/>
				<parameter
					last="1"
					name="aszFormat"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="addSeconds" name="AddSeconds" num_parameters="1">
				<comments desc="Add seconds to this time. "/>
				<return type="iTime *" typec="iTime*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSeconds"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IToString.h.idl.xml">
		<enum name="eRawToStringEncoding">
			<comments desc=""/>
			<value name="eRawToStringEncoding_Hex" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eRawToStringEncoding_Base64" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eRawToStringEncoding_Base32" value="2 ">
				<comments desc=""/>
			</value>
		</enum>
		<interface name="iToString" uuid1="78B80893-3543-408E-AA0F-ACA5598C2D05" uuid2="0x78b80893,0x3543,0x408e,0xaa,0x0f,0xac,0xa5,0x59,0x8c,0x2d,0x05">
			<comments desc="iToString interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="toString"
				name="ToString"
				num_parameters="0">
				<comments desc="Convert the object to a string. "/>
				<return type="ni::cString" typec="ni::cString" typei="ni::eType_String"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IXml.h.idl.xml">
		<enum min_features="20" name="eXmlParserNodeType">
			<comments desc="Xml parser node types. "/>
			<value min_features="20" name="eXmlParserNodeType_ElementBegin" value="0 ">
				<comments desc="A xml element, like \&lt;foo&gt; "/>
			</value>
			<value min_features="20" name="eXmlParserNodeType_ElementEnd" value="1 ">
				<comments desc="End of an xml element, like \&lt;/foo&gt; "/>
			</value>
			<value min_features="20" name="eXmlParserNodeType_Text" value="2 ">
				<comments desc="Text within a xml element: \&lt;foo&gt; this is the text. \&lt;/foo&gt; "/>
			</value>
			<value min_features="20" name="eXmlParserNodeType_EmptyText" value="3 ">
				<comments desc="Empty Text within a xml element: \&lt;foo&gt; \&lt;/foo&gt; ">
					<remark text="Empty is text composed only of non-printable characters. "/>
				</comments>
			</value>
			<value min_features="20" name="eXmlParserNodeType_Comment" value="4 ">
				<comments desc="An xml comment like &amp;lt;!-- I am a comment --&amp;gt; or a DTD definition. "/>
			</value>
			<value min_features="20" name="eXmlParserNodeType_CDATA" value="5 ">
				<comments desc="An xml cdata section like &amp;lt;![CDATA[ this is some CDATA ]]&amp;gt; "/>
			</value>
		</enum>
		<interface
			min_features="20"
			name="iXmlParserSink"
			uuid1="061D5946-BB2F-4F8C-9B67-A5C342635971"
			uuid2="0x061d5946,0xbb2f,0x4f8c,0x9b,0x67,0xa5,0xc3,0x42,0x63,0x59,0x71">
			<comments desc="Xml parser sink interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				java_name="onXmlParserSink_Node"
				min_features="20"
				name="OnXmlParserSink_Node"
				num_parameters="2">
				<comments desc="Xml parser sink interface. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aType"
					type="eXmlParserNodeType"
					typec="eXmlParserNodeType"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aNameOrData"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="onXmlParserSink_Attribute"
				min_features="20"
				name="OnXmlParserSink_Attribute"
				num_parameters="2">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aName"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aValue"
					type="const ni::achar *"
					typec="const ni::achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/IZip.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/IZip.h.idl.xml">
		<interface name="iZipArchWrite" uuid1="50CF0914-0FFC-4085-BCE0-A361A601745D" uuid2="0x50cf0914,0x0ffc,0x4085,0xbc,0xe0,0xa3,0x61,0xa6,0x01,0x74,0x5d">
			<comments desc="Zip archive writer "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="addFileBlock" name="AddFileBlock" num_parameters="3">
				<comments desc="Adds a file block to the archive. " return="eTrue if successfull, else eFalse. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="aaszName"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aSize"
					type="tI64"
					typec="tI64"
					typei="ni::eType_I64"/>
			</method>
			<method
				java_name="addRawBlock"
				name="AddRawBlock"
				noautomation="yes"
				num_parameters="3">
				<comments desc="Adds a block of raw data as a file. " return="eTrue if successfull, else eFalse. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="aaszName" type="const achar *" typec="const achar*"/>
				<parameter name="apData" type="tPtr" typec="tPtr"/>
				<parameter
					last="1"
					name="aSize"
					type="tSize"
					typec="tSize"/>
			</method>
		</interface>
		<interface name="iZip" uuid1="6573D955-27B5-4FF0-9EB2-6BF8BF31C6D5" uuid2="0x6573d955,0x27b5,0x4ff0,0x9e,0xb2,0x6b,0xf8,0xbf,0x31,0xc6,0xd5">
			<comments desc="Zip interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="zipUncompressBuffer" name="ZipUncompressBuffer" num_parameters="4">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anDestSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipUncompressBufferInFile" name="ZipUncompressBufferInFile" num_parameters="4">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipUncompressFile" name="ZipUncompressFile" num_parameters="4">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anDestSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipUncompressFileInBuffer" name="ZipUncompressFileInBuffer" num_parameters="4">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anDestSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipInflateFileInBuffer" name="ZipInflateFileInBuffer" num_parameters="3">
				<comments desc=""/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anDestSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="zipCompressBuffer" name="ZipCompressBuffer" num_parameters="4">
				<comments desc="The destination buffer must be at least 20% bigger than the source. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipCompressBufferInFile" name="ZipCompressBufferInFile" num_parameters="4">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="tPtr"
					typec="tPtr"
					typei="ni::eType_Ptr"/>
				<parameter
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="zipCompressFile" name="ZipCompressFile" num_parameters="4">
				<comments desc=""/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apSrc"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="anSrcSize"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
				<parameter
					last="1"
					name="anLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="unzOpen"
				name="UnzOpen"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tHandle" typec="tHandle"/>
				<parameter
					last="1"
					name="apFile"
					type="ni::iFile *"
					typec="ni::iFile*"/>
			</method>
			<method
				java_name="unzClose"
				name="UnzClose"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzGetGlobalInfo"
				name="UnzGetGlobalInfo"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter
					last="1"
					name="pglobal_info"
					type="unz_global_info *"
					typec="unz_global_info*"/>
			</method>
			<method
				java_name="unzGetGlobalComment"
				name="UnzGetGlobalComment"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter
					last="1"
					name="strComment"
					type="cString &amp;"
					typec="cString&amp;"/>
			</method>
			<method
				java_name="unzGoToFirstFile"
				name="UnzGoToFirstFile"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzGoToNextFile"
				name="UnzGoToNextFile"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzLocateFile"
				name="UnzLocateFile"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter name="szFileName" type="const achar *" typec="const achar*"/>
				<parameter
					last="1"
					name="bCaseSensitivity"
					type="tBool"
					typec="tBool"/>
			</method>
			<method
				java_name="unzLocateFileInc"
				name="UnzLocateFileInc"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter name="num" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="pos"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="unzGetCurrentFileInfo"
				name="UnzGetCurrentFileInfo"
				noautomation="yes"
				num_parameters="5">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter name="pfile_info" type="unz_file_info *" typec="unz_file_info*"/>
				<parameter name="strFileName" type="cString &amp;" typec="cString&amp;"/>
				<parameter name="strExtraField" type="cString &amp;" typec="cString&amp;"/>
				<parameter
					last="1"
					name="strComment"
					type="cString &amp;"
					typec="cString&amp;"/>
			</method>
			<method
				java_name="unzOpenCurrentFile"
				name="UnzOpenCurrentFile"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter
					last="1"
					name="pwd"
					type="const achar *"
					typec="const achar*"/>
			</method>
			<method
				java_name="unzCloseCurrentFile"
				name="UnzCloseCurrentFile"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzReadCurrentFile"
				name="UnzReadCurrentFile"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter name="buf" type="tPtr" typec="tPtr"/>
				<parameter
					last="1"
					name="len"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="unztell"
				name="Unztell"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzeof"
				name="Unzeof"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="file"
					type="tHandle"
					typec="tHandle"/>
			</method>
			<method
				java_name="unzGetLocalExtrafield"
				name="UnzGetLocalExtrafield"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="file" type="tHandle" typec="tHandle"/>
				<parameter name="buf" type="tPtr" typec="tPtr"/>
				<parameter
					last="1"
					name="len"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="zlibVersion"
				name="ZlibVersion"
				noautomation="yes"
				num_parameters="0">
				<comments desc=""/>
				<return type="const achar *" typec="const achar*"/>
			</method>
			<method
				java_name="deflate"
				name="Deflate"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="flush"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="deflateEnd"
				name="DeflateEnd"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="inflate"
				name="Inflate"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="flush"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateEnd"
				name="InflateEnd"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="deflateSetDictionary"
				name="DeflateSetDictionary"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="dictionary" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="dictLength"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="deflateCopy"
				name="DeflateCopy"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="dest" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="source"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="deflateReset"
				name="DeflateReset"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="deflateParams"
				name="DeflateParams"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="level" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strategy"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="deflateTune"
				name="DeflateTune"
				noautomation="yes"
				num_parameters="5">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="good_length" type="tI32" typec="tI32"/>
				<parameter name="max_lazy" type="tI32" typec="tI32"/>
				<parameter name="nice_length" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="max_chain"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="deflateBound"
				name="DeflateBound"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="sourceLen"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="deflatePrime"
				name="DeflatePrime"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="bits" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="value"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="deflateSetHeader"
				name="DeflateSetHeader"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="head"
					type="gz_headerp"
					typec="gz_headerp"/>
			</method>
			<method
				java_name="inflateSetDictionary"
				name="InflateSetDictionary"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="dictionary" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="dictLength"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateSync"
				name="InflateSync"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="inflateCopy"
				name="InflateCopy"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="dest" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="source"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="inflateReset"
				name="InflateReset"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="inflatePrime"
				name="InflatePrime"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="bits" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="value"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateGetHeader"
				name="InflateGetHeader"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="head"
					type="gz_headerp"
					typec="gz_headerp"/>
			</method>
			<method
				java_name="inflateBack"
				name="InflateBack"
				noautomation="yes"
				num_parameters="5">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="aIn" type="zlib_in_func" typec="zlib_in_func"/>
				<parameter name="in_desc" type="void *" typec="void*"/>
				<parameter name="aOut" type="zlib_out_func" typec="zlib_out_func"/>
				<parameter
					last="1"
					name="out_desc"
					type="void *"
					typec="void*"/>
			</method>
			<method
				java_name="inflateBackEnd"
				name="InflateBackEnd"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="zlibCompileFlags"
				name="ZlibCompileFlags"
				noautomation="yes"
				num_parameters="0">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
			</method>
			<method
				java_name="compress"
				name="Compress"
				noautomation="yes"
				num_parameters="4">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="dest" type="tU8 *" typec="tU8*"/>
				<parameter name="destLen" type="tU32 *" typec="tU32*"/>
				<parameter name="source" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="sourceLen"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="compress2"
				name="Compress2"
				noautomation="yes"
				num_parameters="5">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="dest" type="tU8 *" typec="tU8*"/>
				<parameter name="destLen" type="tU32 *" typec="tU32*"/>
				<parameter name="source" type="const tU8 *" typec="const tU8*"/>
				<parameter name="sourceLen" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="level"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="compressBound"
				name="CompressBound"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="sourceLen"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="uncompress"
				name="Uncompress"
				noautomation="yes"
				num_parameters="4">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="dest" type="tU8 *" typec="tU8*"/>
				<parameter name="destLen" type="tU32 *" typec="tU32*"/>
				<parameter name="source" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="sourceLen"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				java_name="adler32"
				name="Adler32"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter name="adler" type="tU32" typec="tU32"/>
				<parameter name="buf" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="len"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="adler32Combine"
				name="Adler32Combine"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter name="adler1" type="tU32" typec="tU32"/>
				<parameter name="adler2" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="len2"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="crc32"
				name="Crc32"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter name="crc" type="tU32" typec="tU32"/>
				<parameter name="buf" type="const tU8 *" typec="const tU8*"/>
				<parameter
					last="1"
					name="len"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="crc32Combine"
				name="Crc32Combine"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tU32" typec="tU32"/>
				<parameter name="crc1" type="tU32" typec="tU32"/>
				<parameter name="crc2" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="len2"
					type="tSize"
					typec="tSize"/>
			</method>
			<method
				java_name="deflateInit"
				name="DeflateInit"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="level"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateInit"
				name="InflateInit"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strm"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="deflateInit2"
				name="DeflateInit2"
				noautomation="yes"
				num_parameters="6">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="level" type="tI32" typec="tI32"/>
				<parameter name="method" type="tI32" typec="tI32"/>
				<parameter name="windowBits" type="tI32" typec="tI32"/>
				<parameter name="memLevel" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="strategy"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateInit2"
				name="InflateInit2"
				noautomation="yes"
				num_parameters="2">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter
					last="1"
					name="windowBits"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateBackInit"
				name="InflateBackInit"
				noautomation="yes"
				num_parameters="3">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter name="strm" type="z_streamp" typec="z_streamp"/>
				<parameter name="windowBits" type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="window"
					type="tU8 *"
					typec="tU8*"/>
			</method>
			<method
				java_name="zerror"
				name="ZError"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="const achar *" typec="const achar*"/>
				<parameter
					last="1"
					name="err"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				java_name="inflateSyncPoint"
				name="InflateSyncPoint"
				noautomation="yes"
				num_parameters="1">
				<comments desc=""/>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="z"
					type="z_streamp"
					typec="z_streamp"/>
			</method>
			<method
				java_name="getCRCTable"
				name="GetCRCTable"
				noautomation="yes"
				num_parameters="0">
				<comments desc=""/>
				<return type="const tU32 *" typec="const tU32*"/>
			</method>
			<method java_name="createZipBufferEncoder" name="CreateZipBufferEncoder" num_parameters="1">
				<comments desc="Create a Zip buffer encoder. "/>
				<return type="iBufferEncoder *" typec="iBufferEncoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createZipBufferDecoder" name="CreateZipBufferDecoder" num_parameters="0">
				<comments desc="Create a Zip buffer decoder. "/>
				<return type="iBufferDecoder *" typec="iBufferDecoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileZipBufferEncoder" name="CreateFileZipBufferEncoder" num_parameters="2">
				<comments desc="Create a Zip buffer encoder file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBaseFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anCLevel"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method java_name="createFileZipBufferDecoder" name="CreateFileZipBufferDecoder" num_parameters="2">
				<comments desc="Create a Zip buffer decoder file. \see iLang::CreateFileBufferDecoder "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBaseFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aDecodedSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method java_name="createRawBufferEncoder" name="CreateRawBufferEncoder" num_parameters="0">
				<comments desc="Create a Raw buffer encoder. "/>
				<return type="iBufferEncoder *" typec="iBufferEncoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createRawBufferDecoder" name="CreateRawBufferDecoder" num_parameters="0">
				<comments desc="Create a Raw buffer decoder. "/>
				<return type="iBufferDecoder *" typec="iBufferDecoder*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileRawBufferEncoder" name="CreateFileRawBufferEncoder" num_parameters="1">
				<comments desc="Create a Raw buffer encoder file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apBaseFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method java_name="createFileRawBufferDecoder" name="CreateFileRawBufferDecoder" num_parameters="2">
				<comments desc="Create a Raw buffer decoder file. \see iLang::CreateFileBufferDecoder "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apBaseFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aDecodedSize"
					type="tSize"
					typec="tSize"
					typei="ni::eType_Size"/>
			</method>
			<method
				java_name="createZipArchive"
				min_features="15"
				name="CreateZipArchive"
				num_parameters="3">
				<comments desc="Create a new zip archive writter. "/>
				<return type="iZipArchWrite *" typec="iZipArchWrite*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apDest"
					type="iFile *"
					typec="iFile*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aaszPwd"
					type="const achar *"
					typec="const achar*"
					typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="apStoredExtensions"
					type="const tStringCVec *"
					typec="const tStringCVec*"
					typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				java_name="gzipOpen"
				min_features="15"
				name="GZipOpen"
				num_parameters="2">
				<comments desc="Open a file which can write or read directly in a zip file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aulCompressionMode"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				java_name="zipOpen"
				min_features="15"
				name="ZipOpen"
				num_parameters="2">
				<comments desc="Open a file which can write or read directly in a zip file. "/>
				<return type="iFile *" typec="iFile*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="apFile"
					type="iFileBase *"
					typec="iFileBase*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aulCompressionMode"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/ObjModel.h.idl.xml">
		<interface name="iObjectTypeDef" uuid1="C26D991E-E51F-4D84-866A-E77FAFD1B8E2" uuid2="0xc26d991e,0xe51f,0x4d84,0x86,0x6a,0xe7,0x7f,0xaf,0xd1,0xb8,0xe2">
			<comments desc="Object type definition interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0">
				<comments desc="Get the object type&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="createInstance"
				name="CreateInstance"
				num_parameters="2">
				<comments desc="Create an instance of the object. "/>
				<return type="iUnknown *" typec="iUnknown*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aVarA"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="aVarB"
					type="const Var &amp;"
					typec="const Var&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer"/>
			</method>
		</interface>
		<interface name="iModuleDef" uuid1="80463A66-FC9E-4490-AB81-00B9152C17F3" uuid2="0x80463a66,0xfc9e,0x4490,0xab,0x81,0x00,0xb9,0x15,0x2c,0x17,0xf3">
			<comments desc="Module definition interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method
				const="yes"
				java_name="getName"
				name="GetName"
				num_parameters="0">
				<comments desc="Get the module&apos;s name. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getVersion"
				name="GetVersion"
				num_parameters="0">
				<comments desc="Get the module&apos;s version. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getDesc"
				name="GetDesc"
				num_parameters="0">
				<comments desc="Get the module&apos;s description. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getAuthor"
				name="GetAuthor"
				num_parameters="0">
				<comments desc="Get the module&apos;s author. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getCopyright"
				name="GetCopyright"
				num_parameters="0">
				<comments desc="Get the module&apos;s copyright. "/>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getNumDependencies"
				name="GetNumDependencies"
				num_parameters="0">
				<comments desc="Get the number of dependencies. "/>
				<return type="const tU32" typec="const tU32" typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getDependency"
				name="GetDependency"
				num_parameters="1">
				<comments desc="Get the dependency at the given index. ">
					<remark text="The dependency are usually another module, but could be something else like only one interface, that&apos;s why it is stored as a string and not as a ModuleID. "/>
				</comments>
				<return type="const achar *" typec="const achar*" typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getNumInterfaces"
				name="GetNumInterfaces"
				num_parameters="0">
				<comments desc="Get the number of interfaces. "/>
				<return type="const tU32" typec="const tU32" typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getInterface"
				name="GetInterface"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Get the interface at the given index. "/>
				<return type="const sInterfaceDef *" typec="const sInterfaceDef*"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getNumEnums"
				name="GetNumEnums"
				num_parameters="0">
				<comments desc="Get the number of enumerations. "/>
				<return type="const tU32" typec="const tU32" typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getEnum"
				name="GetEnum"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Get the enumeration at the given index. "/>
				<return type="const sEnumDef *" typec="const sEnumDef*"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getNumConstants"
				name="GetNumConstants"
				num_parameters="0">
				<comments desc="Get the number of constants. "/>
				<return type="const tU32" typec="const tU32" typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getConstant"
				name="GetConstant"
				noautomation="yes"
				num_parameters="1">
				<comments desc="Get the constant at the given index. "/>
				<return type="const sConstantDef *" typec="const sConstantDef*"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"/>
			</method>
			<method
				const="yes"
				java_name="getNumObjectTypes"
				name="GetNumObjectTypes"
				num_parameters="0">
				<comments desc="Get the number of object types. "/>
				<return type="const tU32" typec="const tU32" typei="ni::eTypeFlags_Constant|ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getObjectType"
				name="GetObjectType"
				num_parameters="1">
				<comments desc="Get the object type at the given index, "/>
				<return type="const iObjectTypeDef *" typec="const iObjectTypeDef*" typei="ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					last="1"
					name="anIndex"
					type="tU32"
					typec="tU32"
					typei="ni::eType_U32"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/StringBase.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/StringDef.h.idl.xml"/>
	<namespace name="eastl" source="niLang/src/_idl/StringDef.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/StringLib.h.idl.xml">
		<enum name="eStrFindFlags">
			<comments desc="Str find flags "/>
			<value name="eStrFindFlags_Forward" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eStrFindFlags_Reversed" value="niBit ( 0 ) ">
				<comments desc=""/>
			</value>
			<value name="eStrFindFlags_ICmp" value="niBit ( 1 ) ">
				<comments desc=""/>
			</value>
			<value name="eStrFindFlags_ForwardI" value="eStrFindFlags_Forward|eStrFindFlags_ICmp ">
				<comments desc=""/>
			</value>
			<value name="eStrFindFlags_ReversedI" value="eStrFindFlags_Reversed|eStrFindFlags_ICmp ">
				<comments desc=""/>
			</value>
		</enum>
		<enum min_features="15" name="eUCPCategory">
			<comments desc="Unicode code point general character categories "/>
			<value min_features="15" name="eUCPCategory_Other" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Letter" value="1 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Mark" value="2 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Number" value="3 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Punctuation" value="4 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Symbol" value="5 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPCategory_Separator" value="6">
				<comments desc=""/>
			</value>
		</enum>
		<enum min_features="15" name="eUCPCharType">
			<comments desc="Unicode code point particular character types "/>
			<value min_features="15" name="eUCPCharType_Cc" value="0 ">
				<comments desc="Control "/>
			</value>
			<value min_features="15" name="eUCPCharType_Cf" value="1 ">
				<comments desc="Format "/>
			</value>
			<value min_features="15" name="eUCPCharType_Cn" value="2 ">
				<comments desc="Unassigned "/>
			</value>
			<value min_features="15" name="eUCPCharType_Co" value="3 ">
				<comments desc="Private use "/>
			</value>
			<value min_features="15" name="eUCPCharType_Cs" value="4 ">
				<comments desc="Surrogate "/>
			</value>
			<value min_features="15" name="eUCPCharType_Ll" value="5 ">
				<comments desc="Lower case letter "/>
			</value>
			<value min_features="15" name="eUCPCharType_Lm" value="6 ">
				<comments desc="Modifier letter "/>
			</value>
			<value min_features="15" name="eUCPCharType_Lo" value="7 ">
				<comments desc="Other letter "/>
			</value>
			<value min_features="15" name="eUCPCharType_Lt" value="8 ">
				<comments desc="Title case letter "/>
			</value>
			<value min_features="15" name="eUCPCharType_Lu" value="9 ">
				<comments desc="Upper case letter "/>
			</value>
			<value min_features="15" name="eUCPCharType_Mc" value="10 ">
				<comments desc="Spacing mark "/>
			</value>
			<value min_features="15" name="eUCPCharType_Me" value="11 ">
				<comments desc="Enclosing mark "/>
			</value>
			<value min_features="15" name="eUCPCharType_Mn" value="12 ">
				<comments desc="Non-spacing mark "/>
			</value>
			<value min_features="15" name="eUCPCharType_Nd" value="13 ">
				<comments desc="Decimal number "/>
			</value>
			<value min_features="15" name="eUCPCharType_Nl" value="14 ">
				<comments desc="Letter number "/>
			</value>
			<value min_features="15" name="eUCPCharType_No" value="15 ">
				<comments desc="Other number "/>
			</value>
			<value min_features="15" name="eUCPCharType_Pc" value="16 ">
				<comments desc="Connector punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Pd" value="17 ">
				<comments desc="Dash punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Pe" value="18 ">
				<comments desc="Close punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Pf" value="19 ">
				<comments desc="Final punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Pi" value="20 ">
				<comments desc="Initial punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Po" value="21 ">
				<comments desc="Other punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Ps" value="22 ">
				<comments desc="Open punctuation "/>
			</value>
			<value min_features="15" name="eUCPCharType_Sc" value="23 ">
				<comments desc="Currency symbol "/>
			</value>
			<value min_features="15" name="eUCPCharType_Sk" value="24 ">
				<comments desc="Modifier symbol "/>
			</value>
			<value min_features="15" name="eUCPCharType_Sm" value="25 ">
				<comments desc="Mathematical symbol "/>
			</value>
			<value min_features="15" name="eUCPCharType_So" value="26 ">
				<comments desc="Other symbol "/>
			</value>
			<value min_features="15" name="eUCPCharType_Zl" value="27 ">
				<comments desc="Line separator "/>
			</value>
			<value min_features="15" name="eUCPCharType_Zp" value="28 ">
				<comments desc="Paragraph separator "/>
			</value>
			<value min_features="15" name="eUCPCharType_Zs" value="29">
				<comments desc="Space separator "/>
			</value>
		</enum>
		<enum min_features="15" name="eUCPScript">
			<comments desc="Unicode code point script identifications "/>
			<value min_features="15" name="eUCPScript_Arabic" value="0 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Armenian" value="1 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Bengali" value="2 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Bopomofo" value="3 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Braille" value="4 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Buginese" value="5 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Buhid" value="6 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Canadian_Aboriginal" value="7 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Cherokee" value="8 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Common" value="9 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Coptic" value="10 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Cypriot" value="11 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Cyrillic" value="12 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Deseret" value="13 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Devanagari" value="14 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Ethiopic" value="15 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Georgian" value="16 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Glagolitic" value="17 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Gothic" value="18 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Greek" value="19 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Gujarati" value="20 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Gurmukhi" value="21 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Han" value="22 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Hangul" value="23 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Hanunoo" value="24 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Hebrew" value="25 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Hiragana" value="26 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Inherited" value="27 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Kannada" value="28 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Katakana" value="29 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Kharoshthi" value="30 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Khmer" value="31 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Lao" value="32 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Latin" value="33 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Limbu" value="34 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Linear_B" value="35 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Malayalam" value="36 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Mongolian" value="37 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Myanmar" value="38 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_New_Tai_Lue" value="39 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Ogham" value="40 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Old_Italic" value="41 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Old_Persian" value="42 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Oriya" value="43 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Osmanya" value="44 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Runic" value="45 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Shavian" value="46 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Sinhala" value="47 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Syloti_Nagri" value="48 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Syriac" value="49 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tagalog" value="50 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tagbanwa" value="51 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tai_Le" value="52 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tamil" value="53 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Telugu" value="54 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Thaana" value="55 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Thai" value="56 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tibetan" value="57 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Tifinagh" value="58 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Ugaritic" value="59 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Yi" value="60 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Balinese" value="61 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Cuneiform" value="62 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Nko" value="63 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Phags_Pa" value="64 ">
				<comments desc=""/>
			</value>
			<value min_features="15" name="eUCPScript_Phoenicia" value="65">
				<comments desc=""/>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/StringLibIt.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<enum name="">
			<comments desc=""/>
			<value name="eTrue" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eFalse" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eTrueInDebug" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eFalseInDebug" value="1 ">
				<comments desc=""/>
			</value>
		</enum>
		<variable
			name="kFeatures"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="niFeatures"/>
		<variable
			name="kTrue"
			type="niConstValue tBool"
			typec="niConstValue tBool"
			typei="ni::eType_I8"
			value="niTrue"/>
		<variable
			name="kFalse"
			type="niConstValue tBool"
			typec="niConstValue tBool"
			typei="ni::eType_I8"
			value="niFalse"/>
		<variable
			name="eInvalidHandle"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="niInvalidHandle"/>
		<variable
			name="kInvalidHandle"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="0xDEADBEEF"/>
		<variable
			name="kMaxI8"
			type="niConstValue tI8"
			typec="niConstValue tI8"
			typei="ni::eType_I8"
			value="niMaxI8"/>
		<variable
			name="kMinI8"
			type="niConstValue tI8"
			typec="niConstValue tI8"
			typei="ni::eType_I8"
			value="niMinI8"/>
		<variable
			name="kMaxU8"
			type="niConstValue tU8"
			typec="niConstValue tU8"
			typei="ni::eType_U8"
			value="niMaxU8"/>
		<variable
			name="kMinU8"
			type="niConstValue tU8"
			typec="niConstValue tU8"
			typei="ni::eType_U8"
			value="niMinU8"/>
		<variable
			name="kMaxI16"
			type="niConstValue tI16"
			typec="niConstValue tI16"
			typei="ni::eType_I16"
			value="niMaxI16"/>
		<variable
			name="kMinI16"
			type="niConstValue tI16"
			typec="niConstValue tI16"
			typei="ni::eType_I16"
			value="niMinI16"/>
		<variable
			name="kMaxU16"
			type="niConstValue tU16"
			typec="niConstValue tU16"
			typei="ni::eType_U16"
			value="niMaxU16"/>
		<variable
			name="kMinU16"
			type="niConstValue tU16"
			typec="niConstValue tU16"
			typei="ni::eType_U16"
			value="niMinU16"/>
		<variable
			name="kMaxI32"
			type="niConstValue tI32"
			typec="niConstValue tI32"
			typei="ni::eType_I32"
			value="niMaxI32"/>
		<variable
			name="kMinI32"
			type="niConstValue tI32"
			typec="niConstValue tI32"
			typei="ni::eType_I32"
			value="niMinI32"/>
		<variable
			name="kMaxU32"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="niMaxU32"/>
		<variable
			name="kMinU32"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="niMinU32"/>
		<variable
			name="kMaxI64"
			type="niConstValue tI64"
			typec="niConstValue tI64"
			typei="ni::eType_I64"
			value="niMaxI64"/>
		<variable
			name="kMinI64"
			type="niConstValue tI64"
			typec="niConstValue tI64"
			typei="ni::eType_I64"
			value="niMinI64"/>
		<variable
			name="kMaxU64"
			type="niConstValue tU64"
			typec="niConstValue tU64"
			typei="ni::eType_U64"
			value="niMaxU64"/>
		<variable
			name="kMinU64"
			type="niConstValue tU64"
			typec="niConstValue tU64"
			typei="ni::eType_U64"
			value="niMinU64"/>
		<variable
			name="kMaxF32"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niMaxF32"/>
		<variable
			name="kMinF32"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niMinF32"/>
		<variable
			name="kEpsilonF32"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niEpsilonF32"/>
		<variable
			name="kMaxExpF32"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niMaxExpF32"/>
		<variable
			name="kMinExpF32"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niMinExpF32"/>
		<variable
			name="kMaxF64"
			type="niConstValue tF64"
			typec="niConstValue tF64"
			typei="ni::eType_F64"
			value="niMaxF64"/>
		<variable
			name="kMinF64"
			type="niConstValue tF64"
			typec="niConstValue tF64"
			typei="ni::eType_F64"
			value="niMinF64"/>
		<variable
			name="kEpsilonF64"
			type="niConstValue tF64"
			typec="niConstValue tF64"
			typei="ni::eType_F64"
			value="niEpsilonF64"/>
		<variable
			name="kMaxExpF64"
			type="niConstValue tF64"
			typec="niConstValue tF64"
			typei="ni::eType_F64"
			value="niMaxExpF64"/>
		<variable
			name="kMinExpF64"
			type="niConstValue tF64"
			typec="niConstValue tF64"
			typei="ni::eType_F64"
			value="niMinExpF64"/>
		<variable
			name="knTypeStringMaxSizeInChar"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="32"/>
		<variable
			name="knUUIDSize"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="sizeof(tUUID)"/>
		<variable
			name="kuuidZero"
			type="niConstValue tUUID"
			typec="niConstValue tUUID"
			typei="ni::eType_UUID"
			value="{0x00000000,0x0000,0x0000,{0,0,0,0,0,0,0,0}}"/>
		<enum name="eTypeFlags">
			<comments desc="Type flags. "/>
			<value name="eTypeFlags_Constant" value="0x00000100 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_Pointer" value="0x00000200 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_Collectable" value="0x00000400 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_Numeric" value="0x00000800 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_FUNCPROTO" value="0x00001000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_STRING" value="0x00002000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_TABLE" value="0x00004000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_ARRAY" value="0x00008000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_USERDATA" value="0x00010000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_CLOSURE" value="0x00020000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_NATIVECLOSURE" value="0x00040000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_MethodOptional" value="0x00080000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_MethodSetter" value="0x00100000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_MethodGetter" value="0x00200000 ">
				<comments desc=""/>
			</value>
			<value name="eTypeFlags_MethodStatic" value="0x00400000 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eType">
			<comments desc="Base types enumeration. "/>
			<value name="eType_Null" value="0 ">
				<comments desc=""/>
			</value>
			<value name="eType_IUnknown" value="1 ">
				<comments desc=""/>
			</value>
			<value name="eType_FirstGroup4" value="0x10 ">
				<comments desc=""/>
			</value>
			<value name="eType_I8" value="eType_FirstGroup4+0 ">
				<comments desc=""/>
			</value>
			<value name="eType_U8" value="eType_FirstGroup4+1 ">
				<comments desc=""/>
			</value>
			<value name="eType_I16" value="eType_FirstGroup4+2 ">
				<comments desc=""/>
			</value>
			<value name="eType_U16" value="eType_FirstGroup4+3 ">
				<comments desc=""/>
			</value>
			<value name="eType_I32" value="eType_FirstGroup4+4 ">
				<comments desc=""/>
			</value>
			<value name="eType_U32" value="eType_FirstGroup4+5 ">
				<comments desc=""/>
			</value>
			<value name="eType_F32" value="eType_FirstGroup4+6 ">
				<comments desc=""/>
			</value>
			<value name="eType_AChar" value="eType_FirstGroup4+7 ">
				<comments desc=""/>
			</value>
			<value name="eType_LastGroup4" value="0x1F ">
				<comments desc=""/>
			</value>
			<value name="eType_FirstGroup8" value="0x20 ">
				<comments desc=""/>
			</value>
			<value name="eType_I64" value="eType_FirstGroup8+0 ">
				<comments desc=""/>
			</value>
			<value name="eType_U64" value="eType_FirstGroup8+1 ">
				<comments desc=""/>
			</value>
			<value name="eType_F64" value="eType_FirstGroup8+2 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec2f" value="eType_FirstGroup8+3 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec2i" value="eType_FirstGroup8+4 ">
				<comments desc=""/>
			</value>
			<value name="eType_LastGroup8" value="0x2F ">
				<comments desc=""/>
			</value>
			<value name="eType_FirstGroup12" value="0x30 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec3f" value="eType_FirstGroup12+0 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec3i" value="eType_FirstGroup12+1 ">
				<comments desc=""/>
			</value>
			<value name="eType_String" value="eType_FirstGroup12+2 ">
				<comments desc=""/>
			</value>
			<value name="eType_LastGroup12" value="0x3F ">
				<comments desc=""/>
			</value>
			<value name="eType_FirstGroup16" value="0x40 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec4f" value="eType_FirstGroup16+0 ">
				<comments desc=""/>
			</value>
			<value name="eType_Vec4i" value="eType_FirstGroup16+1 ">
				<comments desc=""/>
			</value>
			<value name="eType_UUID" value="eType_FirstGroup16+2 ">
				<comments desc=""/>
			</value>
			<value name="eType_LastGroup16" value="0x4F ">
				<comments desc=""/>
			</value>
			<value name="eType_FirstExtended" value="0x50 ">
				<comments desc=""/>
			</value>
			<value name="eType_Matrixf" value="eType_FirstExtended+0 ">
				<comments desc=""/>
			</value>
			<value name="eType_Variant" value="eType_FirstExtended+1 ">
				<comments desc=""/>
			</value>
			<value name="eType_LastExtended" value="0x7F ">
				<comments desc=""/>
			</value>
			<value name="eType_Enum" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_Ptr" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_Size" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_Offset" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_IntPtr" value="eType_I32 ">
				<comments desc=""/>
			</value>
			<value name="eType_UIntPtr" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_Int" value="eType_I32 ">
				<comments desc=""/>
			</value>
			<value name="eType_UInt" value="eType_U32 ">
				<comments desc=""/>
			</value>
			<value name="eType_ASZ" value="eType_AChar|eTypeFlags_Constant|eTypeFlags_Pointer ">
				<comments desc=""/>
			</value>
			<value name="eType_IUnknownPtr" value="eType_IUnknown|eTypeFlags_Pointer ">
				<comments desc=""/>
			</value>
		</enum>
		<variable
			name="knMaxSizeOfTypeRetByValue"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="64"/>
		<variable
			name="knTypeRawNumBits"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="7"/>
		<variable
			name="knTypeMask"
			type="niConstValue tU32"
			typec="niConstValue tU32"
			typei="ni::eType_U32"
			value="0xFF"/>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<enum name="eLogFlags">
			<comments desc="Log flags. "/>
			<value name="eLogFlags_Raw" value="niBit ( 0 ) ">
				<comments desc="Raw type, log the message as-is without any formatting. "/>
			</value>
			<value name="eLogFlags_Debug" value="niBit ( 1 ) ">
				<comments desc="Debug log. "/>
			</value>
			<value name="eLogFlags_Info" value="niBit ( 2 ) ">
				<comments desc="Info log. "/>
			</value>
			<value name="eLogFlags_Warning" value="niBit ( 3 ) ">
				<comments desc="Warning log. "/>
			</value>
			<value name="eLogFlags_Error" value="niBit ( 4 ) ">
				<comments desc="Error log. "/>
			</value>
			<value name="eLogFlags_All" value="0xFFFF ">
				<comments desc="All types. (max 16 bits) "/>
			</value>
			<value name="eLogFlags_FormatMSVC" value="niBit ( 16 ) ">
				<comments desc="Format as a MSVC error message. "/>
			</value>
			<value name="eLogFlags_NoCallbackOutput" value="niBit ( 17 ) ">
				<comments desc="Do not call the log callback. "/>
			</value>
			<value name="eLogFlags_NoRegularOutput" value="niBit ( 18 ) ">
				<comments desc="Do not output to the regular loggers, only the log callback can be called. "/>
			</value>
			<value name="eLogFlags_NoNewLine" value="niBit ( 19 ) ">
				<comments desc="If possible, do not append a new line. "/>
			</value>
			<value name="eLogFlags_Stdout" value="niBit ( 20 ) ">
				<comments desc="Outputs to stdout. Stderr is the default when not specified. "/>
			</value>
			<value name="eLogFlags_NoLogTypePrefix" value="niBit ( 21 ) ">
				<comments desc="Do not prefix with the log type. "/>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<variable
			name="kfE"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niEf"/>
		<variable
			name="kPi"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niPif"/>
		<variable
			name="kPi2"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niPi2f"/>
		<variable
			name="kPi4"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niPi4f"/>
		<variable
			name="k2Pi"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="ni2Pif"/>
		<variable
			name="k1ByPi"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="ni1ByPif"/>
		<variable
			name="kInfinity"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niMaxF32"/>
		<variable
			name="kEpsilon"
			type="niConstValue tF32"
			typec="niConstValue tF32"
			typei="ni::eType_F32"
			value="niEpsilon5"/>
		<variable
			name="kvec2fZero"
			type="niConstValue sVec2f"
			typec="niConstValue sVec2f"
			typei="ni::eType_Vec2f"
			value="{0,0}"/>
		<variable
			name="kvec2lZero"
			type="niConstValue sVec2i"
			typec="niConstValue sVec2i"
			typei="ni::eType_Vec2i"
			value="{0,0}"/>
		<variable
			name="kvec3fZero"
			type="niConstValue sVec3f"
			typec="niConstValue sVec3f"
			typei="ni::eType_Vec3f"
			value="{0,0,0}"/>
		<variable
			name="kvec3lZero"
			type="niConstValue sVec3i"
			typec="niConstValue sVec3i"
			typei="ni::eType_Vec3i"
			value="{0,0,0}"/>
		<variable
			name="kvec4fZero"
			type="niConstValue sVec4f"
			typec="niConstValue sVec4f"
			typei="ni::eType_Vec4f"
			value="{0,0,0,0}"/>
		<variable
			name="kvec4lZero"
			type="niConstValue sVec4i"
			typec="niConstValue sVec4i"
			typei="ni::eType_Vec4i"
			value="{0,0,0,0}"/>
		<variable
			name="kmtxfZero"
			type="niConstValue sMatrixf"
			typec="niConstValue sMatrixf"
			typei="ni::eType_Matrixf"
			value="{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}"/>
		<variable
			name="kmtxfIdentity"
			type="niConstValue sMatrixf"
			typec="niConstValue sMatrixf"
			typei="ni::eType_Matrixf"
			value="{1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}"/>
		<enum name="ePlaneType">
			<comments desc="Plane type. "/>
			<value name="ePlaneType_X" value="0 ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_YZ" value="ePlaneType_X ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_Y" value="1 ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_XZ" value="ePlaneType_Y ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_Z" value="2 ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_XY" value="ePlaneType_Z ">
				<comments desc=""/>
			</value>
			<value name="ePlaneType_NonAxial" value="3 ">
				<comments desc=""/>
			</value>
		</enum>
		<enum name="eQuatSlerp">
			<comments desc="Quat slerp mode "/>
			<value name="eQuatSlerp_Short" value="0 ">
				<comments desc="The rotation will be less than 180 degrees, default. "/>
			</value>
			<value name="eQuatSlerp_Long" value="1 ">
				<comments desc="Rotation will be greater than 180 degrees. "/>
			</value>
			<value name="eQuatSlerp_NoCorrection" value="2 ">
				<comments desc="No correction is applied to garantee either a short or long path when doing the slerp. "/>
			</value>
		</enum>
		<enum name="eRectCorners">
			<comments desc="Rect corners. "/>
			<value name="eRectCorners_TopLeft" value="niBit ( 0 ) ">
				<comments desc="Top left rectangle corner. "/>
			</value>
			<value name="eRectCorners_TopRight" value="niBit ( 1 ) ">
				<comments desc="Top right rectangle corner. "/>
			</value>
			<value name="eRectCorners_BottomRight" value="niBit ( 2 ) ">
				<comments desc="Bottom right rectangle corner. "/>
			</value>
			<value name="eRectCorners_BottomLeft" value="niBit ( 3 ) ">
				<comments desc="Bottom left rectangle corner. "/>
			</value>
			<value name="eRectCorners_Top" value="eRectCorners_TopLeft|eRectCorners_TopRight ">
				<comments desc="Top rectangle corners. "/>
			</value>
			<value name="eRectCorners_Right" value="eRectCorners_TopRight|eRectCorners_BottomRight ">
				<comments desc="Right rectangle corners. "/>
			</value>
			<value name="eRectCorners_Bottom" value="eRectCorners_BottomRight|eRectCorners_BottomLeft ">
				<comments desc="Bottom rectangle corners. "/>
			</value>
			<value name="eRectCorners_Left" value="eRectCorners_TopLeft|eRectCorners_BottomLeft ">
				<comments desc="Left rectangle corners, "/>
			</value>
			<value name="eRectCorners_All" value="eRectCorners_TopLeft|eRectCorners_TopRight|eRectCorners_BottomRight|eRectCorners_BottomLeft ">
				<comments desc="All rectangle corners. "/>
			</value>
		</enum>
		<enum name="eRectEdges">
			<comments desc="Rect edges. "/>
			<value name="eRectEdges_Top" value="niBit ( 0 ) ">
				<comments desc="Top rectangle edge. "/>
			</value>
			<value name="eRectEdges_Right" value="niBit ( 1 ) ">
				<comments desc="Right rectangle edge. "/>
			</value>
			<value name="eRectEdges_Bottom" value="niBit ( 2 ) ">
				<comments desc="Bottom rectangle edge. "/>
			</value>
			<value name="eRectEdges_Left" value="niBit ( 3 ) ">
				<comments desc="Left rectangle edge. "/>
			</value>
			<value name="eRectEdges_Vertical" value="eRectEdges_Left|eRectEdges_Right ">
				<comments desc="Vertical rectangle edges. "/>
			</value>
			<value name="eRectEdges_Horizontal" value="eRectEdges_Top|eRectEdges_Bottom ">
				<comments desc="Horizontal rectangle edges, "/>
			</value>
			<value name="eRectEdges_All" value="eRectEdges_Vertical|eRectEdges_Horizontal ">
				<comments desc="All rectangle edges. "/>
			</value>
		</enum>
		<enum name="eRectFrameFlags">
			<comments desc="Rect frame flags "/>
			<value name="eRectFrameFlags_TopEdge" value="niBit ( 0 ) ">
				<comments desc="Top rectangle edge. "/>
			</value>
			<value name="eRectFrameFlags_RightEdge" value="niBit ( 1 ) ">
				<comments desc="Right rectangle edge. "/>
			</value>
			<value name="eRectFrameFlags_BottomEdge" value="niBit ( 2 ) ">
				<comments desc="Bottom rectangle edge. "/>
			</value>
			<value name="eRectFrameFlags_LeftEdge" value="niBit ( 3 ) ">
				<comments desc="Left rectangle edge. "/>
			</value>
			<value name="eRectFrameFlags_TopLeftCorner" value="niBit ( 4 ) ">
				<comments desc="Top left corner. "/>
			</value>
			<value name="eRectFrameFlags_TopRightCorner" value="niBit ( 5 ) ">
				<comments desc="Top right corner. "/>
			</value>
			<value name="eRectFrameFlags_BottomLeftCorner" value="niBit ( 6 ) ">
				<comments desc="Top left corner. "/>
			</value>
			<value name="eRectFrameFlags_BottomRightCorner" value="niBit ( 7 ) ">
				<comments desc="Top left corner. "/>
			</value>
			<value name="eRectFrameFlags_Center" value="niBit ( 8 ) ">
				<comments desc="Center of the rectangle "/>
			</value>
			<value name="eRectFrameFlags_TopSide" value="eRectFrameFlags_TopEdge|eRectFrameFlags_TopLeftCorner|eRectFrameFlags_TopRightCorner ">
				<comments desc="Top side "/>
			</value>
			<value name="eRectFrameFlags_BottomSide" value="eRectFrameFlags_BottomEdge|eRectFrameFlags_BottomLeftCorner|eRectFrameFlags_BottomRightCorner ">
				<comments desc="Bottom side "/>
			</value>
			<value name="eRectFrameFlags_LeftSide" value="eRectFrameFlags_LeftEdge|eRectFrameFlags_TopLeftCorner|eRectFrameFlags_BottomLeftCorner ">
				<comments desc="Left side "/>
			</value>
			<value name="eRectFrameFlags_RightSide" value="eRectFrameFlags_RightEdge|eRectFrameFlags_TopRightCorner|eRectFrameFlags_BottomRightCorner ">
				<comments desc="Right side "/>
			</value>
			<value name="eRectFrameFlags_VerticalSides" value="eRectFrameFlags_LeftSide|eRectFrameFlags_RightSide ">
				<comments desc="Vertidcal sides "/>
			</value>
			<value name="eRectFrameFlags_HorizontalSides" value="eRectFrameFlags_TopSide|eRectFrameFlags_BottomSide ">
				<comments desc="Horizontal sides "/>
			</value>
			<value name="eRectFrameFlags_Edges" value="eRectFrameFlags_VerticalSides|eRectFrameFlags_HorizontalSides ">
				<comments desc="All edges "/>
			</value>
			<value name="eRectFrameFlags_All" value="eRectFrameFlags_VerticalSides|eRectFrameFlags_HorizontalSides|eRectFrameFlags_Center ">
				<comments desc="The all frame ">
					<remark text="Zero mean the all frame aswell "/>
				</comments>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<variable
			name="kNiCopyright"
			type="niConstValue achar * const"
			typec="niConstValue achar * const"
			typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"
			value="niCopyright"/>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<variable
			name="kbIsBigEndian"
			type="niConstValue tBool"
			typec="niConstValue tBool"
			typei="ni::eType_I8"
			value="niTrue"/>
		<variable
			name="kbIsLittleEndian"
			type="niConstValue tBool"
			typec="niConstValue tBool"
			typei="ni::eType_I8"
			value="niFalse"/>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<variable
			name="kiidIUnknown"
			type="niConstValue achar * const"
			typec="niConstValue achar * const"
			typei="ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer"
			value="_A(&quot;iUnknown&quot;)"/>
		<enum name="eListInterfacesFlags">
			<comments desc=""/>
			<value name="eListInterfacesFlags_All" value="0 ">
				<comments desc="List all interfaces "/>
			</value>
			<value name="eListInterfacesFlags_NoDynamic" value="niBit ( 1 ) ">
				<comments desc="Don&apos;t list &apos;dynamic&apos; interfaces (interfaces in sink that extend the object). "/>
			</value>
			<value name="eListInterfacesFlags_DynamicOnly" value="niBit ( 2 ) ">
				<comments desc="Only list &apos;dynamic&apos; interfaces (interfaces in sink that extend the object). ">
					<remark text="This needs to be implemented only for objects that do have dynamic interfaces. "/>
				</comments>
			</value>
		</enum>
		<interface
			name="iUnknown"
			noautomation="yes"
			uuid1="EC052841-18A0-46C1-AD8B-CBFE0657EC0E"
			uuid2="0xec052841,0x18a0,0x46c1,0xad,0x8b,0xcb,0xfe,0x06,0x57,0xec,0x0e">
			<comments desc="iUnknown interface ">
				<remark text="iUnknown is the base of all ni interfaces. It support reference counting and sanity check throught the IsOK() method. "/>
			</comments>
			<method
				const="yes"
				java_name="isOK"
				name="IsOK"
				num_parameters="0">
				<comments desc="Check if the object is valid. " return="niTrue if the object can be used. "/>
				<return type="tBool" typec="tBool"/>
			</method>
			<method java_name="addRef" name="AddRef" num_parameters="0">
				<comments desc="Signal that one more reference of the object has been created. " return="the new number of reference, or eInvalidHandle if the object is not reference counted. "/>
				<return type="tI32" typec="tI32"/>
			</method>
			<method java_name="release" name="Release" num_parameters="0">
				<comments desc="Release a reference of the object. " return="the new number of reference, or eInvalidHandle if the object is not reference counted. "/>
				<return type="tI32" typec="tI32"/>
			</method>
			<method java_name="deleteThis" name="DeleteThis" num_parameters="0">
				<comments desc="Bypass any reference counting and delete this object. "/>
				<return type="void" typec="void"/>
			</method>
			<method java_name="invalidate" name="Invalidate" num_parameters="0">
				<comments desc="Invalidate the object. ">
					<remark text="This method is called when the object is not valid anymore and can&apos;t be used anymore. "/>
					<remark text="This method has been added to make the objects garbage collector compatible. "/>
				</comments>
				<return type="void" typec="void"/>
			</method>
			<method java_name="queryInterface" name="QueryInterface" num_parameters="1">
				<comments desc="Query an interface. " return="NULL if the required interface cant be queried. "/>
				<return type="iUnknown *" typec="iUnknown*"/>
				<parameter
					last="1"
					name="aIID"
					type="const tUUID &amp;"
					typec="const tUUID&amp;"/>
			</method>
			<method
				const="yes"
				java_name="listInterfaces"
				name="ListInterfaces"
				num_parameters="2">
				<comments desc="Fill a UUID list containing the UUIDs of the implemented interfaces. "/>
				<return type="void" typec="void"/>
				<parameter name="apLst" type="iMutableCollection *" typec="iMutableCollection*"/>
				<parameter
					last="1"
					name="anFlags"
					type="tU32"
					typec="tU32"/>
			</method>
			<method java_name="setNumRefs" name="SetNumRefs" num_parameters="1">
				<comments desc="Set the reference counter directly. ">
					<remark text="This is, needless to say, dangerous and should be used only as a mean to bypass the hard reference counting when it&apos;s required. "/>
				</comments>
				<return type="tI32" typec="tI32"/>
				<parameter
					last="1"
					name="anNumRefs"
					type="tI32"
					typec="tI32"/>
			</method>
			<method
				const="yes"
				java_name="getNumRefs"
				name="GetNumRefs"
				num_parameters="0">
				<comments desc="Get the number of references to this object. "/>
				<return type="tI32" typec="tI32"/>
			</method>
		</interface>
		<interface
			name="iDispatch"
			noautomation="yes"
			uuid1="19E1E977-4249-4104-8087-A7D14B5A2621"
			uuid2="0x19e1e977,0x4249,0x4104,0x80,0x87,0xa7,0xd1,0x4b,0x5a,0x26,0x21">
			<comments desc="IDispatch interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="initializeMethods" name="InitializeMethods" num_parameters="2">
				<comments desc="Initialize the methods. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="apMethods" type="const sMethodDef * const *" typec="const sMethodDef* const*"/>
				<parameter
					last="1"
					name="anNumMethods"
					type="ni::tU32"
					typec="ni::tU32"/>
			</method>
			<method java_name="callMethod" name="CallMethod" num_parameters="5">
				<comments desc="Call the specified method. " return="niFalse if the method call failed, else niTrue. "/>
				<return type="tBool" typec="tBool"/>
				<parameter name="apMethodDef" type="const sMethodDef * const" typec="const sMethodDef* const"/>
				<parameter name="anMethodIndex" type="ni::tU32" typec="ni::tU32"/>
				<parameter name="apParameters" type="const Var *" typec="const Var*"/>
				<parameter name="anNumParameters" type="tU32" typec="tU32"/>
				<parameter
					last="1"
					name="apRet"
					type="Var *"
					typec="Var*"/>
			</method>
		</interface>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<variable
			name="eVMRet_OK"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="0"/>
		<variable
			name="eVMRet_InvalidArgCount"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-1"/>
		<variable
			name="eVMRet_InvalidMethod"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-2"/>
		<variable
			name="eVMRet_InvalidArg"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-3"/>
		<variable
			name="eVMRet_InvalidRet"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-4"/>
		<variable
			name="eVMRet_InvalidNullArg"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-5"/>
		<variable
			name="eVMRet_OutOfMemory"
			type="niConstValue tInt"
			typec="niConstValue tInt"
			typei="ni::eType_Int"
			value="-6"/>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml">
		<enum name="eFileAttrFlags">
			<comments desc="File attributes "/>
			<value name="eFileAttrFlags_File" value="niBit ( 0 ) ">
				<comments desc="File. "/>
			</value>
			<value name="eFileAttrFlags_Directory" value="niBit ( 1 ) ">
				<comments desc="Directory. "/>
			</value>
			<value name="eFileAttrFlags_Archive" value="niBit ( 3 ) ">
				<comments desc="Archive. "/>
			</value>
			<value name="eFileAttrFlags_ReadOnly" value="niBit ( 4 ) ">
				<comments desc="Read only. "/>
			</value>
			<value name="eFileAttrFlags_Hidden" value="niBit ( 5 ) ">
				<comments desc="Hidden attribute. "/>
			</value>
			<value name="eFileAttrFlags_System" value="niBit ( 6 ) ">
				<comments desc="System attribute. "/>
			</value>
			<value name="eFileAttrFlags_Virtual" value="niBit ( 7 ) ">
				<comments desc="The file is &apos;virtual&apos;, aka it is not stored in the standard OS&apos;s file system, most likely it is stored within an archive or a-like. "/>
			</value>
			<value name="eFileAttrFlags_Device" value="niBit ( 8 ) ">
				<comments desc="Device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceFixed" value="eFileAttrFlags_Device|niBit ( 15 ) ">
				<comments desc="Fixed device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceRemovable" value="eFileAttrFlags_Device|niBit ( 16 ) ">
				<comments desc="Removable device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceRAM" value="eFileAttrFlags_Device|niBit ( 17 ) ">
				<comments desc="RAM drive device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceRemote" value="eFileAttrFlags_Device|niBit ( 18 ) ">
				<comments desc="Remote device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceFloppy" value="eFileAttrFlags_Device|eFileAttrFlags_DeviceRemovable|niBit ( 19 ) ">
				<comments desc="Floppy device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceCDRom" value="eFileAttrFlags_Device|eFileAttrFlags_DeviceRemovable|niBit ( 20 ) ">
				<comments desc="CDRom device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved0" value="eFileAttrFlags_Device|niBit ( 21 ) ">
				<comments desc="Reserved0 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved1" value="eFileAttrFlags_Device|niBit ( 22 ) ">
				<comments desc="Reserved1 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved2" value="eFileAttrFlags_Device|niBit ( 23 ) ">
				<comments desc="Reserved2 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved3" value="eFileAttrFlags_Device|niBit ( 24 ) ">
				<comments desc="Reserved3 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved4" value="eFileAttrFlags_Device|niBit ( 25 ) ">
				<comments desc="Reserved4 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved5" value="eFileAttrFlags_Device|niBit ( 26 ) ">
				<comments desc="Reserved5 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved6" value="eFileAttrFlags_Device|niBit ( 27 ) ">
				<comments desc="Reserved6 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved7" value="eFileAttrFlags_Device|niBit ( 28 ) ">
				<comments desc="Reserved7 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved8" value="eFileAttrFlags_Device|niBit ( 29 ) ">
				<comments desc="Reserved8 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved9" value="eFileAttrFlags_Device|niBit ( 30 ) ">
				<comments desc="Reserved9 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_DeviceReserved10" value="eFileAttrFlags_Device|niBit ( 31 ) ">
				<comments desc="Reserved10 device attribute. "/>
			</value>
			<value name="eFileAttrFlags_All" value="eFileAttrFlags_File|eFileAttrFlags_Directory ">
				<comments desc="All. "/>
			</value>
			<value name="eFileAttrFlags_AllFiles" value="eFileAttrFlags_File ">
				<comments desc="All files. "/>
			</value>
			<value name="eFileAttrFlags_AllDirectories" value="eFileAttrFlags_Directory ">
				<comments desc="All directories. "/>
			</value>
		</enum>
		<enum name="eFileTime">
			<comments desc="File time. "/>
			<value name="eFileTime_Creation" value="0 ">
				<comments desc="Creation file time. "/>
			</value>
			<value name="eFileTime_LastAccess" value="1 ">
				<comments desc="Last access file time. "/>
			</value>
			<value name="eFileTime_LastWrite" value="2 ">
				<comments desc="Last write file time. "/>
			</value>
		</enum>
		<enum name="eFileOpenMode">
			<comments desc="File open mode. "/>
			<value name="eFileOpenMode_Read" value="niBit ( 0 ) ">
				<comments desc="Read open mode. "/>
			</value>
			<value name="eFileOpenMode_Write" value="niBit ( 1 ) ">
				<comments desc="Write open mode. "/>
			</value>
			<value name="eFileOpenMode_Append" value="niBit ( 2 ) |eFileOpenMode_Write ">
				<comments desc="Append open mode. "/>
			</value>
			<value name="eFileOpenMode_Random" value="niBit ( 3 ) ">
				<comments desc="Optimized form random access. "/>
			</value>
		</enum>
	</namespace>
	<namespace name="ni" source="niLang/src/_idl/Types.h.idl.xml"/>
	<namespace name="ni" source="niLang/src/_idl/Var.h.idl.xml"/>
</niIDL>