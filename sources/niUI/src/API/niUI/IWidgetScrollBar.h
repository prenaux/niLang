#ifndef __ISCROLLBARWIDGET_11975953_H__
#define __ISCROLLBARWIDGET_11975953_H__
// SPDX-FileCopyrightText: (c) 2022 The niLang Authors
// SPDX-License-Identifier: MIT
namespace ni {
/** \addtogroup niUI
 * @{
 */

//! Scroll bar style
enum eWidgetScrollBarStyle
{
  //! The scroll bar is a slider.
  eWidgetScrollBarStyle_Slider = niBit(eWidgetStyle_MaxBit+0),
  //! The scroll bar is horizontal.
  eWidgetScrollBarStyle_Horz = niBit(eWidgetStyle_MaxBit+1),
  //! The slider should be on the right. (On the left by default)
  //! \remark This affects only sliders.
  eWidgetScrollBarStyle_Right = niBit(eWidgetStyle_MaxBit+2),
  //! The slider should be on the bottom. (On top by default)
  //! \remark This affects only sliders.
  eWidgetScrollBarStyle_Bottom = niBit(eWidgetStyle_MaxBit+3),
  //! \internal
  eWidgetScrollBarStyle_ForceDWORD niMaybeUnused = 0xFFFFFFFF
};

//! Scroll bar commands
enum eWidgetScrollBarCmd
{
  //! The scroll bar has been scrolled.
  //! \param A previous scroll position.
  //! \param B true if generated by the mouse wheel, else false.
  eWidgetScrollBarCmd_Scrolled = 0,
  //! \internal
  eWidgetScrollBarCmd_ForceDWORD niMaybeUnused = 0xFFFFFFFF
};

//////////////////////////////////////////////////////////////////////////////////////////////
//! Scroll bar widget interface.
struct iWidgetScrollBar : public iUnknown
{
  niDeclareInterfaceUUID(iWidgetScrollBar,0x8ddd8646,0x8921,0x4760,0x8d,0xdc,0x2e,0x89,0x50,0x73,0x99,0xf2)
  //! Set the scroll bar range.
  //! {Property}
  virtual void __stdcall SetScrollRange(const sVec2f& avRange) = 0;
  //! Get the scroll bar range.
  //! {Property}
  virtual sVec2f __stdcall GetScrollRange() const = 0;
  //! Set the scroll bar position.
  //! {Property}
  virtual void __stdcall SetScrollPosition(tF32 afScrollPos) = 0;
  //! Get the scroll bar position.
  //! {Property}
  virtual tF32 __stdcall GetScrollPosition() const = 0;
  //! Set the normalized scroll bar position.
  //! {Property}
  virtual void __stdcall SetNormalizedScrollPosition(tF32 afScrollPos) = 0;
  //! Get the normalized scroll bar position.
  //! {Property}
  virtual tF32 __stdcall GetNormalizedScrollPosition() const = 0;
  //! Set the scroll bar page size.
  //! {Property}
  virtual void __stdcall SetPageSize(tF32 afPageSize) = 0;
  //! Get the scroll bar page size.
  //! {Property}
  virtual tF32 __stdcall GetPageSize() const = 0;
  //! Compute a position rounded by the page size in function of the scroll bar's flags.
  //! \remark This is to be used by slider bars with a set page/step size.
  virtual tF32 __stdcall ComputeRoundedPosition(tF32 afNewPos) const = 0;
};

/// EOF //////////////////////////////////////////////////////////////////////////////////////
/**@}*/
}
#endif // __ISCROLLBARWIDGET_11975953_H__
