<niIDL>
	<namespace name="ni">
		<enum name="eImageUsage">
			<comments desc="Image usage. "/>
			<value name="eImageUsage_Source" value="0 ">
				<comments desc="The usage is read-only to be used a source for rendering. ">
					<remark text="No dirty region is added. "/>
				</comments>
			</value>
			<value name="eImageUsage_Target" value="1 ">
				<comments desc="The usage is write-only to be used as a render target. Previous content is preserved. "/>
			</value>
			<value name="eImageUsage_DepthStencil" value="2 ">
				<comments desc="For GetTexture only, grabs the depth stencil for rendering. "/>
			</value>
			<value name="eImageUsage_TargetDiscard" value="3 ">
				<comments desc="The usage is write-only to be used as a render target. The whole content of the target is assumed to be overwritten and so no effort to keep the previous content is made. "/>
			</value>
		</enum>
		<interface name="iImage" uuid1="848A96E9-4B5C-43CF-9C61-A26DF54C7F07" uuid2="0x848a96e9,0x4b5c,0x43cf,0x9c,0x61,0xa2,0x6d,0xf5,0x4c,0x7f,0x07">
			<comments desc="Image interface. "/>
			<parents>
				<parent name="iUnknown"/>
			</parents>
			<method java_name="copy" name="Copy" num_parameters="1">
				<comments desc="Copy the specified image. ">
					<remark text="Copy the bitmap&apos;s content. "/>
				</comments>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
				<parameter
					last="1"
					name="apImage"
					type="iImage *"
					typec="iImage*"
					typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="clone"
				name="Clone"
				num_parameters="0">
				<comments desc="Clone this image. ">
					<remark text="Clone the bitmap&apos;s content. "/>
				</comments>
				<return type="iImage *" typec="iImage*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasBitmap"
				name="GetHasBitmap"
				num_parameters="0"
				property="get"
				property_name2="hasBitmap"
				property_name="has_bitmap">
				<comments desc="Get whether a bitmap is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabBitmap" name="GrabBitmap" num_parameters="2">
				<comments desc="Grab the image as a bitmap to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the bitmap&apos;s update from the texture. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iBitmap2D *" typec="iBitmap2D*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eImageUsage"
					typec="eImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getHasTexture"
				name="GetHasTexture"
				num_parameters="0"
				property="get"
				property_name2="hasTexture"
				property_name="has_texture">
				<comments desc="Get whether a texture is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method
				const="yes"
				java_name="getHasDepthStencil"
				name="GetHasDepthStencil"
				num_parameters="0"
				property="get"
				property_name2="hasDepthStencil"
				property_name="has_depth_stencil">
				<comments desc="Get whether a depth stencil is already initialized in the image. "/>
				<return type="tBool" typec="tBool" typei="ni::eType_I8"/>
			</method>
			<method java_name="grabTexture" name="GrabTexture" num_parameters="2">
				<comments desc="Grab the image as a texture to be used for some other operations. ">
					<remark text="This function only adds a dirty rectangles and manage the texture&apos;s update from the bitmap. "/>
					<remark text="Pass a Null rectangle to identity the whole image size. "/>
				</comments>
				<return type="iTexture *" typec="iTexture*" typei="ni::eType_IUnknown|ni::eTypeFlags_Pointer"/>
				<parameter
					name="aLock"
					type="eImageUsage"
					typec="eImageUsage"
					typei="ni::eType_Enum"/>
				<parameter
					last="1"
					name="aDirtyRect"
					type="const sRecti &amp;"
					typec="const sRecti&amp;"
					typei="ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer"/>
			</method>
			<method
				const="yes"
				java_name="getWidth"
				name="GetWidth"
				num_parameters="0"
				property="get"
				property_name2="width"
				property_name="width">
				<comments desc="Get the image&apos;s width. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getHeight"
				name="GetHeight"
				num_parameters="0"
				property="get"
				property_name2="height"
				property_name="height">
				<comments desc="Get the image&apos;s height. "/>
				<return type="tU32" typec="tU32" typei="ni::eType_U32"/>
			</method>
			<method
				const="yes"
				java_name="getSize"
				name="GetSize"
				num_parameters="0"
				property="get"
				property_name2="size"
				property_name="size">
				<comments desc="Get the image&apos;s size in a vec2f. "/>
				<return type="sVec2f" typec="sVec2f" typei="ni::eType_Vec2f"/>
			</method>
			<method java_name="recomputeBitmapMipmapsBeforeCopyToTexture" name="RecomputeBitmapMipmapsBeforeCopyToTexture" num_parameters="0">
				<comments desc="Indicate that the bitmap&apos;s mipmaps should be recomputed the next time the bitmap is copied to the texture. "/>
				<return type="void" typec="void" typei="ni::eType_Null"/>
			</method>
		</interface>
	</namespace>
</niIDL>