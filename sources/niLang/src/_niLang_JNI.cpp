/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include "stdafx.h"
#include "niLang_JNI.h"

#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;



static const char *ni_classNames[71] = {
        "ni/niLang/IBufferDecoder",
        "ni/niLang/IBufferEncoder",
        "ni/niLang/ICallback",
        "ni/niLang/ICollection",
        "ni/niLang/ICommandSink",
        "ni/niLang/IConcurrent",
        "ni/niLang/IConsole",
        "ni/niLang/IConsoleSink",
        "ni/niLang/ICrypto",
        "ni/niLang/ICryptoHash",
        "ni/niLang/ICryptoRand",
        "ni/niLang/IDataTable",
        "ni/niLang/IDataTableReadStack",
        "ni/niLang/IDataTableSink",
        "ni/niLang/IDataTableWriteStack",
        "ni/niLang/IDeviceResource",
        "ni/niLang/IDeviceResourceManager",
        "ni/niLang/IExecutor",
        "ni/niLang/IExpression",
        "ni/niLang/IExpressionContext",
        "ni/niLang/IExpressionURLResolver",
        "ni/niLang/IExpressionVariable",
        "ni/niLang/IFile",
        "ni/niLang/IFileBase",
        "ni/niLang/IFileEnumSink",
        "ni/niLang/IFileMemory",
        "ni/niLang/IFileSystem",
        "ni/niLang/IFileSystemEnumerator",
        "ni/niLang/IFuture",
        "ni/niLang/IFutureValue",
        "ni/niLang/IGameCtrl",
        "ni/niLang/IHString",
        "ni/niLang/IHStringCharIt",
        "ni/niLang/IIterator",
        "ni/niLang/IJsonParserSink",
        "ni/niLang/IJsonWriter",
        "ni/niLang/IJsonWriterSink",
        "ni/niLang/ILang",
        "ni/niLang/IMath",
        "ni/niLang/IMessageDesc",
        "ni/niLang/IMessageHandler",
        "ni/niLang/IMessageQueue",
        "ni/niLang/IModuleDef",
        "ni/niLang/IMutableCollection",
        "ni/niLang/IObjectTypeDef",
        "ni/niLang/IOSGraphicsAPI",
        "ni/niLang/IOSProcess",
        "ni/niLang/IOSProcessEnumSink",
        "ni/niLang/IOSProcessManager",
        "ni/niLang/IOSWindow",
        "ni/niLang/IOSWindowGeneric",
        "ni/niLang/IPCRE",
        "ni/niLang/IProf",
        "ni/niLang/IProfDraw",
        "ni/niLang/IRegex",
        "ni/niLang/IRunnable",
        "ni/niLang/IRunnableQueue",
        "ni/niLang/IScriptingHost",
        "ni/niLang/ISerializable",
        "ni/niLang/ISinkList",
        "ni/niLang/IStringTokenizer",
        "ni/niLang/ITime",
        "ni/niLang/IToString",
        "ni/niLang/IURLFileHandler",
        "ni/niLang/IXmlParserSink",
        "ni/niLang/IZip",
        "ni/niLang/IZipArchWrite",
        "ni/niLang/SEnumDef",
        "ni/niLang/SInterfaceDef",
        "ni/types/IUnknown",
        "ni/types/Pointer" };
static jclass ni_classes[71] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

JNIEXPORT jint JNICALL JNI_OnLoad_niLang(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnLoad(vm, (void**)&e, JNI_VERSION_1_4) == 0) {
        fprintf(stderr, "niJVM_OnLoad() failed !");
        return 0;
    }
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload_niLang(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnUnload(vm, (void**)&e, JNI_VERSION_1_4) != JNI_OK) {
        fprintf(stderr, "niJVM_OnUnload() failed !");
        return;
    }
    for (int i = 0; i < 71; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}

#if !defined niLib
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    return JNI_OnLoad_niLang(vm,reserved);
}
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {
    JNI_OnUnload_niLang(vm,reserved);
}
#endif // defined niLib

/// Forward declarations ///
niExportFunc(ni::iCommandSink*) NewJNIWrapper_ni_iCommandSink(JNIEnv* e, jobject o);
niExportFunc(ni::iConsoleSink*) NewJNIWrapper_ni_iConsoleSink(JNIEnv* e, jobject o);
niExportFunc(ni::iDataTableSink*) NewJNIWrapper_ni_iDataTableSink(JNIEnv* e, jobject o);
niExportFunc(ni::iExpressionURLResolver*) NewJNIWrapper_ni_iExpressionURLResolver(JNIEnv* e, jobject o);
niExportFunc(ni::iFileEnumSink*) NewJNIWrapper_ni_iFileEnumSink(JNIEnv* e, jobject o);
niExportFunc(ni::iGameCtrl*) NewJNIWrapper_ni_iGameCtrl(JNIEnv* e, jobject o);
niExportFunc(ni::iJsonParserSink*) NewJNIWrapper_ni_iJsonParserSink(JNIEnv* e, jobject o);
niExportFunc(ni::iJsonWriterSink*) NewJNIWrapper_ni_iJsonWriterSink(JNIEnv* e, jobject o);
niExportFunc(ni::iMessageHandler*) NewJNIWrapper_ni_iMessageHandler(JNIEnv* e, jobject o);
niExportFunc(ni::iOSProcessEnumSink*) NewJNIWrapper_ni_iOSProcessEnumSink(JNIEnv* e, jobject o);
niExportFunc(ni::iProfDraw*) NewJNIWrapper_ni_iProfDraw(JNIEnv* e, jobject o);
niExportFunc(ni::iScriptingHost*) NewJNIWrapper_ni_iScriptingHost(JNIEnv* e, jobject o);
niExportFunc(ni::iStringTokenizer*) NewJNIWrapper_ni_iStringTokenizer(JNIEnv* e, jobject o);
niExportFunc(ni::iURLFileHandler*) NewJNIWrapper_ni_iURLFileHandler(JNIEnv* e, jobject o);
niExportFunc(ni::iXmlParserSink*) NewJNIWrapper_ni_iXmlParserSink(JNIEnv* e, jobject o);

/// Methods declarations ///

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferDecoder_decodeBuffer(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iBufferDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer2 = p2 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p2, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->DecodeBuffer((ni::tPtr)pointer0, (ni::tSize)p1, (ni::tPtr)pointer2, (ni::tSize)p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferDecoder_decodeMarker(JNIEnv *e, jobject o) {
    ni::iBufferDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->DecodeMarker();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferDecoder_decodeMaxDestSize(JNIEnv *e, jobject o, jint p0) {
    ni::iBufferDecoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferDecoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->DecodeMaxDestSize(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IBufferDecoder_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBufferDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBufferDecoder>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iBufferDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IBufferDecoder_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBufferDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBufferDecoder>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iBufferDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferEncoder_encodeBuffer(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iBufferEncoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferEncoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer2 = p2 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p2, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->EncodeBuffer((ni::tPtr)pointer0, (ni::tSize)p1, (ni::tPtr)pointer2, (ni::tSize)p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferEncoder_encodeMarker(JNIEnv *e, jobject o) {
    ni::iBufferEncoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferEncoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->EncodeMarker();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IBufferEncoder_encodeMaxDestSize(JNIEnv *e, jobject o, jint p0) {
    ni::iBufferEncoder* pointer = niJVM_GetIUnknown(e,o,ni::iBufferEncoder);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->EncodeMaxDestSize(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IBufferEncoder_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iBufferEncoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBufferEncoder>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iBufferEncoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IBufferEncoder_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iBufferEncoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iBufferEncoder>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iBufferEncoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICallback_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCallback* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCallback>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iCallback), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICallback_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCallback* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCallback>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iCallback), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICallback_runCallback(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCallback* pointer = niJVM_GetIUnknown(e,o,ni::iCallback);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->RunCallback(var_0, var_1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICollection_contains(JNIEnv *e, jobject o, jobject p0) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Contains(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICollection_containsAll(JNIEnv *e, jobject o, jobject p0) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ContainsAll(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_find(JNIEnv *e, jobject o, jobject p0) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iIterator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Find(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iIterator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_get(JNIEnv *e, jobject o, jobject p0) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->Get(var_0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_getFirst(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetFirst();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICollection_getKeyType(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetKeyType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_getLast(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetLast();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICollection_getSize(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICollection_getValueType(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetValueType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICollection_isEmpty(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsEmpty();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_iterator(JNIEnv *e, jobject o) {
    ni::iCollection* pointer = niJVM_GetIUnknown(e,o,ni::iCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iIterator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Iterator();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iIterator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCollection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCollection>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iCollection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICollection_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCollection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCollection>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iCollection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICommandSink_getDescription(JNIEnv *e, jobject o) {
    ni::iCommandSink* pointer = niJVM_GetIUnknown(e,o,ni::iCommandSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDescription());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICommandSink_getName(JNIEnv *e, jobject o) {
    ni::iCommandSink* pointer = niJVM_GetIUnknown(e,o,ni::iCommandSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICommandSink_getNamespace(JNIEnv *e, jobject o) {
    ni::iCommandSink* pointer = niJVM_GetIUnknown(e,o,ni::iCommandSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetNamespace());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICommandSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iCommandSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iCommandSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iCommandSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICommandSink_onRun(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iCommandSink* pointer = niJVM_GetIUnknown(e,o,ni::iCommandSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iConsole* pointer1 = p1 == NULL ? NULL : (ni::iConsole*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnRun((const tStringCVec *)pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICommandSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCommandSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCommandSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iCommandSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICommandSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCommandSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCommandSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iCommandSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.ICommandSinkImpl
// Implement JNI Wrapper for ni::iCommandSink
struct JNI_ni_iCommandSink : public ni::cIUnknownImpl<iCommandSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetDescription;
  mutable jmethodID mmGetName;
  mutable jmethodID mmGetNamespace;
  mutable jmethodID mmOnRun;

  JNI_ni_iCommandSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iCommandSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetDescription -> ()Ljava/lang/String;
  virtual const ni::achar* __stdcall GetDescription() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iCommandSink,GetDescription,getDescription,"()Ljava/lang/String;",AZEROSTR);
    jvalue* args = NULL;
    jstring r = (jstring)e->CallObjectMethodA(mObject,mmGetDescription,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iCommandSink,GetDescription,getDescription,AZEROSTR);
    return niJVM_GetWrapperRetChars(e,r);
  }
  // Method: GetName -> ()Ljava/lang/String;
  virtual const ni::achar* __stdcall GetName() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iCommandSink,GetName,getName,"()Ljava/lang/String;",AZEROSTR);
    jvalue* args = NULL;
    jstring r = (jstring)e->CallObjectMethodA(mObject,mmGetName,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iCommandSink,GetName,getName,AZEROSTR);
    return niJVM_GetWrapperRetChars(e,r);
  }
  // Method: GetNamespace -> ()Ljava/lang/String;
  virtual const ni::achar* __stdcall GetNamespace() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iCommandSink,GetNamespace,getNamespace,"()Ljava/lang/String;",AZEROSTR);
    jvalue* args = NULL;
    jstring r = (jstring)e->CallObjectMethodA(mObject,mmGetNamespace,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iCommandSink,GetNamespace,getNamespace,AZEROSTR);
    return niJVM_GetWrapperRetChars(e,r);
  }
  // Method: OnRun -> (Lni/niLang/ICollection;Lni/niLang/IConsole;)Z
  virtual ni::tBool __stdcall OnRun(const tStringCVec * p0, ni::iConsole* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iCommandSink,OnRun,onRun,"(Lni/niLang/ICollection;Lni/niLang/IConsole;)Z",ni::eFalse);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iCollection), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iConsole), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnRun,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iCommandSink,OnRun,onRun,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iCommandSink*) NewJNIWrapper_ni_iCommandSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iCommandSink,e,o);
  return niNew JNI_ni_iCommandSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createExecutorCooperative(JNIEnv *e, jobject o, jlong p0, jint p1) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateExecutorCooperative(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createExecutorImmediate(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateExecutorImmediate();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createExecutorThreadPool(JNIEnv *e, jobject o, jint p0) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateExecutorThreadPool(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createFutureValue(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFutureValue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFutureValue();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iFutureValue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createMessageDesc(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jobject r = NULL;
    ni::Ptr<ni::iMessageDesc> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateMessageDesc(pointer0, p1, var_2, var_3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iMessageDesc), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createMessageQueue(JNIEnv *e, jobject o, jlong p0, jint p1) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iMessageQueue> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateMessageQueue(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iMessageQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_createRunnableQueue(JNIEnv *e, jobject o, jlong p0, jint p1) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iRunnableQueue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRunnableQueue(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iRunnableQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IConcurrent_getCurrentThreadID(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetCurrentThreadID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_getExecutorCPU(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExecutorCPU();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_getExecutorIO(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExecutorIO();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_getExecutorMain(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExecutorMain();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IConcurrent_getMainThreadID(JNIEnv *e, jobject o) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetMainThreadID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_getMessageQueue(JNIEnv *e, jobject o, jlong p0) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iMessageQueue> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMessageQueue(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iMessageQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iConcurrent* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConcurrent>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iConcurrent), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iConcurrent* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConcurrent>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iConcurrent), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConcurrent_queueMessage(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QueueMessage(pointer0, p1, var_2, var_3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConcurrent_sendMessage(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SendMessage(pointer0, p1, var_2, var_3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConcurrent_threadRun(JNIEnv *e, jobject o, jobject p0) {
    ni::iConcurrent* pointer = niJVM_GetIUnknown(e,o,ni::iConcurrent);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRunnable* pointer0 = p0 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iFuture> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ThreadRun(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iFuture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_addCommand(JNIEnv *e, jobject o, jobject p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCommandSink* pointer0 = p0 == NULL ? NULL : (ni::iCommandSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddCommand(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IConsole_addNamespace(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->AddNamespace(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_addVariable(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVariable(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_commandExists(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CommandExists(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IConsole_completeCommandLine(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->CompleteCommandLine(pointer0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IConsole_getCommandDescription(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetCommandDescription(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IConsole_getNumCommands(JNIEnv *e, jobject o) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumCommands();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsole_getSinkList(JNIEnv *e, jobject o) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tConsoleSinkLst * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSinkList();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(tConsoleSinkLst ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IConsole_getVariable(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetVariable(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IConsole_popAndRunAllCommands(JNIEnv *e, jobject o) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->PopAndRunAllCommands();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IConsole_popCommand(JNIEnv *e, jobject o) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->PopCommand());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_pushCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushCommand(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsole_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iConsole* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConsole>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iConsole), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsole_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iConsole* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConsole>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 6), &niGetInterfaceUUID(ni::iConsole), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_removeCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveCommand(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_removeNamespace(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveNamespace(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_removeVariable(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveVariable(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_runCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RunCommand(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsole_setVariable(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iConsole* pointer = niJVM_GetIUnknown(e,o,ni::iConsole);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetVariable(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsoleSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iConsoleSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iConsoleSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iConsoleSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IConsoleSink_onConsoleSink_1AfterRunCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsoleSink* pointer = niJVM_GetIUnknown(e,o,ni::iConsoleSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnConsoleSink_AfterRunCommand(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IConsoleSink_onConsoleSink_1AfterRunScript(JNIEnv *e, jobject o, jobject p0, jstring p1) {
    ni::iConsoleSink* pointer = niJVM_GetIUnknown(e,o,ni::iConsoleSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iScriptingHost* pointer0 = p0 == NULL ? NULL : (ni::iScriptingHost*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnConsoleSink_AfterRunScript(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsoleSink_onConsoleSink_1BeforeRunCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iConsoleSink* pointer = niJVM_GetIUnknown(e,o,ni::iConsoleSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnConsoleSink_BeforeRunCommand(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IConsoleSink_onConsoleSink_1BeforeRunScript(JNIEnv *e, jobject o, jobject p0, jstring p1) {
    ni::iConsoleSink* pointer = niJVM_GetIUnknown(e,o,ni::iConsoleSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iScriptingHost* pointer0 = p0 == NULL ? NULL : (ni::iScriptingHost*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnConsoleSink_BeforeRunScript(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IConsoleSink_onConsoleSink_1NamespaceVariableChanged(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iConsoleSink* pointer = niJVM_GetIUnknown(e,o,ni::iConsoleSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnConsoleSink_NamespaceVariableChanged(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsoleSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iConsoleSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConsoleSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iConsoleSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IConsoleSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iConsoleSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iConsoleSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iConsoleSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IConsoleSinkImpl
// Implement JNI Wrapper for ni::iConsoleSink
struct JNI_ni_iConsoleSink : public ni::cIUnknownImpl<iConsoleSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnConsoleSink_AfterRunCommand;
  mutable jmethodID mmOnConsoleSink_AfterRunScript;
  mutable jmethodID mmOnConsoleSink_BeforeRunCommand;
  mutable jmethodID mmOnConsoleSink_BeforeRunScript;
  mutable jmethodID mmOnConsoleSink_NamespaceVariableChanged;

  JNI_ni_iConsoleSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iConsoleSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnConsoleSink_AfterRunCommand -> (Ljava/lang/String;)V
  virtual void __stdcall OnConsoleSink_AfterRunCommand(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iConsoleSink,OnConsoleSink_AfterRunCommand,onConsoleSink_AfterRunCommand,"(Ljava/lang/String;)V",;);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    e->CallVoidMethodA(mObject,mmOnConsoleSink_AfterRunCommand,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iConsoleSink,OnConsoleSink_AfterRunCommand,onConsoleSink_AfterRunCommand,;);
  }
  // Method: OnConsoleSink_AfterRunScript -> (Lni/niLang/IScriptingHost;Ljava/lang/String;)V
  virtual void __stdcall OnConsoleSink_AfterRunScript(ni::iScriptingHost* p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iConsoleSink,OnConsoleSink_AfterRunScript,onConsoleSink_AfterRunScript,"(Lni/niLang/IScriptingHost;Ljava/lang/String;)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    e->CallVoidMethodA(mObject,mmOnConsoleSink_AfterRunScript,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iConsoleSink,OnConsoleSink_AfterRunScript,onConsoleSink_AfterRunScript,;);
  }
  // Method: OnConsoleSink_BeforeRunCommand -> (Ljava/lang/String;)Z
  virtual ni::tBool __stdcall OnConsoleSink_BeforeRunCommand(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iConsoleSink,OnConsoleSink_BeforeRunCommand,onConsoleSink_BeforeRunCommand,"(Ljava/lang/String;)Z",ni::eFalse);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnConsoleSink_BeforeRunCommand,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iConsoleSink,OnConsoleSink_BeforeRunCommand,onConsoleSink_BeforeRunCommand,ni::eFalse);
    return r;
  }
  // Method: OnConsoleSink_BeforeRunScript -> (Lni/niLang/IScriptingHost;Ljava/lang/String;)Z
  virtual ni::tBool __stdcall OnConsoleSink_BeforeRunScript(ni::iScriptingHost* p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iConsoleSink,OnConsoleSink_BeforeRunScript,onConsoleSink_BeforeRunScript,"(Lni/niLang/IScriptingHost;Ljava/lang/String;)Z",ni::eFalse);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnConsoleSink_BeforeRunScript,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iConsoleSink,OnConsoleSink_BeforeRunScript,onConsoleSink_BeforeRunScript,ni::eFalse);
    return r;
  }
  // Method: OnConsoleSink_NamespaceVariableChanged -> (Ljava/lang/String;Ljava/lang/String;)V
  virtual void __stdcall OnConsoleSink_NamespaceVariableChanged(const ni::achar* p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iConsoleSink,OnConsoleSink_NamespaceVariableChanged,onConsoleSink_NamespaceVariableChanged,"(Ljava/lang/String;Ljava/lang/String;)V",;);
    jvalue args[2];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    e->CallVoidMethodA(mObject,mmOnConsoleSink_NamespaceVariableChanged,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iConsoleSink,OnConsoleSink_NamespaceVariableChanged,onConsoleSink_NamespaceVariableChanged,;);
  }
};
niExportFunc(ni::iConsoleSink*) NewJNIWrapper_ni_iConsoleSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iConsoleSink,e,o);
  return niNew JNI_ni_iConsoleSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICrypto_createRand(JNIEnv *e, jobject o) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCryptoRand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRand();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iCryptoRand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICrypto_digest(JNIEnv *e, jobject o, jstring p0, jstring p1, jint p2) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->Digest(pointer0, pointer1, (eRawToStringEncoding)p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICrypto_digestFile(JNIEnv *e, jobject o, jobject p0, jint p1, jstring p2, jint p3) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->DigestFile(pointer0, (ni::tSize)p1, pointer2, (eRawToStringEncoding)p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICrypto_digestRaw(JNIEnv *e, jobject o, jobject p0, jint p1, jstring p2, jint p3) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->DigestRaw((ni::tPtr)pointer0, (ni::tSize)p1, pointer2, (eRawToStringEncoding)p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICrypto_getRand(JNIEnv *e, jobject o) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCryptoRand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRand();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iCryptoRand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICrypto_hmacSignature(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2, jint p3, jstring p4, jint p5) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    const char *pointer4 = p4 == NULL ? NULL : e->GetStringUTFChars(p4, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->HmacSignature(pointer0, pointer1, pointer2, (ni::tSize)p3, pointer4, (ni::eRawToStringEncoding)p5);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p4 != NULL) e->ReleaseStringUTFChars(p4, pointer4);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICrypto_kdfcrypt(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->KDFCrypt(pointer0, pointer1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICrypto_kdfgenSaltBlowfish(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCryptoRand* pointer0 = p0 == NULL ? NULL : (ni::iCryptoRand*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->KDFGenSaltBlowfish(pointer0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICrypto_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCrypto* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCrypto>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iCrypto), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICrypto_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCrypto* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCrypto>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 8), &niGetInterfaceUUID(ni::iCrypto), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICrypto_sigVerify(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iCrypto* pointer = niJVM_GetIUnknown(e,o,ni::iCrypto);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SigVerify(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICryptoHash_finalFile(JNIEnv *e, jobject o, jobject p0) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->FinalFile(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICryptoHash_finalRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->FinalRaw((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICryptoHash_finalString(JNIEnv *e, jobject o, jint p0) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->FinalString((eRawToStringEncoding)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICryptoHash_getDigestSize(JNIEnv *e, jobject o) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetDigestSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ICryptoHash_getHashType(JNIEnv *e, jobject o) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetHashType());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICryptoHash_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCryptoHash* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCryptoHash>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iCryptoHash), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICryptoHash_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCryptoHash* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCryptoHash>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 9), &niGetInterfaceUUID(ni::iCryptoHash), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoHash_restart(JNIEnv *e, jobject o) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Restart();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoHash_update(JNIEnv *e, jobject o, jobject p0, jlong p1) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoHash_updateBlock(JNIEnv *e, jobject o, jobject p0, jlong p1, jlong p2) {
    ni::iCryptoHash* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoHash);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateBlock(pointer0, p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICryptoRand_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCryptoRand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCryptoRand>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iCryptoRand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICryptoRand_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCryptoRand* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCryptoRand>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 10), &niGetInterfaceUUID(ni::iCryptoRand), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICryptoRand_randFile(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->RandFile(pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_ICryptoRand_randFloat(JNIEnv *e, jobject o) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->RandFloat();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_ICryptoRand_randInt(JNIEnv *e, jobject o) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->RandInt();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ICryptoRand_randRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->RandRaw((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ICryptoRand_randUUID(JNIEnv *e, jobject o) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewUUID(e,pointer->RandUUID());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoRand_reseed(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Reseed(pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoRand_reseedRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReseedRaw((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ICryptoRand_setEntropyLength(JNIEnv *e, jobject o, jint p0) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEntropyLength((ni::tSize)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ICryptoRand_setPredictionResistance(JNIEnv *e, jobject o, jboolean p0) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPredictionResistance(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ICryptoRand_setReseedInterval(JNIEnv *e, jobject o, jint p0) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetReseedInterval((ni::tInt)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoRand_update(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update(pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ICryptoRand_updateRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iCryptoRand* pointer = niJVM_GetIUnknown(e,o,ni::iCryptoRand);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateRaw((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_addChild(JNIEnv *e, jobject o, jobject p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddChild(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_clear(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_clearChildren(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearChildren();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_clearProperties(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ClearProperties();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_clone(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_cloneEx(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CloneEx(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_copy(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_getBool(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetBool(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_getBoolDefault(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetBoolDefault(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_getBoolFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetBoolFromIndex(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getChild(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChild(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getChildFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetChildFromIndex(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getChildIndex(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetChildIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getCol3(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCol3(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getCol3FromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCol3FromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getCol4(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCol4(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getCol4FromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCol4FromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getEnum(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetEnum(pointer0, pointer1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getEnumDefault(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2, jint p3) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetEnumDefault(pointer0, pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getEnumFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetEnumFromIndex(p0, pointer1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IDataTable_getFloat(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloat(pointer0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IDataTable_getFloatDefault(JNIEnv *e, jobject o, jstring p0, jdouble p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloatDefault(pointer0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IDataTable_getFloatFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloatFromIndex(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_getHasSink(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasSink();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getHString(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHString(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getHStringDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHStringDefault(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getHStringFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHStringFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getIndex(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IDataTable_getInt(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetInt(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IDataTable_getIntDefault(JNIEnv *e, jobject o, jstring p0, jlong p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetIntDefault(pointer0, p1);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IDataTable_getIntFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetIntFromIndex(p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getIUnknown(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIUnknown(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getIUnknownDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIUnknownDefault(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getIUnknownFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIUnknownFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getMatrix(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getMatrixDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrixDefault(pointer0, niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getMatrixFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrixFromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getMetadata(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMetadata(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getMetadataFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMetadataFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTable_getName(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getNextSibling(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetNextSibling();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getNumChildren(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChildren();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getNumProperties(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumProperties();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getParent(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParent();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getPrevSibling(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPrevSibling();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getPropertyIndex(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPropertyIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTable_getPropertyName(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetPropertyName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getPropertyType(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eDataTablePropertyType rvalue = pointer->GetPropertyType(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_getPropertyTypeFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eDataTablePropertyType rvalue = pointer->GetPropertyTypeFromIndex(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getRawVar(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetRawVar(pointer0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getRawVarDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetRawVarDefault(pointer0, var_1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getRawVarFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetRawVarFromIndex(p0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getRoot(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRoot();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getSinkList(JNIEnv *e, jobject o) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tDataTableSinkLst * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSinkList();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(tDataTableSinkLst ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTable_getString(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetString(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTable_getStringDefault(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetStringDefault(pointer0, pointer1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTable_getStringFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetStringFromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVar(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetVar(pointer0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVarDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetVarDefault(pointer0, var_1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVarFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetVarFromIndex(p0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVarFromPath(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetVarFromPath(pointer0, var_1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec2(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec2Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2Default(pointer0, niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec2FromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2FromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec3(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec3Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3Default(pointer0, niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec3FromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3FromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec4(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec4Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4Default(pointer0, niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_getVec4FromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4FromIndex(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_hasProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_newVarFromPath(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->NewVarFromPath(pointer0, var_1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_removeChild(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveChild(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_removeProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_removePropertyFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemovePropertyFromIndex(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setBool(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetBool(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setBoolFromIndex(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBoolFromIndex(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setEnum(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2, jint p3) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetEnum(pointer0, pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setEnumFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2, jint p3) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    NI_JVM_CPP_TRY {
        pointer->SetEnumFromIndex(p0, pointer1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setFloat(JNIEnv *e, jobject o, jstring p0, jdouble p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetFloat(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setFloatFromIndex(JNIEnv *e, jobject o, jint p0, jdouble p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFloatFromIndex(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setHString(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetHString(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setHStringFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetHStringFromIndex(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setInt(JNIEnv *e, jobject o, jstring p0, jlong p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetInt(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setIntFromIndex(JNIEnv *e, jobject o, jint p0, jlong p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIntFromIndex(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setIUnknown(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetIUnknown(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setIUnknownFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIUnknownFromIndex(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setMatrix(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetMatrix(pointer0, niJVM_GetMatrixf(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setMatrixFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrixFromIndex(p0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_setMetadata(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMetadata(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_setMetadataFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMetadataFromIndex(p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setName(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setRawVar(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetRawVar(pointer0, var_1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setRawVarFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    NI_JVM_CPP_TRY {
        pointer->SetRawVarFromIndex(p0, var_1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setString(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetString(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setStringFromIndex(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStringFromIndex(p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setVar(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetVar(pointer0, var_1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setVarFromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    NI_JVM_CPP_TRY {
        pointer->SetVarFromIndex(p0, var_1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTable_setVarFromPath(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetVarFromPath(pointer0, var_1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setVec2(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetVec2(pointer0, niJVM_GetVec2f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setVec2FromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec2FromIndex(p0, niJVM_GetVec2f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setVec3(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetVec3(pointer0, niJVM_GetVec3f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setVec3FromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec3FromIndex(p0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTable_setVec4(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->SetVec4(pointer0, niJVM_GetVec4f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTable_setVec4FromIndex(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iDataTable* pointer = niJVM_GetIUnknown(e,o,ni::iDataTable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec4FromIndex(p0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_getBool(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetBool(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_getBoolDefault(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetBoolDefault(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getCol3(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetCol3(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getCol4(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetCol4(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTableReadStack_getEnum(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetEnum(pointer0, pointer1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTableReadStack_getEnumDefault(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2, jint p3) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetEnumDefault(pointer0, pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IDataTableReadStack_getFloat(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloat(pointer0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IDataTableReadStack_getFloatDefault(JNIEnv *e, jobject o, jstring p0, jdouble p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloatDefault(pointer0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getHString(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHString(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getHStringDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHStringDefault(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IDataTableReadStack_getInt(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetInt(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IDataTableReadStack_getIntDefault(JNIEnv *e, jobject o, jstring p0, jlong p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetIntDefault(pointer0, p1);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getIUnknown(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIUnknown(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getIUnknownDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIUnknownDefault(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getMatrix(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getMatrixDefault(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrixDefault(pointer0, niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getMetadata(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMetadata(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTableReadStack_getName(JNIEnv *e, jobject o) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTableReadStack_getNumChildren(JNIEnv *e, jobject o) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChildren();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTableReadStack_getString(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetString(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTableReadStack_getStringDefault(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetStringDefault(pointer0, pointer1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getTop(JNIEnv *e, jobject o) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTop();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec2(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec2Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2Default(pointer0, niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec3(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec3Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3Default(pointer0, niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec4(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_getVec4Default(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4Default(pointer0, niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_hasProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pop(JNIEnv *e, jobject o) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Pop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_push(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Push(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pushChild(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushChild(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pushChildFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushChildFail(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pushEx(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushEx(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pushFail(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushFail(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_pushFailEx(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushFailEx(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDataTableReadStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableReadStack>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iDataTableReadStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableReadStack_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTableReadStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableReadStack>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iDataTableReadStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableReadStack_removeProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableReadStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableReadStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iDataTableSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iDataTableSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iDataTableSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1AddChild(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_AddChild(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1GetProperty(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->OnDataTableSink_GetProperty(pointer0, p1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1RemoveChild(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_RemoveChild(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1RemoveProperty(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_RemoveProperty(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1SetMetadata(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_SetMetadata(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1SetName(JNIEnv *e, jobject o, jobject p0) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_SetName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableSink_onDataTableSink_1SetProperty(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iDataTableSink* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->OnDataTableSink_SetProperty(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDataTableSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iDataTableSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTableSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 13), &niGetInterfaceUUID(ni::iDataTableSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IDataTableSinkImpl
// Implement JNI Wrapper for ni::iDataTableSink
struct JNI_ni_iDataTableSink : public ni::cIUnknownImpl<iDataTableSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnDataTableSink_AddChild;
  mutable jmethodID mmOnDataTableSink_GetProperty;
  mutable jmethodID mmOnDataTableSink_RemoveChild;
  mutable jmethodID mmOnDataTableSink_RemoveProperty;
  mutable jmethodID mmOnDataTableSink_SetMetadata;
  mutable jmethodID mmOnDataTableSink_SetName;
  mutable jmethodID mmOnDataTableSink_SetProperty;

  JNI_ni_iDataTableSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iDataTableSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnDataTableSink_AddChild -> (Lni/niLang/IDataTable;Lni/niLang/IDataTable;)V
  virtual void __stdcall OnDataTableSink_AddChild(ni::iDataTable* p0, ni::iDataTable* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_AddChild,onDataTableSink_AddChild,"(Lni/niLang/IDataTable;Lni/niLang/IDataTable;)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_AddChild,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_AddChild,onDataTableSink_AddChild,;);
  }
  // Method: OnDataTableSink_GetProperty -> (Lni/niLang/IDataTable;I)Ljava/lang/Object;
  virtual ni::Var __stdcall OnDataTableSink_GetProperty(ni::iDataTable* p0, ni::tU32 p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_GetProperty,onDataTableSink_GetProperty,"(Lni/niLang/IDataTable;I)Ljava/lang/Object;",niVarNull);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].i = p1;
    jobject r = e->CallObjectMethodA(mObject,mmOnDataTableSink_GetProperty,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_GetProperty,onDataTableSink_GetProperty,niVarNull);
    ni::Var var_r = niJVM_GetVar(e,r);
return var_r;
  }
  // Method: OnDataTableSink_RemoveChild -> (Lni/niLang/IDataTable;Lni/niLang/IDataTable;)V
  virtual void __stdcall OnDataTableSink_RemoveChild(ni::iDataTable* p0, ni::iDataTable* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_RemoveChild,onDataTableSink_RemoveChild,"(Lni/niLang/IDataTable;Lni/niLang/IDataTable;)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_RemoveChild,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_RemoveChild,onDataTableSink_RemoveChild,;);
  }
  // Method: OnDataTableSink_RemoveProperty -> (Lni/niLang/IDataTable;I)V
  virtual void __stdcall OnDataTableSink_RemoveProperty(ni::iDataTable* p0, ni::tU32 p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_RemoveProperty,onDataTableSink_RemoveProperty,"(Lni/niLang/IDataTable;I)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].i = p1;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_RemoveProperty,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_RemoveProperty,onDataTableSink_RemoveProperty,;);
  }
  // Method: OnDataTableSink_SetMetadata -> (Lni/niLang/IDataTable;I)V
  virtual void __stdcall OnDataTableSink_SetMetadata(ni::iDataTable* p0, ni::tU32 p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_SetMetadata,onDataTableSink_SetMetadata,"(Lni/niLang/IDataTable;I)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].i = p1;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_SetMetadata,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_SetMetadata,onDataTableSink_SetMetadata,;);
  }
  // Method: OnDataTableSink_SetName -> (Lni/niLang/IDataTable;)V
  virtual void __stdcall OnDataTableSink_SetName(ni::iDataTable* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_SetName,onDataTableSink_SetName,"(Lni/niLang/IDataTable;)V",;);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_SetName,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_SetName,onDataTableSink_SetName,;);
  }
  // Method: OnDataTableSink_SetProperty -> (Lni/niLang/IDataTable;I)V
  virtual void __stdcall OnDataTableSink_SetProperty(ni::iDataTable* p0, ni::tU32 p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iDataTableSink,OnDataTableSink_SetProperty,onDataTableSink_SetProperty,"(Lni/niLang/IDataTable;I)V",;);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    args[1].i = p1;
    e->CallVoidMethodA(mObject,mmOnDataTableSink_SetProperty,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iDataTableSink,OnDataTableSink_SetProperty,onDataTableSink_SetProperty,;);
  }
};
niExportFunc(ni::iDataTableSink*) NewJNIWrapper_ni_iDataTableSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iDataTableSink,e,o);
  return niNew JNI_ni_iDataTableSink(e,o);
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IDataTableWriteStack_getName(JNIEnv *e, jobject o) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDataTableWriteStack_getNumChildren(JNIEnv *e, jobject o) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumChildren();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableWriteStack_getTop(JNIEnv *e, jobject o) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTop();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_hasProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pop(JNIEnv *e, jobject o) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Pop();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_push(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Push(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushAppend(JNIEnv *e, jobject o, jobject p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushAppend(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushChild(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushChild(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushChildFail(JNIEnv *e, jobject o, jint p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushChildFail(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushEx(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushEx(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushFail(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushFail(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushFailEx(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushFailEx(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_pushNew(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PushNew(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableWriteStack_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDataTableWriteStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableWriteStack>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iDataTableWriteStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDataTableWriteStack_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTableWriteStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDataTableWriteStack>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iDataTableWriteStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_removeProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setBool(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetBool(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setEnum(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2, jint p3) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    NI_JVM_CPP_TRY {
        pointer->SetEnum(pointer0, pointer1, p2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setFloat(JNIEnv *e, jobject o, jstring p0, jdouble p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFloat(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setHString(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetHString(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setInt(JNIEnv *e, jobject o, jstring p0, jlong p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetInt(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setIUnknown(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIUnknown(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setMatrix(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrix(pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDataTableWriteStack_setMetadata(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMetadata(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setName(JNIEnv *e, jobject o, jstring p0) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setString(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetString(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setVec2(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec2(pointer0, niJVM_GetVec2f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setVec3(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec3(pointer0, niJVM_GetVec3f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IDataTableWriteStack_setVec4(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iDataTableWriteStack* pointer = niJVM_GetIUnknown(e,o,ni::iDataTableWriteStack);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec4(pointer0, niJVM_GetVec4f(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResource_bind(JNIEnv *e, jobject o, jobject p0) {
    ni::iDeviceResource* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDeviceResource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Bind(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iDeviceResource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResource_getDeviceResourceName(JNIEnv *e, jobject o) {
    ni::iDeviceResource* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDeviceResourceName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDeviceResource_hasDeviceResourceBeenReset(JNIEnv *e, jobject o, jboolean p0) {
    ni::iDeviceResource* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasDeviceResourceBeenReset(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResource_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDeviceResource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDeviceResource>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iDeviceResource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResource_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDeviceResource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDeviceResource>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iDeviceResource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDeviceResource_resetDeviceResource(JNIEnv *e, jobject o) {
    ni::iDeviceResource* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResource);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ResetDeviceResource();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IDeviceResourceManager_clear(JNIEnv *e, jobject o) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResourceManager_getFromIndex(JNIEnv *e, jobject o, jint p0) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDeviceResource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFromIndex(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iDeviceResource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResourceManager_getFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDeviceResource* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 15), &niGetInterfaceUUID(ni::iDeviceResource), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IDeviceResourceManager_getSize(JNIEnv *e, jobject o) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResourceManager_getType(JNIEnv *e, jobject o) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetType();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResourceManager_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDeviceResourceManager>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IDeviceResourceManager_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iDeviceResourceManager>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDeviceResourceManager_register(JNIEnv *e, jobject o, jobject p0) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDeviceResource* pointer0 = p0 == NULL ? NULL : (ni::iDeviceResource*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Register(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IDeviceResourceManager_unregister(JNIEnv *e, jobject o, jobject p0) {
    ni::iDeviceResourceManager* pointer = niJVM_GetIUnknown(e,o,ni::iDeviceResourceManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDeviceResource* pointer0 = p0 == NULL ? NULL : (ni::iDeviceResource*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Unregister(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExecutor_execute(JNIEnv *e, jobject o, jobject p0) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRunnable* pointer0 = p0 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Execute(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExecutor_getIsShutdown(JNIEnv *e, jobject o) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsShutdown();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExecutor_getIsTerminated(JNIEnv *e, jobject o) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsTerminated();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExecutor_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExecutor>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExecutor_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExecutor* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExecutor>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 17), &niGetInterfaceUUID(ni::iExecutor), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExecutor_shutdown(JNIEnv *e, jobject o, jint p0) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Shutdown(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExecutor_shutdownNow(JNIEnv *e, jobject o, jint p0) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ShutdownNow(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExecutor_submit(JNIEnv *e, jobject o, jobject p0) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRunnable* pointer0 = p0 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iFuture> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Submit(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iFuture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IExecutor_update(JNIEnv *e, jobject o, jint p0) {
    ni::iExecutor* pointer = niJVM_GetIUnknown(e,o,ni::iExecutor);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Update(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpression_eval(JNIEnv *e, jobject o) {
    ni::iExpression* pointer = niJVM_GetIUnknown(e,o,ni::iExpression);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Eval();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpression_getContext(JNIEnv *e, jobject o) {
    ni::iExpression* pointer = niJVM_GetIUnknown(e,o,ni::iExpression);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpression_getEvalResult(JNIEnv *e, jobject o) {
    ni::iExpression* pointer = niJVM_GetIUnknown(e,o,ni::iExpression);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetEvalResult();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpression_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iExpression* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpression>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iExpression), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpression_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpression* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpression>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iExpression), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_addEnumDef(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer0 = p0 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddEnumDef(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_addVariable(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iExpressionVariable* pointer0 = p0 == NULL ? NULL : (ni::iExpressionVariable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddVariable(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createContext(JNIEnv *e, jobject o) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateContext();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createExpression(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iExpression* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateExpression(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 18), &niGetInterfaceUUID(ni::iExpression), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createVariable(JNIEnv *e, jobject o, jstring p0, jint p1, jint p2) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVariable(pointer0, (eExpressionVariableType)p1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createVariableFromExpr(JNIEnv *e, jobject o, jstring p0, jstring p1, jint p2) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVariableFromExpr(pointer0, pointer1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createVariableFromRunnable(JNIEnv *e, jobject o, jstring p0, jint p1, jobject p2, jint p3) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iRunnable* pointer2 = p2 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVariableFromRunnable(pointer0, (eExpressionVariableType)p1, pointer2, p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_createVariableFromVar(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateVariableFromVar(pointer0, var_1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_eval(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Eval(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_findURLResolver(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iExpressionURLResolver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindURLResolver(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iExpressionURLResolver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_findVariable(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindVariable(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_getDefaultEnumDef(JNIEnv *e, jobject o) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::sEnumDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDefaultEnumDef();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 67));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_getEnumDef(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    const ni::sEnumDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetEnumDef(pointer0);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 67));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IExpressionContext_getEnumFlagsString(JNIEnv *e, jobject o, jint p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetEnumFlagsString(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IExpressionContext_getEnumValueString(JNIEnv *e, jobject o, jint p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetEnumValueString(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_getGlobalEnumSearch(JNIEnv *e, jobject o) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetGlobalEnumSearch();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_getParentContext(JNIEnv *e, jobject o) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParentContext();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_getUnknownSymbols(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iMutableCollection* pointer1 = p1 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetUnknownSymbols(pointer0, (tStringCVec *)pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionContext>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionContext_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionContext>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_registerURLResolver(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iExpressionURLResolver* pointer1 = p1 == NULL ? NULL : (ni::iExpressionURLResolver*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RegisterURLResolver(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_removeVariable(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iExpressionVariable* pointer0 = p0 == NULL ? NULL : (ni::iExpressionVariable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveVariable(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionContext_setDefaultEnumDef(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer0 = p0 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    NI_JVM_CPP_TRY {
        pointer->SetDefaultEnumDef(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionContext_setGlobalEnumSearch(JNIEnv *e, jobject o, jboolean p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetGlobalEnumSearch(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionContext_unregisterURLResolver(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionContext* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionContext);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UnregisterURLResolver(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionURLResolver_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iExpressionURLResolver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iExpressionURLResolver(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iExpressionURLResolver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionURLResolver_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iExpressionURLResolver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionURLResolver>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iExpressionURLResolver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionURLResolver_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpressionURLResolver* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionURLResolver>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 20), &niGetInterfaceUUID(ni::iExpressionURLResolver), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionURLResolver_resolveURL(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionURLResolver* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionURLResolver);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->ResolveURL(pointer0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IExpressionURLResolverImpl
// Implement JNI Wrapper for ni::iExpressionURLResolver
struct JNI_ni_iExpressionURLResolver : public ni::cIUnknownImpl<iExpressionURLResolver> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmResolveURL;

  JNI_ni_iExpressionURLResolver(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iExpressionURLResolver() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: ResolveURL -> (Ljava/lang/String;)Ljava/lang/Object;
  virtual ni::Var __stdcall ResolveURL(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iExpressionURLResolver,ResolveURL,resolveURL,"(Ljava/lang/String;)Ljava/lang/Object;",niVarNull);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmResolveURL,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iExpressionURLResolver,ResolveURL,resolveURL,niVarNull);
    ni::Var var_r = niJVM_GetVar(e,r);
return var_r;
  }
};
niExportFunc(ni::iExpressionURLResolver*) NewJNIWrapper_ni_iExpressionURLResolver(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iExpressionURLResolver,e,o);
  return niNew JNI_ni_iExpressionURLResolver(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_clone(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IExpressionVariable_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iExpressionVariable* pointer0 = p0 == NULL ? NULL : (ni::iExpressionVariable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IExpressionVariable_getFlags(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IExpressionVariable_getFloat(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFloat();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_getMatrix(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrix());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_getName(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetName();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IExpressionVariable_getString(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IExpressionVariable_getType(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eExpressionVariableType rvalue = pointer->GetType();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_getVec2(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_getVec3(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_getVec4(JNIEnv *e, jobject o) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionVariable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IExpressionVariable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iExpressionVariable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setFloat(JNIEnv *e, jobject o, jdouble p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFloat(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrix(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setName(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setString(JNIEnv *e, jobject o, jstring p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetString(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setVec2(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec2(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setVec3(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec3(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IExpressionVariable_setVec4(JNIEnv *e, jobject o, jobject p0) {
    ni::iExpressionVariable* pointer = niJVM_GetIUnknown(e,o,ni::iExpressionVariable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec4(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_beginReadBits(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->BeginReadBits();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_beginTextFileRead(JNIEnv *e, jobject o, jboolean p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginTextFileRead(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_beginTextFileWrite(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->BeginTextFileWrite((eTextEncodingFormat)p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_beginWriteBits(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->BeginWriteBits();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_endReadBits(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->EndReadBits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_endWriteBits(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->EndWriteBits();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_flush(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Flush();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_getBase(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBase();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getCanRead(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCanRead();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getCanSeek(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCanSeek();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getCanWrite(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCanWrite();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_getFileBase(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFileBase();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getFileFlags(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFileFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_getHere(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHere();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getIsDummy(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsDummy();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getIsEncoder(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEncoder();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getIsMemory(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsMemory();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getIsStream(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsStream();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getMinNumBitsI32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMinNumBitsI32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getMinNumBitsI64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMinNumBitsI64(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getMinNumBitsU32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMinNumBitsU32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getMinNumBitsU64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMinNumBitsU64(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getPartialRead(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetPartialRead();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getPartialWrite(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetPartialWrite();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_getSize(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetSize();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_getSourcePath(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSourcePath());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_getStop(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStop();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_getTextEncodingFormat(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eTextEncodingFormat rvalue = pointer->GetTextEncodingFormat();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_getTime(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer1 = p1 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetTime((eFileTime)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_isReadBitsBegan(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsReadBitsBegan();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_isWriteBitsBegan(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsWriteBitsBegan();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFile>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFile>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_IFile_read8(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->Read8();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readBE16(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadBE16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBE32(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBE32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBE64(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBE64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_readBit(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadBit();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_readBits(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    NI_JVM_CPP_TRY {
        pointer->ReadBits((ni::tPtr)pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readBitsI16(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadBitsI16(p0);
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsI32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsI32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsI64(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsI64(p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_IFile_readBitsI8(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->ReadBitsI8(p0);
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readBitsPackedI16(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadBitsPackedI16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsPackedI24(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsPackedI24();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsPackedI32(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsPackedI32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsPackedI48(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsPackedI48();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsPackedI64(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsPackedI64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_IFile_readBitsPackedI8(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->ReadBitsPackedI8();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readBitsPackedU16(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadBitsPackedU16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsPackedU24(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsPackedU24();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsPackedU32(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsPackedU32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsPackedU48(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsPackedU48();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsPackedU64(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsPackedU64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_IFile_readBitsPackedU8(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->ReadBitsPackedU8();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_readBitsPackedVar(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->ReadBitsPackedVar();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readBitsString(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadBitsString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readBitsU16(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadBitsU16(p0);
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readBitsU32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadBitsU32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readBitsU64(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadBitsU64(p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_IFile_readBitsU8(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->ReadBitsU8(p0);
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readChar(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadChar();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readCharEx(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadCharEx((eTextEncodingFormat)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IFile_readF32(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ReadF32();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IFile_readF64(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ReadF64();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niLang_IFile_readLE16(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->ReadLE16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readLE32(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ReadLE32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_readLE64(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->ReadLE64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readQuotedLine(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadQuotedLine());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_readRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->ReadRaw((void*)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readRawToString(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadRawToString((eRawToStringEncoding)p0, (ni::tInt)p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readString(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readStringEx(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadStringEx((eTextEncodingFormat)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readStringLine(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadStringLine());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFile_readStringLineEx(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ReadStringLineEx((eTextEncodingFormat)p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFile_readVar(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->ReadVar();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_reset(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_resize(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Resize(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_seek(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Seek(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_seekEnd(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SeekEnd(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_seekSet(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SeekSet(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_setMemPtr(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2, jboolean p3) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMemPtr((ni::tPtr)pointer0, (ni::tSize)p1, p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_setTextEncodingFormat(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTextEncodingFormat((eTextEncodingFormat)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_setTime(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer1 = p1 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetTime((eFileTime)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_tell(JNIEnv *e, jobject o) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->Tell();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_write8(JNIEnv *e, jobject o, jbyte p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->Write8(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeBE16(JNIEnv *e, jobject o, jshort p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteBE16(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeBE32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteBE32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeBE64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteBE64(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBit(JNIEnv *e, jobject o, jboolean p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBit(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBits(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    NI_JVM_CPP_TRY {
        pointer->WriteBits((ni::tPtr)pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBits16(JNIEnv *e, jobject o, jshort p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBits16(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBits32(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBits32(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBits64(JNIEnv *e, jobject o, jlong p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBits64(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBits8(JNIEnv *e, jobject o, jbyte p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBits8(p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI16(JNIEnv *e, jobject o, jshort p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI16(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI24(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI24(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI48(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI48(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedI8(JNIEnv *e, jobject o, jbyte p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedI8(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU16(JNIEnv *e, jobject o, jshort p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU16(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU24(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU24(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU48(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU48(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFile_writeBitsPackedU8(JNIEnv *e, jobject o, jbyte p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->WriteBitsPackedU8(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_writeBitsPackedVar(JNIEnv *e, jobject o, jobject p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteBitsPackedVar(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeBitsString(JNIEnv *e, jobject o, jstring p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteBitsString(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeChar(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteChar(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeCharEx(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteCharEx((eTextEncodingFormat)p0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeF32(JNIEnv *e, jobject o, jfloat p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteF32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeF64(JNIEnv *e, jobject o, jdouble p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteF64(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFile_writeFile(JNIEnv *e, jobject o, jobject p0, jlong p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->WriteFile(pointer0, p1);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeLE16(JNIEnv *e, jobject o, jshort p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteLE16(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeLE32(JNIEnv *e, jobject o, jint p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteLE32(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeLE64(JNIEnv *e, jobject o, jlong p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteLE64(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteRaw((void*)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeRawFromString(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->WriteRawFromString((eRawToStringEncoding)p0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeString(JNIEnv *e, jobject o, jstring p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteString(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeStringEx(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteStringEx((eTextEncodingFormat)p0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeStringZ(JNIEnv *e, jobject o, jstring p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteStringZ(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFile_writeStringZEx(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteStringZEx((eTextEncodingFormat)p0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFile_writeVar(JNIEnv *e, jobject o, jobject p0) {
    ni::iFile* pointer = niJVM_GetIUnknown(e,o,ni::iFile);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteVar(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_flush(JNIEnv *e, jobject o) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Flush();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileBase_getFileFlags(JNIEnv *e, jobject o) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFileFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFileBase_getSize(JNIEnv *e, jobject o) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetSize();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFileBase_getSourcePath(JNIEnv *e, jobject o) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSourcePath());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_getTime(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer1 = p1 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetTime((eFileTime)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileBase_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileBase>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileBase_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileBase>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileBase_readRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->ReadRaw((void*)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_resize(JNIEnv *e, jobject o, jlong p0) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Resize(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_seek(JNIEnv *e, jobject o, jlong p0) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Seek(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_seekEnd(JNIEnv *e, jobject o, jlong p0) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SeekEnd(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_seekSet(JNIEnv *e, jobject o, jlong p0) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SeekSet(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileBase_setTime(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer1 = p1 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetTime((eFileTime)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFileBase_tell(JNIEnv *e, jobject o) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->Tell();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileBase_writeRaw(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iFileBase* pointer = niJVM_GetIUnknown(e,o,ni::iFileBase);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->WriteRaw((void*)pointer0, (ni::tSize)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileEnumSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iFileEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iFileEnumSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iFileEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileEnumSink_onFound(JNIEnv *e, jobject o, jstring p0, jint p1, jlong p2) {
    ni::iFileEnumSink* pointer = niJVM_GetIUnknown(e,o,ni::iFileEnumSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnFound(pointer0, p1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileEnumSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFileEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileEnumSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iFileEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileEnumSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileEnumSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 24), &niGetInterfaceUUID(ni::iFileEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IFileEnumSinkImpl
// Implement JNI Wrapper for ni::iFileEnumSink
struct JNI_ni_iFileEnumSink : public ni::cIUnknownImpl<iFileEnumSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnFound;

  JNI_ni_iFileEnumSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iFileEnumSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnFound -> (Ljava/lang/String;IJ)Z
  virtual ni::tBool __stdcall OnFound(const ni::achar* p0, ni::tU32 p1, ni::tI64 p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iFileEnumSink,OnFound,onFound,"(Ljava/lang/String;IJ)Z",ni::eFalse);
    jvalue args[3];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    args[1].i = p1;
    args[2].j = p2;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnFound,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iFileEnumSink,OnFound,onFound,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iFileEnumSink*) NewJNIWrapper_ni_iFileEnumSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iFileEnumSink,e,o);
  return niNew JNI_ni_iFileEnumSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileMemory_getBase(JNIEnv *e, jobject o) {
    ni::iFileMemory* pointer = niJVM_GetIUnknown(e,o,ni::iFileMemory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetBase();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileMemory_getHere(JNIEnv *e, jobject o) {
    ni::iFileMemory* pointer = niJVM_GetIUnknown(e,o,ni::iFileMemory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHere();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileMemory_getStop(JNIEnv *e, jobject o) {
    ni::iFileMemory* pointer = niJVM_GetIUnknown(e,o,ni::iFileMemory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStop();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileMemory_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFileMemory* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileMemory>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 25), &niGetInterfaceUUID(ni::iFileMemory), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileMemory_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileMemory* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileMemory>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 25), &niGetInterfaceUUID(ni::iFileMemory), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFileMemory_reset(JNIEnv *e, jobject o) {
    ni::iFileMemory* pointer = niJVM_GetIUnknown(e,o,ni::iFileMemory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileMemory_setMemPtr(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2, jboolean p3) {
    ni::iFileMemory* pointer = niJVM_GetIUnknown(e,o,ni::iFileMemory);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMemPtr((ni::tPtr)pointer0, (ni::tSize)p1, p2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystem_createEnumerator(JNIEnv *e, jobject o) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFileSystemEnumerator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateEnumerator();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iFileSystemEnumerator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystem_fileBaseOpen(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FileBaseOpen(pointer0, (eFileOpenMode)p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystem_fileCopy(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FileCopy(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystem_fileDelete(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FileDelete(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystem_fileDeleteDir(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FileDeleteDir(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileSystem_fileEnum(JNIEnv *e, jobject o, jstring p0, jint p1, jobject p2) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iFileEnumSink* pointer2 = p2 == NULL ? NULL : (ni::iFileEnumSink*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FileEnum(pointer0, p1, pointer2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileSystem_fileExists(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->FileExists(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystem_fileMakeDir(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FileMakeDir(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystem_fileMove(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FileMove(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystem_fileOpen(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FileOpen(pointer0, (eFileOpenMode)p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFileSystem_fileSize(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->FileSize(pointer0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFileSystem_getAbsolutePath(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetAbsolutePath(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFileSystem_getBaseContainer(JNIEnv *e, jobject o) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetBaseContainer());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileSystem_getRightsFlags(JNIEnv *e, jobject o) {
    ni::iFileSystem* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystem);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetRightsFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystem_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileSystem>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystem_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileSystem>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystemEnumerator_findFirst(JNIEnv *e, jobject o, jstring p0) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FindFirst(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFileSystemEnumerator_findNext(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->FindNext();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IFileSystemEnumerator_getFileAttributes(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFileAttributes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IFileSystemEnumerator_getFileName(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetFileName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IFileSystemEnumerator_getFileSize(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetFileSize();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystemEnumerator_getFileSystem(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFileSystem();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystemEnumerator_getFileTime(JNIEnv *e, jobject o) {
    ni::iFileSystemEnumerator* pointer = niJVM_GetIUnknown(e,o,ni::iFileSystemEnumerator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFileTime();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystemEnumerator_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFileSystemEnumerator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileSystemEnumerator>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iFileSystemEnumerator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFileSystemEnumerator_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileSystemEnumerator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFileSystemEnumerator>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 27), &niGetInterfaceUUID(ni::iFileSystemEnumerator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFuture_cancel(JNIEnv *e, jobject o) {
    ni::iFuture* pointer = niJVM_GetIUnknown(e,o,ni::iFuture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Cancel();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFuture_doWait(JNIEnv *e, jobject o, jint p0) {
    ni::iFuture* pointer = niJVM_GetIUnknown(e,o,ni::iFuture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Wait(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFuture_getIsCancelled(JNIEnv *e, jobject o) {
    ni::iFuture* pointer = niJVM_GetIUnknown(e,o,ni::iFuture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCancelled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IFuture_getIsDone(JNIEnv *e, jobject o) {
    ni::iFuture* pointer = niJVM_GetIUnknown(e,o,ni::iFuture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsDone();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFuture_getValue(JNIEnv *e, jobject o) {
    ni::iFuture* pointer = niJVM_GetIUnknown(e,o,ni::iFuture);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetValue();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFuture_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFuture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFuture>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iFuture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFuture_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFuture* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFuture>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 28), &niGetInterfaceUUID(ni::iFuture), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFutureValue_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iFutureValue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFutureValue>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iFutureValue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IFutureValue_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFutureValue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iFutureValue>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 29), &niGetInterfaceUUID(ni::iFutureValue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IFutureValue_reset(JNIEnv *e, jobject o) {
    ni::iFutureValue* pointer = niJVM_GetIUnknown(e,o,ni::iFutureValue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IFutureValue_setValue(JNIEnv *e, jobject o, jobject p0) {
    ni::iFutureValue* pointer = niJVM_GetIUnknown(e,o,ni::iFutureValue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    NI_JVM_CPP_TRY {
        pointer->SetValue(var_0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IGameCtrl_getAxis(JNIEnv *e, jobject o, jint p0) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAxis((eGameCtrlAxis)p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IGameCtrl_getBatteryLevel(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetBatteryLevel();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IGameCtrl_getButton(JNIEnv *e, jobject o, jint p0) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetButton(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IGameCtrl_getCanVibrate(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCanVibrate();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IGameCtrl_getHasBattery(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasBattery();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IGameCtrl_getIndex(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetIndex();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IGameCtrl_getIsConnected(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsConnected();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IGameCtrl_getName(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IGameCtrl_getNumAxis(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumAxis();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IGameCtrl_getNumButtons(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumButtons();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IGameCtrl_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iGameCtrl* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iGameCtrl(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iGameCtrl), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IGameCtrl_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iGameCtrl* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGameCtrl>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iGameCtrl), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IGameCtrl_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iGameCtrl* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iGameCtrl>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iGameCtrl), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IGameCtrl_update(JNIEnv *e, jobject o) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Update();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IGameCtrl_vibrate(JNIEnv *e, jobject o, jobject p0) {
    ni::iGameCtrl* pointer = niJVM_GetIUnknown(e,o,ni::iGameCtrl);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Vibrate(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IGameCtrlImpl
// Implement JNI Wrapper for ni::iGameCtrl
struct JNI_ni_iGameCtrl : public ni::cIUnknownImpl<iGameCtrl> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetAxis;
  mutable jmethodID mmGetBatteryLevel;
  mutable jmethodID mmGetButton;
  mutable jmethodID mmGetCanVibrate;
  mutable jmethodID mmGetHasBattery;
  mutable jmethodID mmGetIndex;
  mutable jmethodID mmGetIsConnected;
  mutable jmethodID mmGetName;
  mutable jmethodID mmGetNumAxis;
  mutable jmethodID mmGetNumButtons;
  mutable jmethodID mmUpdate;
  mutable jmethodID mmVibrate;

  JNI_ni_iGameCtrl(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iGameCtrl() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetAxis -> (I)F
  virtual ni::tF32 __stdcall GetAxis(eGameCtrlAxis p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetAxis,getAxis,"(I)F",0);
    jvalue args[1];
    args[0].i = p0;
    jfloat r = e->CallFloatMethodA(mObject,mmGetAxis,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetAxis,getAxis,0);
    return r;
  }
  // Method: GetBatteryLevel -> ()F
  virtual ni::tF32 __stdcall GetBatteryLevel() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetBatteryLevel,getBatteryLevel,"()F",0);
    jvalue* args = NULL;
    jfloat r = e->CallFloatMethodA(mObject,mmGetBatteryLevel,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetBatteryLevel,getBatteryLevel,0);
    return r;
  }
  // Method: GetButton -> (I)F
  virtual ni::tF32 __stdcall GetButton(ni::tU32 p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetButton,getButton,"(I)F",0);
    jvalue args[1];
    args[0].i = p0;
    jfloat r = e->CallFloatMethodA(mObject,mmGetButton,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetButton,getButton,0);
    return r;
  }
  // Method: GetCanVibrate -> ()Z
  virtual ni::tBool __stdcall GetCanVibrate() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetCanVibrate,getCanVibrate,"()Z",ni::eFalse);
    jvalue* args = NULL;
    jboolean r = e->CallBooleanMethodA(mObject,mmGetCanVibrate,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetCanVibrate,getCanVibrate,ni::eFalse);
    return r;
  }
  // Method: GetHasBattery -> ()Z
  virtual ni::tBool __stdcall GetHasBattery() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetHasBattery,getHasBattery,"()Z",ni::eFalse);
    jvalue* args = NULL;
    jboolean r = e->CallBooleanMethodA(mObject,mmGetHasBattery,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetHasBattery,getHasBattery,ni::eFalse);
    return r;
  }
  // Method: GetIndex -> ()I
  virtual ni::tU32 __stdcall GetIndex() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetIndex,getIndex,"()I",0);
    jvalue* args = NULL;
    jint r = e->CallIntMethodA(mObject,mmGetIndex,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetIndex,getIndex,0);
    return r;
  }
  // Method: GetIsConnected -> ()Z
  virtual ni::tBool __stdcall GetIsConnected() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetIsConnected,getIsConnected,"()Z",ni::eFalse);
    jvalue* args = NULL;
    jboolean r = e->CallBooleanMethodA(mObject,mmGetIsConnected,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetIsConnected,getIsConnected,ni::eFalse);
    return r;
  }
  // Method: GetName -> ()Ljava/lang/String;
  virtual const ni::achar* __stdcall GetName() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetName,getName,"()Ljava/lang/String;",AZEROSTR);
    jvalue* args = NULL;
    jstring r = (jstring)e->CallObjectMethodA(mObject,mmGetName,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetName,getName,AZEROSTR);
    return niJVM_GetWrapperRetChars(e,r);
  }
  // Method: GetNumAxis -> ()I
  virtual ni::tU32 __stdcall GetNumAxis() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetNumAxis,getNumAxis,"()I",0);
    jvalue* args = NULL;
    jint r = e->CallIntMethodA(mObject,mmGetNumAxis,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetNumAxis,getNumAxis,0);
    return r;
  }
  // Method: GetNumButtons -> ()I
  virtual ni::tU32 __stdcall GetNumButtons() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,GetNumButtons,getNumButtons,"()I",0);
    jvalue* args = NULL;
    jint r = e->CallIntMethodA(mObject,mmGetNumButtons,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,GetNumButtons,getNumButtons,0);
    return r;
  }
  // Method: Update -> ()Z
  virtual ni::tBool __stdcall Update() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,Update,update,"()Z",ni::eFalse);
    jvalue* args = NULL;
    jboolean r = e->CallBooleanMethodA(mObject,mmUpdate,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,Update,update,ni::eFalse);
    return r;
  }
  // Method: Vibrate -> (Lni/types/Vec2f;)V
  virtual void __stdcall Vibrate(const ni::sVec2f& p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iGameCtrl,Vibrate,vibrate,"(Lni/types/Vec2f;)V",;);
    jvalue args[1];
    jobject xt_p0 = niJVM_NewVec2f(e, p0);
    LocalJRef<jobject> jxt_p0(e,xt_p0);
    args[0].l = jxt_p0.o;
    e->CallVoidMethodA(mObject,mmVibrate,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iGameCtrl,Vibrate,vibrate,;);
  }
};
niExportFunc(ni::iGameCtrl*) NewJNIWrapper_ni_iGameCtrl(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iGameCtrl,e,o);
  return niNew JNI_ni_iGameCtrl(e,o);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHString_cmp(JNIEnv *e, jobject o, jobject p0) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Cmp(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_createCharIt(JNIEnv *e, jobject o, jint p0) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHStringCharIt* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateCharIt(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iHStringCharIt), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_createRangeIt(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHStringCharIt* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRangeIt(p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iHStringCharIt), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IHString_getChars(JNIEnv *e, jobject o) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetChars());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHString_getLength(JNIEnv *e, jobject o) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLength();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_getLocalized(JNIEnv *e, jobject o) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocalized();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_getLocalizedEx(JNIEnv *e, jobject o, jobject p0) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocalizedEx(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHString_icmp(JNIEnv *e, jobject o, jobject p0) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ICmp(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IHString_isLocalized(JNIEnv *e, jobject o, jobject p0) {
    ni::iHString* pointer = niJVM_GetIUnknown(e,o,ni::iHString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsLocalized(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iHString>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHString_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iHString>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_advance(JNIEnv *e, jobject o, jint p0) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Advance(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHStringCharIt_clone(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHStringCharIt* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iHStringCharIt), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IHStringCharIt_getIsEnd(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsEnd();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IHStringCharIt_getIsStart(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsStart();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_getNumBytes(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumBytes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_getNumChars(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumChars();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_getPosition(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetPosition();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHStringCharIt_getString(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetString();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_next(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Next();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_peekAdvance(JNIEnv *e, jobject o, jint p0) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->PeekAdvance(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_peekNext(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->PeekNext();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_peekPrior(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->PeekPrior();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_peekRewind(JNIEnv *e, jobject o, jint p0) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->PeekRewind(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_prior(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Prior();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHStringCharIt_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iHStringCharIt* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iHStringCharIt>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iHStringCharIt), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IHStringCharIt_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iHStringCharIt* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iHStringCharIt>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 32), &niGetInterfaceUUID(ni::iHStringCharIt), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_rewind(JNIEnv *e, jobject o, jint p0) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Rewind(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IHStringCharIt_toEnd(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->ToEnd();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IHStringCharIt_toPosition(JNIEnv *e, jobject o, jint p0) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ToPosition(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IHStringCharIt_toStart(JNIEnv *e, jobject o) {
    ni::iHStringCharIt* pointer = niJVM_GetIUnknown(e,o,ni::iHStringCharIt);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ToStart();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_getCollection(JNIEnv *e, jobject o) {
    ni::iIterator* pointer = niJVM_GetIUnknown(e,o,ni::iIterator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iCollection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCollection();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iCollection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IIterator_hasNext(JNIEnv *e, jobject o) {
    ni::iIterator* pointer = niJVM_GetIUnknown(e,o,ni::iIterator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasNext();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_key(JNIEnv *e, jobject o) {
    ni::iIterator* pointer = niJVM_GetIUnknown(e,o,ni::iIterator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->Key();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_next(JNIEnv *e, jobject o) {
    ni::iIterator* pointer = niJVM_GetIUnknown(e,o,ni::iIterator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->Next();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iIterator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIterator>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iIterator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iIterator* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iIterator>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 33), &niGetInterfaceUUID(ni::iIterator), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IIterator_value(JNIEnv *e, jobject o) {
    ni::iIterator* pointer = niJVM_GetIUnknown(e,o,ni::iIterator);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->Value();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonParserSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iJsonParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iJsonParserSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iJsonParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IJsonParserSink_onJsonParserSink_1Error(JNIEnv *e, jobject o, jstring p0, jint p1, jint p2) {
    ni::iJsonParserSink* pointer = niJVM_GetIUnknown(e,o,ni::iJsonParserSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnJsonParserSink_Error(pointer0, p1, p2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IJsonParserSink_onJsonParserSink_1Value(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iJsonParserSink* pointer = niJVM_GetIUnknown(e,o,ni::iJsonParserSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnJsonParserSink_Value((eJsonType)p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonParserSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iJsonParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonParserSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iJsonParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonParserSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJsonParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonParserSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 34), &niGetInterfaceUUID(ni::iJsonParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IJsonParserSinkImpl
// Implement JNI Wrapper for ni::iJsonParserSink
struct JNI_ni_iJsonParserSink : public ni::cIUnknownImpl<iJsonParserSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnJsonParserSink_Error;
  mutable jmethodID mmOnJsonParserSink_Value;

  JNI_ni_iJsonParserSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iJsonParserSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnJsonParserSink_Error -> (Ljava/lang/String;II)V
  virtual void __stdcall OnJsonParserSink_Error(const ni::achar* p0, ni::tU32 p1, ni::tU32 p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iJsonParserSink,OnJsonParserSink_Error,onJsonParserSink_Error,"(Ljava/lang/String;II)V",;);
    jvalue args[3];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    args[1].i = p1;
    args[2].i = p2;
    e->CallVoidMethodA(mObject,mmOnJsonParserSink_Error,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iJsonParserSink,OnJsonParserSink_Error,onJsonParserSink_Error,;);
  }
  // Method: OnJsonParserSink_Value -> (ILjava/lang/String;)V
  virtual void __stdcall OnJsonParserSink_Value(eJsonType p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iJsonParserSink,OnJsonParserSink_Value,onJsonParserSink_Value,"(ILjava/lang/String;)V",;);
    jvalue args[2];
    args[0].i = p0;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    e->CallVoidMethodA(mObject,mmOnJsonParserSink_Value,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iJsonParserSink,OnJsonParserSink_Value,onJsonParserSink_Value,;);
  }
};
niExportFunc(ni::iJsonParserSink*) NewJNIWrapper_ni_iJsonParserSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iJsonParserSink,e,o);
  return niNew JNI_ni_iJsonParserSink(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_arrayBegin(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ArrayBegin();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_arrayEnd(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ArrayEnd();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_name(JNIEnv *e, jobject o, jstring p0) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Name(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectBegin(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectBegin();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectBool(JNIEnv *e, jobject o, jstring p0, jboolean p1) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectBool(pointer0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectEnd(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectEnd();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectNull(JNIEnv *e, jobject o, jstring p0) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectNull(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectNumber(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectNumber(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_objectString(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ObjectString(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonWriter_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iJsonWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonWriter>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iJsonWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonWriter_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJsonWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonWriter>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iJsonWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IJsonWriter_reset(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_valueBool(JNIEnv *e, jobject o, jboolean p0) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ValueBool(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_valueNull(JNIEnv *e, jobject o) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ValueNull();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_valueNumber(JNIEnv *e, jobject o, jstring p0) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ValueNumber(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriter_valueString(JNIEnv *e, jobject o, jstring p0) {
    ni::iJsonWriter* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriter);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ValueString(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonWriterSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iJsonWriterSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iJsonWriterSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iJsonWriterSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IJsonWriterSink_onJsonWriterSink_1Error(JNIEnv *e, jobject o, jstring p0) {
    ni::iJsonWriterSink* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriterSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->OnJsonWriterSink_Error(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IJsonWriterSink_onJsonWriterSink_1Write(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iJsonWriterSink* pointer = niJVM_GetIUnknown(e,o,ni::iJsonWriterSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnJsonWriterSink_Write((eJsonType)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonWriterSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iJsonWriterSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonWriterSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iJsonWriterSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IJsonWriterSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJsonWriterSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iJsonWriterSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 36), &niGetInterfaceUUID(ni::iJsonWriterSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IJsonWriterSinkImpl
// Implement JNI Wrapper for ni::iJsonWriterSink
struct JNI_ni_iJsonWriterSink : public ni::cIUnknownImpl<iJsonWriterSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnJsonWriterSink_Error;
  mutable jmethodID mmOnJsonWriterSink_Write;

  JNI_ni_iJsonWriterSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iJsonWriterSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnJsonWriterSink_Error -> (Ljava/lang/String;)V
  virtual void __stdcall OnJsonWriterSink_Error(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iJsonWriterSink,OnJsonWriterSink_Error,onJsonWriterSink_Error,"(Ljava/lang/String;)V",;);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    e->CallVoidMethodA(mObject,mmOnJsonWriterSink_Error,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iJsonWriterSink,OnJsonWriterSink_Error,onJsonWriterSink_Error,;);
  }
  // Method: OnJsonWriterSink_Write -> (ILjava/lang/String;)Z
  virtual ni::tBool __stdcall OnJsonWriterSink_Write(eJsonType p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iJsonWriterSink,OnJsonWriterSink_Write,onJsonWriterSink_Write,"(ILjava/lang/String;)Z",ni::eFalse);
    jvalue args[2];
    args[0].i = p0;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnJsonWriterSink_Write,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iJsonWriterSink,OnJsonWriterSink_Write,onJsonWriterSink_Write,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iJsonWriterSink*) NewJNIWrapper_ni_iJsonWriterSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iJsonWriterSink,e,o);
  return niNew JNI_ni_iJsonWriterSink(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_addScriptingHost(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iScriptingHost* pointer1 = p1 == NULL ? NULL : (ni::iScriptingHost*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddScriptingHost(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_clearLocalization(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ClearLocalization(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createDataTable(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDataTable(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createDataTableReadStack(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTableReadStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDataTableReadStack(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 12), &niGetInterfaceUUID(ni::iDataTableReadStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createDataTableWriteStack(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iDataTableWriteStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDataTableWriteStack(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iDataTableWriteStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createDataTableWriteStackFromName(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iDataTableWriteStack* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDataTableWriteStackFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 14), &niGetInterfaceUUID(ni::iDataTableWriteStack), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createDeviceResourceManager(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iDeviceResourceManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateDeviceResourceManager(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 16), &niGetInterfaceUUID(ni::iDeviceResourceManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createExpressionContext(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateExpressionContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFile(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFile(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseBufferDecoder(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBufferDecoder* pointer1 = p1 == NULL ? NULL : (ni::iBufferDecoder*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseBufferDecoder(pointer0, pointer1, (ni::tSize)p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseBufferEncoder(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBufferEncoder* pointer1 = p1 == NULL ? NULL : (ni::iBufferEncoder*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseBufferEncoder(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseDynamicMemory(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseDynamicMemory((ni::tSize)p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseMemory(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2, jstring p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseMemory((ni::tPtr)pointer0, (ni::tSize)p1, p2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseMemoryAlloc(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseMemoryAlloc((ni::tSize)p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseWindow(JNIEnv *e, jobject o, jobject p0, jlong p1, jlong p2, jstring p3, jboolean p4) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseWindow(pointer0, p1, p2, pointer3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBaseWriteDummy(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFileBase* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBaseWriteDummy();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 23), &niGetInterfaceUUID(ni::iFileBase), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBufferDecoder(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBufferDecoder* pointer1 = p1 == NULL ? NULL : (ni::iBufferDecoder*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBufferDecoder(pointer0, pointer1, (ni::tSize)p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileBufferEncoder(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iBufferEncoder* pointer1 = p1 == NULL ? NULL : (ni::iBufferEncoder*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileBufferEncoder(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileDynamicMemory(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileDynamicMemory((ni::tSize)p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileMemory(JNIEnv *e, jobject o, jobject p0, jint p1, jboolean p2, jstring p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileMemory((ni::tPtr)pointer0, (ni::tSize)p1, p2, pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileMemoryAlloc(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileMemoryAlloc((ni::tSize)p0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileSystemDir(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileSystemDir(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileSystemHashed(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileSystem* pointer0 = p0 == NULL ? NULL : (ni::iFileSystem*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileSystemHashed(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileWindow(JNIEnv *e, jobject o, jobject p0, jlong p1, jlong p2, jstring p3, jboolean p4) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileWindow(pointer0, p1, p2, pointer3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createFileWriteDummy(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileWriteDummy();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createGlobalUUID(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewUUID(e,pointer->CreateGlobalUUID());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createHString(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iHString> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateHString(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createInstance(JNIEnv *e, jobject o, jstring p0, jobject p1, jobject p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateInstance(pointer0, var_1, var_2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createJsonFileWriter(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJsonWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateJsonFileWriter(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iJsonWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createJsonSinkWriter(JNIEnv *e, jobject o, jobject p0, jboolean p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iJsonWriterSink* pointer0 = p0 == NULL ? NULL : (ni::iJsonWriterSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iJsonWriter* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateJsonSinkWriter(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 35), &niGetInterfaceUUID(ni::iJsonWriter), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createLocalUUID(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewUUID(e,pointer->CreateLocalUUID());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createWindow(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jint p3, jint p4) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iOSWindow* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWindow(pointer0, pointer1, niJVM_GetVec4i(e,p2), p3, p4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iOSWindow), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_createWindowEx(JNIEnv *e, jobject o, jlong p0, jint p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSWindow* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateWindowEx((ni::tIntPtr)p0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iOSWindow), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_enumToString(JNIEnv *e, jobject o, jint p0, jobject p1, jint p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->EnumToString(p0, pointer1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_eval(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iExpressionVariable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Eval(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 21), &niGetInterfaceUUID(ni::iExpressionVariable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_exit(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Exit(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_fatalError(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->FatalError(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_fileBufferDecode(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3, jint p4) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBufferDecoder* pointer0 = p0 == NULL ? NULL : (ni::iBufferDecoder*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->FileBufferDecode(pointer0, pointer1, (ni::tSize)p2, pointer3, (ni::tSize)p4);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_fileBufferEncode(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iBufferEncoder* pointer0 = p0 == NULL ? NULL : (ni::iBufferEncoder*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->FileBufferEncode(pointer0, pointer1, (ni::tSize)p2, pointer3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_findScriptingHost(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->FindScriptingHost(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_getAbsoluteDataTablePath(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetAbsoluteDataTablePath(pointer0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getAverageFrameRate(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetAverageFrameRate();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getClipboard(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iDataTable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetClipboard((eClipboardType)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 11), &niGetInterfaceUUID(ni::iDataTable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getCreateInstanceMap(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tCreateInstanceCMap * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCreateInstanceMap();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(tCreateInstanceCMap ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getCurrentTime(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCurrentTime();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getDefaultLocale(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDefaultLocale();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getEnumDef(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    const ni::sEnumDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetEnumDef(pointer0);
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 67));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_getEnv(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetEnv(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getExpressionContext(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iExpressionContext* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetExpressionContext();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 19), &niGetInterfaceUUID(ni::iExpressionContext), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getFrameNumber(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFrameNumber();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_ILang_getFrameRate(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetFrameRate();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_ILang_getFrameTime(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetFrameTime();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getGameCtrl(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iGameCtrl* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGameCtrl(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 30), &niGetInterfaceUUID(ni::iGameCtrl), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getGlobalInstance(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGlobalInstance(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getGlobalInstanceMap(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tGlobalInstanceCMap * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGlobalInstanceMap();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(tGlobalInstanceCMap ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getInterfaceDefFromUUID(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::sInterfaceDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetInterfaceDefFromUUID(niJVM_GetUUID(e,p0));
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 68));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getInterfaceName(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetInterfaceName(niJVM_GetUUID(e,p0));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getInterfaceUUID(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewUUID(e,pointer->GetInterfaceUUID(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getLocale(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetLocale(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getLocalizationMap(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMutableCollection* pointer1 = p1 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLocalizationMap(pointer0, (tStringCMap *)pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getLogFilter(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLogFilter();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_getMarkMissingLocalization(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetMarkMissingLocalization();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getMissingLocalization(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    tStringCVec * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMissingLocalization(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(tStringCVec ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getModuleDef(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::iModuleDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetModuleDef(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iModuleDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getModuleDefIndex(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetModuleDefIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getMonitorFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMonitorFlags(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_ILang_getMonitorHandle(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetMonitorHandle(p0);
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getMonitorIndex(JNIEnv *e, jobject o, jlong p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMonitorIndex((ni::tIntPtr)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_getMonitorName(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetMonitorName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getMonitorRect(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetMonitorRect(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getNumGameCtrls(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumGameCtrls();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getNumLocales(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumLocales();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getNumModuleDefs(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumModuleDefs();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getNumMonitors(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMonitors();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getNumScriptingHosts(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumScriptingHosts();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getProcessManager(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSProcessManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetProcessManager();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iOSProcessManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getProf(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iProf* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetProf();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iProf), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getProperties(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const tStringCMap * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetProperties();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(tStringCMap ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_getProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetProperty(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getRootFS(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFileSystem* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetRootFS();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 26), &niGetInterfaceUUID(ni::iFileSystem), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getScriptingHost(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetScriptingHost(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getScriptingHostFromName(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetScriptingHostFromName(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_getScriptingHostIndex(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iScriptingHost* pointer0 = p0 == NULL ? NULL : (ni::iScriptingHost*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetScriptingHostIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getScriptingHostName(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetScriptingHostName(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_getSystemMessageHandlers(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tMessageHandlerSinkLst * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetSystemMessageHandlers();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(tMessageHandlerSinkLst ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_ILang_getTotalFrameTime(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetTotalFrameTime();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_hasProperty(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasProperty(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_installCrashHandler(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->InstallCrashHandler();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_isSerializedObject(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    LockJBuffer lock_JBuffer2(e, p2);
    jlong* pointer2 = (jlong*)lock_JBuffer2.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsSerializedObject(pointer0, pointer1, (ni::tI64*)pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_jsonParseFile(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iJsonParserSink* pointer1 = p1 == NULL ? NULL : (ni::iJsonParserSink*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->JsonParseFile(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_jsonParseString(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iJsonParserSink* pointer1 = p1 == NULL ? NULL : (ni::iJsonParserSink*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->JsonParseString(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_loadLocalization(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer0 = p0 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->LoadLocalization(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_loadModuleDef(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    const ni::iModuleDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->LoadModuleDef(pointer0, pointer1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iModuleDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_log(JNIEnv *e, jobject o, jint p0, jstring p1, jstring p2, jint p3, jstring p4) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    const char *pointer4 = p4 == NULL ? NULL : e->GetStringUTFChars(p4, NULL);
    NI_JVM_CPP_TRY {
        pointer->Log(p0, pointer1, pointer2, p3, pointer4);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    if (p4 != NULL) e->ReleaseStringUTFChars(p4, pointer4);
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_messageBox(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2, jint p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eOSMessageBoxReturn rvalue = pointer->MessageBox(pointer0, pointer1, pointer2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_onExit(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRunnable* pointer0 = p0 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnExit(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_openFileDialog(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2, jstring p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->OpenFileDialog(pointer0, pointer1, pointer2, pointer3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_pickDirectoryDialog(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->PickDirectoryDialog(pointer0, pointer1, pointer2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iLang* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iLang>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iLang), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iLang* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iLang>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iLang), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_registerEnumDef(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::sEnumDef* pointer0 = p0 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RegisterEnumDef(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_registerModuleDef(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iModuleDef* pointer0 = p0 == NULL ? NULL : (ni::iModuleDef*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RegisterModuleDef(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_removeScriptingHost(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveScriptingHost(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_resetFrameTime(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ResetFrameTime();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_runCommand(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RunCommand(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_saveFileDialog(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2, jstring p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSWindow* pointer0 = p0 == NULL ? NULL : (ni::iOSWindow*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    const char *pointer3 = p3 == NULL ? NULL : e->GetStringUTFChars(p3, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->SaveFileDialog(pointer0, pointer1, pointer2, pointer3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    if (p3 != NULL) e->ReleaseStringUTFChars(p3, pointer3);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_serializeDataTable(JNIEnv *e, jobject o, jstring p0, jint p1, jobject p2, jobject p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iDataTable* pointer2 = p2 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SerializeDataTable(pointer0, (eSerializeMode)p1, pointer2, pointer3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_serializeObject(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jobject p3) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    LockJBuffer lock_JBuffer3(e, p3);
    jlong* pointer3 = (jlong*)lock_JBuffer3.dataPtr;
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->SerializeObject(pointer0, pointer1, (eSerializeMode)p2, (ni::tI64*)pointer3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_serviceAllScriptingHosts(JNIEnv *e, jobject o, jboolean p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ServiceAllScriptingHosts(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_setClipboard(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetClipboard((eClipboardType)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_setDefaultLocale(JNIEnv *e, jobject o, jobject p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetDefaultLocale(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_setEnv(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEnv(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_setGlobalInstance(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetGlobalInstance(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_setLocalization(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer2 = p2 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetLocalization(pointer0, pointer1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_setLocalizationMap(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetLocalizationMap(pointer0, (const tStringCMap *)pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_setLogFilter(JNIEnv *e, jobject o, jint p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetLogFilter(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_setMarkMissingLocalization(JNIEnv *e, jobject o, jboolean p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMarkMissingLocalization(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ILang_setProperty(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetProperty(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_startPath(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->StartPath(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ILang_stringToEnum(JNIEnv *e, jobject o, jstring p0, jobject p1, jint p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::sEnumDef* pointer1 = p1 == NULL ? NULL : (ni::sEnumDef*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint position1 = p1 == NULL ? 0 : e->GetIntField(p1, _JVM->positionFieldID);
    pointer1 += position1;
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->StringToEnum(pointer0, pointer1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_ILang_timerInSeconds(JNIEnv *e, jobject o) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->TimerInSeconds();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_updateFrameTime(JNIEnv *e, jobject o, jdouble p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateFrameTime(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_urlexists(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->URLExists(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_urlfindFilePath(JNIEnv *e, jobject o, jstring p0, jstring p1, jstring p2) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->URLFindFilePath(pointer0, pointer1, pointer2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_urlgetHandler(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iURLFileHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLGetHandler(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iURLFileHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ILang_urlgetProtocol(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->URLGetProtocol(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ILang_urlopen(JNIEnv *e, jobject o, jstring p0) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLOpen(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_xmlParseFile(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iXmlParserSink* pointer1 = p1 == NULL ? NULL : (ni::iXmlParserSink*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->XmlParseFile(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ILang_xmlParseString(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iLang* pointer = niJVM_GetIUnknown(e,o,ni::iLang);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iXmlParserSink* pointer1 = p1 == NULL ? NULL : (ni::iXmlParserSink*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->XmlParseString(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_abs(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Abs(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_acos(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ACos(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_asin(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ASin(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_atan(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ATan(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_atan2(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ATan2(p0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_blendIntoAccumulator(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->BlendIntoAccumulator(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_ceil(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Ceil(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_clamp(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Clamp(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_clampT(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ClampT(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_clampZeroOne(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ClampZeroOne(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_classifyPoint(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eClassify rvalue = pointer->ClassifyPoint(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_closestPointOnLine(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ClosestPointOnLine(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_closestPointOnTriangle(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ClosestPointOnTriangle(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_computePixelScaleX(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputePixelScaleX(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetVec4f(e,p3));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_computePixelScaleY(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputePixelScaleY(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetVec4f(e,p3));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_computePixelWorldSize(JNIEnv *e, jobject o, jfloat p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputePixelWorldSize(p0, niJVM_GetVec3f(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetMatrixf(e,p3), niJVM_GetVec4f(e,p4));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_computePixelWorldSizeVec2(JNIEnv *e, jobject o, jfloat p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->ComputePixelWorldSizeVec2(p0, niJVM_GetVec3f(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetMatrixf(e,p3), niJVM_GetVec4f(e,p4)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_computePixelWorldSizeX(JNIEnv *e, jobject o, jfloat p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputePixelWorldSizeX(p0, niJVM_GetVec3f(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetMatrixf(e,p3), niJVM_GetVec4f(e,p4));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_computePixelWorldSizeY(JNIEnv *e, jobject o, jfloat p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->ComputePixelWorldSizeY(p0, niJVM_GetVec3f(e,p1), niJVM_GetMatrixf(e,p2), niJVM_GetMatrixf(e,p3), niJVM_GetVec4f(e,p4));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_cos(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Cos(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveCardinal(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveCardinal(p0, p1, p2, p3);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveCardinal4(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveCardinal4(p0, p1, p2, p3, p4, p5);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveCatmullRom(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3, jdouble p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveCatmullRom(p0, p1, p2, p3, p4);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveCos(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveCos(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveHermite(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3, jdouble p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveHermite(p0, p1, p2, p3, p4);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveLinear(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveLinear(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_curveStep(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CurveStep(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_cycleCardinal(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CycleCardinal(p0, p1, p2, p3);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_cycleCos(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CycleCos(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_cycleLinear(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CycleLinear(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_cycleT(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->CycleT(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_det2x2d(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Det2x2d(p0, p1, p2, p3);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_det2x2f(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Det2x2f(p0, p1, p2, p3);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_det3x3d(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Det3x3d(p0, p1, p2, p3, p4, p5, p6, p7, p8);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_det3x3f(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Det3x3f(p0, p1, p2, p3, p4, p5, p6, p7, p8);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_det4x4d(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2, jdouble p3, jdouble p4, jdouble p5, jdouble p6, jdouble p7, jdouble p8, jdouble p9, jdouble p10, jdouble p11, jdouble p12, jdouble p13, jdouble p14, jdouble p15) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Det4x4d(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_det4x4f(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8, jfloat p9, jfloat p10, jfloat p11, jfloat p12, jfloat p13, jfloat p14, jfloat p15) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Det4x4f(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_exp(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Exp(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_floor(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Floor(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_fovHzToVt(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->FovHzToVt(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_fovVtToHz(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->FovVtToHz(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_getAngleFromPoints2D(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAngleFromPoints2D(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_getAngleFromPoints3D(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetAngleFromPoints3D(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_getAngularDifference(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetAngularDifference(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_getScreenPosition(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetScreenPosition(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_isPointInsideEdge(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsPointInsideEdge(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_lerp(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Lerp(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_log10(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Log10(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_log2(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Log2(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_logE(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->LogE(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_logX(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->LogX(p0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixAdd(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixAdd(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixAdjustViewport(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixAdjustViewport(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_matrixCompare(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->MatrixCompare(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixCompose(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixCompose(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixComposeQ(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixComposeQ(niJVM_GetVec3f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixDecomposeGetQuat(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->MatrixDecomposeGetQuat(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixDecomposeGetScale(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->MatrixDecomposeGetScale(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixDecomposeGetTranslation(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixDecomposeGetTranslation(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixDecomposeGetZYX(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixDecomposeGetZYX(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixDecomposeYawPitchRoll(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixDecomposeYawPitchRoll(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_matrixDeterminant(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->MatrixDeterminant(niJVM_GetMatrixf(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_matrixDeterminant2(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->MatrixDeterminant2(niJVM_GetMatrixf(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_matrixDeterminant3(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->MatrixDeterminant3(niJVM_GetMatrixf(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixGetForward(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixGetForward(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_matrixGetHandeness(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->MatrixGetHandeness(niJVM_GetMatrixf(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixGetProjectedTranslation(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixGetProjectedTranslation(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixGetRight(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixGetRight(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixGetTranslation(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixGetTranslation(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixGetUp(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixGetUp(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixIdentity(JNIEnv *e, jobject o) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixIdentity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixInverse(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixInverse(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_matrixIsIdentity(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MatrixIsIdentity(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_matrixIsNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MatrixIsNormal(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_matrixIsOrthogonal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MatrixIsOrthogonal(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_matrixIsOrthoNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->MatrixIsOrthoNormal(niJVM_GetMatrixf(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixLerp(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixLerp(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixLookAtLH(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixLookAtLH(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixLookAtRH(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixLookAtRH(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixMultiply(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixMultiply(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixOrthoLH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixOrthoLH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixOrthoOffCenterLH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixOrthoOffCenterLH(p0, p1, p2, p3, p4, p5));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixOrthoOffCenterRH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixOrthoOffCenterRH(p0, p1, p2, p3, p4, p5));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixOrthoRH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixOrthoRH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveFovLH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveFovLH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveFovRH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveFovRH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveLH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveLH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveOffCenterLH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveOffCenterLH(p0, p1, p2, p3, p4, p5));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveOffCenterRH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveOffCenterRH(p0, p1, p2, p3, p4, p5));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixPerspectiveRH(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixPerspectiveRH(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixReflect(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixReflect(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotate(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotate(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationAxis(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationAxis(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationQuat(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationQuat(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationX(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationX(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationY(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationY(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationYawPitchRoll(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationYawPitchRoll(p0, p1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixRotationZ(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixRotationZ(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixScale(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixScale(niJVM_GetMatrixf(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixScaling(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixScaling(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetForward(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetForward(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetNotRotation(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetNotRotation(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetProjectedTranslation(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetProjectedTranslation(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetRight(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetRight(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetRotation(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetRotation(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetTranslation(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetTranslation(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSetUp(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSetUp(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixShadow(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixShadow(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixSub(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixSub(niJVM_GetMatrixf(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTextureOffset(JNIEnv *e, jobject o, jfloat p0, jint p1, jint p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTextureOffset(p0, p1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTextureOffset2(JNIEnv *e, jobject o, jfloat p0, jint p1, jint p2, jint p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTextureOffset2(p0, p1, p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixToCoordinateSystem(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixToCoordinateSystem(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixToEuler(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->MatrixToEuler(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTransformInverse(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTransformInverse(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTranslation(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTranslation(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTranspose(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTranspose(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixTranspose3x3(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixTranspose3x3(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixVecScale(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixVecScale(niJVM_GetMatrixf(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_matrixViewport(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->MatrixViewport(niJVM_GetVec4f(e,p0), p1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_max(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Max(p0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_max3(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Max3(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_min(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Min(p0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_min3(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Min3(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_mirrorT(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->MirrorT(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeClosest(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->PlaneClosest(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_planeDistance(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->PlaneDistance(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_planeDot(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->PlaneDot(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_planeDotCoord(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->PlaneDotCoord(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_planeDotNormal(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->PlaneDotNormal(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeExtractCoordinateSystem(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->PlaneExtractCoordinateSystem(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeFromPointNormal(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneFromPointNormal(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeFromPoints(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneFromPoints(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeIntersection(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->PlaneIntersection(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeIntersectLine(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneIntersectLine(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeIntersectRay(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneIntersectRay(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_planeIntersectSphere(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PlaneIntersectSphere(niJVM_GetVec4f(e,p0), niJVM_GetVec3f(e,p1), p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_planeMaxType(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePlaneType rvalue = pointer->PlaneMaxType(niJVM_GetVec4f(e,p0));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeNormalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneNormalize(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeTransform(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneTransform(niJVM_GetVec4f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_planeTransformInversedMatrix(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->PlaneTransformInversedMatrix(niJVM_GetVec4f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_planeType(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePlaneType rvalue = pointer->PlaneType(niJVM_GetVec4f(e,p0));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_pow(JNIEnv *e, jobject o, jdouble p0, jdouble p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Pow(p0, p1);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_probNormalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ProbNormalize((tF64CVec *)pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_probSampleAliasMethod(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer1 = p1 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer2 = p2 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ProbSampleAliasMethod((tU32CVec *)pointer0, (const tF64CVec *)pointer1, (const tU32CVec *)pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_probSampleBuildAliasMethodArrays(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iMutableCollection* pointer1 = p1 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    ni::iMutableCollection* pointer2 = p2 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ProbSampleBuildAliasMethodArrays((const tF64CVec *)pointer0, (tF64CVec *)pointer1, (tU32CVec *)pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_probSum(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ProbSum((tF64CVec *)pointer0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatAdd(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatAdd(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatBaryCentric(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jfloat p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatBaryCentric(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2), p3, p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_quatCompare(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->QuatCompare(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatConjugate(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatConjugate(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_quatDot(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->QuatDot(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatExp(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatExp(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatIdentity(JNIEnv *e, jobject o) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatIdentity());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatInverse(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatInverse(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_quatIsIdentity(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->QuatIsIdentity(niJVM_GetVec4f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_quatLength(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->QuatLength(niJVM_GetVec4f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_quatLengthSq(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->QuatLengthSq(niJVM_GetVec4f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatLn(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatLn(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatMultiply(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatMultiply(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatNormalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatNormalize(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationAxis(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationAxis(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationMatrix(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationMatrix(niJVM_GetMatrixf(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationVector(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationVector(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationX(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationX(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationXYZ(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationXYZ(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationY(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationY(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationYawPitchRoll(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationYawPitchRoll(p0, p1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatRotationZ(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatRotationZ(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatScale(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatScale(niJVM_GetVec4f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatSlerp(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jint p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatSlerp(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), p2, (eQuatSlerp)p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatSquad(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatSquad(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2), niJVM_GetVec4f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatSub(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatSub(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatToAxisAngle(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->QuatToAxisAngle(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_quatToEuler(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->QuatToEuler(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMath* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMath>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iMath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMath* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMath>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 38), &niGetInterfaceUUID(ni::iMath), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_randColor(JNIEnv *e, jobject o) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RandColor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_randColorA(JNIEnv *e, jobject o, jbyte p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RandColorA(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_randColorAf(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RandColorAf(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_randFloat(JNIEnv *e, jobject o) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->RandFloat();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_randFloatRange(JNIEnv *e, jobject o, jfloat p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->RandFloatRange(p0, p1);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_randInt(JNIEnv *e, jobject o) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RandInt();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_randIntRange(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->RandIntRange(p0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_randNormal(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->RandNormal(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_randomDirection(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->RandomDirection(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_randomDirectionEx(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->RandomDirectionEx(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_randSeed(JNIEnv *e, jobject o, jint p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->RandSeed(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_repeatT(JNIEnv *e, jobject o, jdouble p0, jdouble p1, jdouble p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->RepeatT(p0, p1, p2);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_rotateRay(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->RotateRay(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_sin(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Sin(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_sqrt(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Sqrt(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_tan(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->Tan(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_toDeg(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ToDeg(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niLang_IMath_toRad(JNIEnv *e, jobject o, jdouble p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->ToRad(p0);
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_triangleAreaNormal(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->TriangleAreaNormal(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_triangleBaryCentric(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->TriangleBaryCentric(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_triangleIntersectAABB(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TriangleIntersectAABB(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), niJVM_GetVec3f(e,p4));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_triangleIntersectRay(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->TriangleIntersectRay(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), niJVM_GetVec3f(e,p4)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_triangleIntersectRayCull(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->TriangleIntersectRayCull(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), niJVM_GetVec3f(e,p4)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_triangleIntersectTriangle(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TriangleIntersectTriangle(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), niJVM_GetVec3f(e,p4), niJVM_GetVec3f(e,p5));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_triangleIsDegenerate(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->TriangleIsDegenerate(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Abs(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Abs(niJVM_GetVec2f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Add(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Add(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2BaryCentric(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jfloat p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2BaryCentric(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), p3, p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2BlendIntoAccumulator(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2BlendIntoAccumulator(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2CatmullRom(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2CatmullRom(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_vec2Compare(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Vec2Compare(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Div(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Div(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec2Dot(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec2Dot(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Hermite(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Hermite(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2), niJVM_GetVec2f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_vec2IsNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Vec2IsNormal(niJVM_GetVec2f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec2Length(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec2Length(niJVM_GetVec2f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec2LengthSq(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec2LengthSq(niJVM_GetVec2f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Lerp(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Lerp(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Lerp2(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Lerp2(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1), niJVM_GetVec2f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Max(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Max(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Min(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Min(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Mul(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Mul(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Normalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Normalize(niJVM_GetVec2f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Scale(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Scale(niJVM_GetVec2f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Sub(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2Sub(niJVM_GetVec2f(e,p0), niJVM_GetVec2f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2Transform(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec2Transform(niJVM_GetVec2f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2TransformCoord(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2TransformCoord(niJVM_GetVec2f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_vec2TransformCoordArray(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Vec2TransformCoordArray((tVec2fCVec *)pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec2TransformNormal(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->Vec2TransformNormal(niJVM_GetVec2f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_vec2TransformNormalArray(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Vec2TransformNormalArray((tVec2fCVec *)pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Abs(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Abs(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Add(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Add(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3BaryCentric(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jfloat p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3BaryCentric(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), p3, p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3BlendIntoAccumulator(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3BlendIntoAccumulator(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3CartesianToSpherical(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3CartesianToSpherical(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3CatmullRom(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3CatmullRom(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_vec3Compare(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Vec3Compare(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Cross(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Cross(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Div(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Div(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec3Dot(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec3Dot(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Hermite(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Hermite(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2), niJVM_GetVec3f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_vec3IsNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Vec3IsNormal(niJVM_GetVec3f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec3Length(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec3Length(niJVM_GetVec3f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec3LengthSq(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec3LengthSq(niJVM_GetVec3f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Lerp(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Lerp(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Lerp2(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Lerp2(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), niJVM_GetVec3f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Max(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Max(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Min(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Min(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Mul(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Mul(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Normalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Normalize(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3OrbitPitch(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3OrbitPitch(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3OrbitYaw(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3OrbitYaw(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3OrbitYawPitch(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2, jfloat p3) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3OrbitYawPitch(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1), p2, p3));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Project(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Project(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3ProjectRHW(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec3ProjectRHW(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Reflect(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Reflect(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Scale(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Scale(niJVM_GetVec3f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3SphericalToCartesian(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3SphericalToCartesian(niJVM_GetVec3f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Sub(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Sub(niJVM_GetVec3f(e,p0), niJVM_GetVec3f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Transform(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec3Transform(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3TransformCoord(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3TransformCoord(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_vec3TransformCoordArray(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Vec3TransformCoordArray((tVec3fCVec *)pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3TransformNormal(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3TransformNormal(niJVM_GetVec3f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_vec3TransformNormalArray(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Vec3TransformNormalArray((tVec3fCVec *)pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec3Unproject(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->Vec3Unproject(niJVM_GetVec3f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetMatrixf(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Abs(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Abs(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Add(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Add(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4BaryCentric(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jfloat p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4BaryCentric(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2), p3, p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4BlendIntoAccumulator(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4BlendIntoAccumulator(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4CatmullRom(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4CatmullRom(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2), niJVM_GetVec4f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_vec4Compare(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Vec4Compare(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Cross(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Cross(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Div(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Div(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec4Dot(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec4Dot(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Hermite(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2, jobject p3, jfloat p4) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Hermite(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2), niJVM_GetVec4f(e,p3), p4));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMath_vec4IsNormal(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Vec4IsNormal(niJVM_GetVec4f(e,p0));
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec4Length(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec4Length(niJVM_GetVec4f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_vec4LengthSq(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->Vec4LengthSq(niJVM_GetVec4f(e,p0));
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Lerp(JNIEnv *e, jobject o, jobject p0, jobject p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Lerp(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Lerp2(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Lerp2(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1), niJVM_GetVec4f(e,p2)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Max(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Max(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Min(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Min(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Mul(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Mul(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Normalize(JNIEnv *e, jobject o, jobject p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Normalize(niJVM_GetVec4f(e,p0)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Scale(JNIEnv *e, jobject o, jobject p0, jfloat p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Scale(niJVM_GetVec4f(e,p0), p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Sub(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Sub(niJVM_GetVec4f(e,p0), niJVM_GetVec4f(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMath_vec4Transform(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->Vec4Transform(niJVM_GetVec4f(e,p0), niJVM_GetMatrixf(e,p1)));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMath_vec4TransformArray(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->Vec4TransformArray((tVec4fCVec *)pointer0, niJVM_GetMatrixf(e,p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_wrapFloat(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->WrapFloat(p0, p1, p2);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMath_wrapInt(JNIEnv *e, jobject o, jint p0, jint p1, jint p2) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->WrapInt(p0, p1, p2);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_wrapRad(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->WrapRad(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IMath_wrapRad2(JNIEnv *e, jobject o, jfloat p0) {
    ni::iMath* pointer = niJVM_GetIUnknown(e,o,ni::iMath);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->WrapRad2(p0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageDesc_getA(JNIEnv *e, jobject o) {
    ni::iMessageDesc* pointer = niJVM_GetIUnknown(e,o,ni::iMessageDesc);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->GetA();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageDesc_getB(JNIEnv *e, jobject o) {
    ni::iMessageDesc* pointer = niJVM_GetIUnknown(e,o,ni::iMessageDesc);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        const ni::Var& rvalue = pointer->GetB();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageDesc_getHandler(JNIEnv *e, jobject o) {
    ni::iMessageDesc* pointer = niJVM_GetIUnknown(e,o,ni::iMessageDesc);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHandler();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMessageDesc_getID(JNIEnv *e, jobject o) {
    ni::iMessageDesc* pointer = niJVM_GetIUnknown(e,o,ni::iMessageDesc);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageDesc_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMessageDesc* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageDesc>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iMessageDesc), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageDesc_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMessageDesc* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageDesc>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iMessageDesc), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IMessageHandler_getThreadID(JNIEnv *e, jobject o) {
    ni::iMessageHandler* pointer = niJVM_GetIUnknown(e,o,ni::iMessageHandler);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetThreadID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IMessageHandler_handleMessage(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iMessageHandler* pointer = niJVM_GetIUnknown(e,o,ni::iMessageHandler);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    NI_JVM_CPP_TRY {
        pointer->HandleMessage(p0, var_1, var_2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageHandler_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iMessageHandler(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageHandler_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageHandler>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageHandler_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMessageHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageHandler>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 40), &niGetInterfaceUUID(ni::iMessageHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IMessageHandlerImpl
// Implement JNI Wrapper for ni::iMessageHandler
struct JNI_ni_iMessageHandler : public ni::cIUnknownImpl<iMessageHandler> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetThreadID;
  mutable jmethodID mmHandleMessage;

  JNI_ni_iMessageHandler(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iMessageHandler() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetThreadID -> ()J
  virtual ni::tU64 __stdcall GetThreadID() const {
    NI_JVM_WRAPPER_METH_ENTER(ni,iMessageHandler,GetThreadID,getThreadID,"()J",0);
    jvalue* args = NULL;
    jlong r = e->CallLongMethodA(mObject,mmGetThreadID,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iMessageHandler,GetThreadID,getThreadID,0);
    return r;
  }
  // Method: HandleMessage -> (ILjava/lang/Object;Ljava/lang/Object;)V
  virtual void __stdcall HandleMessage(const ni::tU32 p0, const ni::Var& p1, const ni::Var& p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iMessageHandler,HandleMessage,handleMessage,"(ILjava/lang/Object;Ljava/lang/Object;)V",;);
    jvalue args[3];
    args[0].i = p0;
    jobject var_p1 = niJVM_NewVar(e, p1);
    LocalJRef<jobject> jvar_p1(e,var_p1);
    args[1].l = jvar_p1.o;
    jobject var_p2 = niJVM_NewVar(e, p2);
    LocalJRef<jobject> jvar_p2(e,var_p2);
    args[2].l = jvar_p2.o;
    e->CallVoidMethodA(mObject,mmHandleMessage,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iMessageHandler,HandleMessage,handleMessage,;);
  }
};
niExportFunc(ni::iMessageHandler*) NewJNIWrapper_ni_iMessageHandler(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iMessageHandler,e,o);
  return niNew JNI_ni_iMessageHandler(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMessageQueue_add(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jobject p3) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_2 = niJVM_GetVar(e,p2);
    ni::Var var_3 = niJVM_GetVar(e,p3);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Add(pointer0, p1, var_2, var_3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMessageQueue_getSize(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IMessageQueue_getThreadID(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetThreadID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMessageQueue_isEmpty(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsEmpty();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageQueue_peekDesc(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iMessageDesc> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->PeekDesc();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iMessageDesc), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMessageQueue_pollAndDispatch(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->PollAndDispatch();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageQueue_pollDesc(JNIEnv *e, jobject o) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iMessageDesc> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->PollDesc();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 39), &niGetInterfaceUUID(ni::iMessageDesc), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageQueue_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMessageQueue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageQueue>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iMessageQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMessageQueue_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMessageQueue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMessageQueue>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 41), &niGetInterfaceUUID(ni::iMessageQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMessageQueue_waitForMessage(JNIEnv *e, jobject o, jint p0) {
    ni::iMessageQueue* pointer = niJVM_GetIUnknown(e,o,ni::iMessageQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WaitForMessage(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getAuthor(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetAuthor());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getCopyright(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetCopyright());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getDependency(JNIEnv *e, jobject o, jint p0) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDependency(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getDesc(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetDesc());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getName(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IModuleDef_getNumConstants(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const int rvalue = pointer->GetNumConstants();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IModuleDef_getNumDependencies(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const int rvalue = pointer->GetNumDependencies();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IModuleDef_getNumEnums(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const int rvalue = pointer->GetNumEnums();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IModuleDef_getNumInterfaces(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const int rvalue = pointer->GetNumInterfaces();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IModuleDef_getNumObjectTypes(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const int rvalue = pointer->GetNumObjectTypes();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IModuleDef_getObjectType(JNIEnv *e, jobject o, jint p0) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::iObjectTypeDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetObjectType(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iObjectTypeDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IModuleDef_getVersion(JNIEnv *e, jobject o) {
    ni::iModuleDef* pointer = niJVM_GetIUnknown(e,o,ni::iModuleDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetVersion());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IModuleDef_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iModuleDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iModuleDef>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iModuleDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IModuleDef_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iModuleDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iModuleDef>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 42), &niGetInterfaceUUID(ni::iModuleDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_add(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Add(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_addAll(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddAll(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_clear(JNIEnv *e, jobject o) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Clear();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMutableCollection_getDataPtr(JNIEnv *e, jobject o) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetDataPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 70));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IMutableCollection_getDataSize(JNIEnv *e, jobject o) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetDataSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_put(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Put(var_0, var_1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMutableCollection_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iMutableCollection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMutableCollection>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iMutableCollection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IMutableCollection_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iMutableCollection* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iMutableCollection>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 43), &niGetInterfaceUUID(ni::iMutableCollection), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_remove(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Remove(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_removeAll(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iCollection* pointer0 = p0 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveAll(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_removeFirst(JNIEnv *e, jobject o) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveFirst();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_removeIterator(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iIterator* pointer0 = p0 == NULL ? NULL : (ni::iIterator*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveIterator(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_removeLast(JNIEnv *e, jobject o) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveLast();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_reserve(JNIEnv *e, jobject o, jint p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Reserve(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_resize(JNIEnv *e, jobject o, jint p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Resize(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_setFirst(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFirst(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IMutableCollection_setLast(JNIEnv *e, jobject o, jobject p0) {
    ni::iMutableCollection* pointer = niJVM_GetIUnknown(e,o,ni::iMutableCollection);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetLast(var_0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IObjectTypeDef_createInstance(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iObjectTypeDef* pointer = niJVM_GetIUnknown(e,o,ni::iObjectTypeDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateInstance(var_0, var_1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IObjectTypeDef_getName(JNIEnv *e, jobject o) {
    ni::iObjectTypeDef* pointer = niJVM_GetIUnknown(e,o,ni::iObjectTypeDef);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IObjectTypeDef_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iObjectTypeDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iObjectTypeDef>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iObjectTypeDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IObjectTypeDef_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iObjectTypeDef* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iObjectTypeDef>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 44), &niGetInterfaceUUID(ni::iObjectTypeDef), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IOSGraphicsAPI_getName(JNIEnv *e, jobject o) {
    ni::iOSGraphicsAPI* pointer = niJVM_GetIUnknown(e,o,ni::iOSGraphicsAPI);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSGraphicsAPI_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSGraphicsAPI* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSGraphicsAPI>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iOSGraphicsAPI), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSGraphicsAPI_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSGraphicsAPI* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSGraphicsAPI>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iOSGraphicsAPI), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSProcess_doWait(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Wait(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IOSProcess_getCommandLine(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetCommandLine());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSProcess_getDidCrash(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDidCrash();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IOSProcess_getExePath(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetExePath());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcess_getFile(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetFile((eOSProcessFile)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSProcess_getIsCurrent(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCurrent();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSProcess_getParentPID(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GetParentPID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSProcess_getPID(JNIEnv *e, jobject o) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GetPID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSProcess_isParentProcess(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->IsParentProcess((ni::tInt)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSProcess_kill(JNIEnv *e, jobject o, jint p0, jboolean p1) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Kill((ni::tInt)p0, p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcess_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcess>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcess_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcess>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSProcess_terminate(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Terminate((ni::tInt)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcess_waitForExitCode(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcess* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcess);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->WaitForExitCode(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessEnumSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iOSProcessEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iOSProcessEnumSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iOSProcessEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSProcessEnumSink_onOSProcessEnumSink(JNIEnv *e, jobject o, jlong p0, jlong p1, jstring p2) {
    ni::iOSProcessEnumSink* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessEnumSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnOSProcessEnumSink((ni::tIntPtr)p0, (ni::tIntPtr)p1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessEnumSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSProcessEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcessEnumSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iOSProcessEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessEnumSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSProcessEnumSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcessEnumSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 47), &niGetInterfaceUUID(ni::iOSProcessEnumSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IOSProcessEnumSinkImpl
// Implement JNI Wrapper for ni::iOSProcessEnumSink
struct JNI_ni_iOSProcessEnumSink : public ni::cIUnknownImpl<iOSProcessEnumSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnOSProcessEnumSink;

  JNI_ni_iOSProcessEnumSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iOSProcessEnumSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnOSProcessEnumSink -> (JJLjava/lang/String;)Z
  virtual ni::tBool __stdcall OnOSProcessEnumSink(ni::tIntPtr p0, ni::tIntPtr p1, const ni::achar* p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iOSProcessEnumSink,OnOSProcessEnumSink,onOSProcessEnumSink,"(JJLjava/lang/String;)Z",ni::eFalse);
    jvalue args[3];
    args[0].j = p0;
    args[1].j = p1;
    LocalJString jstr_p2(e,p2);
    args[2].l = jstr_p2.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnOSProcessEnumSink,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iOSProcessEnumSink,OnOSProcessEnumSink,onOSProcessEnumSink,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iOSProcessEnumSink*) NewJNIWrapper_ni_iOSProcessEnumSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iOSProcessEnumSink,e,o);
  return niNew JNI_ni_iOSProcessEnumSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_createProcess(JNIEnv *e, jobject o, jint p0) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateProcess((ni::tInt)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSProcessManager_enumProcesses(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRegex* pointer0 = p0 == NULL ? NULL : (ni::iRegex*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iOSProcessEnumSink* pointer1 = p1 == NULL ? NULL : (ni::iOSProcessEnumSink*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->EnumProcesses(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_getCurrentProcess(JNIEnv *e, jobject o) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetCurrentProcess();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSProcessManager_getCurrentProcessID(JNIEnv *e, jobject o) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GetCurrentProcessID();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSProcessManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcessManager>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iOSProcessManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSProcessManager* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSProcessManager>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 48), &niGetInterfaceUUID(ni::iOSProcessManager), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_spawnProcess(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->SpawnProcess(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSProcessManager_spawnProcessEx(JNIEnv *e, jobject o, jstring p0, jstring p1, jobject p2, jint p3) {
    ni::iOSProcessManager* pointer = niJVM_GetIUnknown(e,o,ni::iOSProcessManager);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iCollection* pointer2 = p2 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSProcess* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->SpawnProcessEx(pointer0, pointer1, (const tStringCMap *)pointer2, p3);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 46), &niGetInterfaceUUID(ni::iOSProcess), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_activateWindow(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->ActivateWindow();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_attachGraphicsAPI(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iOSGraphicsAPI* pointer0 = p0 == NULL ? NULL : (ni::iOSGraphicsAPI*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AttachGraphicsAPI(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_centerWindow(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->CenterWindow();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_clear(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IOSWindow_getClientAreaWindow(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetClientAreaWindow();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getClientSize(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetClientSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IOSWindow_getContentsScale(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetContentsScale();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getCursor(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eOSCursor rvalue = pointer->GetCursor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getCursorCapture(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetCursorCapture();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getCursorPosition(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetCursorPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IOSWindow_getCustomCursorID(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetCustomCursorID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getDropTarget(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDropTarget();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getFullScreen(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFullScreen();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getGraphicsAPI(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSGraphicsAPI* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetGraphicsAPI();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 45), &niGetInterfaceUUID(ni::iOSGraphicsAPI), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IOSWindow_getHandle(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetHandle();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getHasFocus(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetHasFocus();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getIsActive(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsActive();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getIsCursorOverClient(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCursorOverClient();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getIsHandleOwned(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsHandleOwned();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getIsMaximized(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsMaximized();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getIsMinimized(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsMinimized();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getMessageHandlers(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tMessageHandlerSinkLst * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMessageHandlers();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(tMessageHandlerSinkLst ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getMonitor(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMonitor();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getParent(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iOSWindow* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetParent();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iOSWindow), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IOSWindow_getParentHandle(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetParentHandle();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IOSWindow_getPID(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetPID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getPosition(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetPosition());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getRect(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetRect());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IOSWindow_getRefreshTimer(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetRefreshTimer();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_getRequestedClose(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetRequestedClose();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getShow(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetShow();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_getSize(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetSize());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getStyle(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetStyle();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IOSWindow_getTitle(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetTitle());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_getZOrder(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eOSWindowZOrder rvalue = pointer->GetZOrder();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_initCustomCursor(JNIEnv *e, jobject o, jlong p0, jint p1, jint p2, jint p3, jint p4, jobject p5) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer5(e, p5);
    int* pointer5 = (int*)lock_JBuffer5.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->InitCustomCursor((ni::tIntPtr)p0, p1, p2, p3, p4, (ni::tU32*)pointer5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IOSWindow_isParentWindow(JNIEnv *e, jobject o, jlong p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->IsParentWindow((ni::tIntPtr)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSWindow* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSWindow>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iOSWindow), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindow_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSWindow* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSWindow>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 49), &niGetInterfaceUUID(ni::iOSWindow), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_redrawWindow(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RedrawWindow();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setClientAreaWindow(JNIEnv *e, jobject o, jlong p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetClientAreaWindow((ni::tIntPtr)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setClientSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetClientSize(niJVM_GetVec2i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setCursor(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCursor((eOSCursor)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setCursorCapture(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCursorCapture(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setCursorPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetCursorPosition(niJVM_GetVec2i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setDropTarget(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDropTarget(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setFocus(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFocus();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_setFullScreen(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetFullScreen(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setPosition(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetPosition(niJVM_GetVec2i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setRect(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRect(niJVM_GetVec4i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setRefreshTimer(JNIEnv *e, jobject o, jfloat p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRefreshTimer(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setRequestedClose(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRequestedClose(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setShow(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetShow(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setSize(JNIEnv *e, jobject o, jobject p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSize(niJVM_GetVec2i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setStyle(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStyle(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setTitle(JNIEnv *e, jobject o, jstring p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTitle(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_setZOrder(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetZOrder((eOSWindowZOrder)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_switchIn(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchIn(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_switchOut(JNIEnv *e, jobject o, jint p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SwitchOut(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindow_tryClose(JNIEnv *e, jobject o) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->TryClose();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IOSWindow_updateWindow(JNIEnv *e, jobject o, jboolean p0) {
    ni::iOSWindow* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindow);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->UpdateWindow(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindowGeneric_genericInputString(JNIEnv *e, jobject o, jstring p0) {
    ni::iOSWindowGeneric* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindowGeneric);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->GenericInputString(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindowGeneric_genericSendMessage(JNIEnv *e, jobject o, jint p0, jobject p1, jobject p2) {
    ni::iOSWindowGeneric* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindowGeneric);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_1 = niJVM_GetVar(e,p1);
    ni::Var var_2 = niJVM_GetVar(e,p2);
    NI_JVM_CPP_TRY {
        pointer->GenericSendMessage(p0, var_1, var_2);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindowGeneric_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iOSWindowGeneric* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSWindowGeneric>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 50), &niGetInterfaceUUID(ni::iOSWindowGeneric), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IOSWindowGeneric_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iOSWindowGeneric* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iOSWindowGeneric>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 50), &niGetInterfaceUUID(ni::iOSWindowGeneric), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IOSWindowGeneric_setContentsScale(JNIEnv *e, jobject o, jfloat p0) {
    ni::iOSWindowGeneric* pointer = niJVM_GetIUnknown(e,o,ni::iOSWindowGeneric);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetContentsScale(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_compile(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePCREError rvalue = pointer->Compile(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_compile2(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePCREError rvalue = pointer->Compile2(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IPCRE_getIsCompiled(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetIsCompiled();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getLastCompileError(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ePCREError rvalue = pointer->GetLastCompileError();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IPCRE_getLastCompileErrorDesc(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetLastCompileErrorDesc());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getLastCompileErrorOffset(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetLastCompileErrorOffset();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IPCRE_getMarker(JNIEnv *e, jobject o, jint p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetMarker(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getNamedIndex(JNIEnv *e, jobject o, jstring p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNamedIndex(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IPCRE_getNamedMarker(JNIEnv *e, jobject o, jstring p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetNamedMarker(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IPCRE_getNamedName(JNIEnv *e, jobject o, jint p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetNamedName(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IPCRE_getNamedString(JNIEnv *e, jobject o, jstring p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetNamedString(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getNumMarkers(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumMarkers();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getNumNamed(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetNumNamed();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_getOptions(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetOptions();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IPCRE_getString(JNIEnv *e, jobject o, jint p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetString(p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_match(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Match(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_matchRaw(JNIEnv *e, jobject o, jstring p0) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->MatchRaw(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IPCRE_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iPCRE* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iPCRE>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 51), &niGetInterfaceUUID(ni::iPCRE), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IPCRE_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iPCRE* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iPCRE>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 51), &niGetInterfaceUUID(ni::iPCRE), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IPCRE_reset(JNIEnv *e, jobject o) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Reset();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IPCRE_split(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Split(pointer0, p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IPCRE_sub(JNIEnv *e, jobject o, jstring p0, jstring p1, jboolean p2) {
    ni::iPCRE* pointer = niJVM_GetIUnknown(e,o,ni::iPCRE);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->Sub(pointer0, pointer1, p2));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IProf_drawGraph(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iProfDraw* pointer0 = p0 == NULL ? NULL : (ni::iProfDraw*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawGraph(pointer0, p1, p2, p3, p4);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IProf_drawTable(JNIEnv *e, jobject o, jobject p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jint p5) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iProfDraw* pointer0 = p0 == NULL ? NULL : (ni::iProfDraw*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DrawTable(pointer0, p1, p2, p3, p4, p5);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IProf_getRecord(JNIEnv *e, jobject o) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetRecord();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IProf_getReportMode(JNIEnv *e, jobject o) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eProfilerReportMode rvalue = pointer->GetReportMode();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputMoveCursor(JNIEnv *e, jobject o, jint p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputMoveCursor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputMoveFrame(JNIEnv *e, jobject o, jint p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputMoveFrame(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputSelect(JNIEnv *e, jobject o) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputSelect();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputSelectParent(JNIEnv *e, jobject o) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputSelectParent();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputSetCursor(JNIEnv *e, jobject o, jint p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputSetCursor(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_inputSetFrame(JNIEnv *e, jobject o, jint p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->InputSetFrame(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IProf_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iProf* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iProf>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iProf), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IProf_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iProf* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iProf>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 52), &niGetInterfaceUUID(ni::iProf), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_setRecord(JNIEnv *e, jobject o, jboolean p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRecord(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_setReportMode(JNIEnv *e, jobject o, jint p0) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetReportMode((eProfilerReportMode)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IProf_textReport(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->TextReport(p0, p1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IProf_update(JNIEnv *e, jobject o) {
    ni::iProf* pointer = niJVM_GetIUnknown(e,o,ni::iProf);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Update();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_beginDraw(JNIEnv *e, jobject o, jboolean p0) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->BeginDraw(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_beginText(JNIEnv *e, jobject o) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->BeginText();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_drawLine(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jint p4) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->DrawLine(p0, p1, p2, p3, p4);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_drawRect(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jint p4) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->DrawRect(p0, p1, p2, p3, p4);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_endDraw(JNIEnv *e, jobject o) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->EndDraw();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_endText(JNIEnv *e, jobject o) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->EndText();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IProfDraw_getTextHeight(JNIEnv *e, jobject o) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetTextHeight();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niLang_IProfDraw_getTextWidth(JNIEnv *e, jobject o, jstring p0) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetTextWidth(pointer0);
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IProfDraw_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iProfDraw* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iProfDraw(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iProfDraw), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IProfDraw_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iProfDraw* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iProfDraw>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iProfDraw), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IProfDraw_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iProfDraw* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iProfDraw>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 53), &niGetInterfaceUUID(ni::iProfDraw), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IProfDraw_text(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jstring p2, jint p3) {
    ni::iProfDraw* pointer = niJVM_GetIUnknown(e,o,ni::iProfDraw);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    NI_JVM_CPP_TRY {
        pointer->Text(p0, p1, pointer2, p3);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IProfDrawImpl
// Implement JNI Wrapper for ni::iProfDraw
struct JNI_ni_iProfDraw : public ni::cIUnknownImpl<iProfDraw> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmBeginDraw;
  mutable jmethodID mmBeginText;
  mutable jmethodID mmDrawLine;
  mutable jmethodID mmDrawRect;
  mutable jmethodID mmEndDraw;
  mutable jmethodID mmEndText;
  mutable jmethodID mmGetTextHeight;
  mutable jmethodID mmGetTextWidth;
  mutable jmethodID mmText;

  JNI_ni_iProfDraw(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iProfDraw() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: BeginDraw -> (Z)V
  virtual void __stdcall BeginDraw(ni::tBool p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,BeginDraw,beginDraw,"(Z)V",;);
    jvalue args[1];
    args[0].z = p0;
    e->CallVoidMethodA(mObject,mmBeginDraw,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,BeginDraw,beginDraw,;);
  }
  // Method: BeginText -> ()V
  virtual void __stdcall BeginText() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,BeginText,beginText,"()V",;);
    jvalue* args = NULL;
    e->CallVoidMethodA(mObject,mmBeginText,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,BeginText,beginText,;);
  }
  // Method: DrawLine -> (FFFFI)V
  virtual void __stdcall DrawLine(ni::tF32 p0, ni::tF32 p1, ni::tF32 p2, ni::tF32 p3, ni::tU32 p4) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,DrawLine,drawLine,"(FFFFI)V",;);
    jvalue args[5];
    args[0].f = p0;
    args[1].f = p1;
    args[2].f = p2;
    args[3].f = p3;
    args[4].i = p4;
    e->CallVoidMethodA(mObject,mmDrawLine,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,DrawLine,drawLine,;);
  }
  // Method: DrawRect -> (FFFFI)V
  virtual void __stdcall DrawRect(ni::tF32 p0, ni::tF32 p1, ni::tF32 p2, ni::tF32 p3, ni::tU32 p4) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,DrawRect,drawRect,"(FFFFI)V",;);
    jvalue args[5];
    args[0].f = p0;
    args[1].f = p1;
    args[2].f = p2;
    args[3].f = p3;
    args[4].i = p4;
    e->CallVoidMethodA(mObject,mmDrawRect,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,DrawRect,drawRect,;);
  }
  // Method: EndDraw -> ()V
  virtual void __stdcall EndDraw() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,EndDraw,endDraw,"()V",;);
    jvalue* args = NULL;
    e->CallVoidMethodA(mObject,mmEndDraw,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,EndDraw,endDraw,;);
  }
  // Method: EndText -> ()V
  virtual void __stdcall EndText() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,EndText,endText,"()V",;);
    jvalue* args = NULL;
    e->CallVoidMethodA(mObject,mmEndText,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,EndText,endText,;);
  }
  // Method: GetTextHeight -> ()F
  virtual ni::tF32 __stdcall GetTextHeight() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,GetTextHeight,getTextHeight,"()F",0);
    jvalue* args = NULL;
    jfloat r = e->CallFloatMethodA(mObject,mmGetTextHeight,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,GetTextHeight,getTextHeight,0);
    return r;
  }
  // Method: GetTextWidth -> (Ljava/lang/String;)F
  virtual ni::tF32 __stdcall GetTextWidth(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,GetTextWidth,getTextWidth,"(Ljava/lang/String;)F",0);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jfloat r = e->CallFloatMethodA(mObject,mmGetTextWidth,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,GetTextWidth,getTextWidth,0);
    return r;
  }
  // Method: Text -> (FFLjava/lang/String;I)V
  virtual void __stdcall Text(ni::tF32 p0, ni::tF32 p1, const ni::achar* p2, ni::tU32 p3) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iProfDraw,Text,text,"(FFLjava/lang/String;I)V",;);
    jvalue args[4];
    args[0].f = p0;
    args[1].f = p1;
    LocalJString jstr_p2(e,p2);
    args[2].l = jstr_p2.o;
    args[3].i = p3;
    e->CallVoidMethodA(mObject,mmText,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iProfDraw,Text,text,;);
  }
};
niExportFunc(ni::iProfDraw*) NewJNIWrapper_ni_iProfDraw(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iProfDraw,e,o);
  return niNew JNI_ni_iProfDraw(e,o);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IRegex_doesMatch(JNIEnv *e, jobject o, jstring p0) {
    ni::iRegex* pointer = niJVM_GetIUnknown(e,o,ni::iRegex);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->DoesMatch(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IRegex_getImplType(JNIEnv *e, jobject o) {
    ni::iRegex* pointer = niJVM_GetIUnknown(e,o,ni::iRegex);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetImplType());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRegex_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iRegex* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRegex>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 54), &niGetInterfaceUUID(ni::iRegex), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRegex_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iRegex* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRegex>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 54), &niGetInterfaceUUID(ni::iRegex), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iRunnable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRunnable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iRunnable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRunnable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnable_run(JNIEnv *e, jobject o) {
    ni::iRunnable* pointer = niJVM_GetIUnknown(e,o,ni::iRunnable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->Run();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IRunnableQueue_add(JNIEnv *e, jobject o, jobject p0) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iRunnable* pointer0 = p0 == NULL ? NULL : (ni::iRunnable*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Add(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IRunnableQueue_getSize(JNIEnv *e, jobject o) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetSize();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_IRunnableQueue_getThreadID(JNIEnv *e, jobject o) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetThreadID();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IRunnableQueue_isEmpty(JNIEnv *e, jobject o) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->IsEmpty();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnableQueue_peek(JNIEnv *e, jobject o) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Peek();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnableQueue_poll(JNIEnv *e, jobject o) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Poll();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 55), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnableQueue_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iRunnableQueue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRunnableQueue>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iRunnableQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IRunnableQueue_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iRunnableQueue* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iRunnableQueue>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 56), &niGetInterfaceUUID(ni::iRunnableQueue), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IRunnableQueue_waitForRunnable(JNIEnv *e, jobject o, jint p0) {
    ni::iRunnableQueue* pointer = niJVM_GetIUnknown(e,o,ni::iRunnableQueue);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WaitForRunnable(p0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IScriptingHost_canEvalImpl(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iScriptingHost* pointer = niJVM_GetIUnknown(e,o,ni::iScriptingHost);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->CanEvalImpl(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IScriptingHost_evalImpl(JNIEnv *e, jobject o, jobject p0, jobject p1, jobject p2) {
    ni::iScriptingHost* pointer = niJVM_GetIUnknown(e,o,ni::iScriptingHost);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iHString* pointer1 = p1 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->EvalImpl(pointer0, pointer1, niJVM_GetUUID(e,p2));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 69), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IScriptingHost_evalString(JNIEnv *e, jobject o, jobject p0, jstring p1) {
    ni::iScriptingHost* pointer = niJVM_GetIUnknown(e,o,ni::iScriptingHost);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->EvalString(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IScriptingHost_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iScriptingHost(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IScriptingHost_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iScriptingHost>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IScriptingHost_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iScriptingHost* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iScriptingHost>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 57), &niGetInterfaceUUID(ni::iScriptingHost), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IScriptingHost_service(JNIEnv *e, jobject o, jboolean p0) {
    ni::iScriptingHost* pointer = niJVM_GetIUnknown(e,o,ni::iScriptingHost);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Service(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IScriptingHostImpl
// Implement JNI Wrapper for ni::iScriptingHost
struct JNI_ni_iScriptingHost : public ni::cIUnknownImpl<iScriptingHost> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmCanEvalImpl;
  mutable jmethodID mmEvalImpl;
  mutable jmethodID mmEvalString;
  mutable jmethodID mmService;

  JNI_ni_iScriptingHost(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iScriptingHost() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: CanEvalImpl -> (Lni/niLang/IHString;Lni/niLang/IHString;)Z
  virtual ni::tBool __stdcall CanEvalImpl(ni::iHString* p0, ni::iHString* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iScriptingHost,CanEvalImpl,canEvalImpl,"(Lni/niLang/IHString;Lni/niLang/IHString;)Z",ni::eFalse);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmCanEvalImpl,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iScriptingHost,CanEvalImpl,canEvalImpl,ni::eFalse);
    return r;
  }
  // Method: EvalImpl -> (Lni/niLang/IHString;Lni/niLang/IHString;Lni/types/UUID;)Lni/types/IUnknown;
  virtual ni::iUnknown* __stdcall EvalImpl(ni::iHString* p0, ni::iHString* p1, const ni::tUUID& p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iScriptingHost,EvalImpl,evalImpl,"(Lni/niLang/IHString;Lni/niLang/IHString;Lni/types/UUID;)Lni/types/IUnknown;",(ni::iUnknown*)NULL);
    jvalue args[3];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject iu_p1 = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), p1);
    LocalJRef<jobject> jiu_p1(e,iu_p1);
    args[1].l = jiu_p1.o;
    jobject xt_p2 = niJVM_NewUUID(e, p2);
    LocalJRef<jobject> jxt_p2(e,xt_p2);
    args[2].l = jxt_p2.o;
    jobject r = e->CallObjectMethodA(mObject,mmEvalImpl,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iScriptingHost,EvalImpl,evalImpl,(ni::iUnknown*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iUnknown);
  }
  // Method: EvalString -> (Lni/niLang/IHString;Ljava/lang/String;)Z
  virtual ni::tBool __stdcall EvalString(ni::iHString* p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iScriptingHost,EvalString,evalString,"(Lni/niLang/IHString;Ljava/lang/String;)Z",ni::eFalse);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 31), &niGetInterfaceUUID(ni::iHString), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmEvalString,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iScriptingHost,EvalString,evalString,ni::eFalse);
    return r;
  }
  // Method: Service -> (Z)V
  virtual void __stdcall Service(ni::tBool p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iScriptingHost,Service,service,"(Z)V",;);
    jvalue args[1];
    args[0].z = p0;
    e->CallVoidMethodA(mObject,mmService,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iScriptingHost,Service,service,;);
  }
};
niExportFunc(ni::iScriptingHost*) NewJNIWrapper_ni_iScriptingHost(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iScriptingHost,e,o);
  return niNew JNI_ni_iScriptingHost(e,o);
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ISerializable_getSerializeObjectTypeID(JNIEnv *e, jobject o) {
    ni::iSerializable* pointer = niJVM_GetIUnknown(e,o,ni::iSerializable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetSerializeObjectTypeID());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ISerializable_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSerializable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSerializable>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iSerializable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ISerializable_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSerializable* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSerializable>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 58), &niGetInterfaceUUID(ni::iSerializable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ISerializable_serialize(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iSerializable* pointer = niJVM_GetIUnknown(e,o,ni::iSerializable);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->Serialize(pointer0, (eSerializeMode)p1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ISinkList_addFrontSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddFrontSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ISinkList_addSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ISinkList_clear(JNIEnv *e, jobject o) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->Clear();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ISinkList_getMute(JNIEnv *e, jobject o) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetMute();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ISinkList_getSinkUUID(JNIEnv *e, jobject o) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewUUID(e,pointer->GetSinkUUID());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ISinkList_hasSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->HasSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ISinkList_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iSinkList* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSinkList>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iSinkList), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ISinkList_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iSinkList* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iSinkList>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 59), &niGetInterfaceUUID(ni::iSinkList), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ISinkList_removeSink(JNIEnv *e, jobject o, jobject p0) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->RemoveSink(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ISinkList_setMute(JNIEnv *e, jobject o, jboolean p0) {
    ni::iSinkList* pointer = niJVM_GetIUnknown(e,o,ni::iSinkList);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMute(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niLang_IStringTokenizer_getCharType(JNIEnv *e, jobject o, jint p0) {
    ni::iStringTokenizer* pointer = niJVM_GetIUnknown(e,o,ni::iStringTokenizer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eStringTokenizerCharType rvalue = pointer->GetCharType(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IStringTokenizer_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iStringTokenizer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iStringTokenizer(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iStringTokenizer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_IStringTokenizer_onNewLine(JNIEnv *e, jobject o) {
    ni::iStringTokenizer* pointer = niJVM_GetIUnknown(e,o,ni::iStringTokenizer);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnNewLine();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IStringTokenizer_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iStringTokenizer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iStringTokenizer>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iStringTokenizer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IStringTokenizer_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iStringTokenizer* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iStringTokenizer>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 60), &niGetInterfaceUUID(ni::iStringTokenizer), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IStringTokenizerImpl
// Implement JNI Wrapper for ni::iStringTokenizer
struct JNI_ni_iStringTokenizer : public ni::cIUnknownImpl<iStringTokenizer> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmGetCharType;
  mutable jmethodID mmOnNewLine;

  JNI_ni_iStringTokenizer(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iStringTokenizer() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: GetCharType -> (I)I
  virtual eStringTokenizerCharType __stdcall GetCharType(ni::tU32 p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iStringTokenizer,GetCharType,getCharType,"(I)I",(eStringTokenizerCharType)NULL);
    jvalue args[1];
    args[0].i = p0;
    jint r = e->CallIntMethodA(mObject,mmGetCharType,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iStringTokenizer,GetCharType,getCharType,(eStringTokenizerCharType)NULL);
    return (eStringTokenizerCharType)r;
  }
  // Method: OnNewLine -> ()V
  virtual void __stdcall OnNewLine() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iStringTokenizer,OnNewLine,onNewLine,"()V",;);
    jvalue* args = NULL;
    e->CallVoidMethodA(mObject,mmOnNewLine,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iStringTokenizer,OnNewLine,onNewLine,;);
  }
};
niExportFunc(ni::iStringTokenizer*) NewJNIWrapper_ni_iStringTokenizer(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iStringTokenizer,e,o);
  return niNew JNI_ni_iStringTokenizer(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ITime_addSeconds(JNIEnv *e, jobject o, jlong p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->AddSeconds(p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ITime_clone(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->Clone();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ITime_compare(JNIEnv *e, jobject o, jobject p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer0 = p0 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->Compare(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ITime_copy(JNIEnv *e, jobject o, jobject p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTime* pointer0 = p0 == NULL ? NULL : (ni::iTime*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Copy(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_ITime_format(JNIEnv *e, jobject o, jstring p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->Format(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getDay(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetDay();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_ITime_getDayLightSaving(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->GetDayLightSaving();
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getHour(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetHour();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getMinute(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetMinute();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getMonth(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetMonth();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getSecond(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetSecond();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ITime_getTimeZone(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetTimeZone();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niLang_ITime_getUnixTimeSecs(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetUnixTimeSecs();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niLang_ITime_getWeekday(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetWeekday();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_ITime_getYear(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetYear();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ITime_parseString(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ParseString(pointer0, pointer1);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ITime_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTime>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_ITime_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTime* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTime>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 61), &niGetInterfaceUUID(ni::iTime), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setDay(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDay(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setDayLightSaving(JNIEnv *e, jobject o, jboolean p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetDayLightSaving(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setHour(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHour(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setMinute(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMinute(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setMonth(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMonth(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setSecond(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetSecond(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setTimeZone(JNIEnv *e, jobject o, jint p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetTimeZone(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setUnixTimeSecs(JNIEnv *e, jobject o, jlong p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUnixTimeSecs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_setYear(JNIEnv *e, jobject o, jint p0) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetYear(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niLang_ITime_updateFromCurrentSystemTime(JNIEnv *e, jobject o) {
    ni::iTime* pointer = niJVM_GetIUnknown(e,o,ni::iTime);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->UpdateFromCurrentSystemTime();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IToString_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iToString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iToString>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 62), &niGetInterfaceUUID(ni::iToString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IToString_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iToString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iToString>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 62), &niGetInterfaceUUID(ni::iToString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niLang_IToString_toString(JNIEnv *e, jobject o) {
    ni::iToString* pointer = niJVM_GetIUnknown(e,o,ni::iToString);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->ToString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IURLFileHandler_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iURLFileHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iURLFileHandler(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iURLFileHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IURLFileHandler_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iURLFileHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iURLFileHandler>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iURLFileHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IURLFileHandler_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iURLFileHandler* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iURLFileHandler>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 63), &niGetInterfaceUUID(ni::iURLFileHandler), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IURLFileHandler_urlexists(JNIEnv *e, jobject o, jstring p0) {
    ni::iURLFileHandler* pointer = niJVM_GetIUnknown(e,o,ni::iURLFileHandler);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->URLExists(pointer0);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IURLFileHandler_urlopen(JNIEnv *e, jobject o, jstring p0) {
    ni::iURLFileHandler* pointer = niJVM_GetIUnknown(e,o,ni::iURLFileHandler);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLOpen(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IURLFileHandlerImpl
// Implement JNI Wrapper for ni::iURLFileHandler
struct JNI_ni_iURLFileHandler : public ni::cIUnknownImpl<iURLFileHandler> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmURLExists;
  mutable jmethodID mmURLOpen;

  JNI_ni_iURLFileHandler(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iURLFileHandler() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: URLExists -> (Ljava/lang/String;)Z
  virtual ni::tBool __stdcall URLExists(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iURLFileHandler,URLExists,urlexists,"(Ljava/lang/String;)Z",ni::eFalse);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmURLExists,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iURLFileHandler,URLExists,urlexists,ni::eFalse);
    return r;
  }
  // Method: URLOpen -> (Ljava/lang/String;)Lni/niLang/IFile;
  virtual ni::iFile* __stdcall URLOpen(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iURLFileHandler,URLOpen,urlopen,"(Ljava/lang/String;)Lni/niLang/IFile;",(ni::iFile*)NULL);
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmURLOpen,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iURLFileHandler,URLOpen,urlopen,(ni::iFile*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iFile);
  }
};
niExportFunc(ni::iURLFileHandler*) NewJNIWrapper_ni_iURLFileHandler(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iURLFileHandler,e,o);
  return niNew JNI_ni_iURLFileHandler(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IXmlParserSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iXmlParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iXmlParserSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iXmlParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IXmlParserSink_onXmlParserSink_1Attribute(JNIEnv *e, jobject o, jstring p0, jstring p1) {
    ni::iXmlParserSink* pointer = niJVM_GetIUnknown(e,o,ni::iXmlParserSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnXmlParserSink_Attribute(pointer0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IXmlParserSink_onXmlParserSink_1Node(JNIEnv *e, jobject o, jint p0, jstring p1) {
    ni::iXmlParserSink* pointer = niJVM_GetIUnknown(e,o,ni::iXmlParserSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->OnXmlParserSink_Node((eXmlParserNodeType)p0, pointer1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IXmlParserSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iXmlParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iXmlParserSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iXmlParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IXmlParserSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iXmlParserSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iXmlParserSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 64), &niGetInterfaceUUID(ni::iXmlParserSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niLang.IXmlParserSinkImpl
// Implement JNI Wrapper for ni::iXmlParserSink
struct JNI_ni_iXmlParserSink : public ni::cIUnknownImpl<iXmlParserSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnXmlParserSink_Attribute;
  mutable jmethodID mmOnXmlParserSink_Node;

  JNI_ni_iXmlParserSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iXmlParserSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnXmlParserSink_Attribute -> (Ljava/lang/String;Ljava/lang/String;)Z
  virtual ni::tBool __stdcall OnXmlParserSink_Attribute(const ni::achar* p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iXmlParserSink,OnXmlParserSink_Attribute,onXmlParserSink_Attribute,"(Ljava/lang/String;Ljava/lang/String;)Z",ni::eFalse);
    jvalue args[2];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnXmlParserSink_Attribute,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iXmlParserSink,OnXmlParserSink_Attribute,onXmlParserSink_Attribute,ni::eFalse);
    return r;
  }
  // Method: OnXmlParserSink_Node -> (ILjava/lang/String;)Z
  virtual ni::tBool __stdcall OnXmlParserSink_Node(eXmlParserNodeType p0, const ni::achar* p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iXmlParserSink,OnXmlParserSink_Node,onXmlParserSink_Node,"(ILjava/lang/String;)Z",ni::eFalse);
    jvalue args[2];
    args[0].i = p0;
    LocalJString jstr_p1(e,p1);
    args[1].l = jstr_p1.o;
    jboolean r = e->CallBooleanMethodA(mObject,mmOnXmlParserSink_Node,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iXmlParserSink,OnXmlParserSink_Node,onXmlParserSink_Node,ni::eFalse);
    return r;
  }
};
niExportFunc(ni::iXmlParserSink*) NewJNIWrapper_ni_iXmlParserSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iXmlParserSink,e,o);
  return niNew JNI_ni_iXmlParserSink(e,o);
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createFileRawBufferDecoder(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileRawBufferDecoder(pointer0, (ni::tSize)p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createFileRawBufferEncoder(JNIEnv *e, jobject o, jobject p0) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileRawBufferEncoder(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createFileZipBufferDecoder(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileZipBufferDecoder(pointer0, (ni::tSize)p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createFileZipBufferEncoder(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateFileZipBufferEncoder(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createRawBufferDecoder(JNIEnv *e, jobject o) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBufferDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRawBufferDecoder();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iBufferDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createRawBufferEncoder(JNIEnv *e, jobject o) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBufferEncoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateRawBufferEncoder();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iBufferEncoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createZipArchive(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iCollection* pointer2 = p2 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iZipArchWrite* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateZipArchive(pointer0, pointer1, (const tStringCVec *)pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iZipArchWrite), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createZipBufferDecoder(JNIEnv *e, jobject o) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBufferDecoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateZipBufferDecoder();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iBufferDecoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_createZipBufferEncoder(JNIEnv *e, jobject o, jint p0) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iBufferEncoder* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateZipBufferEncoder(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iBufferEncoder), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_gzipOpen(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GZipOpen(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iZip* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iZip>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iZip), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iZip* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iZip>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 65), &niGetInterfaceUUID(ni::iZip), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IZip_zipCompressBuffer(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer1 = p1 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ZipCompressBuffer((ni::tPtr)pointer0, (ni::tPtr)pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IZip_zipCompressBufferInFile(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    void* pointer1 = p1 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ZipCompressBufferInFile(pointer0, (ni::tPtr)pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niLang_IZip_zipCompressFile(JNIEnv *e, jobject o, jobject p0, jobject p1, jint p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->ZipCompressFile(pointer0, pointer1, p2, p3);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZip_zipInflateFileInBuffer(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ZipInflateFileInBuffer((ni::tPtr)pointer0, p1, pointer2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZip_zipOpen(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFileBase* pointer0 = p0 == NULL ? NULL : (ni::iFileBase*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iFile* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ZipOpen(pointer0, p1);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 22), &niGetInterfaceUUID(ni::iFile), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZip_zipUncompressBuffer(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    void* pointer2 = p2 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p2, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ZipUncompressBuffer((ni::tPtr)pointer0, p1, (ni::tPtr)pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZip_zipUncompressBufferInFile(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    void* pointer2 = p2 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p2, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ZipUncompressBufferInFile(pointer0, p1, (ni::tPtr)pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZip_zipUncompressFile(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iFile* pointer0 = p0 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ZipUncompressFile(pointer0, p1, pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZip_zipUncompressFileInBuffer(JNIEnv *e, jobject o, jobject p0, jint p1, jobject p2, jint p3) {
    ni::iZip* pointer = niJVM_GetIUnknown(e,o,ni::iZip);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ZipUncompressFileInBuffer((ni::tPtr)pointer0, p1, pointer2, p3);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niLang_IZipArchWrite_addFileBlock(JNIEnv *e, jobject o, jstring p0, jobject p1, jlong p2) {
    ni::iZipArchWrite* pointer = niJVM_GetIUnknown(e,o,ni::iZipArchWrite);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iFile* pointer1 = p1 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->AddFileBlock(pointer0, pointer1, p2);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZipArchWrite_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iZipArchWrite* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iZipArchWrite>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iZipArchWrite), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_IZipArchWrite_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iZipArchWrite* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iZipArchWrite>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 66), &niGetInterfaceUUID(ni::iZipArchWrite), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niLang_Lib__1getLang(JNIEnv *e, jclass c) {
    jobject r = NULL;
    ni::iLang* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = ni::GetLang();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 37), &niGetInterfaceUUID(ni::iLang), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
