//////////////////////////////////////////////////////////////////////////////////////////////
//
// Autogenerated module definition, for ni::niCURL.
//
//////////////////////////////////////////////////////////////////////////////////////////////
//lint -e750 : local macro '_XXX_ModuleDef' (line NN, file _XXX_ModuleDef.cpp) not referenced
//lint -e766 : Header file '...\ModuleDefImpl_Begin.h' not used in module '_XXX_ModuleDef.cpp'

#include "stdafx.h"
#include "API/niCURL_ModuleDef.h"
#include <niLang/Utils/ModuleDefImpl_Begin.h>

#ifndef niConfig_OnlyObjectTypesIDL
#endif // #ifndef niConfig_OnlyObjectTypesIDL



#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
#define _niCURL_ModuleDef
#include <niLang/Utils/VMCallCImpl.h>
#ifndef niConfig_NoXCALL
#define IDLC_BEGIN_NAMESPACE() namespace ni { namespace xcall_cimpl {
#define IDLC_END_NAMESPACE() }}
#ifndef XCALL_CIMPL
#define XCALL_CIMPL(NAME) ni::xcall_cimpl::NAME
#endif
#include "_idl/ICURL.h.idl.inl"
#include "_idl/IFetch.h.idl.inl"
#endif // niConfig_NoXCALL
#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef

namespace ni {
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef


//////////////////////////////////////////////////////////////////////////////////////////////
// iCURL wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCURL() {

// Method: GetVersion
static const ni::sMethodDef iCURL_GetVersion = {
  "GetVersion",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetVersion)
#else
  NULL
#endif
};

// Method: GetProtocols
static const ni::sMethodDef iCURL_GetProtocols = {
  "GetProtocols",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetProtocols)
#else
  NULL
#endif
};

// Method: SetConnectionTimeoutInSecs
static const ni::sParameterDef iCURL_SetConnectionTimeoutInSecs_Parameters[1] = { 
  { "anInSecs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iCURL_SetConnectionTimeoutInSecs = {
  "SetConnectionTimeoutInSecs",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "void",
  1, iCURL_SetConnectionTimeoutInSecs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetConnectionTimeoutInSecs)
#else
  NULL
#endif
};

// Method: GetConnectionTimeoutInSecs
static const ni::sMethodDef iCURL_GetConnectionTimeoutInSecs = {
  "GetConnectionTimeoutInSecs",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetConnectionTimeoutInSecs)
#else
  NULL
#endif
};

// Method: SetRequestTimeoutInSecs
static const ni::sParameterDef iCURL_SetRequestTimeoutInSecs_Parameters[1] = { 
  { "anInSecs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iCURL_SetRequestTimeoutInSecs = {
  "SetRequestTimeoutInSecs",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "void",
  1, iCURL_SetRequestTimeoutInSecs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetRequestTimeoutInSecs)
#else
  NULL
#endif
};

// Method: GetRequestTimeoutInSecs
static const ni::sMethodDef iCURL_GetRequestTimeoutInSecs = {
  "GetRequestTimeoutInSecs",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetRequestTimeoutInSecs)
#else
  NULL
#endif
};

// Method: SetUserAgent
static const ni::sParameterDef iCURL_SetUserAgent_Parameters[1] = { 
  { "aaszUserAgent", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_SetUserAgent = {
  "SetUserAgent",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iCURL_SetUserAgent_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetUserAgent)
#else
  NULL
#endif
};

// Method: GetUserAgent
static const ni::sMethodDef iCURL_GetUserAgent = {
  "GetUserAgent",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetUserAgent)
#else
  NULL
#endif
};

// Method: SetUserName
static const ni::sParameterDef iCURL_SetUserName_Parameters[1] = { 
  { "aaszUserName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_SetUserName = {
  "SetUserName",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iCURL_SetUserName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetUserName)
#else
  NULL
#endif
};

// Method: GetUserName
static const ni::sMethodDef iCURL_GetUserName = {
  "GetUserName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetUserName)
#else
  NULL
#endif
};

// Method: SetUserPass
static const ni::sParameterDef iCURL_SetUserPass_Parameters[1] = { 
  { "aaszUserPass", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_SetUserPass = {
  "SetUserPass",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iCURL_SetUserPass_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetUserPass)
#else
  NULL
#endif
};

// Method: GetUserPass
static const ni::sMethodDef iCURL_GetUserPass = {
  "GetUserPass",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetUserPass)
#else
  NULL
#endif
};

// Method: SetHttpAuth
static const ni::sParameterDef iCURL_SetHttpAuth_Parameters[1] = { 
  { "aHttpAuth", ni::eType_Enum, NULL, "eCURLHttpAuth" }
}; 
static const ni::sMethodDef iCURL_SetHttpAuth = {
  "SetHttpAuth",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Enum, NULL, "void",
  1, iCURL_SetHttpAuth_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_SetHttpAuth)
#else
  NULL
#endif
};

// Method: GetHttpAuth
static const ni::sMethodDef iCURL_GetHttpAuth = {
  "GetHttpAuth",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_Enum, NULL, "const eCURLHttpAuth",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_GetHttpAuth)
#else
  NULL
#endif
};

// Method: URLGet
static const ni::sParameterDef iCURL_URLGet_Parameters[5] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apRecvData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apRecvHeader", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }
}; 
static const ni::sMethodDef iCURL_URLGet = {
  "URLGet",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  5, iCURL_URLGet_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLGet)
#else
  NULL
#endif
};

// Method: URLPostFile
static const ni::sParameterDef iCURL_URLPostFile_Parameters[7] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apRecvData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apRecvHeader", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apPostData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }, 
  { "aContentType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_URLPostFile = {
  "URLPostFile",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  7, iCURL_URLPostFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLPostFile)
#else
  NULL
#endif
};

// Method: URLPostFields
static const ni::sParameterDef iCURL_URLPostFields_Parameters[7] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apRecvData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apRecvHeader", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aPostFields", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }, 
  { "aContentType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_URLPostFields = {
  "URLPostFields",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  7, iCURL_URLPostFields_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLPostFields)
#else
  NULL
#endif
};

// Method: URLPostRaw
static const ni::sParameterDef iCURL_URLPostRaw_Parameters[8] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apRecvData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apRecvHeader", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aPostData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anPostDataSize", ni::eType_Size, NULL, "tSize" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }, 
  { "aContentType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_URLPostRaw = {
  "URLPostRaw",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  8, iCURL_URLPostRaw_Parameters,
NULL
};

// Method: URLPostMultiPart
static const ni::sParameterDef iCURL_URLPostMultiPart_Parameters[5] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apRecvData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apRecvHeader", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apPostFields", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tStringCMap*" }
}; 
static const ni::sMethodDef iCURL_URLPostMultiPart = {
  "URLPostMultiPart",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  5, iCURL_URLPostMultiPart_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLPostMultiPart)
#else
  NULL
#endif
};

// Method: URLGetMultiPart
static const ni::sParameterDef iCURL_URLGetMultiPart_Parameters[3] = { 
  { "apMessageHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aPartExt", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_URLGetMultiPart = {
  "URLGetMultiPart",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  3, iCURL_URLGetMultiPart_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLGetMultiPart)
#else
  NULL
#endif
};

// Method: URLGetString
static const ni::sParameterDef iCURL_URLGetString_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCURL_URLGetString = {
  "URLGetString",
  0|ni::eType_String, NULL, "cString",
  1, iCURL_URLGetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLGetString)
#else
  NULL
#endif
};

// Method: URLGetDataTable
static const ni::sParameterDef iCURL_URLGetDataTable_Parameters[2] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apResult", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iCURL_URLGetDataTable = {
  "URLGetDataTable",
  0|ni::eType_I32, NULL, "tI32",
  2, iCURL_URLGetDataTable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_URLGetDataTable)
#else
  NULL
#endif
};

// Method: FetchGet
static const ni::sParameterDef iCURL_FetchGet_Parameters[3] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchSink), "iFetchSink*" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }
}; 
static const ni::sMethodDef iCURL_FetchGet = {
  "FetchGet",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "Ptr<iFetchRequest>",
  3, iCURL_FetchGet_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_FetchGet)
#else
  NULL
#endif
};

// Method: FetchPost
static const ni::sParameterDef iCURL_FetchPost_Parameters[4] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchSink), "iFetchSink*" }, 
  { "apHeaders", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }
}; 
static const ni::sMethodDef iCURL_FetchPost = {
  "FetchPost",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "Ptr<iFetchRequest>",
  4, iCURL_FetchPost_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCURL_FetchPost)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iCURL[] = {
	&iCURL_GetVersion,
	&iCURL_GetProtocols,
	&iCURL_SetConnectionTimeoutInSecs,
	&iCURL_GetConnectionTimeoutInSecs,
	&iCURL_SetRequestTimeoutInSecs,
	&iCURL_GetRequestTimeoutInSecs,
	&iCURL_SetUserAgent,
	&iCURL_GetUserAgent,
	&iCURL_SetUserName,
	&iCURL_GetUserName,
	&iCURL_SetUserPass,
	&iCURL_GetUserPass,
	&iCURL_SetHttpAuth,
	&iCURL_GetHttpAuth,
	&iCURL_URLGet,
	&iCURL_URLPostFile,
	&iCURL_URLPostFields,
	&iCURL_URLPostRaw,
	&iCURL_URLPostMultiPart,
	&iCURL_URLGetMultiPart,
	&iCURL_URLGetString,
	&iCURL_URLGetDataTable,
	&iCURL_FetchGet,
	&iCURL_FetchPost,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCURL[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCURL = {
  niGetInterfaceID(iCURL),
  &niGetInterfaceUUID(iCURL),
  1,
  Parents_iCURL,
  niCountOf(Methods_iCURL),Methods_iCURL,
  NULL
};

	return &InterfaceDef_iCURL;
}

// End of iCURL wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFetchSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFetchSink() {

// Method: OnFetchSink_Success
static const ni::sParameterDef iFetchSink_OnFetchSink_Success_Parameters[1] = { 
  { "apFetch", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "iFetchRequest*" }
}; 
static const ni::sMethodDef iFetchSink_OnFetchSink_Success = {
  "OnFetchSink_Success",
  0|ni::eType_Null, NULL, "void",
  1, iFetchSink_OnFetchSink_Success_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchSink_OnFetchSink_Success)
#else
  NULL
#endif
};

// Method: OnFetchSink_Error
static const ni::sParameterDef iFetchSink_OnFetchSink_Error_Parameters[1] = { 
  { "apFetch", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "iFetchRequest*" }
}; 
static const ni::sMethodDef iFetchSink_OnFetchSink_Error = {
  "OnFetchSink_Error",
  0|ni::eType_Null, NULL, "void",
  1, iFetchSink_OnFetchSink_Error_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchSink_OnFetchSink_Error)
#else
  NULL
#endif
};

// Method: OnFetchSink_Progress
static const ni::sParameterDef iFetchSink_OnFetchSink_Progress_Parameters[1] = { 
  { "apFetch", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "iFetchRequest*" }
}; 
static const ni::sMethodDef iFetchSink_OnFetchSink_Progress = {
  "OnFetchSink_Progress",
  0|ni::eType_Null, NULL, "void",
  1, iFetchSink_OnFetchSink_Progress_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchSink_OnFetchSink_Progress)
#else
  NULL
#endif
};

// Method: OnFetchSink_ReadyStateChange
static const ni::sParameterDef iFetchSink_OnFetchSink_ReadyStateChange_Parameters[1] = { 
  { "apFetch", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFetchRequest), "iFetchRequest*" }
}; 
static const ni::sMethodDef iFetchSink_OnFetchSink_ReadyStateChange = {
  "OnFetchSink_ReadyStateChange",
  0|ni::eType_Null, NULL, "void",
  1, iFetchSink_OnFetchSink_ReadyStateChange_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchSink_OnFetchSink_ReadyStateChange)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFetchSink[] = {
	&iFetchSink_OnFetchSink_Success,
	&iFetchSink_OnFetchSink_Error,
	&iFetchSink_OnFetchSink_Progress,
	&iFetchSink_OnFetchSink_ReadyStateChange,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iFetchSink : public ni::cIUnknownImpl<ni::iFetchSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iFetchSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iFetchSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iFetchSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iFetchSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iFetchSink::OnFetchSink_Success
  void __stdcall OnFetchSink_Success(iFetchRequest * apFetch) {
    ni::Var _params_[1];
    _params_[0] = niIUnknownCast(apFetch);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iFetchSink_OnFetchSink_Success,0,_params_,1,NULL);
	}

  // Method (1): iFetchSink::OnFetchSink_Error
  void __stdcall OnFetchSink_Error(iFetchRequest * apFetch) {
    ni::Var _params_[1];
    _params_[0] = niIUnknownCast(apFetch);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iFetchSink_OnFetchSink_Error,1,_params_,1,NULL);
	}

  // Method (2): iFetchSink::OnFetchSink_Progress
  void __stdcall OnFetchSink_Progress(iFetchRequest * apFetch) {
    ni::Var _params_[1];
    _params_[0] = niIUnknownCast(apFetch);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iFetchSink_OnFetchSink_Progress,2,_params_,1,NULL);
	}

  // Method (3): iFetchSink::OnFetchSink_ReadyStateChange
  void __stdcall OnFetchSink_ReadyStateChange(iFetchRequest * apFetch) {
    ni::Var _params_[1];
    _params_[0] = niIUnknownCast(apFetch);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iFetchSink_OnFetchSink_ReadyStateChange,3,_params_,1,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iFetchSink, niCountOf(Methods_iFetchSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iFetchSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iFetchSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFetchSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFetchSink = {
  niGetInterfaceID(iFetchSink),
  &niGetInterfaceUUID(iFetchSink),
  1,
  Parents_iFetchSink,
  niCountOf(Methods_iFetchSink),Methods_iFetchSink,
  DispatchWrapper_iFetchSink::Create
};

	return &InterfaceDef_iFetchSink;
}

// End of iFetchSink wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFetchRequest wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFetchRequest() {

// Method: GetMethod
static const ni::sMethodDef iFetchRequest_GetMethod = {
  "GetMethod",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eFetchMethod",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetMethod)
#else
  NULL
#endif
};

// Method: GetReadyState
static const ni::sMethodDef iFetchRequest_GetReadyState = {
  "GetReadyState",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eFetchReadyState",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetReadyState)
#else
  NULL
#endif
};

// Method: GetStatus
static const ni::sMethodDef iFetchRequest_GetStatus = {
  "GetStatus",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetStatus)
#else
  NULL
#endif
};

// Method: GetReceivedHeaders
static const ni::sMethodDef iFetchRequest_GetReceivedHeaders = {
  "GetReceivedHeaders",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetReceivedHeaders)
#else
  NULL
#endif
};

// Method: GetReceivedData
static const ni::sMethodDef iFetchRequest_GetReceivedData = {
  "GetReceivedData",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetReceivedData)
#else
  NULL
#endif
};

// Method: GetHasFailed
static const ni::sMethodDef iFetchRequest_GetHasFailed = {
  "GetHasFailed",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFetchRequest_GetHasFailed)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFetchRequest[] = {
	&iFetchRequest_GetMethod,
	&iFetchRequest_GetReadyState,
	&iFetchRequest_GetStatus,
	&iFetchRequest_GetReceivedHeaders,
	&iFetchRequest_GetReceivedData,
	&iFetchRequest_GetHasFailed,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFetchRequest[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFetchRequest = {
  niGetInterfaceID(iFetchRequest),
  &niGetInterfaceUUID(iFetchRequest),
  1,
  Parents_iFetchRequest,
  niCountOf(Methods_iFetchRequest),Methods_iFetchRequest,
  NULL
};

	return &InterfaceDef_iFetchRequest;
}

// End of iFetchRequest wrapper

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef


//////////////////////////////////////////////////////////////////////////////////////////////
// Enumerations definition
//////////////////////////////////////////////////////////////////////////////////////////////
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef

// --- eCURLMessage ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eCURLMessage() {

static const ni::sEnumValueDef Enum_eCURLMessage_Values[] = {
	{ "Started", ni::eCURLMessage_Started },
	{ "ResponseCode", ni::eCURLMessage_ResponseCode },
	{ "ReceivingHeader", ni::eCURLMessage_ReceivingHeader },
	{ "ReceivingData", ni::eCURLMessage_ReceivingData },
	{ "ReceivedPart", ni::eCURLMessage_ReceivedPart },
	{ "Sending", ni::eCURLMessage_Sending },
	{ "Completed", ni::eCURLMessage_Completed },
	{ "Failed", ni::eCURLMessage_Failed },
	{ "Progress", ni::eCURLMessage_Progress },
};
static const ni::sEnumDef Enum_eCURLMessage = {
	"eCURLMessage",
  niCountOf(Enum_eCURLMessage_Values), Enum_eCURLMessage_Values
};

	return &Enum_eCURLMessage;
}

// --- eCURLHttpAuth ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eCURLHttpAuth() {

static const ni::sEnumValueDef Enum_eCURLHttpAuth_Values[] = {
	{ "None", ni::eCURLHttpAuth_None },
	{ "Basic", ni::eCURLHttpAuth_Basic },
	{ "Digest", ni::eCURLHttpAuth_Digest },
	{ "Gssnegotiate", ni::eCURLHttpAuth_Gssnegotiate },
	{ "Ntlm", ni::eCURLHttpAuth_Ntlm },
	{ "DigestIE", ni::eCURLHttpAuth_DigestIE },
	{ "NtlmWB", ni::eCURLHttpAuth_NtlmWB },
	{ "Only", ni::eCURLHttpAuth_Only },
	{ "Any", ni::eCURLHttpAuth_Any },
	{ "AnySafe", ni::eCURLHttpAuth_AnySafe },
};
static const ni::sEnumDef Enum_eCURLHttpAuth = {
	"eCURLHttpAuth",
  niCountOf(Enum_eCURLHttpAuth_Values), Enum_eCURLHttpAuth_Values
};

	return &Enum_eCURLHttpAuth;
}

// --- eFetchMethod ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFetchMethod() {

static const ni::sEnumValueDef Enum_eFetchMethod_Values[] = {
	{ "Get", ni::eFetchMethod_Get },
	{ "Post", ni::eFetchMethod_Post },
};
static const ni::sEnumDef Enum_eFetchMethod = {
	"eFetchMethod",
  niCountOf(Enum_eFetchMethod_Values), Enum_eFetchMethod_Values
};

	return &Enum_eFetchMethod;
}

// --- eFetchReadyState ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFetchReadyState() {

static const ni::sEnumValueDef Enum_eFetchReadyState_Values[] = {
	{ "Unsent", ni::eFetchReadyState_Unsent },
	{ "Opened", ni::eFetchReadyState_Opened },
	{ "HeadersReceived", ni::eFetchReadyState_HeadersReceived },
	{ "Loading", ni::eFetchReadyState_Loading },
	{ "Done", ni::eFetchReadyState_Done },
};
static const ni::sEnumDef Enum_eFetchReadyState = {
	"eFetchReadyState",
  niCountOf(Enum_eFetchReadyState_Values), Enum_eFetchReadyState_Values
};

	return &Enum_eFetchReadyState;
}
#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef


//////////////////////////////////////////////////////////////////////////////////////////////
// Constants definition
//////////////////////////////////////////////////////////////////////////////////////////////
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef

//////////////////////////////////////////////////////////////////////////////////////////////
// GetModuleDef
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::iModuleDef*) GetModuleDef_niCURL()
{
  static bool _initialized = false;
  if (!_initialized) {
    _initialized = true;
    niModuleDefImpl_GetModule_Register();
  }

//////////////////////////////////////////////////////////////////////////////////////////////
// Object types definition
//////////////////////////////////////////////////////////////////////////////////////////////
static const ni::sObjectTypeDef ObjectType__CURL("niCURL.CURL",New_niCURL_CURL);


//////////////////////////////////////////////////////////////////////////////////////////////
// Module definition
//////////////////////////////////////////////////////////////////////////////////////////////
static const ni::achar* Dependencies[] = {
  "niLang",
};
static const ni::sObjectTypeDef* ObjectTypes[] = {
  &ObjectType__CURL,
};

#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
static const ni::sInterfaceDef* Interfaces[] = {
  GetInterfaceDef_iCURL(),
  GetInterfaceDef_iFetchSink(),
  GetInterfaceDef_iFetchRequest(),
};

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef

#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef
static const ni::sEnumDef* Enumerations[] = {
  GetEnumDef_eCURLMessage(),
  GetEnumDef_eCURLHttpAuth(),
  GetEnumDef_eFetchMethod(),
  GetEnumDef_eFetchReadyState(),
};

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef

static const ni::sModuleDef ModuleDef(
  "niCURL",
  "1,0,0",
  "CURL module (Build Date: " __DATE__ ")",
  "niLang Authors",
  "(c) 2022 The niLang Authors",
  1, Dependencies,
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
  niCountOf(Interfaces), Interfaces,
#else
  0, NULL,
#endif
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef
  niCountOf(Enumerations), Enumerations,
#else
  0, NULL,
#endif
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef
  0, NULL,
#else
  0, NULL,
#endif
  niCountOf(ObjectTypes), ObjectTypes
);

  return &ModuleDef;
} // End of GetModuleDef_niCURL
} // end of namespace ni

/// EOF //////////////////////////////////////////////////////////////////////////////////////
#include <niLang/Utils/ModuleDefImpl_End.h>
