#pragma once
#ifndef __STDWAVE_CGH_DD4CC840_D7CF_4CF5_9FD6_56ECBAED1129__
#define __STDWAVE_CGH_DD4CC840_D7CF_4CF5_9FD6_56ECBAED1129__
// SPDX-FileCopyrightText: (c) 2022 The niLang Authors
// SPDX-License-Identifier: MIT

#ifndef NUM_WAVES
#define NUM_WAVES 2
#endif

struct Wave
{
  float freq;  // 2*PI / wavelength
  float amp;   // amplitude
  float phase; // speed * 2*PI / wavelength
  float2 dir;
};

Wave gWaves[NUM_WAVES] = {
  { 1.0, 1.0, 0.5, float2(-1, 0) },
  { 2.0, 0.5, 1.3, float2(-0.7, 0.7) }
};

// wave function
float waveEvaluate(Wave w, float2 pos, float t)
{
  return w.amp * sin( dot(w.dir, pos)*w.freq + t*w.phase);
}

// derivative of wave function
float waveDerivEvaluatee(Wave w, float2 pos, float t)
{
  return w.freq*w.amp * cos( dot(w.dir, pos)*w.freq + t*w.phase);
}

// sharp wave functions
float waveSharpEvaluate(Wave w, float2 pos, float t, float k)
{
  return w.amp * pow(sin( dot(w.dir, pos)*w.freq + t*w.phase)* 0.5 + 0.5, k);
}

// derivative of sharp wave function
float waveDerivSharpEvaluate(Wave w, float2 pos, float t, float k)
{
  return k*w.freq*w.amp * pow(sin( dot(w.dir, pos)*w.freq + t*w.phase)* 0.5 + 0.5, k - 1) * cos(dot(w.dir, pos)*w.freq + t*w.phase);
}

// get a full wave factor
float wave(float2 pos, float t) {
  float w = 0.0f;
  eStd_ForUnroll for (int i = 0; i < NUM_WAVES; ++i) {
    w += waveEvaluate(gWaves[i],pos,t);
  }
  return w;
}

// get a full sharp wave factor
float waveSharp(float2 pos, float t, float k) {
  float w = 0.0f;
  eStd_ForUnroll for (int i = 0; i < NUM_WAVES; ++i) {
    w += waveSharpEvaluate(gWaves[i],pos,t,k);
  }
  return w;
}

/// EOF //////////////////////////////////////////////////////////////////////////////////////
#endif // __STDWAVE_CGH_DD4CC840_D7CF_4CF5_9FD6_56ECBAED1129__
