::Import("unittest.ni")

::FIXTURE("metamethods")

::my <- {}

::my.Vec3 <- {
  // oo.bla
  _x = 0, _y = 0, _z = 0
  function _initialize(x,y,z) __this__ {
    ::println("... Vec3's initialized")
    // __SetCanCallMetaMethod enables the metamethods like _invalidate, _add, _tostring and _cmp
    this.__SetCanCallMetaMethod(true)
   _x = x
    _y = y
    _z = z
    return this
  }
  function new(x,y,z) __this__ {
    return this.Clone()._initialize(x,y,z)
  }

  function _invalidate() {
    ::println("... Vec3 ("+_tostring()+") invalidate")
  }
  function _add(b) {
    return new(
      _x + b._x,
      _y + b._y,
      _z + b._z)
  }
  function _tostring() {
    return "MyVec3("+_x+","+_y+","+_z+")"
  }
  function _cmp(b) {
    if (!("_z" in b)) return 1;
    if (_x != b._x) return b._x-_x;
    if (_y != b._y) return b._y-_y;
    if (_z != b._z) return b._z-_z;
    return 0;
  }
}

::TEST("metamethods","base",#() {
  local x = ::my.Vec3.new(1,2,3)
  local y = ::my.Vec3.new(4,5,6)
  local z = ::my.Vec3.new(5,7,9)
  local zz = x + y
  ::println("x: " + x)
  ::println("y: " + y)
  ::println("z: " + z)
  ::println("zz: " + zz)
  ::CHECK_EQUAL(z,zz);
  ::CHECK_EQUAL("MyVec3(1,2,3)",""+x);
})

::TEST("metamethods","SetDelegate",#() {
  local del = { bar = 456 };
  local a = { foo = 123 };
  local b = a.SetDelegate(del);
  ::CHECK_EQUAL(a.ToIntPtr(), b.ToIntPtr());
  ::CHECK_EQUAL(123, a.foo);
  ::CHECK_EQUAL(123, b.foo);
  ::CHECK_EQUAL(456, a.bar);
  ::CHECK_EQUAL(456, b.bar);
  ::CHECK_EQUAL(456, del.?bar);
  ::CHECK_EQUAL(null, del.?foo);
})
