#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct TestGpuFuncs_TestUniforms
{
    float4x4 mtxWVP;
    float alphaRef;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

struct TestGpuFuncs_TestUniforms_1
{
    float4x4 mtxWVP;
    float alphaRef;
    float padding0;
    float padding1;
    float padding2;
    float4 materialColor;
};

struct UBO_TestGpuFuncs_TestUniforms
{
    TestGpuFuncs_TestUniforms_1 v;
};

struct main0_out
{
    float4 OUT_1_rval_color [[user(locn1)]];
    float2 OUT_2_rval_tex0 [[user(locn2)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    float3 IN_0_aInput_position [[attribute(0)]];
    float4 IN_4_aInput_color [[attribute(4)]];
    float2 IN_5_aInput_tex0 [[attribute(5)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant UBO_TestGpuFuncs_TestUniforms& IN_1_aUniforms [[buffer(0)]])
{
    main0_out out = {};
    TestGpuFuncs_TestUniforms _110;
    _110.mtxWVP = IN_1_aUniforms.v.mtxWVP;
    _110.alphaRef = IN_1_aUniforms.v.alphaRef;
    _110.padding0 = IN_1_aUniforms.v.padding0;
    _110.padding1 = IN_1_aUniforms.v.padding1;
    _110.padding2 = IN_1_aUniforms.v.padding2;
    _110.materialColor = IN_1_aUniforms.v.materialColor;
    out.gl_Position = _110.mtxWVP * float4(in.IN_0_aInput_position, 1.0);
    out.OUT_1_rval_color = in.IN_4_aInput_color * _110.materialColor;
    out.OUT_2_rval_tex0 = in.IN_5_aInput_tex0;
    return out;
}

