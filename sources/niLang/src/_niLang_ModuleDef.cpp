// clang-format off
//////////////////////////////////////////////////////////////////////////////////////////////
//
// Autogenerated module definition for ni::niLang.
//
//////////////////////////////////////////////////////////////////////////////////////////////
//lint -e750 : local macro '_XXX_ModuleDef' (line NN, file _XXX_ModuleDef.cpp) not referenced
//lint -e766 : Header file '...\ModuleDefImpl_Begin.h' not used in module '_XXX_ModuleDef.cpp'

#include "stdafx.h"
#include "API/niLang_ModuleDef.h"
#include <niLang/Utils/ModuleDefImpl_Begin.h>
#include "Lang.h"

#ifndef niConfig_OnlyObjectTypesIDL
#endif // #ifndef niConfig_OnlyObjectTypesIDL



#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
#define _niLang_ModuleDef
#include <niLang/Utils/VMCallCImpl.h>
#ifndef niConfig_NoXCALL
#define IDLC_BEGIN_NAMESPACE() namespace ni { namespace xcall_cimpl {
#define IDLC_END_NAMESPACE() }}
#ifndef XCALL_CIMPL
#define XCALL_CIMPL(NAME) ni::xcall_cimpl::NAME
#endif
#include "_idl/ICollection.h.idl.inl"
#include "_idl/IConcurrent.h.idl.inl"
#include "_idl/IConsole.h.idl.inl"
#include "_idl/ICrypto.h.idl.inl"
#include "_idl/IDataTable.h.idl.inl"
#include "_idl/IDeviceResource.h.idl.inl"
#include "_idl/IExpression.h.idl.inl"
#include "_idl/IFile.h.idl.inl"
#include "_idl/IFileSystem.h.idl.inl"
#include "_idl/IGameCtrl.h.idl.inl"
#include "_idl/IHString.h.idl.inl"
#include "_idl/IJson.h.idl.inl"
#include "_idl/ILang.h.idl.inl"
#include "_idl/IMath.h.idl.inl"
#include "_idl/IOSProcess.h.idl.inl"
#include "_idl/IOSWindow.h.idl.inl"
#include "_idl/IProf.h.idl.inl"
#include "_idl/IRegex.h.idl.inl"
#include "_idl/IScriptingHost.h.idl.inl"
#include "_idl/ISerializable.h.idl.inl"
#include "_idl/ISinkList.h.idl.inl"
#include "_idl/IStringTokenizer.h.idl.inl"
#include "_idl/ITime.h.idl.inl"
#include "_idl/IToString.h.idl.inl"
#include "_idl/IXml.h.idl.inl"
#include "_idl/IZip.h.idl.inl"
#include "_idl/ObjModel.h.idl.inl"
#include "_idl/StringBase.h.idl.inl"
#include "_idl/StringDef.h.idl.inl"
#include "_idl/StringLib.h.idl.inl"
#include "_idl/StringLibIt.h.idl.inl"
#include "_idl/Types.h.idl.inl"
#include "_idl/Var.h.idl.inl"
#endif // niConfig_NoXCALL
#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef

namespace ni {
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef


//////////////////////////////////////////////////////////////////////////////////////////////
// iIterator wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iIterator() {

// Method: GetCollection
static const ni::sMethodDef iIterator_GetCollection = {
  "GetCollection",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCollection), "iCollection*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iIterator_GetCollection)
#else
  NULL
#endif
};

// Method: HasNext
static const ni::sMethodDef iIterator_HasNext = {
  "HasNext",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iIterator_HasNext)
#else
  NULL
#endif
};

// Method: Next
static const ni::sMethodDef iIterator_Next = {
  "Next",
  0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iIterator_Next)
#else
  NULL
#endif
};

// Method: Key
static const ni::sMethodDef iIterator_Key = {
  "Key",
  0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iIterator_Key)
#else
  NULL
#endif
};

// Method: Value
static const ni::sMethodDef iIterator_Value = {
  "Value",
  0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iIterator_Value)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iIterator[] = {
	&iIterator_GetCollection,
	&iIterator_HasNext,
	&iIterator_Next,
	&iIterator_Key,
	&iIterator_Value,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iIterator[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iIterator = {
  niGetInterfaceID(iIterator),
  &niGetInterfaceUUID(iIterator),
  1,
  Parents_iIterator,
  niCountOf(Methods_iIterator),Methods_iIterator,
  NULL
};

	return &InterfaceDef_iIterator;
}

// End of iIterator wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iCollection wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCollection() {

// Method: GetKeyType
static const ni::sMethodDef iCollection_GetKeyType = {
  "GetKeyType",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tType",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_GetKeyType)
#else
  NULL
#endif
};

// Method: GetValueType
static const ni::sMethodDef iCollection_GetValueType = {
  "GetValueType",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tType",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_GetValueType)
#else
  NULL
#endif
};

// Method: IsEmpty
static const ni::sMethodDef iCollection_IsEmpty = {
  "IsEmpty",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_IsEmpty)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iCollection_GetSize = {
  "GetSize",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_GetSize)
#else
  NULL
#endif
};

// Method: Contains
static const ni::sParameterDef iCollection_Contains_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iCollection_Contains = {
  "Contains",
  0|ni::eType_I8, NULL, "tBool",
  1, iCollection_Contains_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_Contains)
#else
  NULL
#endif
};

// Method: ContainsAll
static const ni::sParameterDef iCollection_ContainsAll_Parameters[1] = { 
  { "apCollection", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCollection), "const iCollection*" }
}; 
static const ni::sMethodDef iCollection_ContainsAll = {
  "ContainsAll",
  0|ni::eType_I8, NULL, "tBool",
  1, iCollection_ContainsAll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_ContainsAll)
#else
  NULL
#endif
};

// Method: Iterator
static const ni::sMethodDef iCollection_Iterator = {
  "Iterator",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iIterator), "iIterator*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_Iterator)
#else
  NULL
#endif
};

// Method: Find
static const ni::sParameterDef iCollection_Find_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iCollection_Find = {
  "Find",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iIterator), "iIterator*",
  1, iCollection_Find_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_Find)
#else
  NULL
#endif
};

// Method: Get
static const ni::sParameterDef iCollection_Get_Parameters[1] = { 
  { "aKey", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iCollection_Get = {
  "Get",
  0|ni::eType_Variant, NULL, "Var",
  1, iCollection_Get_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_Get)
#else
  NULL
#endif
};

// Method: GetFirst
static const ni::sMethodDef iCollection_GetFirst = {
  "GetFirst",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_GetFirst)
#else
  NULL
#endif
};

// Method: GetLast
static const ni::sMethodDef iCollection_GetLast = {
  "GetLast",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCollection_GetLast)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iCollection[] = {
	&iCollection_GetKeyType,
	&iCollection_GetValueType,
	&iCollection_IsEmpty,
	&iCollection_GetSize,
	&iCollection_Contains,
	&iCollection_ContainsAll,
	&iCollection_Iterator,
	&iCollection_Find,
	&iCollection_Get,
	&iCollection_GetFirst,
	&iCollection_GetLast,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCollection[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCollection = {
  niGetInterfaceID(iCollection),
  &niGetInterfaceUUID(iCollection),
  1,
  Parents_iCollection,
  niCountOf(Methods_iCollection),Methods_iCollection,
  NULL
};

	return &InterfaceDef_iCollection;
}

// End of iCollection wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iMutableCollection wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iMutableCollection() {

// Method: Clear
static const ni::sMethodDef iMutableCollection_Clear = {
  "Clear",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Clear)
#else
  NULL
#endif
};

// Method: Copy
static const ni::sParameterDef iMutableCollection_Copy_Parameters[1] = { 
  { "apCollection", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCollection), "const iCollection*" }
}; 
static const ni::sMethodDef iMutableCollection_Copy = {
  "Copy",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_Copy_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Copy)
#else
  NULL
#endif
};

// Method: Reserve
static const ni::sParameterDef iMutableCollection_Reserve_Parameters[1] = { 
  { "anSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iMutableCollection_Reserve = {
  "Reserve",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_Reserve_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Reserve)
#else
  NULL
#endif
};

// Method: Resize
static const ni::sParameterDef iMutableCollection_Resize_Parameters[1] = { 
  { "anSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iMutableCollection_Resize = {
  "Resize",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_Resize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Resize)
#else
  NULL
#endif
};

// Method: Add
static const ni::sParameterDef iMutableCollection_Add_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMutableCollection_Add = {
  "Add",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Add)
#else
  NULL
#endif
};

// Method: AddAll
static const ni::sParameterDef iMutableCollection_AddAll_Parameters[1] = { 
  { "apCollection", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCollection), "const iCollection*" }
}; 
static const ni::sMethodDef iMutableCollection_AddAll = {
  "AddAll",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_AddAll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_AddAll)
#else
  NULL
#endif
};

// Method: Remove
static const ni::sParameterDef iMutableCollection_Remove_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMutableCollection_Remove = {
  "Remove",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_Remove_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Remove)
#else
  NULL
#endif
};

// Method: RemoveIterator
static const ni::sParameterDef iMutableCollection_RemoveIterator_Parameters[1] = { 
  { "apIterator", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iIterator), "iIterator*" }
}; 
static const ni::sMethodDef iMutableCollection_RemoveIterator = {
  "RemoveIterator",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_RemoveIterator_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_RemoveIterator)
#else
  NULL
#endif
};

// Method: RemoveAll
static const ni::sParameterDef iMutableCollection_RemoveAll_Parameters[1] = { 
  { "apCollection", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCollection), "const iCollection*" }
}; 
static const ni::sMethodDef iMutableCollection_RemoveAll = {
  "RemoveAll",
  0|ni::eType_I8, NULL, "tBool",
  1, iMutableCollection_RemoveAll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_RemoveAll)
#else
  NULL
#endif
};

// Method: RemoveFirst
static const ni::sMethodDef iMutableCollection_RemoveFirst = {
  "RemoveFirst",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_RemoveFirst)
#else
  NULL
#endif
};

// Method: RemoveLast
static const ni::sMethodDef iMutableCollection_RemoveLast = {
  "RemoveLast",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_RemoveLast)
#else
  NULL
#endif
};

// Method: Put
static const ni::sParameterDef iMutableCollection_Put_Parameters[2] = { 
  { "aKey", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMutableCollection_Put = {
  "Put",
  0|ni::eType_I8, NULL, "tBool",
  2, iMutableCollection_Put_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_Put)
#else
  NULL
#endif
};

// Method: SetFirst
static const ni::sParameterDef iMutableCollection_SetFirst_Parameters[1] = { 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMutableCollection_SetFirst = {
  "SetFirst",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "tBool",
  1, iMutableCollection_SetFirst_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_SetFirst)
#else
  NULL
#endif
};

// Method: SetLast
static const ni::sParameterDef iMutableCollection_SetLast_Parameters[1] = { 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMutableCollection_SetLast = {
  "SetLast",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "tBool",
  1, iMutableCollection_SetLast_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_SetLast)
#else
  NULL
#endif
};

// Method: GetDataPtr
static const ni::sMethodDef iMutableCollection_GetDataPtr = {
  "GetDataPtr",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_GetDataPtr)
#else
  NULL
#endif
};

// Method: GetDataSize
static const ni::sMethodDef iMutableCollection_GetDataSize = {
  "GetDataSize",
  0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMutableCollection_GetDataSize)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iMutableCollection[] = {
	&iMutableCollection_Clear,
	&iMutableCollection_Copy,
	&iMutableCollection_Reserve,
	&iMutableCollection_Resize,
	&iMutableCollection_Add,
	&iMutableCollection_AddAll,
	&iMutableCollection_Remove,
	&iMutableCollection_RemoveIterator,
	&iMutableCollection_RemoveAll,
	&iMutableCollection_RemoveFirst,
	&iMutableCollection_RemoveLast,
	&iMutableCollection_Put,
	&iMutableCollection_SetFirst,
	&iMutableCollection_SetLast,
	&iMutableCollection_GetDataPtr,
	&iMutableCollection_GetDataSize,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iMutableCollection[] = {
  &niGetInterfaceUUID(iCollection),
};

static const ni::sInterfaceDef InterfaceDef_iMutableCollection = {
  niGetInterfaceID(iMutableCollection),
  &niGetInterfaceUUID(iMutableCollection),
  1,
  Parents_iMutableCollection,
  niCountOf(Methods_iMutableCollection),Methods_iMutableCollection,
  NULL
};

	return &InterfaceDef_iMutableCollection;
}

// End of iMutableCollection wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iRunnable wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iRunnable() {

// Method: Run
static const ni::sMethodDef iRunnable_Run = {
  "Run",
  0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnable_Run)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iRunnable[] = {
	&iRunnable_Run,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iRunnable[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iRunnable = {
  niGetInterfaceID(iRunnable),
  &niGetInterfaceUUID(iRunnable),
  1,
  Parents_iRunnable,
  niCountOf(Methods_iRunnable),Methods_iRunnable,
  NULL
};

	return &InterfaceDef_iRunnable;
}

// End of iRunnable wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iCallback wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCallback() {

// Method: RunCallback
static const ni::sParameterDef iCallback_RunCallback_Parameters[2] = { 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iCallback_RunCallback = {
  "RunCallback",
  0|ni::eType_Variant, NULL, "Var",
  2, iCallback_RunCallback_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCallback_RunCallback)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iCallback[] = {
	&iCallback_RunCallback,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCallback[] = {
  &niGetInterfaceUUID(iRunnable),
};

static const ni::sInterfaceDef InterfaceDef_iCallback = {
  niGetInterfaceID(iCallback),
  &niGetInterfaceUUID(iCallback),
  1,
  Parents_iCallback,
  niCountOf(Methods_iCallback),Methods_iCallback,
  NULL
};

	return &InterfaceDef_iCallback;
}

// End of iCallback wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iRunnableQueue wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iRunnableQueue() {

// Method: GetThreadID
static const ni::sMethodDef iRunnableQueue_GetThreadID = {
  "GetThreadID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_GetThreadID)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iRunnableQueue_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_GetSize)
#else
  NULL
#endif
};

// Method: IsEmpty
static const ni::sMethodDef iRunnableQueue_IsEmpty = {
  "IsEmpty",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_IsEmpty)
#else
  NULL
#endif
};

// Method: Add
static const ni::sParameterDef iRunnableQueue_Add_Parameters[1] = { 
  { "apRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }
}; 
static const ni::sMethodDef iRunnableQueue_Add = {
  "Add",
  0|ni::eType_I8, NULL, "tBool",
  1, iRunnableQueue_Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_Add)
#else
  NULL
#endif
};

// Method: Peek
static const ni::sMethodDef iRunnableQueue_Peek = {
  "Peek",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_Peek)
#else
  NULL
#endif
};

// Method: Poll
static const ni::sMethodDef iRunnableQueue_Poll = {
  "Poll",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "Ptr<iRunnable>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_Poll)
#else
  NULL
#endif
};

// Method: WaitForRunnable
static const ni::sParameterDef iRunnableQueue_WaitForRunnable_Parameters[1] = { 
  { "anTimeOut", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iRunnableQueue_WaitForRunnable = {
  "WaitForRunnable",
  0|ni::eType_I8, NULL, "tBool",
  1, iRunnableQueue_WaitForRunnable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRunnableQueue_WaitForRunnable)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iRunnableQueue[] = {
	&iRunnableQueue_GetThreadID,
	&iRunnableQueue_GetSize,
	&iRunnableQueue_IsEmpty,
	&iRunnableQueue_Add,
	&iRunnableQueue_Peek,
	&iRunnableQueue_Poll,
	&iRunnableQueue_WaitForRunnable,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iRunnableQueue[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iRunnableQueue = {
  niGetInterfaceID(iRunnableQueue),
  &niGetInterfaceUUID(iRunnableQueue),
  1,
  Parents_iRunnableQueue,
  niCountOf(Methods_iRunnableQueue),Methods_iRunnableQueue,
  NULL
};

	return &InterfaceDef_iRunnableQueue;
}

// End of iRunnableQueue wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iMessageHandler wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iMessageHandler() {

// Method: GetThreadID
static const ni::sMethodDef iMessageHandler_GetThreadID = {
  "GetThreadID",
  ni::eTypeFlags_MethodGetter|ni::eTypeFlags_MethodOptional|0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageHandler_GetThreadID)
#else
  NULL
#endif
};

// Method: HandleMessage
static const ni::sParameterDef iMessageHandler_HandleMessage_Parameters[3] = { 
  { "anMsg", ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMessageHandler_HandleMessage = {
  "HandleMessage",
  0|ni::eType_Null, NULL, "void",
  3, iMessageHandler_HandleMessage_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageHandler_HandleMessage)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iMessageHandler[] = {
	&iMessageHandler_GetThreadID,
	&iMessageHandler_HandleMessage,

};

//// Interface dispatch wrapper: iMessageHandler_CreateDispatchWrapper

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iMessageHandler[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iMessageHandler = {
  niGetInterfaceID(iMessageHandler),
  &niGetInterfaceUUID(iMessageHandler),
  1,
  Parents_iMessageHandler,
  niCountOf(Methods_iMessageHandler),Methods_iMessageHandler,
  iMessageHandler_CreateDispatchWrapper
};

	return &InterfaceDef_iMessageHandler;
}

// End of iMessageHandler wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iMessageDesc wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iMessageDesc() {

// Method: GetHandler
static const ni::sMethodDef iMessageDesc_GetHandler = {
  "GetHandler",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageDesc_GetHandler)
#else
  NULL
#endif
};

// Method: GetID
static const ni::sMethodDef iMessageDesc_GetID = {
  "GetID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageDesc_GetID)
#else
  NULL
#endif
};

// Method: GetA
static const ni::sMethodDef iMessageDesc_GetA = {
  "GetA",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageDesc_GetA)
#else
  NULL
#endif
};

// Method: GetB
static const ni::sMethodDef iMessageDesc_GetB = {
  "GetB",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageDesc_GetB)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iMessageDesc[] = {
	&iMessageDesc_GetHandler,
	&iMessageDesc_GetID,
	&iMessageDesc_GetA,
	&iMessageDesc_GetB,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iMessageDesc[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iMessageDesc = {
  niGetInterfaceID(iMessageDesc),
  &niGetInterfaceUUID(iMessageDesc),
  1,
  Parents_iMessageDesc,
  niCountOf(Methods_iMessageDesc),Methods_iMessageDesc,
  NULL
};

	return &InterfaceDef_iMessageDesc;
}

// End of iMessageDesc wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iMessageQueue wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iMessageQueue() {

// Method: GetThreadID
static const ni::sMethodDef iMessageQueue_GetThreadID = {
  "GetThreadID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_GetThreadID)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iMessageQueue_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_GetSize)
#else
  NULL
#endif
};

// Method: IsEmpty
static const ni::sMethodDef iMessageQueue_IsEmpty = {
  "IsEmpty",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_IsEmpty)
#else
  NULL
#endif
};

// Method: Add
static const ni::sParameterDef iMessageQueue_Add_Parameters[4] = { 
  { "apHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "anMsg", ni::eType_U32, NULL, "tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iMessageQueue_Add = {
  "Add",
  0|ni::eType_I8, NULL, "tBool",
  4, iMessageQueue_Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_Add)
#else
  NULL
#endif
};

// Method: Peek
static const ni::sParameterDef iMessageQueue_Peek_Parameters[1] = { 
  { "apMessageDesc", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sMessageDesc*" }
}; 
static const ni::sMethodDef iMessageQueue_Peek = {
  "Peek",
  0|ni::eType_I8, NULL, "tBool",
  1, iMessageQueue_Peek_Parameters,
NULL
};

// Method: PeekDesc
static const ni::sMethodDef iMessageQueue_PeekDesc = {
  "PeekDesc",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageDesc), "Ptr<iMessageDesc>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_PeekDesc)
#else
  NULL
#endif
};

// Method: Poll
static const ni::sParameterDef iMessageQueue_Poll_Parameters[1] = { 
  { "apMessageDesc", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sMessageDesc*" }
}; 
static const ni::sMethodDef iMessageQueue_Poll = {
  "Poll",
  0|ni::eType_I8, NULL, "tBool",
  1, iMessageQueue_Poll_Parameters,
NULL
};

// Method: PollDesc
static const ni::sMethodDef iMessageQueue_PollDesc = {
  "PollDesc",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageDesc), "Ptr<iMessageDesc>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_PollDesc)
#else
  NULL
#endif
};

// Method: PollAndDispatch
static const ni::sMethodDef iMessageQueue_PollAndDispatch = {
  "PollAndDispatch",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_PollAndDispatch)
#else
  NULL
#endif
};

// Method: WaitForMessage
static const ni::sParameterDef iMessageQueue_WaitForMessage_Parameters[1] = { 
  { "anTimeOut", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iMessageQueue_WaitForMessage = {
  "WaitForMessage",
  0|ni::eType_I8, NULL, "tBool",
  1, iMessageQueue_WaitForMessage_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMessageQueue_WaitForMessage)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iMessageQueue[] = {
	&iMessageQueue_GetThreadID,
	&iMessageQueue_GetSize,
	&iMessageQueue_IsEmpty,
	&iMessageQueue_Add,
	&iMessageQueue_Peek,
	&iMessageQueue_PeekDesc,
	&iMessageQueue_Poll,
	&iMessageQueue_PollDesc,
	&iMessageQueue_PollAndDispatch,
	&iMessageQueue_WaitForMessage,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iMessageQueue[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iMessageQueue = {
  niGetInterfaceID(iMessageQueue),
  &niGetInterfaceUUID(iMessageQueue),
  1,
  Parents_iMessageQueue,
  niCountOf(Methods_iMessageQueue),Methods_iMessageQueue,
  NULL
};

	return &InterfaceDef_iMessageQueue;
}

// End of iMessageQueue wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFuture wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFuture() {

// Method: Cancel
static const ni::sMethodDef iFuture_Cancel = {
  "Cancel",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFuture_Cancel)
#else
  NULL
#endif
};

// Method: GetIsCancelled
static const ni::sMethodDef iFuture_GetIsCancelled = {
  "GetIsCancelled",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFuture_GetIsCancelled)
#else
  NULL
#endif
};

// Method: GetIsDone
static const ni::sMethodDef iFuture_GetIsDone = {
  "GetIsDone",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFuture_GetIsDone)
#else
  NULL
#endif
};

// Method: Wait
static const ni::sParameterDef iFuture_Wait_Parameters[1] = { 
  { "anTimeOut", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFuture_Wait = {
  "Wait",
  0|ni::eType_I8, NULL, "tBool",
  1, iFuture_Wait_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFuture_Wait)
#else
  NULL
#endif
};

// Method: GetValue
static const ni::sMethodDef iFuture_GetValue = {
  "GetValue",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFuture_GetValue)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFuture[] = {
	&iFuture_Cancel,
	&iFuture_GetIsCancelled,
	&iFuture_GetIsDone,
	&iFuture_Wait,
	&iFuture_GetValue,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFuture[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFuture = {
  niGetInterfaceID(iFuture),
  &niGetInterfaceUUID(iFuture),
  1,
  Parents_iFuture,
  niCountOf(Methods_iFuture),Methods_iFuture,
  NULL
};

	return &InterfaceDef_iFuture;
}

// End of iFuture wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFutureValue wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFutureValue() {

// Method: SetValue
static const ni::sParameterDef iFutureValue_SetValue_Parameters[1] = { 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iFutureValue_SetValue = {
  "SetValue",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "void",
  1, iFutureValue_SetValue_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFutureValue_SetValue)
#else
  NULL
#endif
};

// Method: Reset
static const ni::sMethodDef iFutureValue_Reset = {
  "Reset",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFutureValue_Reset)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFutureValue[] = {
	&iFutureValue_SetValue,
	&iFutureValue_Reset,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFutureValue[] = {
  &niGetInterfaceUUID(iFuture),
};

static const ni::sInterfaceDef InterfaceDef_iFutureValue = {
  niGetInterfaceID(iFutureValue),
  &niGetInterfaceUUID(iFutureValue),
  1,
  Parents_iFutureValue,
  niCountOf(Methods_iFutureValue),Methods_iFutureValue,
  NULL
};

	return &InterfaceDef_iFutureValue;
}

// End of iFutureValue wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iExecutor wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iExecutor() {

// Method: GetIsShutdown
static const ni::sMethodDef iExecutor_GetIsShutdown = {
  "GetIsShutdown",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_GetIsShutdown)
#else
  NULL
#endif
};

// Method: GetIsTerminated
static const ni::sMethodDef iExecutor_GetIsTerminated = {
  "GetIsTerminated",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_GetIsTerminated)
#else
  NULL
#endif
};

// Method: Execute
static const ni::sParameterDef iExecutor_Execute_Parameters[1] = { 
  { "aRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }
}; 
static const ni::sMethodDef iExecutor_Execute = {
  "Execute",
  0|ni::eType_I8, NULL, "ni::tBool",
  1, iExecutor_Execute_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_Execute)
#else
  NULL
#endif
};

// Method: Submit
static const ni::sParameterDef iExecutor_Submit_Parameters[1] = { 
  { "aRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }
}; 
static const ni::sMethodDef iExecutor_Submit = {
  "Submit",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFuture), "Ptr<ni::iFuture>",
  1, iExecutor_Submit_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_Submit)
#else
  NULL
#endif
};

// Method: Shutdown
static const ni::sParameterDef iExecutor_Shutdown_Parameters[1] = { 
  { "anTimeOut", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iExecutor_Shutdown = {
  "Shutdown",
  0|ni::eType_I8, NULL, "tBool",
  1, iExecutor_Shutdown_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_Shutdown)
#else
  NULL
#endif
};

// Method: ShutdownNow
static const ni::sParameterDef iExecutor_ShutdownNow_Parameters[1] = { 
  { "anTimeOut", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iExecutor_ShutdownNow = {
  "ShutdownNow",
  0|ni::eType_I8, NULL, "tBool",
  1, iExecutor_ShutdownNow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_ShutdownNow)
#else
  NULL
#endif
};

// Method: Update
static const ni::sParameterDef iExecutor_Update_Parameters[1] = { 
  { "anTimeSliceInMs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iExecutor_Update = {
  "Update",
  0|ni::eType_U32, NULL, "tU32",
  1, iExecutor_Update_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExecutor_Update)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iExecutor[] = {
	&iExecutor_GetIsShutdown,
	&iExecutor_GetIsTerminated,
	&iExecutor_Execute,
	&iExecutor_Submit,
	&iExecutor_Shutdown,
	&iExecutor_ShutdownNow,
	&iExecutor_Update,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iExecutor[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iExecutor = {
  niGetInterfaceID(iExecutor),
  &niGetInterfaceUUID(iExecutor),
  1,
  Parents_iExecutor,
  niCountOf(Methods_iExecutor),Methods_iExecutor,
  NULL
};

	return &InterfaceDef_iExecutor;
}

// End of iExecutor wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iConcurrent wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iConcurrent() {

// Method: GetMainThreadID
static const ni::sMethodDef iConcurrent_GetMainThreadID = {
  "GetMainThreadID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetMainThreadID)
#else
  NULL
#endif
};

// Method: GetCurrentThreadID
static const ni::sMethodDef iConcurrent_GetCurrentThreadID = {
  "GetCurrentThreadID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetCurrentThreadID)
#else
  NULL
#endif
};

// Method: CreateRunnableQueue
static const ni::sParameterDef iConcurrent_CreateRunnableQueue_Parameters[2] = { 
  { "aThreadID", ni::eType_U64, NULL, "tU64" }, 
  { "aMaxItems", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iConcurrent_CreateRunnableQueue = {
  "CreateRunnableQueue",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnableQueue), "iRunnableQueue*",
  2, iConcurrent_CreateRunnableQueue_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateRunnableQueue)
#else
  NULL
#endif
};

// Method: CreateExecutorCooperative
static const ni::sParameterDef iConcurrent_CreateExecutorCooperative_Parameters[2] = { 
  { "aThreadID", ni::eType_U64, NULL, "tU64" }, 
  { "aMaxItems", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iConcurrent_CreateExecutorCooperative = {
  "CreateExecutorCooperative",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  2, iConcurrent_CreateExecutorCooperative_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateExecutorCooperative)
#else
  NULL
#endif
};

// Method: CreateExecutorImmediate
static const ni::sMethodDef iConcurrent_CreateExecutorImmediate = {
  "CreateExecutorImmediate",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateExecutorImmediate)
#else
  NULL
#endif
};

// Method: CreateExecutorThreadPool
static const ni::sParameterDef iConcurrent_CreateExecutorThreadPool_Parameters[1] = { 
  { "aNumThreads", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iConcurrent_CreateExecutorThreadPool = {
  "CreateExecutorThreadPool",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  1, iConcurrent_CreateExecutorThreadPool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateExecutorThreadPool)
#else
  NULL
#endif
};

// Method: GetExecutorCPU
static const ni::sMethodDef iConcurrent_GetExecutorCPU = {
  "GetExecutorCPU",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetExecutorCPU)
#else
  NULL
#endif
};

// Method: GetExecutorIO
static const ni::sMethodDef iConcurrent_GetExecutorIO = {
  "GetExecutorIO",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetExecutorIO)
#else
  NULL
#endif
};

// Method: GetExecutorMain
static const ni::sMethodDef iConcurrent_GetExecutorMain = {
  "GetExecutorMain",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExecutor), "iExecutor*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetExecutorMain)
#else
  NULL
#endif
};

// Method: ThreadRun
static const ni::sParameterDef iConcurrent_ThreadRun_Parameters[1] = { 
  { "apRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }
}; 
static const ni::sMethodDef iConcurrent_ThreadRun = {
  "ThreadRun",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFuture), "Ptr<iFuture>",
  1, iConcurrent_ThreadRun_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_ThreadRun)
#else
  NULL
#endif
};

// Method: CreateFutureValue
static const ni::sMethodDef iConcurrent_CreateFutureValue = {
  "CreateFutureValue",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFutureValue), "iFutureValue*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateFutureValue)
#else
  NULL
#endif
};

// Method: CreateMessageDesc
static const ni::sParameterDef iConcurrent_CreateMessageDesc_Parameters[4] = { 
  { "apHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "anMsg", ni::eType_U32, NULL, "tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iConcurrent_CreateMessageDesc = {
  "CreateMessageDesc",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageDesc), "Ptr<iMessageDesc>",
  4, iConcurrent_CreateMessageDesc_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateMessageDesc)
#else
  NULL
#endif
};

// Method: CreateMessageQueue
static const ni::sParameterDef iConcurrent_CreateMessageQueue_Parameters[2] = { 
  { "anThreadID", ni::eType_U64, NULL, "tU64" }, 
  { "aMaxItems", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iConcurrent_CreateMessageQueue = {
  "CreateMessageQueue",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageQueue), "Ptr<iMessageQueue>",
  2, iConcurrent_CreateMessageQueue_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_CreateMessageQueue)
#else
  NULL
#endif
};

// Method: GetMessageQueue
static const ni::sParameterDef iConcurrent_GetMessageQueue_Parameters[1] = { 
  { "anThreadID", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iConcurrent_GetMessageQueue = {
  "GetMessageQueue",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageQueue), "Ptr<iMessageQueue>",
  1, iConcurrent_GetMessageQueue_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_GetMessageQueue)
#else
  NULL
#endif
};

// Method: SendMessage
static const ni::sParameterDef iConcurrent_SendMessage_Parameters[4] = { 
  { "apHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "anMsg", ni::eType_U32, NULL, "tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iConcurrent_SendMessage = {
  "SendMessage",
  0|ni::eType_I8, NULL, "tBool",
  4, iConcurrent_SendMessage_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_SendMessage)
#else
  NULL
#endif
};

// Method: QueueMessage
static const ni::sParameterDef iConcurrent_QueueMessage_Parameters[4] = { 
  { "apHandler", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iMessageHandler), "iMessageHandler*" }, 
  { "anMsg", ni::eType_U32, NULL, "tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iConcurrent_QueueMessage = {
  "QueueMessage",
  0|ni::eType_I8, NULL, "tBool",
  4, iConcurrent_QueueMessage_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConcurrent_QueueMessage)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iConcurrent[] = {
	&iConcurrent_GetMainThreadID,
	&iConcurrent_GetCurrentThreadID,
	&iConcurrent_CreateRunnableQueue,
	&iConcurrent_CreateExecutorCooperative,
	&iConcurrent_CreateExecutorImmediate,
	&iConcurrent_CreateExecutorThreadPool,
	&iConcurrent_GetExecutorCPU,
	&iConcurrent_GetExecutorIO,
	&iConcurrent_GetExecutorMain,
	&iConcurrent_ThreadRun,
	&iConcurrent_CreateFutureValue,
	&iConcurrent_CreateMessageDesc,
	&iConcurrent_CreateMessageQueue,
	&iConcurrent_GetMessageQueue,
	&iConcurrent_SendMessage,
	&iConcurrent_QueueMessage,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iConcurrent[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iConcurrent = {
  niGetInterfaceID(iConcurrent),
  &niGetInterfaceUUID(iConcurrent),
  1,
  Parents_iConcurrent,
  niCountOf(Methods_iConcurrent),Methods_iConcurrent,
  NULL
};

	return &InterfaceDef_iConcurrent;
}

// End of iConcurrent wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iCommandSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCommandSink() {

// Method: GetName
static const ni::sMethodDef iCommandSink_GetName = {
  "GetName",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCommandSink_GetName)
#else
  NULL
#endif
};

// Method: GetNamespace
static const ni::sMethodDef iCommandSink_GetNamespace = {
  "GetNamespace",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCommandSink_GetNamespace)
#else
  NULL
#endif
};

// Method: GetDescription
static const ni::sMethodDef iCommandSink_GetDescription = {
  "GetDescription",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCommandSink_GetDescription)
#else
  NULL
#endif
};

// Method: OnRun
static const ni::sParameterDef iCommandSink_OnRun_Parameters[2] = { 
  { "avArgs", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }, 
  { "apConsole", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iConsole), "iConsole*" }
}; 
static const ni::sMethodDef iCommandSink_OnRun = {
  "OnRun",
  0|ni::eType_I8, NULL, "tBool",
  2, iCommandSink_OnRun_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCommandSink_OnRun)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iCommandSink[] = {
	&iCommandSink_GetName,
	&iCommandSink_GetNamespace,
	&iCommandSink_GetDescription,
	&iCommandSink_OnRun,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iCommandSink : public ni::cIUnknownImpl<ni::iCommandSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iCommandSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iCommandSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iCommandSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iCommandSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iCommandSink::GetName
  const achar * __stdcall GetName() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iCommandSink_GetName,0,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iCommandSink_GetName.mReturnType,ni::eFalse)) {
        return _var_.GetACharConstPointer();
      }
    }
    return AZEROSTR;
	}

  // Method (1): iCommandSink::GetNamespace
  const achar * __stdcall GetNamespace() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iCommandSink_GetNamespace,1,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iCommandSink_GetNamespace.mReturnType,ni::eFalse)) {
        return _var_.GetACharConstPointer();
      }
    }
    return AZEROSTR;
	}

  // Method (2): iCommandSink::GetDescription
  const achar * __stdcall GetDescription() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iCommandSink_GetDescription,2,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iCommandSink_GetDescription.mReturnType,ni::eFalse)) {
        return _var_.GetACharConstPointer();
      }
    }
    return AZEROSTR;
	}

  // Method (3): iCommandSink::OnRun
  tBool __stdcall OnRun(const tStringCVec * avArgs, iConsole * apConsole) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = avArgs;
    _params_[1] = niIUnknownCast(apConsole);
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iCommandSink_OnRun,3,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iCommandSink_OnRun.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iCommandSink, niCountOf(Methods_iCommandSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iCommandSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iCommandSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCommandSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCommandSink = {
  niGetInterfaceID(iCommandSink),
  &niGetInterfaceUUID(iCommandSink),
  1,
  Parents_iCommandSink,
  niCountOf(Methods_iCommandSink),Methods_iCommandSink,
  DispatchWrapper_iCommandSink::Create
};

	return &InterfaceDef_iCommandSink;
}

// End of iCommandSink wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iConsoleSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iConsoleSink() {

// Method: OnConsoleSink_NamespaceVariableChanged
static const ni::sParameterDef iConsoleSink_OnConsoleSink_NamespaceVariableChanged_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsoleSink_OnConsoleSink_NamespaceVariableChanged = {
  "OnConsoleSink_NamespaceVariableChanged",
  0|ni::eType_Null, NULL, "void",
  2, iConsoleSink_OnConsoleSink_NamespaceVariableChanged_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsoleSink_OnConsoleSink_NamespaceVariableChanged)
#else
  NULL
#endif
};

// Method: OnConsoleSink_BeforeRunCommand
static const ni::sParameterDef iConsoleSink_OnConsoleSink_BeforeRunCommand_Parameters[1] = { 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsoleSink_OnConsoleSink_BeforeRunCommand = {
  "OnConsoleSink_BeforeRunCommand",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsoleSink_OnConsoleSink_BeforeRunCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsoleSink_OnConsoleSink_BeforeRunCommand)
#else
  NULL
#endif
};

// Method: OnConsoleSink_AfterRunCommand
static const ni::sParameterDef iConsoleSink_OnConsoleSink_AfterRunCommand_Parameters[1] = { 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsoleSink_OnConsoleSink_AfterRunCommand = {
  "OnConsoleSink_AfterRunCommand",
  0|ni::eType_Null, NULL, "void",
  1, iConsoleSink_OnConsoleSink_AfterRunCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsoleSink_OnConsoleSink_AfterRunCommand)
#else
  NULL
#endif
};

// Method: OnConsoleSink_BeforeRunScript
static const ni::sParameterDef iConsoleSink_OnConsoleSink_BeforeRunScript_Parameters[2] = { 
  { "apHost", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*" }, 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsoleSink_OnConsoleSink_BeforeRunScript = {
  "OnConsoleSink_BeforeRunScript",
  0|ni::eType_I8, NULL, "tBool",
  2, iConsoleSink_OnConsoleSink_BeforeRunScript_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsoleSink_OnConsoleSink_BeforeRunScript)
#else
  NULL
#endif
};

// Method: OnConsoleSink_AfterRunScript
static const ni::sParameterDef iConsoleSink_OnConsoleSink_AfterRunScript_Parameters[2] = { 
  { "apHost", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*" }, 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsoleSink_OnConsoleSink_AfterRunScript = {
  "OnConsoleSink_AfterRunScript",
  0|ni::eType_Null, NULL, "void",
  2, iConsoleSink_OnConsoleSink_AfterRunScript_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsoleSink_OnConsoleSink_AfterRunScript)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iConsoleSink[] = {
	&iConsoleSink_OnConsoleSink_NamespaceVariableChanged,
	&iConsoleSink_OnConsoleSink_BeforeRunCommand,
	&iConsoleSink_OnConsoleSink_AfterRunCommand,
	&iConsoleSink_OnConsoleSink_BeforeRunScript,
	&iConsoleSink_OnConsoleSink_AfterRunScript,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iConsoleSink : public ni::cIUnknownImpl<ni::iConsoleSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iConsoleSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iConsoleSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iConsoleSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iConsoleSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iConsoleSink::OnConsoleSink_NamespaceVariableChanged
  void __stdcall OnConsoleSink_NamespaceVariableChanged(const achar * aaszName, const achar * aaszValue) {
    ni::Var _params_[2];
    _params_[0] = aaszName;
    _params_[1] = aaszValue;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iConsoleSink_OnConsoleSink_NamespaceVariableChanged,0,_params_,2,NULL);
	}

  // Method (1): iConsoleSink::OnConsoleSink_BeforeRunCommand
  tBool __stdcall OnConsoleSink_BeforeRunCommand(const achar * aaszCmd) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = aaszCmd;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iConsoleSink_OnConsoleSink_BeforeRunCommand,1,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iConsoleSink_OnConsoleSink_BeforeRunCommand.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (2): iConsoleSink::OnConsoleSink_AfterRunCommand
  void __stdcall OnConsoleSink_AfterRunCommand(const achar * aaszCmd) {
    ni::Var _params_[1];
    _params_[0] = aaszCmd;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iConsoleSink_OnConsoleSink_AfterRunCommand,2,_params_,1,NULL);
	}

  // Method (3): iConsoleSink::OnConsoleSink_BeforeRunScript
  tBool __stdcall OnConsoleSink_BeforeRunScript(iScriptingHost * apHost, const achar * aaszCmd) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apHost);
    _params_[1] = aaszCmd;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iConsoleSink_OnConsoleSink_BeforeRunScript,3,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iConsoleSink_OnConsoleSink_BeforeRunScript.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (4): iConsoleSink::OnConsoleSink_AfterRunScript
  void __stdcall OnConsoleSink_AfterRunScript(iScriptingHost * apHost, const achar * aaszCmd) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apHost);
    _params_[1] = aaszCmd;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iConsoleSink_OnConsoleSink_AfterRunScript,4,_params_,2,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iConsoleSink, niCountOf(Methods_iConsoleSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iConsoleSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iConsoleSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iConsoleSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iConsoleSink = {
  niGetInterfaceID(iConsoleSink),
  &niGetInterfaceUUID(iConsoleSink),
  1,
  Parents_iConsoleSink,
  niCountOf(Methods_iConsoleSink),Methods_iConsoleSink,
  DispatchWrapper_iConsoleSink::Create
};

	return &InterfaceDef_iConsoleSink;
}

// End of iConsoleSink wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iConsole wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iConsole() {

// Method: GetSinkList
static const ni::sMethodDef iConsole_GetSinkList = {
  "GetSinkList",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iSinkList), "tConsoleSinkLst*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_GetSinkList)
#else
  NULL
#endif
};

// Method: AddNamespace
static const ni::sParameterDef iConsole_AddNamespace_Parameters[1] = { 
  { "aszNamespace", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_AddNamespace = {
  "AddNamespace",
  0|ni::eType_Null, NULL, "void",
  1, iConsole_AddNamespace_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_AddNamespace)
#else
  NULL
#endif
};

// Method: RemoveNamespace
static const ni::sParameterDef iConsole_RemoveNamespace_Parameters[1] = { 
  { "aszNamespace", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_RemoveNamespace = {
  "RemoveNamespace",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_RemoveNamespace_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_RemoveNamespace)
#else
  NULL
#endif
};

// Method: AddVariable
static const ni::sParameterDef iConsole_AddVariable_Parameters[2] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_AddVariable = {
  "AddVariable",
  0|ni::eType_I8, NULL, "tBool",
  2, iConsole_AddVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_AddVariable)
#else
  NULL
#endif
};

// Method: RemoveVariable
static const ni::sParameterDef iConsole_RemoveVariable_Parameters[1] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_RemoveVariable = {
  "RemoveVariable",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_RemoveVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_RemoveVariable)
#else
  NULL
#endif
};

// Method: SetVariable
static const ni::sParameterDef iConsole_SetVariable_Parameters[2] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_SetVariable = {
  "SetVariable",
  0|ni::eType_I8, NULL, "tBool",
  2, iConsole_SetVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_SetVariable)
#else
  NULL
#endif
};

// Method: GetVariable
static const ni::sParameterDef iConsole_GetVariable_Parameters[1] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_GetVariable = {
  "GetVariable",
  0|ni::eType_String, NULL, "cString",
  1, iConsole_GetVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_GetVariable)
#else
  NULL
#endif
};

// Method: CommandExists
static const ni::sParameterDef iConsole_CommandExists_Parameters[1] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_CommandExists = {
  "CommandExists",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_CommandExists_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_CommandExists)
#else
  NULL
#endif
};

// Method: AddCommand
static const ni::sParameterDef iConsole_AddCommand_Parameters[1] = { 
  { "pCmd", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCommandSink), "iCommandSink*" }
}; 
static const ni::sMethodDef iConsole_AddCommand = {
  "AddCommand",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_AddCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_AddCommand)
#else
  NULL
#endif
};

// Method: RemoveCommand
static const ni::sParameterDef iConsole_RemoveCommand_Parameters[1] = { 
  { "aszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_RemoveCommand = {
  "RemoveCommand",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_RemoveCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_RemoveCommand)
#else
  NULL
#endif
};

// Method: GetCommandDescription
static const ni::sParameterDef iConsole_GetCommandDescription_Parameters[1] = { 
  { "aszCommand", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_GetCommandDescription = {
  "GetCommandDescription",
  0|ni::eType_String, NULL, "cString",
  1, iConsole_GetCommandDescription_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_GetCommandDescription)
#else
  NULL
#endif
};

// Method: RunCommand
static const ni::sParameterDef iConsole_RunCommand_Parameters[1] = { 
  { "aszCommand", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_RunCommand = {
  "RunCommand",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_RunCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_RunCommand)
#else
  NULL
#endif
};

// Method: CompleteCommandLine
static const ni::sParameterDef iConsole_CompleteCommandLine_Parameters[2] = { 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "abNext", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iConsole_CompleteCommandLine = {
  "CompleteCommandLine",
  0|ni::eType_String, NULL, "cString",
  2, iConsole_CompleteCommandLine_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_CompleteCommandLine)
#else
  NULL
#endif
};

// Method: GetNumCommands
static const ni::sMethodDef iConsole_GetNumCommands = {
  "GetNumCommands",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_GetNumCommands)
#else
  NULL
#endif
};

// Method: PushCommand
static const ni::sParameterDef iConsole_PushCommand_Parameters[1] = { 
  { "aszCommand", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iConsole_PushCommand = {
  "PushCommand",
  0|ni::eType_I8, NULL, "tBool",
  1, iConsole_PushCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_PushCommand)
#else
  NULL
#endif
};

// Method: PopCommand
static const ni::sMethodDef iConsole_PopCommand = {
  "PopCommand",
  0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_PopCommand)
#else
  NULL
#endif
};

// Method: PopAndRunAllCommands
static const ni::sMethodDef iConsole_PopAndRunAllCommands = {
  "PopAndRunAllCommands",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iConsole_PopAndRunAllCommands)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iConsole[] = {
	&iConsole_GetSinkList,
	&iConsole_AddNamespace,
	&iConsole_RemoveNamespace,
	&iConsole_AddVariable,
	&iConsole_RemoveVariable,
	&iConsole_SetVariable,
	&iConsole_GetVariable,
	&iConsole_CommandExists,
	&iConsole_AddCommand,
	&iConsole_RemoveCommand,
	&iConsole_GetCommandDescription,
	&iConsole_RunCommand,
	&iConsole_CompleteCommandLine,
	&iConsole_GetNumCommands,
	&iConsole_PushCommand,
	&iConsole_PopCommand,
	&iConsole_PopAndRunAllCommands,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iConsole[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iConsole = {
  niGetInterfaceID(iConsole),
  &niGetInterfaceUUID(iConsole),
  1,
  Parents_iConsole,
  niCountOf(Methods_iConsole),Methods_iConsole,
  NULL
};

	return &InterfaceDef_iConsole;
}

// End of iConsole wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iCryptoRand wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCryptoRand() {

#if niMinFeatures(15)
// Method: SetEntropyLength
static const ni::sParameterDef iCryptoRand_SetEntropyLength_Parameters[1] = { 
  { "anEntropyLen", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_SetEntropyLength = {
  "SetEntropyLength",
  0|ni::eType_Null, NULL, "void",
  1, iCryptoRand_SetEntropyLength_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_SetEntropyLength)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: SetReseedInterval
static const ni::sParameterDef iCryptoRand_SetReseedInterval_Parameters[1] = { 
  { "anInterval", ni::eType_Int, NULL, "tInt" }
}; 
static const ni::sMethodDef iCryptoRand_SetReseedInterval = {
  "SetReseedInterval",
  0|ni::eType_Null, NULL, "void",
  1, iCryptoRand_SetReseedInterval_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_SetReseedInterval)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: SetPredictionResistance
static const ni::sParameterDef iCryptoRand_SetPredictionResistance_Parameters[1] = { 
  { "abPR", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iCryptoRand_SetPredictionResistance = {
  "SetPredictionResistance",
  0|ni::eType_Null, NULL, "void",
  1, iCryptoRand_SetPredictionResistance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_SetPredictionResistance)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Reseed
static const ni::sParameterDef iCryptoRand_Reseed_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anAddSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_Reseed = {
  "Reseed",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoRand_Reseed_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_Reseed)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ReseedRaw
static const ni::sParameterDef iCryptoRand_ReseedRaw_Parameters[2] = { 
  { "apData", ni::eTypeFlags_Constant|ni::eType_Ptr, NULL, "const tPtr" }, 
  { "anAddSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_ReseedRaw = {
  "ReseedRaw",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoRand_ReseedRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_ReseedRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Update
static const ni::sParameterDef iCryptoRand_Update_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anAddSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_Update = {
  "Update",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoRand_Update_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_Update)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: UpdateRaw
static const ni::sParameterDef iCryptoRand_UpdateRaw_Parameters[2] = { 
  { "apAdd", ni::eTypeFlags_Constant|ni::eType_Ptr, NULL, "const tPtr" }, 
  { "anAddSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_UpdateRaw = {
  "UpdateRaw",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoRand_UpdateRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_UpdateRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandFile
static const ni::sParameterDef iCryptoRand_RandFile_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anOutLen", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_RandFile = {
  "RandFile",
  0|ni::eType_Size, NULL, "tSize",
  2, iCryptoRand_RandFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_RandFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandRaw
static const ni::sParameterDef iCryptoRand_RandRaw_Parameters[2] = { 
  { "apOut", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anOutLen", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoRand_RandRaw = {
  "RandRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iCryptoRand_RandRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_RandRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandInt
static const ni::sMethodDef iCryptoRand_RandInt = {
  "RandInt",
  0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_RandInt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandFloat
static const ni::sMethodDef iCryptoRand_RandFloat = {
  "RandFloat",
  0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_RandFloat)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandUUID
static const ni::sMethodDef iCryptoRand_RandUUID = {
  "RandUUID",
  0|ni::eType_UUID, NULL, "tUUID",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoRand_RandUUID)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iCryptoRand[] = {
#if niMinFeatures(15)
	&iCryptoRand_SetEntropyLength,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_SetReseedInterval,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_SetPredictionResistance,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_Reseed,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_ReseedRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_Update,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_UpdateRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_RandFile,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_RandRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_RandInt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_RandFloat,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoRand_RandUUID,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCryptoRand[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCryptoRand = {
  niGetInterfaceID(iCryptoRand),
  &niGetInterfaceUUID(iCryptoRand),
  1,
  Parents_iCryptoRand,
  niCountOf(Methods_iCryptoRand),Methods_iCryptoRand,
  NULL
};

	return &InterfaceDef_iCryptoRand;
}

// End of iCryptoRand wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iCrypto wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCrypto() {

#if niMinFeatures(15)
// Method: Digest
static const ni::sParameterDef iCrypto_Digest_Parameters[3] = { 
  { "aaszData", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aEncoding", ni::eType_Enum, NULL, "eRawToStringEncoding" }
}; 
static const ni::sMethodDef iCrypto_Digest = {
  "Digest",
  0|ni::eType_String, NULL, "cString",
  3, iCrypto_Digest_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_Digest)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: DigestRaw
static const ni::sParameterDef iCrypto_DigestRaw_Parameters[4] = { 
  { "apData", ni::eTypeFlags_Constant|ni::eType_Ptr, NULL, "const tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aEncoding", ni::eType_Enum, NULL, "eRawToStringEncoding" }
}; 
static const ni::sMethodDef iCrypto_DigestRaw = {
  "DigestRaw",
  0|ni::eType_String, NULL, "cString",
  4, iCrypto_DigestRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_DigestRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: DigestFile
static const ni::sParameterDef iCrypto_DigestFile_Parameters[4] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aEncoding", ni::eType_Enum, NULL, "eRawToStringEncoding" }
}; 
static const ni::sMethodDef iCrypto_DigestFile = {
  "DigestFile",
  0|ni::eType_String, NULL, "cString",
  4, iCrypto_DigestFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_DigestFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CreateRand
static const ni::sMethodDef iCrypto_CreateRand = {
  "CreateRand",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCryptoRand), "iCryptoRand*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_CreateRand)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetRand
static const ni::sMethodDef iCrypto_GetRand = {
  "GetRand",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCryptoRand), "iCryptoRand*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_GetRand)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: KDFGenSaltBlowfish
static const ni::sParameterDef iCrypto_KDFGenSaltBlowfish_Parameters[2] = { 
  { "apRand", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iCryptoRand), "iCryptoRand*" }, 
  { "aRounds", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iCrypto_KDFGenSaltBlowfish = {
  "KDFGenSaltBlowfish",
  0|ni::eType_String, NULL, "cString",
  2, iCrypto_KDFGenSaltBlowfish_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_KDFGenSaltBlowfish)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: KDFCrypt
static const ni::sParameterDef iCrypto_KDFCrypt_Parameters[2] = { 
  { "aKey", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aSalt", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCrypto_KDFCrypt = {
  "KDFCrypt",
  0|ni::eType_String, NULL, "cString",
  2, iCrypto_KDFCrypt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_KDFCrypt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: SigVerify
static const ni::sParameterDef iCrypto_SigVerify_Parameters[3] = { 
  { "signatureHex", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "publicKeyPEM", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "payload", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iCrypto_SigVerify = {
  "SigVerify",
  0|ni::eType_I8, NULL, "tBool",
  3, iCrypto_SigVerify_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_SigVerify)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: HmacSignature
static const ni::sParameterDef iCrypto_HmacSignature_Parameters[6] = { 
  { "aAlgo", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apOutput", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }, 
  { "apPayload", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }, 
  { "aPayloadSize", ni::eType_Size, NULL, "ni::tSize" }, 
  { "aSecret", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aSecretFormat", ni::eType_Enum, NULL, "ni::eRawToStringEncoding" }
}; 
static const ni::sMethodDef iCrypto_HmacSignature = {
  "HmacSignature",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*",
  6, iCrypto_HmacSignature_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCrypto_HmacSignature)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iCrypto[] = {
#if niMinFeatures(15)
	&iCrypto_Digest,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_DigestRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_DigestFile,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_CreateRand,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_GetRand,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_KDFGenSaltBlowfish,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_KDFCrypt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_SigVerify,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCrypto_HmacSignature,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCrypto[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCrypto = {
  niGetInterfaceID(iCrypto),
  &niGetInterfaceUUID(iCrypto),
  1,
  Parents_iCrypto,
  niCountOf(Methods_iCrypto),Methods_iCrypto,
  NULL
};

	return &InterfaceDef_iCrypto;
}

// End of iCrypto wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iCryptoHash wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iCryptoHash() {

#if niMinFeatures(15)
// Method: GetHashType
static const ni::sMethodDef iCryptoHash_GetHashType = {
  "GetHashType",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_GetHashType)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetDigestSize
static const ni::sMethodDef iCryptoHash_GetDigestSize = {
  "GetDigestSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_GetDigestSize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Restart
static const ni::sMethodDef iCryptoHash_Restart = {
  "Restart",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_Restart)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Update
static const ni::sParameterDef iCryptoHash_Update_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iCryptoHash_Update = {
  "Update",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoHash_Update_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_Update)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: UpdateBlock
static const ni::sParameterDef iCryptoHash_UpdateBlock_Parameters[3] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aStart", ni::eType_I64, NULL, "tI64" }, 
  { "aSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iCryptoHash_UpdateBlock = {
  "UpdateBlock",
  0|ni::eType_I8, NULL, "tBool",
  3, iCryptoHash_UpdateBlock_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_UpdateBlock)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: UpdateRaw
static const ni::sParameterDef iCryptoHash_UpdateRaw_Parameters[2] = { 
  { "apData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "aSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoHash_UpdateRaw = {
  "UpdateRaw",
  0|ni::eType_I8, NULL, "tBool",
  2, iCryptoHash_UpdateRaw_Parameters,
NULL
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FinalString
static const ni::sParameterDef iCryptoHash_FinalString_Parameters[1] = { 
  { "aEncoding", ni::eType_Enum, NULL, "eRawToStringEncoding" }
}; 
static const ni::sMethodDef iCryptoHash_FinalString = {
  "FinalString",
  0|ni::eType_String, NULL, "cString",
  1, iCryptoHash_FinalString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_FinalString)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FinalFile
static const ni::sParameterDef iCryptoHash_FinalFile_Parameters[1] = { 
  { "apOutput", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }
}; 
static const ni::sMethodDef iCryptoHash_FinalFile = {
  "FinalFile",
  0|ni::eType_Size, NULL, "tSize",
  1, iCryptoHash_FinalFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_FinalFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FinalRaw
static const ni::sParameterDef iCryptoHash_FinalRaw_Parameters[2] = { 
  { "apData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iCryptoHash_FinalRaw = {
  "FinalRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iCryptoHash_FinalRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iCryptoHash_FinalRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iCryptoHash[] = {
#if niMinFeatures(15)
	&iCryptoHash_GetHashType,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_GetDigestSize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_Restart,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_Update,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_UpdateBlock,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_UpdateRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_FinalString,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_FinalFile,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iCryptoHash_FinalRaw,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iCryptoHash[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iCryptoHash = {
  niGetInterfaceID(iCryptoHash),
  &niGetInterfaceUUID(iCryptoHash),
  1,
  Parents_iCryptoHash,
  niCountOf(Methods_iCryptoHash),Methods_iCryptoHash,
  NULL
};

	return &InterfaceDef_iCryptoHash;
}

// End of iCryptoHash wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iDataTableSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDataTableSink() {

// Method: OnDataTableSink_SetName
static const ni::sParameterDef iDataTableSink_OnDataTableSink_SetName_Parameters[1] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_SetName = {
  "OnDataTableSink_SetName",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  1, iDataTableSink_OnDataTableSink_SetName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_SetName)
#else
  NULL
#endif
};

// Method: OnDataTableSink_AddChild
static const ni::sParameterDef iDataTableSink_OnDataTableSink_AddChild_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "apChild", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_AddChild = {
  "OnDataTableSink_AddChild",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  2, iDataTableSink_OnDataTableSink_AddChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_AddChild)
#else
  NULL
#endif
};

// Method: OnDataTableSink_RemoveChild
static const ni::sParameterDef iDataTableSink_OnDataTableSink_RemoveChild_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "apChild", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_RemoveChild = {
  "OnDataTableSink_RemoveChild",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  2, iDataTableSink_OnDataTableSink_RemoveChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_RemoveChild)
#else
  NULL
#endif
};

// Method: OnDataTableSink_SetProperty
static const ni::sParameterDef iDataTableSink_OnDataTableSink_SetProperty_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "anProperty", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_SetProperty = {
  "OnDataTableSink_SetProperty",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  2, iDataTableSink_OnDataTableSink_SetProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_SetProperty)
#else
  NULL
#endif
};

// Method: OnDataTableSink_SetMetadata
static const ni::sParameterDef iDataTableSink_OnDataTableSink_SetMetadata_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "anProperty", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_SetMetadata = {
  "OnDataTableSink_SetMetadata",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  2, iDataTableSink_OnDataTableSink_SetMetadata_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_SetMetadata)
#else
  NULL
#endif
};

// Method: OnDataTableSink_RemoveProperty
static const ni::sParameterDef iDataTableSink_OnDataTableSink_RemoveProperty_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "anProperty", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_RemoveProperty = {
  "OnDataTableSink_RemoveProperty",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Null, NULL, "void",
  2, iDataTableSink_OnDataTableSink_RemoveProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_RemoveProperty)
#else
  NULL
#endif
};

// Method: OnDataTableSink_GetProperty
static const ni::sParameterDef iDataTableSink_OnDataTableSink_GetProperty_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "anProperty", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableSink_OnDataTableSink_GetProperty = {
  "OnDataTableSink_GetProperty",
  ni::eTypeFlags_MethodOptional|0|ni::eType_Variant, NULL, "Var",
  2, iDataTableSink_OnDataTableSink_GetProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableSink_OnDataTableSink_GetProperty)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDataTableSink[] = {
	&iDataTableSink_OnDataTableSink_SetName,
	&iDataTableSink_OnDataTableSink_AddChild,
	&iDataTableSink_OnDataTableSink_RemoveChild,
	&iDataTableSink_OnDataTableSink_SetProperty,
	&iDataTableSink_OnDataTableSink_SetMetadata,
	&iDataTableSink_OnDataTableSink_RemoveProperty,
	&iDataTableSink_OnDataTableSink_GetProperty,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iDataTableSink : public ni::cIUnknownImpl<ni::iDataTableSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iDataTableSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iDataTableSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iDataTableSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iDataTableSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iDataTableSink::OnDataTableSink_SetName
  void __stdcall OnDataTableSink_SetName(iDataTable * apDT) {
    ni::Var _params_[1];
    _params_[0] = niIUnknownCast(apDT);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_SetName,0,_params_,1,NULL);
	}

  // Method (1): iDataTableSink::OnDataTableSink_AddChild
  void __stdcall OnDataTableSink_AddChild(iDataTable * apDT, iDataTable * apChild) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = niIUnknownCast(apChild);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_AddChild,1,_params_,2,NULL);
	}

  // Method (2): iDataTableSink::OnDataTableSink_RemoveChild
  void __stdcall OnDataTableSink_RemoveChild(iDataTable * apDT, iDataTable * apChild) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = niIUnknownCast(apChild);
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_RemoveChild,2,_params_,2,NULL);
	}

  // Method (3): iDataTableSink::OnDataTableSink_SetProperty
  void __stdcall OnDataTableSink_SetProperty(iDataTable * apDT, tU32 anProperty) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = anProperty;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_SetProperty,3,_params_,2,NULL);
	}

  // Method (4): iDataTableSink::OnDataTableSink_SetMetadata
  void __stdcall OnDataTableSink_SetMetadata(iDataTable * apDT, tU32 anProperty) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = anProperty;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_SetMetadata,4,_params_,2,NULL);
	}

  // Method (5): iDataTableSink::OnDataTableSink_RemoveProperty
  void __stdcall OnDataTableSink_RemoveProperty(iDataTable * apDT, tU32 anProperty) {
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = anProperty;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_RemoveProperty,5,_params_,2,NULL);
	}

  // Method (6): iDataTableSink::OnDataTableSink_GetProperty
  Var __stdcall OnDataTableSink_GetProperty(iDataTable * apDT, tU32 anProperty) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(apDT);
    _params_[1] = anProperty;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iDataTableSink_OnDataTableSink_GetProperty,6,_params_,2,&_var_)) {
  return _var_;
  }
    return niVarNull;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iDataTableSink, niCountOf(Methods_iDataTableSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iDataTableSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iDataTableSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDataTableSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDataTableSink = {
  niGetInterfaceID(iDataTableSink),
  &niGetInterfaceUUID(iDataTableSink),
  1,
  Parents_iDataTableSink,
  niCountOf(Methods_iDataTableSink),Methods_iDataTableSink,
  DispatchWrapper_iDataTableSink::Create
};

	return &InterfaceDef_iDataTableSink;
}

// End of iDataTableSink wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iDataTable wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDataTable() {

// Method: SetName
static const ni::sParameterDef iDataTable_SetName_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_SetName = {
  "SetName",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iDataTable_SetName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetName)
#else
  NULL
#endif
};

// Method: GetName
static const ni::sMethodDef iDataTable_GetName = {
  "GetName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetName)
#else
  NULL
#endif
};

// Method: GetRoot
static const ni::sMethodDef iDataTable_GetRoot = {
  "GetRoot",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetRoot)
#else
  NULL
#endif
};

// Method: GetParent
static const ni::sMethodDef iDataTable_GetParent = {
  "GetParent",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetParent)
#else
  NULL
#endif
};

// Method: GetPrevSibling
static const ni::sMethodDef iDataTable_GetPrevSibling = {
  "GetPrevSibling",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetPrevSibling)
#else
  NULL
#endif
};

// Method: GetNextSibling
static const ni::sMethodDef iDataTable_GetNextSibling = {
  "GetNextSibling",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetNextSibling)
#else
  NULL
#endif
};

// Method: GetIndex
static const ni::sMethodDef iDataTable_GetIndex = {
  "GetIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIndex)
#else
  NULL
#endif
};

// Method: Clone
static const ni::sMethodDef iDataTable_Clone = {
  "Clone",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_Clone)
#else
  NULL
#endif
};

// Method: CloneEx
static const ni::sParameterDef iDataTable_CloneEx_Parameters[1] = { 
  { "aMode", ni::eType_Enum, NULL, "tDataTableCopyFlags" }
}; 
static const ni::sMethodDef iDataTable_CloneEx = {
  "CloneEx",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  1, iDataTable_CloneEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_CloneEx)
#else
  NULL
#endif
};

// Method: Copy
static const ni::sParameterDef iDataTable_Copy_Parameters[2] = { 
  { "apSource", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "const iDataTable*" }, 
  { "aMode", ni::eType_Enum, NULL, "tDataTableCopyFlags" }
}; 
static const ni::sMethodDef iDataTable_Copy = {
  "Copy",
  0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_Copy_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_Copy)
#else
  NULL
#endif
};

// Method: Clear
static const ni::sMethodDef iDataTable_Clear = {
  "Clear",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_Clear)
#else
  NULL
#endif
};

// Method: GetHasSink
static const ni::sMethodDef iDataTable_GetHasSink = {
  "GetHasSink",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetHasSink)
#else
  NULL
#endif
};

// Method: GetSinkList
static const ni::sMethodDef iDataTable_GetSinkList = {
  "GetSinkList",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iSinkList), "tDataTableSinkLst*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetSinkList)
#else
  NULL
#endif
};

// Method: ClearChildren
static const ni::sMethodDef iDataTable_ClearChildren = {
  "ClearChildren",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_ClearChildren)
#else
  NULL
#endif
};

// Method: GetNumChildren
static const ni::sMethodDef iDataTable_GetNumChildren = {
  "GetNumChildren",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetNumChildren)
#else
  NULL
#endif
};

// Method: GetChildIndex
static const ni::sParameterDef iDataTable_GetChildIndex_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetChildIndex = {
  "GetChildIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iDataTable_GetChildIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetChildIndex)
#else
  NULL
#endif
};

// Method: GetChild
static const ni::sParameterDef iDataTable_GetChild_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetChild = {
  "GetChild",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  1, iDataTable_GetChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetChild)
#else
  NULL
#endif
};

// Method: GetChildFromIndex
static const ni::sParameterDef iDataTable_GetChildFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetChildFromIndex = {
  "GetChildFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  1, iDataTable_GetChildFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetChildFromIndex)
#else
  NULL
#endif
};

// Method: AddChild
static const ni::sParameterDef iDataTable_AddChild_Parameters[1] = { 
  { "apTable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iDataTable_AddChild = {
  "AddChild",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_AddChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_AddChild)
#else
  NULL
#endif
};

// Method: RemoveChild
static const ni::sParameterDef iDataTable_RemoveChild_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_RemoveChild = {
  "RemoveChild",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_RemoveChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_RemoveChild)
#else
  NULL
#endif
};

// Method: ClearProperties
static const ni::sMethodDef iDataTable_ClearProperties = {
  "ClearProperties",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_ClearProperties)
#else
  NULL
#endif
};

// Method: RemoveProperty
static const ni::sParameterDef iDataTable_RemoveProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_RemoveProperty = {
  "RemoveProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_RemoveProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_RemoveProperty)
#else
  NULL
#endif
};

// Method: RemovePropertyFromIndex
static const ni::sParameterDef iDataTable_RemovePropertyFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_RemovePropertyFromIndex = {
  "RemovePropertyFromIndex",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_RemovePropertyFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_RemovePropertyFromIndex)
#else
  NULL
#endif
};

// Method: GetNumProperties
static const ni::sMethodDef iDataTable_GetNumProperties = {
  "GetNumProperties",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetNumProperties)
#else
  NULL
#endif
};

// Method: GetPropertyIndex
static const ni::sParameterDef iDataTable_GetPropertyIndex_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetPropertyIndex = {
  "GetPropertyIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iDataTable_GetPropertyIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetPropertyIndex)
#else
  NULL
#endif
};

// Method: GetPropertyName
static const ni::sParameterDef iDataTable_GetPropertyName_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetPropertyName = {
  "GetPropertyName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  1, iDataTable_GetPropertyName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetPropertyName)
#else
  NULL
#endif
};

// Method: GetPropertyType
static const ni::sParameterDef iDataTable_GetPropertyType_Parameters[1] = { 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetPropertyType = {
  "GetPropertyType",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eDataTablePropertyType",
  1, iDataTable_GetPropertyType_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetPropertyType)
#else
  NULL
#endif
};

// Method: GetPropertyTypeFromIndex
static const ni::sParameterDef iDataTable_GetPropertyTypeFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetPropertyTypeFromIndex = {
  "GetPropertyTypeFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eDataTablePropertyType",
  1, iDataTable_GetPropertyTypeFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetPropertyTypeFromIndex)
#else
  NULL
#endif
};

// Method: HasProperty
static const ni::sParameterDef iDataTable_HasProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_HasProperty = {
  "HasProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_HasProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_HasProperty)
#else
  NULL
#endif
};

// Method: SetMetadata
static const ni::sParameterDef iDataTable_SetMetadata_Parameters[2] = { 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "ahspData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTable_SetMetadata = {
  "SetMetadata",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_SetMetadata_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetMetadata)
#else
  NULL
#endif
};

// Method: GetMetadata
static const ni::sParameterDef iDataTable_GetMetadata_Parameters[1] = { 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetMetadata = {
  "GetMetadata",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTable_GetMetadata_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetMetadata)
#else
  NULL
#endif
};

// Method: SetMetadataFromIndex
static const ni::sParameterDef iDataTable_SetMetadataFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "ahspData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTable_SetMetadataFromIndex = {
  "SetMetadataFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_SetMetadataFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetMetadataFromIndex)
#else
  NULL
#endif
};

// Method: GetMetadataFromIndex
static const ni::sParameterDef iDataTable_GetMetadataFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetMetadataFromIndex = {
  "GetMetadataFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTable_GetMetadataFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetMetadataFromIndex)
#else
  NULL
#endif
};

// Method: GetVar
static const ni::sParameterDef iDataTable_GetVar_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetVar = {
  "GetVar",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  1, iDataTable_GetVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVar)
#else
  NULL
#endif
};

// Method: GetVarFromIndex
static const ni::sParameterDef iDataTable_GetVarFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetVarFromIndex = {
  "GetVarFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  1, iDataTable_GetVarFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVarFromIndex)
#else
  NULL
#endif
};

// Method: GetVarDefault
static const ni::sParameterDef iDataTable_GetVarDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_GetVarDefault = {
  "GetVarDefault",
  0|ni::eType_Variant, NULL, "Var",
  2, iDataTable_GetVarDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVarDefault)
#else
  NULL
#endif
};

// Method: GetString
static const ni::sParameterDef iDataTable_GetString_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetString = {
  "GetString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iDataTable_GetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetString)
#else
  NULL
#endif
};

// Method: GetStringFromIndex
static const ni::sParameterDef iDataTable_GetStringFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetStringFromIndex = {
  "GetStringFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iDataTable_GetStringFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetStringFromIndex)
#else
  NULL
#endif
};

// Method: GetStringDefault
static const ni::sParameterDef iDataTable_GetStringDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetStringDefault = {
  "GetStringDefault",
  0|ni::eType_String, NULL, "cString",
  2, iDataTable_GetStringDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetStringDefault)
#else
  NULL
#endif
};

// Method: GetHString
static const ni::sParameterDef iDataTable_GetHString_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetHString = {
  "GetHString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTable_GetHString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetHString)
#else
  NULL
#endif
};

// Method: GetHStringFromIndex
static const ni::sParameterDef iDataTable_GetHStringFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetHStringFromIndex = {
  "GetHStringFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTable_GetHStringFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetHStringFromIndex)
#else
  NULL
#endif
};

// Method: GetHStringDefault
static const ni::sParameterDef iDataTable_GetHStringDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTable_GetHStringDefault = {
  "GetHStringDefault",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  2, iDataTable_GetHStringDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetHStringDefault)
#else
  NULL
#endif
};

// Method: GetInt
static const ni::sParameterDef iDataTable_GetInt_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetInt = {
  "GetInt",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  1, iDataTable_GetInt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetInt)
#else
  NULL
#endif
};

// Method: GetIntFromIndex
static const ni::sParameterDef iDataTable_GetIntFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetIntFromIndex = {
  "GetIntFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  1, iDataTable_GetIntFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIntFromIndex)
#else
  NULL
#endif
};

// Method: GetIntDefault
static const ni::sParameterDef iDataTable_GetIntDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iDataTable_GetIntDefault = {
  "GetIntDefault",
  0|ni::eType_I64, NULL, "tI64",
  2, iDataTable_GetIntDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIntDefault)
#else
  NULL
#endif
};

// Method: GetBool
static const ni::sParameterDef iDataTable_GetBool_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetBool = {
  "GetBool",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_GetBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetBool)
#else
  NULL
#endif
};

// Method: GetBoolFromIndex
static const ni::sParameterDef iDataTable_GetBoolFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetBoolFromIndex = {
  "GetBoolFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  1, iDataTable_GetBoolFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetBoolFromIndex)
#else
  NULL
#endif
};

// Method: GetBoolDefault
static const ni::sParameterDef iDataTable_GetBoolDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDataTable_GetBoolDefault = {
  "GetBoolDefault",
  0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_GetBoolDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetBoolDefault)
#else
  NULL
#endif
};

// Method: GetFloat
static const ni::sParameterDef iDataTable_GetFloat_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetFloat = {
  "GetFloat",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  1, iDataTable_GetFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetFloat)
#else
  NULL
#endif
};

// Method: GetFloatFromIndex
static const ni::sParameterDef iDataTable_GetFloatFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetFloatFromIndex = {
  "GetFloatFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  1, iDataTable_GetFloatFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetFloatFromIndex)
#else
  NULL
#endif
};

// Method: GetFloatDefault
static const ni::sParameterDef iDataTable_GetFloatDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iDataTable_GetFloatDefault = {
  "GetFloatDefault",
  0|ni::eType_F64, NULL, "tF64",
  2, iDataTable_GetFloatDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetFloatDefault)
#else
  NULL
#endif
};

// Method: GetVec2
static const ni::sParameterDef iDataTable_GetVec2_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetVec2 = {
  "GetVec2",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2f, NULL, "sVec2f",
  1, iDataTable_GetVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec2)
#else
  NULL
#endif
};

// Method: GetVec2FromIndex
static const ni::sParameterDef iDataTable_GetVec2FromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetVec2FromIndex = {
  "GetVec2FromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2f, NULL, "sVec2f",
  1, iDataTable_GetVec2FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec2FromIndex)
#else
  NULL
#endif
};

// Method: GetVec2Default
static const ni::sParameterDef iDataTable_GetVec2Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iDataTable_GetVec2Default = {
  "GetVec2Default",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iDataTable_GetVec2Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec2Default)
#else
  NULL
#endif
};

// Method: GetVec3
static const ni::sParameterDef iDataTable_GetVec3_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetVec3 = {
  "GetVec3",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTable_GetVec3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec3)
#else
  NULL
#endif
};

// Method: GetVec3FromIndex
static const ni::sParameterDef iDataTable_GetVec3FromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetVec3FromIndex = {
  "GetVec3FromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTable_GetVec3FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec3FromIndex)
#else
  NULL
#endif
};

// Method: GetVec3Default
static const ni::sParameterDef iDataTable_GetVec3Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iDataTable_GetVec3Default = {
  "GetVec3Default",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iDataTable_GetVec3Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec3Default)
#else
  NULL
#endif
};

// Method: GetVec4
static const ni::sParameterDef iDataTable_GetVec4_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetVec4 = {
  "GetVec4",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTable_GetVec4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec4)
#else
  NULL
#endif
};

// Method: GetVec4FromIndex
static const ni::sParameterDef iDataTable_GetVec4FromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetVec4FromIndex = {
  "GetVec4FromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTable_GetVec4FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec4FromIndex)
#else
  NULL
#endif
};

// Method: GetVec4Default
static const ni::sParameterDef iDataTable_GetVec4Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iDataTable_GetVec4Default = {
  "GetVec4Default",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iDataTable_GetVec4Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVec4Default)
#else
  NULL
#endif
};

// Method: GetCol3
static const ni::sParameterDef iDataTable_GetCol3_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetCol3 = {
  "GetCol3",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTable_GetCol3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetCol3)
#else
  NULL
#endif
};

// Method: GetCol3FromIndex
static const ni::sParameterDef iDataTable_GetCol3FromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetCol3FromIndex = {
  "GetCol3FromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTable_GetCol3FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetCol3FromIndex)
#else
  NULL
#endif
};

// Method: GetCol4
static const ni::sParameterDef iDataTable_GetCol4_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetCol4 = {
  "GetCol4",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTable_GetCol4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetCol4)
#else
  NULL
#endif
};

// Method: GetCol4FromIndex
static const ni::sParameterDef iDataTable_GetCol4FromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetCol4FromIndex = {
  "GetCol4FromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTable_GetCol4FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetCol4FromIndex)
#else
  NULL
#endif
};

// Method: GetMatrix
static const ni::sParameterDef iDataTable_GetMatrix_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetMatrix = {
  "GetMatrix",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iDataTable_GetMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetMatrix)
#else
  NULL
#endif
};

// Method: GetMatrixFromIndex
static const ni::sParameterDef iDataTable_GetMatrixFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetMatrixFromIndex = {
  "GetMatrixFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iDataTable_GetMatrixFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetMatrixFromIndex)
#else
  NULL
#endif
};

// Method: GetMatrixDefault
static const ni::sParameterDef iDataTable_GetMatrixDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iDataTable_GetMatrixDefault = {
  "GetMatrixDefault",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iDataTable_GetMatrixDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetMatrixDefault)
#else
  NULL
#endif
};

// Method: GetIUnknown
static const ni::sParameterDef iDataTable_GetIUnknown_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetIUnknown = {
  "GetIUnknown",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  1, iDataTable_GetIUnknown_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIUnknown)
#else
  NULL
#endif
};

// Method: GetIUnknownFromIndex
static const ni::sParameterDef iDataTable_GetIUnknownFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetIUnknownFromIndex = {
  "GetIUnknownFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  1, iDataTable_GetIUnknownFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIUnknownFromIndex)
#else
  NULL
#endif
};

// Method: GetIUnknownDefault
static const ni::sParameterDef iDataTable_GetIUnknownDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iDataTable_GetIUnknownDefault = {
  "GetIUnknownDefault",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  2, iDataTable_GetIUnknownDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetIUnknownDefault)
#else
  NULL
#endif
};

// Method: GetEnum
static const ni::sParameterDef iDataTable_GetEnum_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }
}; 
static const ni::sMethodDef iDataTable_GetEnum = {
  "GetEnum",
  0|ni::eType_U32, NULL, "tU32",
  3, iDataTable_GetEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetEnum)
#else
  NULL
#endif
};

// Method: GetEnumFromIndex
static const ni::sParameterDef iDataTable_GetEnumFromIndex_Parameters[3] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }
}; 
static const ni::sMethodDef iDataTable_GetEnumFromIndex = {
  "GetEnumFromIndex",
  0|ni::eType_U32, NULL, "tU32",
  3, iDataTable_GetEnumFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetEnumFromIndex)
#else
  NULL
#endif
};

// Method: GetEnumDefault
static const ni::sParameterDef iDataTable_GetEnumDefault_Parameters[4] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }, 
  { "v", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetEnumDefault = {
  "GetEnumDefault",
  0|ni::eType_U32, NULL, "tU32",
  4, iDataTable_GetEnumDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetEnumDefault)
#else
  NULL
#endif
};

// Method: SetVar
static const ni::sParameterDef iDataTable_SetVar_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_SetVar = {
  "SetVar",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVar)
#else
  NULL
#endif
};

// Method: SetVarFromIndex
static const ni::sParameterDef iDataTable_SetVarFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_SetVarFromIndex = {
  "SetVarFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetVarFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVarFromIndex)
#else
  NULL
#endif
};

// Method: SetString
static const ni::sParameterDef iDataTable_SetString_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_SetString = {
  "SetString",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetString)
#else
  NULL
#endif
};

// Method: SetStringFromIndex
static const ni::sParameterDef iDataTable_SetStringFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_SetStringFromIndex = {
  "SetStringFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetStringFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetStringFromIndex)
#else
  NULL
#endif
};

// Method: SetHString
static const ni::sParameterDef iDataTable_SetHString_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTable_SetHString = {
  "SetHString",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetHString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetHString)
#else
  NULL
#endif
};

// Method: SetHStringFromIndex
static const ni::sParameterDef iDataTable_SetHStringFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTable_SetHStringFromIndex = {
  "SetHStringFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetHStringFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetHStringFromIndex)
#else
  NULL
#endif
};

// Method: SetInt
static const ni::sParameterDef iDataTable_SetInt_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iDataTable_SetInt = {
  "SetInt",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetInt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetInt)
#else
  NULL
#endif
};

// Method: SetIntFromIndex
static const ni::sParameterDef iDataTable_SetIntFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iDataTable_SetIntFromIndex = {
  "SetIntFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetIntFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetIntFromIndex)
#else
  NULL
#endif
};

// Method: SetBool
static const ni::sParameterDef iDataTable_SetBool_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDataTable_SetBool = {
  "SetBool",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetBool)
#else
  NULL
#endif
};

// Method: SetBoolFromIndex
static const ni::sParameterDef iDataTable_SetBoolFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDataTable_SetBoolFromIndex = {
  "SetBoolFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetBoolFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetBoolFromIndex)
#else
  NULL
#endif
};

// Method: SetFloat
static const ni::sParameterDef iDataTable_SetFloat_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iDataTable_SetFloat = {
  "SetFloat",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetFloat)
#else
  NULL
#endif
};

// Method: SetFloatFromIndex
static const ni::sParameterDef iDataTable_SetFloatFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iDataTable_SetFloatFromIndex = {
  "SetFloatFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetFloatFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetFloatFromIndex)
#else
  NULL
#endif
};

// Method: SetVec2
static const ni::sParameterDef iDataTable_SetVec2_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec2 = {
  "SetVec2",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec2)
#else
  NULL
#endif
};

// Method: SetVec2FromIndex
static const ni::sParameterDef iDataTable_SetVec2FromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec2FromIndex = {
  "SetVec2FromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetVec2FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec2FromIndex)
#else
  NULL
#endif
};

// Method: SetVec3
static const ni::sParameterDef iDataTable_SetVec3_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec3 = {
  "SetVec3",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetVec3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec3)
#else
  NULL
#endif
};

// Method: SetVec3FromIndex
static const ni::sParameterDef iDataTable_SetVec3FromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec3FromIndex = {
  "SetVec3FromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetVec3FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec3FromIndex)
#else
  NULL
#endif
};

// Method: SetVec4
static const ni::sParameterDef iDataTable_SetVec4_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec4 = {
  "SetVec4",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetVec4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec4)
#else
  NULL
#endif
};

// Method: SetVec4FromIndex
static const ni::sParameterDef iDataTable_SetVec4FromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iDataTable_SetVec4FromIndex = {
  "SetVec4FromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetVec4FromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVec4FromIndex)
#else
  NULL
#endif
};

// Method: SetMatrix
static const ni::sParameterDef iDataTable_SetMatrix_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iDataTable_SetMatrix = {
  "SetMatrix",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetMatrix)
#else
  NULL
#endif
};

// Method: SetMatrixFromIndex
static const ni::sParameterDef iDataTable_SetMatrixFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iDataTable_SetMatrixFromIndex = {
  "SetMatrixFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetMatrixFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetMatrixFromIndex)
#else
  NULL
#endif
};

// Method: SetIUnknown
static const ni::sParameterDef iDataTable_SetIUnknown_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iDataTable_SetIUnknown = {
  "SetIUnknown",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetIUnknown_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetIUnknown)
#else
  NULL
#endif
};

// Method: SetIUnknownFromIndex
static const ni::sParameterDef iDataTable_SetIUnknownFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iDataTable_SetIUnknownFromIndex = {
  "SetIUnknownFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetIUnknownFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetIUnknownFromIndex)
#else
  NULL
#endif
};

// Method: SetEnum
static const ni::sParameterDef iDataTable_SetEnum_Parameters[4] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }, 
  { "anVal", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_SetEnum = {
  "SetEnum",
  0|ni::eType_U32, NULL, "tU32",
  4, iDataTable_SetEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetEnum)
#else
  NULL
#endif
};

// Method: SetEnumFromIndex
static const ni::sParameterDef iDataTable_SetEnumFromIndex_Parameters[4] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }, 
  { "anVal", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_SetEnumFromIndex = {
  "SetEnumFromIndex",
  0|ni::eType_Null, NULL, "void",
  4, iDataTable_SetEnumFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetEnumFromIndex)
#else
  NULL
#endif
};

// Method: SetRawVar
static const ni::sParameterDef iDataTable_SetRawVar_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_SetRawVar = {
  "SetRawVar",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tU32",
  2, iDataTable_SetRawVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetRawVar)
#else
  NULL
#endif
};

// Method: SetRawVarFromIndex
static const ni::sParameterDef iDataTable_SetRawVarFromIndex_Parameters[2] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_SetRawVarFromIndex = {
  "SetRawVarFromIndex",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTable_SetRawVarFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetRawVarFromIndex)
#else
  NULL
#endif
};

// Method: GetRawVar
static const ni::sParameterDef iDataTable_GetRawVar_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTable_GetRawVar = {
  "GetRawVar",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  1, iDataTable_GetRawVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetRawVar)
#else
  NULL
#endif
};

// Method: GetRawVarFromIndex
static const ni::sParameterDef iDataTable_GetRawVarFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTable_GetRawVarFromIndex = {
  "GetRawVarFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Variant, NULL, "Var",
  1, iDataTable_GetRawVarFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetRawVarFromIndex)
#else
  NULL
#endif
};

// Method: GetRawVarDefault
static const ni::sParameterDef iDataTable_GetRawVarDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_GetRawVarDefault = {
  "GetRawVarDefault",
  0|ni::eType_Variant, NULL, "Var",
  2, iDataTable_GetRawVarDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetRawVarDefault)
#else
  NULL
#endif
};

// Method: NewVarFromPath
static const ni::sParameterDef iDataTable_NewVarFromPath_Parameters[2] = { 
  { "aPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aVal", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_NewVarFromPath = {
  "NewVarFromPath",
  0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_NewVarFromPath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_NewVarFromPath)
#else
  NULL
#endif
};

// Method: SetVarFromPath
static const ni::sParameterDef iDataTable_SetVarFromPath_Parameters[2] = { 
  { "aPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aVal", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_SetVarFromPath = {
  "SetVarFromPath",
  0|ni::eType_I8, NULL, "tBool",
  2, iDataTable_SetVarFromPath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_SetVarFromPath)
#else
  NULL
#endif
};

// Method: GetVarFromPath
static const ni::sParameterDef iDataTable_GetVarFromPath_Parameters[2] = { 
  { "aPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aDefault", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iDataTable_GetVarFromPath = {
  "GetVarFromPath",
  0|ni::eType_Variant, NULL, "Var",
  2, iDataTable_GetVarFromPath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTable_GetVarFromPath)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDataTable[] = {
	&iDataTable_SetName,
	&iDataTable_GetName,
	&iDataTable_GetRoot,
	&iDataTable_GetParent,
	&iDataTable_GetPrevSibling,
	&iDataTable_GetNextSibling,
	&iDataTable_GetIndex,
	&iDataTable_Clone,
	&iDataTable_CloneEx,
	&iDataTable_Copy,
	&iDataTable_Clear,
	&iDataTable_GetHasSink,
	&iDataTable_GetSinkList,
	&iDataTable_ClearChildren,
	&iDataTable_GetNumChildren,
	&iDataTable_GetChildIndex,
	&iDataTable_GetChild,
	&iDataTable_GetChildFromIndex,
	&iDataTable_AddChild,
	&iDataTable_RemoveChild,
	&iDataTable_ClearProperties,
	&iDataTable_RemoveProperty,
	&iDataTable_RemovePropertyFromIndex,
	&iDataTable_GetNumProperties,
	&iDataTable_GetPropertyIndex,
	&iDataTable_GetPropertyName,
	&iDataTable_GetPropertyType,
	&iDataTable_GetPropertyTypeFromIndex,
	&iDataTable_HasProperty,
	&iDataTable_SetMetadata,
	&iDataTable_GetMetadata,
	&iDataTable_SetMetadataFromIndex,
	&iDataTable_GetMetadataFromIndex,
	&iDataTable_GetVar,
	&iDataTable_GetVarFromIndex,
	&iDataTable_GetVarDefault,
	&iDataTable_GetString,
	&iDataTable_GetStringFromIndex,
	&iDataTable_GetStringDefault,
	&iDataTable_GetHString,
	&iDataTable_GetHStringFromIndex,
	&iDataTable_GetHStringDefault,
	&iDataTable_GetInt,
	&iDataTable_GetIntFromIndex,
	&iDataTable_GetIntDefault,
	&iDataTable_GetBool,
	&iDataTable_GetBoolFromIndex,
	&iDataTable_GetBoolDefault,
	&iDataTable_GetFloat,
	&iDataTable_GetFloatFromIndex,
	&iDataTable_GetFloatDefault,
	&iDataTable_GetVec2,
	&iDataTable_GetVec2FromIndex,
	&iDataTable_GetVec2Default,
	&iDataTable_GetVec3,
	&iDataTable_GetVec3FromIndex,
	&iDataTable_GetVec3Default,
	&iDataTable_GetVec4,
	&iDataTable_GetVec4FromIndex,
	&iDataTable_GetVec4Default,
	&iDataTable_GetCol3,
	&iDataTable_GetCol3FromIndex,
	&iDataTable_GetCol4,
	&iDataTable_GetCol4FromIndex,
	&iDataTable_GetMatrix,
	&iDataTable_GetMatrixFromIndex,
	&iDataTable_GetMatrixDefault,
	&iDataTable_GetIUnknown,
	&iDataTable_GetIUnknownFromIndex,
	&iDataTable_GetIUnknownDefault,
	&iDataTable_GetEnum,
	&iDataTable_GetEnumFromIndex,
	&iDataTable_GetEnumDefault,
	&iDataTable_SetVar,
	&iDataTable_SetVarFromIndex,
	&iDataTable_SetString,
	&iDataTable_SetStringFromIndex,
	&iDataTable_SetHString,
	&iDataTable_SetHStringFromIndex,
	&iDataTable_SetInt,
	&iDataTable_SetIntFromIndex,
	&iDataTable_SetBool,
	&iDataTable_SetBoolFromIndex,
	&iDataTable_SetFloat,
	&iDataTable_SetFloatFromIndex,
	&iDataTable_SetVec2,
	&iDataTable_SetVec2FromIndex,
	&iDataTable_SetVec3,
	&iDataTable_SetVec3FromIndex,
	&iDataTable_SetVec4,
	&iDataTable_SetVec4FromIndex,
	&iDataTable_SetMatrix,
	&iDataTable_SetMatrixFromIndex,
	&iDataTable_SetIUnknown,
	&iDataTable_SetIUnknownFromIndex,
	&iDataTable_SetEnum,
	&iDataTable_SetEnumFromIndex,
	&iDataTable_SetRawVar,
	&iDataTable_SetRawVarFromIndex,
	&iDataTable_GetRawVar,
	&iDataTable_GetRawVarFromIndex,
	&iDataTable_GetRawVarDefault,
	&iDataTable_NewVarFromPath,
	&iDataTable_SetVarFromPath,
	&iDataTable_GetVarFromPath,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDataTable[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDataTable = {
  niGetInterfaceID(iDataTable),
  &niGetInterfaceUUID(iDataTable),
  1,
  Parents_iDataTable,
  niCountOf(Methods_iDataTable),Methods_iDataTable,
  NULL
};

	return &InterfaceDef_iDataTable;
}

// End of iDataTable wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iDataTableReadStack wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDataTableReadStack() {

// Method: GetTop
static const ni::sMethodDef iDataTableReadStack_GetTop = {
  "GetTop",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetTop)
#else
  NULL
#endif
};

// Method: GetName
static const ni::sMethodDef iDataTableReadStack_GetName = {
  "GetName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetName)
#else
  NULL
#endif
};

// Method: GetNumChildren
static const ni::sMethodDef iDataTableReadStack_GetNumChildren = {
  "GetNumChildren",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetNumChildren)
#else
  NULL
#endif
};

// Method: PushChild
static const ni::sParameterDef iDataTableReadStack_PushChild_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableReadStack_PushChild = {
  "PushChild",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_PushChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_PushChild)
#else
  NULL
#endif
};

// Method: PushChildFail
static const ni::sParameterDef iDataTableReadStack_PushChildFail_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableReadStack_PushChildFail = {
  "PushChildFail",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_PushChildFail_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_PushChildFail)
#else
  NULL
#endif
};

// Method: Push
static const ni::sParameterDef iDataTableReadStack_Push_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_Push = {
  "Push",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_Push_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_Push)
#else
  NULL
#endif
};

// Method: PushFail
static const ni::sParameterDef iDataTableReadStack_PushFail_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_PushFail = {
  "PushFail",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_PushFail_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_PushFail)
#else
  NULL
#endif
};

// Method: PushEx
static const ni::sParameterDef iDataTableReadStack_PushEx_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszVal", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_PushEx = {
  "PushEx",
  0|ni::eType_I8, NULL, "tBool",
  3, iDataTableReadStack_PushEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_PushEx)
#else
  NULL
#endif
};

// Method: PushFailEx
static const ni::sParameterDef iDataTableReadStack_PushFailEx_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszVal", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_PushFailEx = {
  "PushFailEx",
  0|ni::eType_I8, NULL, "tBool",
  3, iDataTableReadStack_PushFailEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_PushFailEx)
#else
  NULL
#endif
};

// Method: Pop
static const ni::sMethodDef iDataTableReadStack_Pop = {
  "Pop",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_Pop)
#else
  NULL
#endif
};

// Method: HasProperty
static const ni::sParameterDef iDataTableReadStack_HasProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_HasProperty = {
  "HasProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_HasProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_HasProperty)
#else
  NULL
#endif
};

// Method: RemoveProperty
static const ni::sParameterDef iDataTableReadStack_RemoveProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_RemoveProperty = {
  "RemoveProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_RemoveProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_RemoveProperty)
#else
  NULL
#endif
};

// Method: GetString
static const ni::sParameterDef iDataTableReadStack_GetString_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetString = {
  "GetString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iDataTableReadStack_GetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetString)
#else
  NULL
#endif
};

// Method: GetStringDefault
static const ni::sParameterDef iDataTableReadStack_GetStringDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetStringDefault = {
  "GetStringDefault",
  0|ni::eType_String, NULL, "cString",
  2, iDataTableReadStack_GetStringDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetStringDefault)
#else
  NULL
#endif
};

// Method: GetHString
static const ni::sParameterDef iDataTableReadStack_GetHString_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetHString = {
  "GetHString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTableReadStack_GetHString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetHString)
#else
  NULL
#endif
};

// Method: GetHStringDefault
static const ni::sParameterDef iDataTableReadStack_GetHStringDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetHStringDefault = {
  "GetHStringDefault",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  2, iDataTableReadStack_GetHStringDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetHStringDefault)
#else
  NULL
#endif
};

// Method: GetInt
static const ni::sParameterDef iDataTableReadStack_GetInt_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetInt = {
  "GetInt",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  1, iDataTableReadStack_GetInt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetInt)
#else
  NULL
#endif
};

// Method: GetIntDefault
static const ni::sParameterDef iDataTableReadStack_GetIntDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetIntDefault = {
  "GetIntDefault",
  0|ni::eType_I64, NULL, "tI64",
  2, iDataTableReadStack_GetIntDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetIntDefault)
#else
  NULL
#endif
};

// Method: GetBool
static const ni::sParameterDef iDataTableReadStack_GetBool_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetBool = {
  "GetBool",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  1, iDataTableReadStack_GetBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetBool)
#else
  NULL
#endif
};

// Method: GetBoolDefault
static const ni::sParameterDef iDataTableReadStack_GetBoolDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetBoolDefault = {
  "GetBoolDefault",
  0|ni::eType_I8, NULL, "tBool",
  2, iDataTableReadStack_GetBoolDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetBoolDefault)
#else
  NULL
#endif
};

// Method: GetFloat
static const ni::sParameterDef iDataTableReadStack_GetFloat_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetFloat = {
  "GetFloat",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  1, iDataTableReadStack_GetFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetFloat)
#else
  NULL
#endif
};

// Method: GetFloatDefault
static const ni::sParameterDef iDataTableReadStack_GetFloatDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetFloatDefault = {
  "GetFloatDefault",
  0|ni::eType_F64, NULL, "tF64",
  2, iDataTableReadStack_GetFloatDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetFloatDefault)
#else
  NULL
#endif
};

// Method: GetVec2
static const ni::sParameterDef iDataTableReadStack_GetVec2_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec2 = {
  "GetVec2",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2f, NULL, "sVec2f",
  1, iDataTableReadStack_GetVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec2)
#else
  NULL
#endif
};

// Method: GetVec2Default
static const ni::sParameterDef iDataTableReadStack_GetVec2Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec2Default = {
  "GetVec2Default",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iDataTableReadStack_GetVec2Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec2Default)
#else
  NULL
#endif
};

// Method: GetVec3
static const ni::sParameterDef iDataTableReadStack_GetVec3_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec3 = {
  "GetVec3",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTableReadStack_GetVec3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec3)
#else
  NULL
#endif
};

// Method: GetVec3Default
static const ni::sParameterDef iDataTableReadStack_GetVec3Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec3Default = {
  "GetVec3Default",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iDataTableReadStack_GetVec3Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec3Default)
#else
  NULL
#endif
};

// Method: GetVec4
static const ni::sParameterDef iDataTableReadStack_GetVec4_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec4 = {
  "GetVec4",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTableReadStack_GetVec4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec4)
#else
  NULL
#endif
};

// Method: GetVec4Default
static const ni::sParameterDef iDataTableReadStack_GetVec4Default_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetVec4Default = {
  "GetVec4Default",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iDataTableReadStack_GetVec4Default_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetVec4Default)
#else
  NULL
#endif
};

// Method: GetCol3
static const ni::sParameterDef iDataTableReadStack_GetCol3_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetCol3 = {
  "GetCol3",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iDataTableReadStack_GetCol3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetCol3)
#else
  NULL
#endif
};

// Method: GetCol4
static const ni::sParameterDef iDataTableReadStack_GetCol4_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetCol4 = {
  "GetCol4",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iDataTableReadStack_GetCol4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetCol4)
#else
  NULL
#endif
};

// Method: GetMatrix
static const ni::sParameterDef iDataTableReadStack_GetMatrix_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetMatrix = {
  "GetMatrix",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iDataTableReadStack_GetMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetMatrix)
#else
  NULL
#endif
};

// Method: GetMatrixDefault
static const ni::sParameterDef iDataTableReadStack_GetMatrixDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetMatrixDefault = {
  "GetMatrixDefault",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iDataTableReadStack_GetMatrixDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetMatrixDefault)
#else
  NULL
#endif
};

// Method: GetIUnknown
static const ni::sParameterDef iDataTableReadStack_GetIUnknown_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetIUnknown = {
  "GetIUnknown",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  1, iDataTableReadStack_GetIUnknown_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetIUnknown)
#else
  NULL
#endif
};

// Method: GetIUnknownDefault
static const ni::sParameterDef iDataTableReadStack_GetIUnknownDefault_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetIUnknownDefault = {
  "GetIUnknownDefault",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  2, iDataTableReadStack_GetIUnknownDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetIUnknownDefault)
#else
  NULL
#endif
};

// Method: GetEnum
static const ni::sParameterDef iDataTableReadStack_GetEnum_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetEnum = {
  "GetEnum",
  0|ni::eType_U32, NULL, "tU32",
  3, iDataTableReadStack_GetEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetEnum)
#else
  NULL
#endif
};

// Method: GetEnumDefault
static const ni::sParameterDef iDataTableReadStack_GetEnumDefault_Parameters[4] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }, 
  { "v", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetEnumDefault = {
  "GetEnumDefault",
  0|ni::eType_U32, NULL, "tU32",
  4, iDataTableReadStack_GetEnumDefault_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetEnumDefault)
#else
  NULL
#endif
};

// Method: GetMetadata
static const ni::sParameterDef iDataTableReadStack_GetMetadata_Parameters[1] = { 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableReadStack_GetMetadata = {
  "GetMetadata",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iDataTableReadStack_GetMetadata_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableReadStack_GetMetadata)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDataTableReadStack[] = {
	&iDataTableReadStack_GetTop,
	&iDataTableReadStack_GetName,
	&iDataTableReadStack_GetNumChildren,
	&iDataTableReadStack_PushChild,
	&iDataTableReadStack_PushChildFail,
	&iDataTableReadStack_Push,
	&iDataTableReadStack_PushFail,
	&iDataTableReadStack_PushEx,
	&iDataTableReadStack_PushFailEx,
	&iDataTableReadStack_Pop,
	&iDataTableReadStack_HasProperty,
	&iDataTableReadStack_RemoveProperty,
	&iDataTableReadStack_GetString,
	&iDataTableReadStack_GetStringDefault,
	&iDataTableReadStack_GetHString,
	&iDataTableReadStack_GetHStringDefault,
	&iDataTableReadStack_GetInt,
	&iDataTableReadStack_GetIntDefault,
	&iDataTableReadStack_GetBool,
	&iDataTableReadStack_GetBoolDefault,
	&iDataTableReadStack_GetFloat,
	&iDataTableReadStack_GetFloatDefault,
	&iDataTableReadStack_GetVec2,
	&iDataTableReadStack_GetVec2Default,
	&iDataTableReadStack_GetVec3,
	&iDataTableReadStack_GetVec3Default,
	&iDataTableReadStack_GetVec4,
	&iDataTableReadStack_GetVec4Default,
	&iDataTableReadStack_GetCol3,
	&iDataTableReadStack_GetCol4,
	&iDataTableReadStack_GetMatrix,
	&iDataTableReadStack_GetMatrixDefault,
	&iDataTableReadStack_GetIUnknown,
	&iDataTableReadStack_GetIUnknownDefault,
	&iDataTableReadStack_GetEnum,
	&iDataTableReadStack_GetEnumDefault,
	&iDataTableReadStack_GetMetadata,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDataTableReadStack[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDataTableReadStack = {
  niGetInterfaceID(iDataTableReadStack),
  &niGetInterfaceUUID(iDataTableReadStack),
  1,
  Parents_iDataTableReadStack,
  niCountOf(Methods_iDataTableReadStack),Methods_iDataTableReadStack,
  NULL
};

	return &InterfaceDef_iDataTableReadStack;
}

// End of iDataTableReadStack wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iDataTableWriteStack wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDataTableWriteStack() {

// Method: GetTop
static const ni::sMethodDef iDataTableWriteStack_GetTop = {
  "GetTop",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_GetTop)
#else
  NULL
#endif
};

// Method: SetName
static const ni::sParameterDef iDataTableWriteStack_SetName_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetName = {
  "SetName",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iDataTableWriteStack_SetName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetName)
#else
  NULL
#endif
};

// Method: GetName
static const ni::sMethodDef iDataTableWriteStack_GetName = {
  "GetName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_GetName)
#else
  NULL
#endif
};

// Method: GetNumChildren
static const ni::sMethodDef iDataTableWriteStack_GetNumChildren = {
  "GetNumChildren",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_GetNumChildren)
#else
  NULL
#endif
};

// Method: PushChild
static const ni::sParameterDef iDataTableWriteStack_PushChild_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushChild = {
  "PushChild",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_PushChild_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushChild)
#else
  NULL
#endif
};

// Method: PushChildFail
static const ni::sParameterDef iDataTableWriteStack_PushChildFail_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushChildFail = {
  "PushChildFail",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_PushChildFail_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushChildFail)
#else
  NULL
#endif
};

// Method: Push
static const ni::sParameterDef iDataTableWriteStack_Push_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_Push = {
  "Push",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_Push_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_Push)
#else
  NULL
#endif
};

// Method: PushFail
static const ni::sParameterDef iDataTableWriteStack_PushFail_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushFail = {
  "PushFail",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_PushFail_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushFail)
#else
  NULL
#endif
};

// Method: PushNew
static const ni::sParameterDef iDataTableWriteStack_PushNew_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushNew = {
  "PushNew",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_PushNew_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushNew)
#else
  NULL
#endif
};

// Method: PushAppend
static const ni::sParameterDef iDataTableWriteStack_PushAppend_Parameters[1] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushAppend = {
  "PushAppend",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_PushAppend_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushAppend)
#else
  NULL
#endif
};

// Method: PushEx
static const ni::sParameterDef iDataTableWriteStack_PushEx_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszVal", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushEx = {
  "PushEx",
  0|ni::eType_I8, NULL, "tBool",
  3, iDataTableWriteStack_PushEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushEx)
#else
  NULL
#endif
};

// Method: PushFailEx
static const ni::sParameterDef iDataTableWriteStack_PushFailEx_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszVal", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_PushFailEx = {
  "PushFailEx",
  0|ni::eType_I8, NULL, "tBool",
  3, iDataTableWriteStack_PushFailEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_PushFailEx)
#else
  NULL
#endif
};

// Method: Pop
static const ni::sMethodDef iDataTableWriteStack_Pop = {
  "Pop",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_Pop)
#else
  NULL
#endif
};

// Method: HasProperty
static const ni::sParameterDef iDataTableWriteStack_HasProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_HasProperty = {
  "HasProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_HasProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_HasProperty)
#else
  NULL
#endif
};

// Method: RemoveProperty
static const ni::sParameterDef iDataTableWriteStack_RemoveProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_RemoveProperty = {
  "RemoveProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iDataTableWriteStack_RemoveProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_RemoveProperty)
#else
  NULL
#endif
};

// Method: SetString
static const ni::sParameterDef iDataTableWriteStack_SetString_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetString = {
  "SetString",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetString)
#else
  NULL
#endif
};

// Method: SetHString
static const ni::sParameterDef iDataTableWriteStack_SetHString_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetHString = {
  "SetHString",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetHString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetHString)
#else
  NULL
#endif
};

// Method: SetInt
static const ni::sParameterDef iDataTableWriteStack_SetInt_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetInt = {
  "SetInt",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetInt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetInt)
#else
  NULL
#endif
};

// Method: SetBool
static const ni::sParameterDef iDataTableWriteStack_SetBool_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetBool = {
  "SetBool",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetBool)
#else
  NULL
#endif
};

// Method: SetFloat
static const ni::sParameterDef iDataTableWriteStack_SetFloat_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetFloat = {
  "SetFloat",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetFloat)
#else
  NULL
#endif
};

// Method: SetVec2
static const ni::sParameterDef iDataTableWriteStack_SetVec2_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetVec2 = {
  "SetVec2",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetVec2)
#else
  NULL
#endif
};

// Method: SetVec3
static const ni::sParameterDef iDataTableWriteStack_SetVec3_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetVec3 = {
  "SetVec3",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetVec3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetVec3)
#else
  NULL
#endif
};

// Method: SetVec4
static const ni::sParameterDef iDataTableWriteStack_SetVec4_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetVec4 = {
  "SetVec4",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetVec4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetVec4)
#else
  NULL
#endif
};

// Method: SetMatrix
static const ni::sParameterDef iDataTableWriteStack_SetMatrix_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetMatrix = {
  "SetMatrix",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetMatrix)
#else
  NULL
#endif
};

// Method: SetIUnknown
static const ni::sParameterDef iDataTableWriteStack_SetIUnknown_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "v", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetIUnknown = {
  "SetIUnknown",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iDataTableWriteStack_SetIUnknown_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetIUnknown)
#else
  NULL
#endif
};

// Method: SetEnum
static const ni::sParameterDef iDataTableWriteStack_SetEnum_Parameters[4] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }, 
  { "anVal", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetEnum = {
  "SetEnum",
  0|ni::eType_Null, NULL, "void",
  4, iDataTableWriteStack_SetEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetEnum)
#else
  NULL
#endif
};

// Method: SetMetadata
static const ni::sParameterDef iDataTableWriteStack_SetMetadata_Parameters[2] = { 
  { "aaszProp", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "ahspData", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDataTableWriteStack_SetMetadata = {
  "SetMetadata",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "tBool",
  2, iDataTableWriteStack_SetMetadata_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDataTableWriteStack_SetMetadata)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDataTableWriteStack[] = {
	&iDataTableWriteStack_GetTop,
	&iDataTableWriteStack_SetName,
	&iDataTableWriteStack_GetName,
	&iDataTableWriteStack_GetNumChildren,
	&iDataTableWriteStack_PushChild,
	&iDataTableWriteStack_PushChildFail,
	&iDataTableWriteStack_Push,
	&iDataTableWriteStack_PushFail,
	&iDataTableWriteStack_PushNew,
	&iDataTableWriteStack_PushAppend,
	&iDataTableWriteStack_PushEx,
	&iDataTableWriteStack_PushFailEx,
	&iDataTableWriteStack_Pop,
	&iDataTableWriteStack_HasProperty,
	&iDataTableWriteStack_RemoveProperty,
	&iDataTableWriteStack_SetString,
	&iDataTableWriteStack_SetHString,
	&iDataTableWriteStack_SetInt,
	&iDataTableWriteStack_SetBool,
	&iDataTableWriteStack_SetFloat,
	&iDataTableWriteStack_SetVec2,
	&iDataTableWriteStack_SetVec3,
	&iDataTableWriteStack_SetVec4,
	&iDataTableWriteStack_SetMatrix,
	&iDataTableWriteStack_SetIUnknown,
	&iDataTableWriteStack_SetEnum,
	&iDataTableWriteStack_SetMetadata,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDataTableWriteStack[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDataTableWriteStack = {
  niGetInterfaceID(iDataTableWriteStack),
  &niGetInterfaceUUID(iDataTableWriteStack),
  1,
  Parents_iDataTableWriteStack,
  niCountOf(Methods_iDataTableWriteStack),Methods_iDataTableWriteStack,
  NULL
};

	return &InterfaceDef_iDataTableWriteStack;
}

// End of iDataTableWriteStack wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iDeviceResource wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDeviceResource() {

// Method: GetDeviceResourceName
static const ni::sMethodDef iDeviceResource_GetDeviceResourceName = {
  "GetDeviceResourceName",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResource_GetDeviceResourceName)
#else
  NULL
#endif
};

// Method: HasDeviceResourceBeenReset
static const ni::sParameterDef iDeviceResource_HasDeviceResourceBeenReset_Parameters[1] = { 
  { "abClearFlag", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iDeviceResource_HasDeviceResourceBeenReset = {
  "HasDeviceResourceBeenReset",
  0|ni::eType_I8, NULL, "tBool",
  1, iDeviceResource_HasDeviceResourceBeenReset_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResource_HasDeviceResourceBeenReset)
#else
  NULL
#endif
};

// Method: ResetDeviceResource
static const ni::sMethodDef iDeviceResource_ResetDeviceResource = {
  "ResetDeviceResource",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResource_ResetDeviceResource)
#else
  NULL
#endif
};

// Method: Bind
static const ni::sParameterDef iDeviceResource_Bind_Parameters[1] = { 
  { "apDevice", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iDeviceResource_Bind = {
  "Bind",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResource), "iDeviceResource*",
  1, iDeviceResource_Bind_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResource_Bind)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDeviceResource[] = {
	&iDeviceResource_GetDeviceResourceName,
	&iDeviceResource_HasDeviceResourceBeenReset,
	&iDeviceResource_ResetDeviceResource,
	&iDeviceResource_Bind,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDeviceResource[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDeviceResource = {
  niGetInterfaceID(iDeviceResource),
  &niGetInterfaceUUID(iDeviceResource),
  1,
  Parents_iDeviceResource,
  niCountOf(Methods_iDeviceResource),Methods_iDeviceResource,
  NULL
};

	return &InterfaceDef_iDeviceResource;
}

// End of iDeviceResource wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iDeviceResourceManager wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iDeviceResourceManager() {

// Method: GetType
static const ni::sMethodDef iDeviceResourceManager_GetType = {
  "GetType",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_GetType)
#else
  NULL
#endif
};

// Method: Clear
static const ni::sMethodDef iDeviceResourceManager_Clear = {
  "Clear",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_Clear)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iDeviceResourceManager_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_GetSize)
#else
  NULL
#endif
};

// Method: GetFromName
static const ni::sParameterDef iDeviceResourceManager_GetFromName_Parameters[1] = { 
  { "ahspName", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iDeviceResourceManager_GetFromName = {
  "GetFromName",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResource), "iDeviceResource*",
  1, iDeviceResourceManager_GetFromName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_GetFromName)
#else
  NULL
#endif
};

// Method: GetFromIndex
static const ni::sParameterDef iDeviceResourceManager_GetFromIndex_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iDeviceResourceManager_GetFromIndex = {
  "GetFromIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResource), "iDeviceResource*",
  1, iDeviceResourceManager_GetFromIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_GetFromIndex)
#else
  NULL
#endif
};

// Method: Register
static const ni::sParameterDef iDeviceResourceManager_Register_Parameters[1] = { 
  { "apRes", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResource), "iDeviceResource*" }
}; 
static const ni::sMethodDef iDeviceResourceManager_Register = {
  "Register",
  0|ni::eType_I8, NULL, "tBool",
  1, iDeviceResourceManager_Register_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_Register)
#else
  NULL
#endif
};

// Method: Unregister
static const ni::sParameterDef iDeviceResourceManager_Unregister_Parameters[1] = { 
  { "apRes", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResource), "iDeviceResource*" }
}; 
static const ni::sMethodDef iDeviceResourceManager_Unregister = {
  "Unregister",
  0|ni::eType_I8, NULL, "tBool",
  1, iDeviceResourceManager_Unregister_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iDeviceResourceManager_Unregister)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iDeviceResourceManager[] = {
	&iDeviceResourceManager_GetType,
	&iDeviceResourceManager_Clear,
	&iDeviceResourceManager_GetSize,
	&iDeviceResourceManager_GetFromName,
	&iDeviceResourceManager_GetFromIndex,
	&iDeviceResourceManager_Register,
	&iDeviceResourceManager_Unregister,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iDeviceResourceManager[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iDeviceResourceManager = {
  niGetInterfaceID(iDeviceResourceManager),
  &niGetInterfaceUUID(iDeviceResourceManager),
  1,
  Parents_iDeviceResourceManager,
  niCountOf(Methods_iDeviceResourceManager),Methods_iDeviceResourceManager,
  NULL
};

	return &InterfaceDef_iDeviceResourceManager;
}

// End of iDeviceResourceManager wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iExpressionVariable wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iExpressionVariable() {

// Method: SetName
static const ni::sParameterDef iExpressionVariable_SetName_Parameters[1] = { 
  { "ahspString", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iExpressionVariable_SetName = {
  "SetName",
  0|ni::eType_Null, NULL, "void",
  1, iExpressionVariable_SetName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetName)
#else
  NULL
#endif
};

// Method: GetName
static const ni::sMethodDef iExpressionVariable_GetName = {
  "GetName",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetName)
#else
  NULL
#endif
};

// Method: Copy
static const ni::sParameterDef iExpressionVariable_Copy_Parameters[1] = { 
  { "apVar", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "const iExpressionVariable*" }
}; 
static const ni::sMethodDef iExpressionVariable_Copy = {
  "Copy",
  0|ni::eType_I8, NULL, "tBool",
  1, iExpressionVariable_Copy_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_Copy)
#else
  NULL
#endif
};

// Method: Clone
static const ni::sMethodDef iExpressionVariable_Clone = {
  "Clone",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_Clone)
#else
  NULL
#endif
};

// Method: GetType
static const ni::sMethodDef iExpressionVariable_GetType = {
  "GetType",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eExpressionVariableType",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetType)
#else
  NULL
#endif
};

// Method: GetFlags
static const ni::sMethodDef iExpressionVariable_GetFlags = {
  "GetFlags",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tExpressionVariableFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetFlags)
#else
  NULL
#endif
};

// Method: SetFloat
static const ni::sParameterDef iExpressionVariable_SetFloat_Parameters[1] = { 
  { "aV", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iExpressionVariable_SetFloat = {
  "SetFloat",
  ni::eTypeFlags_MethodSetter|0|ni::eType_F64, NULL, "void",
  1, iExpressionVariable_SetFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetFloat)
#else
  NULL
#endif
};

// Method: GetFloat
static const ni::sMethodDef iExpressionVariable_GetFloat = {
  "GetFloat",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetFloat)
#else
  NULL
#endif
};

// Method: SetVec2
static const ni::sParameterDef iExpressionVariable_SetVec2_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iExpressionVariable_SetVec2 = {
  "SetVec2",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionVariable_SetVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetVec2)
#else
  NULL
#endif
};

// Method: GetVec2
static const ni::sMethodDef iExpressionVariable_GetVec2 = {
  "GetVec2",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2f, NULL, "sVec2f",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetVec2)
#else
  NULL
#endif
};

// Method: SetVec3
static const ni::sParameterDef iExpressionVariable_SetVec3_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iExpressionVariable_SetVec3 = {
  "SetVec3",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionVariable_SetVec3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetVec3)
#else
  NULL
#endif
};

// Method: GetVec3
static const ni::sMethodDef iExpressionVariable_GetVec3 = {
  "GetVec3",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec3f, NULL, "sVec3f",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetVec3)
#else
  NULL
#endif
};

// Method: SetVec4
static const ni::sParameterDef iExpressionVariable_SetVec4_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iExpressionVariable_SetVec4 = {
  "SetVec4",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionVariable_SetVec4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetVec4)
#else
  NULL
#endif
};

// Method: GetVec4
static const ni::sMethodDef iExpressionVariable_GetVec4 = {
  "GetVec4",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4f, NULL, "sVec4f",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetVec4)
#else
  NULL
#endif
};

// Method: SetMatrix
static const ni::sParameterDef iExpressionVariable_SetMatrix_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iExpressionVariable_SetMatrix = {
  "SetMatrix",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionVariable_SetMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetMatrix)
#else
  NULL
#endif
};

// Method: GetMatrix
static const ni::sMethodDef iExpressionVariable_GetMatrix = {
  "GetMatrix",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Matrixf, NULL, "sMatrixf",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetMatrix)
#else
  NULL
#endif
};

// Method: SetString
static const ni::sParameterDef iExpressionVariable_SetString_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer, NULL, "const cString&" }
}; 
static const ni::sMethodDef iExpressionVariable_SetString = {
  "SetString",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionVariable_SetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_SetString)
#else
  NULL
#endif
};

// Method: GetString
static const ni::sMethodDef iExpressionVariable_GetString = {
  "GetString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionVariable_GetString)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iExpressionVariable[] = {
	&iExpressionVariable_SetName,
	&iExpressionVariable_GetName,
	&iExpressionVariable_Copy,
	&iExpressionVariable_Clone,
	&iExpressionVariable_GetType,
	&iExpressionVariable_GetFlags,
	&iExpressionVariable_SetFloat,
	&iExpressionVariable_GetFloat,
	&iExpressionVariable_SetVec2,
	&iExpressionVariable_GetVec2,
	&iExpressionVariable_SetVec3,
	&iExpressionVariable_GetVec3,
	&iExpressionVariable_SetVec4,
	&iExpressionVariable_GetVec4,
	&iExpressionVariable_SetMatrix,
	&iExpressionVariable_GetMatrix,
	&iExpressionVariable_SetString,
	&iExpressionVariable_GetString,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iExpressionVariable[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iExpressionVariable = {
  niGetInterfaceID(iExpressionVariable),
  &niGetInterfaceUUID(iExpressionVariable),
  1,
  Parents_iExpressionVariable,
  niCountOf(Methods_iExpressionVariable),Methods_iExpressionVariable,
  NULL
};

	return &InterfaceDef_iExpressionVariable;
}

// End of iExpressionVariable wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iExpression wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iExpression() {

// Method: Eval
static const ni::sMethodDef iExpression_Eval = {
  "Eval",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "Ptr<iExpressionVariable>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpression_Eval)
#else
  NULL
#endif
};

// Method: GetEvalResult
static const ni::sMethodDef iExpression_GetEvalResult = {
  "GetEvalResult",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpression_GetEvalResult)
#else
  NULL
#endif
};

// Method: GetContext
static const ni::sMethodDef iExpression_GetContext = {
  "GetContext",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionContext), "iExpressionContext*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpression_GetContext)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iExpression[] = {
	&iExpression_Eval,
	&iExpression_GetEvalResult,
	&iExpression_GetContext,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iExpression[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iExpression = {
  niGetInterfaceID(iExpression),
  &niGetInterfaceUUID(iExpression),
  1,
  Parents_iExpression,
  niCountOf(Methods_iExpression),Methods_iExpression,
  NULL
};

	return &InterfaceDef_iExpression;
}

// End of iExpression wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iExpressionURLResolver wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iExpressionURLResolver() {

// Method: ResolveURL
static const ni::sParameterDef iExpressionURLResolver_ResolveURL_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionURLResolver_ResolveURL = {
  "ResolveURL",
  0|ni::eType_Variant, NULL, "Var",
  1, iExpressionURLResolver_ResolveURL_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionURLResolver_ResolveURL)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iExpressionURLResolver[] = {
	&iExpressionURLResolver_ResolveURL,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iExpressionURLResolver : public ni::cIUnknownImpl<ni::iExpressionURLResolver,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iExpressionURLResolver(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iExpressionURLResolver() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iExpressionURLResolver))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iExpressionURLResolver));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iExpressionURLResolver::ResolveURL
  Var __stdcall ResolveURL(const achar * aURL) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = aURL;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iExpressionURLResolver_ResolveURL,0,_params_,1,&_var_)) {
  return _var_;
  }
    return niVarNull;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iExpressionURLResolver, niCountOf(Methods_iExpressionURLResolver))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iExpressionURLResolver"));
      return NULL;
    }
		return niNew DispatchWrapper_iExpressionURLResolver(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iExpressionURLResolver[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iExpressionURLResolver = {
  niGetInterfaceID(iExpressionURLResolver),
  &niGetInterfaceUUID(iExpressionURLResolver),
  1,
  Parents_iExpressionURLResolver,
  niCountOf(Methods_iExpressionURLResolver),Methods_iExpressionURLResolver,
  DispatchWrapper_iExpressionURLResolver::Create
};

	return &InterfaceDef_iExpressionURLResolver;
}

// End of iExpressionURLResolver wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iExpressionContext wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iExpressionContext() {

// Method: GetParentContext
static const ni::sMethodDef iExpressionContext_GetParentContext = {
  "GetParentContext",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionContext), "iExpressionContext*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetParentContext)
#else
  NULL
#endif
};

// Method: CreateContext
static const ni::sMethodDef iExpressionContext_CreateContext = {
  "CreateContext",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionContext), "iExpressionContext*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateContext)
#else
  NULL
#endif
};

// Method: CreateVariable
static const ni::sParameterDef iExpressionContext_CreateVariable_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aType", ni::eType_Enum, NULL, "eExpressionVariableType" }, 
  { "aFlags", ni::eType_Enum, NULL, "tExpressionVariableFlags" }
}; 
static const ni::sMethodDef iExpressionContext_CreateVariable = {
  "CreateVariable",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  3, iExpressionContext_CreateVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateVariable)
#else
  NULL
#endif
};

// Method: CreateVariableFromExpr
static const ni::sParameterDef iExpressionContext_CreateVariableFromExpr_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tExpressionVariableFlags" }
}; 
static const ni::sMethodDef iExpressionContext_CreateVariableFromExpr = {
  "CreateVariableFromExpr",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  3, iExpressionContext_CreateVariableFromExpr_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateVariableFromExpr)
#else
  NULL
#endif
};

// Method: CreateVariableFromRunnable
static const ni::sParameterDef iExpressionContext_CreateVariableFromRunnable_Parameters[4] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aType", ni::eType_Enum, NULL, "eExpressionVariableType" }, 
  { "apRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tExpressionVariableFlags" }
}; 
static const ni::sMethodDef iExpressionContext_CreateVariableFromRunnable = {
  "CreateVariableFromRunnable",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  4, iExpressionContext_CreateVariableFromRunnable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateVariableFromRunnable)
#else
  NULL
#endif
};

// Method: CreateVariableFromVar
static const ni::sParameterDef iExpressionContext_CreateVariableFromVar_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aInitialValue", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "aFlags", ni::eType_Enum, NULL, "tExpressionVariableFlags" }
}; 
static const ni::sMethodDef iExpressionContext_CreateVariableFromVar = {
  "CreateVariableFromVar",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  3, iExpressionContext_CreateVariableFromVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateVariableFromVar)
#else
  NULL
#endif
};

// Method: AddVariable
static const ni::sParameterDef iExpressionContext_AddVariable_Parameters[1] = { 
  { "apVar", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*" }
}; 
static const ni::sMethodDef iExpressionContext_AddVariable = {
  "AddVariable",
  0|ni::eType_I8, NULL, "tBool",
  1, iExpressionContext_AddVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_AddVariable)
#else
  NULL
#endif
};

// Method: RemoveVariable
static const ni::sParameterDef iExpressionContext_RemoveVariable_Parameters[1] = { 
  { "apVariable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*" }
}; 
static const ni::sMethodDef iExpressionContext_RemoveVariable = {
  "RemoveVariable",
  0|ni::eType_I8, NULL, "tBool",
  1, iExpressionContext_RemoveVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_RemoveVariable)
#else
  NULL
#endif
};

// Method: FindVariable
static const ni::sParameterDef iExpressionContext_FindVariable_Parameters[1] = { 
  { "ahspName", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iExpressionContext_FindVariable = {
  "FindVariable",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "iExpressionVariable*",
  1, iExpressionContext_FindVariable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_FindVariable)
#else
  NULL
#endif
};

// Method: CreateExpression
static const ni::sParameterDef iExpressionContext_CreateExpression_Parameters[1] = { 
  { "aaszExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionContext_CreateExpression = {
  "CreateExpression",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpression), "iExpression*",
  1, iExpressionContext_CreateExpression_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_CreateExpression)
#else
  NULL
#endif
};

// Method: Eval
static const ni::sParameterDef iExpressionContext_Eval_Parameters[1] = { 
  { "aaszExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionContext_Eval = {
  "Eval",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "Ptr<iExpressionVariable>",
  1, iExpressionContext_Eval_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_Eval)
#else
  NULL
#endif
};

// Method: GetUnknownSymbols
static const ni::sParameterDef iExpressionContext_GetUnknownSymbols_Parameters[2] = { 
  { "aaszExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apList", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tStringCVec*" }
}; 
static const ni::sMethodDef iExpressionContext_GetUnknownSymbols = {
  "GetUnknownSymbols",
  0|ni::eType_I8, NULL, "tBool",
  2, iExpressionContext_GetUnknownSymbols_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetUnknownSymbols)
#else
  NULL
#endif
};

// Method: SetGlobalEnumSearch
static const ni::sParameterDef iExpressionContext_SetGlobalEnumSearch_Parameters[1] = { 
  { "abEnabled", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iExpressionContext_SetGlobalEnumSearch = {
  "SetGlobalEnumSearch",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iExpressionContext_SetGlobalEnumSearch_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_SetGlobalEnumSearch)
#else
  NULL
#endif
};

// Method: GetGlobalEnumSearch
static const ni::sMethodDef iExpressionContext_GetGlobalEnumSearch = {
  "GetGlobalEnumSearch",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetGlobalEnumSearch)
#else
  NULL
#endif
};

// Method: AddEnumDef
static const ni::sParameterDef iExpressionContext_AddEnumDef_Parameters[1] = { 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }
}; 
static const ni::sMethodDef iExpressionContext_AddEnumDef = {
  "AddEnumDef",
  0|ni::eType_I8, NULL, "tBool",
  1, iExpressionContext_AddEnumDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_AddEnumDef)
#else
  NULL
#endif
};

// Method: GetEnumDef
static const ni::sParameterDef iExpressionContext_GetEnumDef_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionContext_GetEnumDef = {
  "GetEnumDef",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*",
  1, iExpressionContext_GetEnumDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetEnumDef)
#else
  NULL
#endif
};

// Method: SetDefaultEnumDef
static const ni::sParameterDef iExpressionContext_SetDefaultEnumDef_Parameters[1] = { 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }
}; 
static const ni::sMethodDef iExpressionContext_SetDefaultEnumDef = {
  "SetDefaultEnumDef",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "void",
  1, iExpressionContext_SetDefaultEnumDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_SetDefaultEnumDef)
#else
  NULL
#endif
};

// Method: GetDefaultEnumDef
static const ni::sMethodDef iExpressionContext_GetDefaultEnumDef = {
  "GetDefaultEnumDef",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetDefaultEnumDef)
#else
  NULL
#endif
};

// Method: GetEnumValueString
static const ni::sParameterDef iExpressionContext_GetEnumValueString_Parameters[1] = { 
  { "anValue", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iExpressionContext_GetEnumValueString = {
  "GetEnumValueString",
  0|ni::eType_String, NULL, "cString",
  1, iExpressionContext_GetEnumValueString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetEnumValueString)
#else
  NULL
#endif
};

// Method: GetEnumFlagsString
static const ni::sParameterDef iExpressionContext_GetEnumFlagsString_Parameters[1] = { 
  { "anValue", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iExpressionContext_GetEnumFlagsString = {
  "GetEnumFlagsString",
  0|ni::eType_String, NULL, "cString",
  1, iExpressionContext_GetEnumFlagsString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_GetEnumFlagsString)
#else
  NULL
#endif
};

// Method: RegisterURLResolver
static const ni::sParameterDef iExpressionContext_RegisterURLResolver_Parameters[2] = { 
  { "aaszProtocol", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apResolver", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionURLResolver), "iExpressionURLResolver*" }
}; 
static const ni::sMethodDef iExpressionContext_RegisterURLResolver = {
  "RegisterURLResolver",
  0|ni::eType_I8, NULL, "tBool",
  2, iExpressionContext_RegisterURLResolver_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_RegisterURLResolver)
#else
  NULL
#endif
};

// Method: UnregisterURLResolver
static const ni::sParameterDef iExpressionContext_UnregisterURLResolver_Parameters[1] = { 
  { "aaszProtocol", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionContext_UnregisterURLResolver = {
  "UnregisterURLResolver",
  0|ni::eType_I8, NULL, "tBool",
  1, iExpressionContext_UnregisterURLResolver_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_UnregisterURLResolver)
#else
  NULL
#endif
};

// Method: FindURLResolver
static const ni::sParameterDef iExpressionContext_FindURLResolver_Parameters[1] = { 
  { "aaszProtocol", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iExpressionContext_FindURLResolver = {
  "FindURLResolver",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionURLResolver), "iExpressionURLResolver*",
  1, iExpressionContext_FindURLResolver_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iExpressionContext_FindURLResolver)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iExpressionContext[] = {
	&iExpressionContext_GetParentContext,
	&iExpressionContext_CreateContext,
	&iExpressionContext_CreateVariable,
	&iExpressionContext_CreateVariableFromExpr,
	&iExpressionContext_CreateVariableFromRunnable,
	&iExpressionContext_CreateVariableFromVar,
	&iExpressionContext_AddVariable,
	&iExpressionContext_RemoveVariable,
	&iExpressionContext_FindVariable,
	&iExpressionContext_CreateExpression,
	&iExpressionContext_Eval,
	&iExpressionContext_GetUnknownSymbols,
	&iExpressionContext_SetGlobalEnumSearch,
	&iExpressionContext_GetGlobalEnumSearch,
	&iExpressionContext_AddEnumDef,
	&iExpressionContext_GetEnumDef,
	&iExpressionContext_SetDefaultEnumDef,
	&iExpressionContext_GetDefaultEnumDef,
	&iExpressionContext_GetEnumValueString,
	&iExpressionContext_GetEnumFlagsString,
	&iExpressionContext_RegisterURLResolver,
	&iExpressionContext_UnregisterURLResolver,
	&iExpressionContext_FindURLResolver,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iExpressionContext[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iExpressionContext = {
  niGetInterfaceID(iExpressionContext),
  &niGetInterfaceUUID(iExpressionContext),
  1,
  Parents_iExpressionContext,
  niCountOf(Methods_iExpressionContext),Methods_iExpressionContext,
  NULL
};

	return &InterfaceDef_iExpressionContext;
}

// End of iExpressionContext wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFileEnumSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFileEnumSink() {

// Method: OnFound
static const ni::sParameterDef iFileEnumSink_OnFound_Parameters[3] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aFileAttrs", ni::eType_U32, NULL, "tU32" }, 
  { "anFileSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFileEnumSink_OnFound = {
  "OnFound",
  0|ni::eType_I8, NULL, "tBool",
  3, iFileEnumSink_OnFound_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileEnumSink_OnFound)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFileEnumSink[] = {
	&iFileEnumSink_OnFound,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iFileEnumSink : public ni::cIUnknownImpl<ni::iFileEnumSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iFileEnumSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iFileEnumSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iFileEnumSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iFileEnumSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iFileEnumSink::OnFound
  tBool __stdcall OnFound(const achar * aszFile, tU32 aFileAttrs, tI64 anFileSize) {
    ni::Var _var_;
    ni::Var _params_[3];
    _params_[0] = aszFile;
    _params_[1] = aFileAttrs;
    _params_[2] = anFileSize;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iFileEnumSink_OnFound,0,_params_,3,&_var_)) {
      if (VarIsType(&_var_,iFileEnumSink_OnFound.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iFileEnumSink, niCountOf(Methods_iFileEnumSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iFileEnumSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iFileEnumSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFileEnumSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFileEnumSink = {
  niGetInterfaceID(iFileEnumSink),
  &niGetInterfaceUUID(iFileEnumSink),
  1,
  Parents_iFileEnumSink,
  niCountOf(Methods_iFileEnumSink),Methods_iFileEnumSink,
  DispatchWrapper_iFileEnumSink::Create
};

	return &InterfaceDef_iFileEnumSink;
}

// End of iFileEnumSink wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFileBase wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFileBase() {

// Method: GetFileFlags
static const ni::sMethodDef iFileBase_GetFileFlags = {
  "GetFileFlags",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tFileFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_GetFileFlags)
#else
  NULL
#endif
};

// Method: GetSourcePath
static const ni::sMethodDef iFileBase_GetSourcePath = {
  "GetSourcePath",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_GetSourcePath)
#else
  NULL
#endif
};

// Method: Seek
static const ni::sParameterDef iFileBase_Seek_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFileBase_Seek = {
  "Seek",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileBase_Seek_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_Seek)
#else
  NULL
#endif
};

// Method: SeekSet
static const ni::sParameterDef iFileBase_SeekSet_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFileBase_SeekSet = {
  "SeekSet",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileBase_SeekSet_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_SeekSet)
#else
  NULL
#endif
};

// Method: ReadRaw
static const ni::sParameterDef iFileBase_ReadRaw_Parameters[2] = { 
  { "apOut", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "void*" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFileBase_ReadRaw = {
  "ReadRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iFileBase_ReadRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_ReadRaw)
#else
  NULL
#endif
};

// Method: WriteRaw
static const ni::sParameterDef iFileBase_WriteRaw_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const void*" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFileBase_WriteRaw = {
  "WriteRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iFileBase_WriteRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_WriteRaw)
#else
  NULL
#endif
};

// Method: Tell
static const ni::sMethodDef iFileBase_Tell = {
  "Tell",
  0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_Tell)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iFileBase_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_GetSize)
#else
  NULL
#endif
};

// Method: SeekEnd
static const ni::sParameterDef iFileBase_SeekEnd_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFileBase_SeekEnd = {
  "SeekEnd",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileBase_SeekEnd_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_SeekEnd)
#else
  NULL
#endif
};

// Method: Flush
static const ni::sMethodDef iFileBase_Flush = {
  "Flush",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_Flush)
#else
  NULL
#endif
};

// Method: GetTime
static const ni::sParameterDef iFileBase_GetTime_Parameters[2] = { 
  { "aFileTime", ni::eType_Enum, NULL, "eFileTime" }, 
  { "apTime", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*" }
}; 
static const ni::sMethodDef iFileBase_GetTime = {
  "GetTime",
  0|ni::eType_I8, NULL, "tBool",
  2, iFileBase_GetTime_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_GetTime)
#else
  NULL
#endif
};

// Method: SetTime
static const ni::sParameterDef iFileBase_SetTime_Parameters[2] = { 
  { "aFileTime", ni::eType_Enum, NULL, "eFileTime" }, 
  { "apTime", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "const iTime*" }
}; 
static const ni::sMethodDef iFileBase_SetTime = {
  "SetTime",
  0|ni::eType_I8, NULL, "tBool",
  2, iFileBase_SetTime_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_SetTime)
#else
  NULL
#endif
};

// Method: Resize
static const ni::sParameterDef iFileBase_Resize_Parameters[1] = { 
  { "newSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFileBase_Resize = {
  "Resize",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileBase_Resize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileBase_Resize)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFileBase[] = {
	&iFileBase_GetFileFlags,
	&iFileBase_GetSourcePath,
	&iFileBase_Seek,
	&iFileBase_SeekSet,
	&iFileBase_ReadRaw,
	&iFileBase_WriteRaw,
	&iFileBase_Tell,
	&iFileBase_GetSize,
	&iFileBase_SeekEnd,
	&iFileBase_Flush,
	&iFileBase_GetTime,
	&iFileBase_SetTime,
	&iFileBase_Resize,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFileBase[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFileBase = {
  niGetInterfaceID(iFileBase),
  &niGetInterfaceUUID(iFileBase),
  1,
  Parents_iFileBase,
  niCountOf(Methods_iFileBase),Methods_iFileBase,
  NULL
};

	return &InterfaceDef_iFileBase;
}

// End of iFileBase wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFile wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFile() {

// Method: GetFileBase
static const ni::sMethodDef iFile_GetFileBase = {
  "GetFileBase",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetFileBase)
#else
  NULL
#endif
};

// Method: GetSourcePath
static const ni::sMethodDef iFile_GetSourcePath = {
  "GetSourcePath",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetSourcePath)
#else
  NULL
#endif
};

// Method: Seek
static const ni::sParameterDef iFile_Seek_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_Seek = {
  "Seek",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_Seek_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Seek)
#else
  NULL
#endif
};

// Method: SeekSet
static const ni::sParameterDef iFile_SeekSet_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_SeekSet = {
  "SeekSet",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_SeekSet_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_SeekSet)
#else
  NULL
#endif
};

// Method: ReadRaw
static const ni::sParameterDef iFile_ReadRaw_Parameters[2] = { 
  { "pOut", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "void*" }, 
  { "nSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadRaw = {
  "ReadRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadRaw)
#else
  NULL
#endif
};

// Method: WriteRaw
static const ni::sParameterDef iFile_WriteRaw_Parameters[2] = { 
  { "pIn", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const void*" }, 
  { "nSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_WriteRaw = {
  "WriteRaw",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteRaw)
#else
  NULL
#endif
};

// Method: Tell
static const ni::sMethodDef iFile_Tell = {
  "Tell",
  0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Tell)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iFile_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetSize)
#else
  NULL
#endif
};

// Method: SeekEnd
static const ni::sParameterDef iFile_SeekEnd_Parameters[1] = { 
  { "offset", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_SeekEnd = {
  "SeekEnd",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_SeekEnd_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_SeekEnd)
#else
  NULL
#endif
};

// Method: Flush
static const ni::sMethodDef iFile_Flush = {
  "Flush",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Flush)
#else
  NULL
#endif
};

// Method: GetTime
static const ni::sParameterDef iFile_GetTime_Parameters[2] = { 
  { "aFileTime", ni::eType_Enum, NULL, "eFileTime" }, 
  { "apTime", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*" }
}; 
static const ni::sMethodDef iFile_GetTime = {
  "GetTime",
  0|ni::eType_I8, NULL, "tBool",
  2, iFile_GetTime_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetTime)
#else
  NULL
#endif
};

// Method: SetTime
static const ni::sParameterDef iFile_SetTime_Parameters[2] = { 
  { "aFileTime", ni::eType_Enum, NULL, "eFileTime" }, 
  { "apTime", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "const iTime*" }
}; 
static const ni::sMethodDef iFile_SetTime = {
  "SetTime",
  0|ni::eType_I8, NULL, "tBool",
  2, iFile_SetTime_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_SetTime)
#else
  NULL
#endif
};

// Method: Resize
static const ni::sParameterDef iFile_Resize_Parameters[1] = { 
  { "newSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_Resize = {
  "Resize",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_Resize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Resize)
#else
  NULL
#endif
};

// Method: GetBase
static const ni::sMethodDef iFile_GetBase = {
  "GetBase",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetBase)
#else
  NULL
#endif
};

// Method: GetHere
static const ni::sMethodDef iFile_GetHere = {
  "GetHere",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetHere)
#else
  NULL
#endif
};

// Method: GetStop
static const ni::sMethodDef iFile_GetStop = {
  "GetStop",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetStop)
#else
  NULL
#endif
};

// Method: SetMemPtr
static const ni::sParameterDef iFile_SetMemPtr_Parameters[4] = { 
  { "apMem", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "abFree", ni::eType_I8, NULL, "tBool" }, 
  { "abKeepHere", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_SetMemPtr = {
  "SetMemPtr",
  0|ni::eType_I8, NULL, "tBool",
  4, iFile_SetMemPtr_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_SetMemPtr)
#else
  NULL
#endif
};

// Method: Reset
static const ni::sMethodDef iFile_Reset = {
  "Reset",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Reset)
#else
  NULL
#endif
};

// Method: WriteFile
static const ni::sParameterDef iFile_WriteFile_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "anSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_WriteFile = {
  "WriteFile",
  0|ni::eType_I64, NULL, "tI64",
  2, iFile_WriteFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteFile)
#else
  NULL
#endif
};

// Method: GetFileFlags
static const ni::sMethodDef iFile_GetFileFlags = {
  "GetFileFlags",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tFileFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetFileFlags)
#else
  NULL
#endif
};

// Method: GetCanRead
static const ni::sMethodDef iFile_GetCanRead = {
  "GetCanRead",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetCanRead)
#else
  NULL
#endif
};

// Method: GetCanWrite
static const ni::sMethodDef iFile_GetCanWrite = {
  "GetCanWrite",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetCanWrite)
#else
  NULL
#endif
};

// Method: GetCanSeek
static const ni::sMethodDef iFile_GetCanSeek = {
  "GetCanSeek",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetCanSeek)
#else
  NULL
#endif
};

// Method: GetPartialRead
static const ni::sMethodDef iFile_GetPartialRead = {
  "GetPartialRead",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetPartialRead)
#else
  NULL
#endif
};

// Method: GetPartialWrite
static const ni::sMethodDef iFile_GetPartialWrite = {
  "GetPartialWrite",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetPartialWrite)
#else
  NULL
#endif
};

// Method: GetIsEncoder
static const ni::sMethodDef iFile_GetIsEncoder = {
  "GetIsEncoder",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetIsEncoder)
#else
  NULL
#endif
};

// Method: GetIsDummy
static const ni::sMethodDef iFile_GetIsDummy = {
  "GetIsDummy",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetIsDummy)
#else
  NULL
#endif
};

// Method: GetIsMemory
static const ni::sMethodDef iFile_GetIsMemory = {
  "GetIsMemory",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetIsMemory)
#else
  NULL
#endif
};

// Method: GetIsStream
static const ni::sMethodDef iFile_GetIsStream = {
  "GetIsStream",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetIsStream)
#else
  NULL
#endif
};

// Method: ReadF32
static const ni::sMethodDef iFile_ReadF32 = {
  "ReadF32",
  0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadF32)
#else
  NULL
#endif
};

// Method: ReadF64
static const ni::sMethodDef iFile_ReadF64 = {
  "ReadF64",
  0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadF64)
#else
  NULL
#endif
};

// Method: Read8
static const ni::sMethodDef iFile_Read8 = {
  "Read8",
  0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Read8)
#else
  NULL
#endif
};

// Method: ReadLE16
static const ni::sMethodDef iFile_ReadLE16 = {
  "ReadLE16",
  0|ni::eType_U16, NULL, "tU16",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadLE16)
#else
  NULL
#endif
};

// Method: ReadBE16
static const ni::sMethodDef iFile_ReadBE16 = {
  "ReadBE16",
  0|ni::eType_U16, NULL, "tU16",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBE16)
#else
  NULL
#endif
};

// Method: ReadLE32
static const ni::sMethodDef iFile_ReadLE32 = {
  "ReadLE32",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadLE32)
#else
  NULL
#endif
};

// Method: ReadBE32
static const ni::sMethodDef iFile_ReadBE32 = {
  "ReadBE32",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBE32)
#else
  NULL
#endif
};

// Method: ReadLE64
static const ni::sMethodDef iFile_ReadLE64 = {
  "ReadLE64",
  0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadLE64)
#else
  NULL
#endif
};

// Method: ReadBE64
static const ni::sMethodDef iFile_ReadBE64 = {
  "ReadBE64",
  0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBE64)
#else
  NULL
#endif
};

// Method: ReadF32Array
static const ni::sParameterDef iFile_ReadF32Array_Parameters[2] = { 
  { "apOut", ni::eType_F32|ni::eTypeFlags_Pointer, NULL, "tF32*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadF32Array = {
  "ReadF32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadF32Array_Parameters,
NULL
};

// Method: ReadF64Array
static const ni::sParameterDef iFile_ReadF64Array_Parameters[2] = { 
  { "apOut", ni::eType_F64|ni::eTypeFlags_Pointer, NULL, "tF64*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadF64Array = {
  "ReadF64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadF64Array_Parameters,
NULL
};

// Method: ReadLE16Array
static const ni::sParameterDef iFile_ReadLE16Array_Parameters[2] = { 
  { "apOut", ni::eType_U16|ni::eTypeFlags_Pointer, NULL, "tU16*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadLE16Array = {
  "ReadLE16Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadLE16Array_Parameters,
NULL
};

// Method: ReadBE16Array
static const ni::sParameterDef iFile_ReadBE16Array_Parameters[2] = { 
  { "apOut", ni::eType_U16|ni::eTypeFlags_Pointer, NULL, "tU16*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadBE16Array = {
  "ReadBE16Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadBE16Array_Parameters,
NULL
};

// Method: ReadLE32Array
static const ni::sParameterDef iFile_ReadLE32Array_Parameters[2] = { 
  { "apOut", ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "tU32*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadLE32Array = {
  "ReadLE32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadLE32Array_Parameters,
NULL
};

// Method: ReadBE32Array
static const ni::sParameterDef iFile_ReadBE32Array_Parameters[2] = { 
  { "apOut", ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "tU32*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadBE32Array = {
  "ReadBE32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadBE32Array_Parameters,
NULL
};

// Method: ReadLE64Array
static const ni::sParameterDef iFile_ReadLE64Array_Parameters[2] = { 
  { "apOut", ni::eType_U64|ni::eTypeFlags_Pointer, NULL, "tU64*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadLE64Array = {
  "ReadLE64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadLE64Array_Parameters,
NULL
};

// Method: ReadBE64Array
static const ni::sParameterDef iFile_ReadBE64Array_Parameters[2] = { 
  { "apOut", ni::eType_U64|ni::eTypeFlags_Pointer, NULL, "tU64*" }, 
  { "anNumElements", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iFile_ReadBE64Array = {
  "ReadBE64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_ReadBE64Array_Parameters,
NULL
};

// Method: WriteF32
static const ni::sParameterDef iFile_WriteF32_Parameters[1] = { 
  { "v", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iFile_WriteF32 = {
  "WriteF32",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteF32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteF32)
#else
  NULL
#endif
};

// Method: WriteF64
static const ni::sParameterDef iFile_WriteF64_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iFile_WriteF64 = {
  "WriteF64",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteF64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteF64)
#else
  NULL
#endif
};

// Method: Write8
static const ni::sParameterDef iFile_Write8_Parameters[1] = { 
  { "v", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iFile_Write8 = {
  "Write8",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_Write8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_Write8)
#else
  NULL
#endif
};

// Method: WriteLE16
static const ni::sParameterDef iFile_WriteLE16_Parameters[1] = { 
  { "v", ni::eType_U16, NULL, "tU16" }
}; 
static const ni::sMethodDef iFile_WriteLE16 = {
  "WriteLE16",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteLE16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteLE16)
#else
  NULL
#endif
};

// Method: WriteBE16
static const ni::sParameterDef iFile_WriteBE16_Parameters[1] = { 
  { "v", ni::eType_U16, NULL, "tU16" }
}; 
static const ni::sMethodDef iFile_WriteBE16 = {
  "WriteBE16",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteBE16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBE16)
#else
  NULL
#endif
};

// Method: WriteLE32
static const ni::sParameterDef iFile_WriteLE32_Parameters[1] = { 
  { "v", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteLE32 = {
  "WriteLE32",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteLE32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteLE32)
#else
  NULL
#endif
};

// Method: WriteBE32
static const ni::sParameterDef iFile_WriteBE32_Parameters[1] = { 
  { "v", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBE32 = {
  "WriteBE32",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteBE32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBE32)
#else
  NULL
#endif
};

// Method: WriteLE64
static const ni::sParameterDef iFile_WriteLE64_Parameters[1] = { 
  { "v", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iFile_WriteLE64 = {
  "WriteLE64",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteLE64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteLE64)
#else
  NULL
#endif
};

// Method: WriteBE64
static const ni::sParameterDef iFile_WriteBE64_Parameters[1] = { 
  { "v", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iFile_WriteBE64 = {
  "WriteBE64",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteBE64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBE64)
#else
  NULL
#endif
};

// Method: WriteF32Array
static const ni::sParameterDef iFile_WriteF32Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_F32|ni::eTypeFlags_Pointer, NULL, "const tF32*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteF32Array = {
  "WriteF32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteF32Array_Parameters,
NULL
};

// Method: WriteF64Array
static const ni::sParameterDef iFile_WriteF64Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_F64|ni::eTypeFlags_Pointer, NULL, "const tF64*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteF64Array = {
  "WriteF64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteF64Array_Parameters,
NULL
};

// Method: WriteLE16Array
static const ni::sParameterDef iFile_WriteLE16Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U16|ni::eTypeFlags_Pointer, NULL, "const tU16*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteLE16Array = {
  "WriteLE16Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteLE16Array_Parameters,
NULL
};

// Method: WriteBE16Array
static const ni::sParameterDef iFile_WriteBE16Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U16|ni::eTypeFlags_Pointer, NULL, "const tU16*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBE16Array = {
  "WriteBE16Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteBE16Array_Parameters,
NULL
};

// Method: WriteLE32Array
static const ni::sParameterDef iFile_WriteLE32Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "const tU32*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteLE32Array = {
  "WriteLE32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteLE32Array_Parameters,
NULL
};

// Method: WriteBE32Array
static const ni::sParameterDef iFile_WriteBE32Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "const tU32*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBE32Array = {
  "WriteBE32Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteBE32Array_Parameters,
NULL
};

// Method: WriteLE64Array
static const ni::sParameterDef iFile_WriteLE64Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U64|ni::eTypeFlags_Pointer, NULL, "const tU64*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteLE64Array = {
  "WriteLE64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteLE64Array_Parameters,
NULL
};

// Method: WriteBE64Array
static const ni::sParameterDef iFile_WriteBE64Array_Parameters[2] = { 
  { "apIn", ni::eTypeFlags_Constant|ni::eType_U64|ni::eTypeFlags_Pointer, NULL, "const tU64*" }, 
  { "anNumElements", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBE64Array = {
  "WriteBE64Array",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteBE64Array_Parameters,
NULL
};

// Method: GetTextEncodingFormat
static const ni::sMethodDef iFile_GetTextEncodingFormat = {
  "GetTextEncodingFormat",
  0|ni::eType_Enum, NULL, "eTextEncodingFormat",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetTextEncodingFormat)
#else
  NULL
#endif
};

// Method: SetTextEncodingFormat
static const ni::sParameterDef iFile_SetTextEncodingFormat_Parameters[1] = { 
  { "aFormat", ni::eType_Enum, NULL, "eTextEncodingFormat" }
}; 
static const ni::sMethodDef iFile_SetTextEncodingFormat = {
  "SetTextEncodingFormat",
  0|ni::eType_Null, NULL, "void",
  1, iFile_SetTextEncodingFormat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_SetTextEncodingFormat)
#else
  NULL
#endif
};

// Method: BeginTextFileRead
static const ni::sParameterDef iFile_BeginTextFileRead_Parameters[1] = { 
  { "abSeekSetZero", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_BeginTextFileRead = {
  "BeginTextFileRead",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_BeginTextFileRead_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_BeginTextFileRead)
#else
  NULL
#endif
};

// Method: BeginTextFileWrite
static const ni::sParameterDef iFile_BeginTextFileWrite_Parameters[2] = { 
  { "aFormat", ni::eType_Enum, NULL, "eTextEncodingFormat" }, 
  { "abSeekSetZero", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_BeginTextFileWrite = {
  "BeginTextFileWrite",
  0|ni::eType_I8, NULL, "tBool",
  2, iFile_BeginTextFileWrite_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_BeginTextFileWrite)
#else
  NULL
#endif
};

// Method: ReadString
static const ni::sMethodDef iFile_ReadString = {
  "ReadString",
  0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadString)
#else
  NULL
#endif
};

// Method: ReadStringLine
static const ni::sMethodDef iFile_ReadStringLine = {
  "ReadStringLine",
  0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadStringLine)
#else
  NULL
#endif
};

// Method: WriteString
static const ni::sParameterDef iFile_WriteString_Parameters[1] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteString = {
  "WriteString",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteString)
#else
  NULL
#endif
};

// Method: WriteStringZ
static const ni::sParameterDef iFile_WriteStringZ_Parameters[1] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteStringZ = {
  "WriteStringZ",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteStringZ_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteStringZ)
#else
  NULL
#endif
};

// Method: ReadChar
static const ni::sMethodDef iFile_ReadChar = {
  "ReadChar",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadChar)
#else
  NULL
#endif
};

// Method: WriteChar
static const ni::sParameterDef iFile_WriteChar_Parameters[1] = { 
  { "anChar", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteChar = {
  "WriteChar",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteChar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteChar)
#else
  NULL
#endif
};

// Method: ReadStringEx
static const ni::sParameterDef iFile_ReadStringEx_Parameters[1] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }
}; 
static const ni::sMethodDef iFile_ReadStringEx = {
  "ReadStringEx",
  0|ni::eType_String, NULL, "cString",
  1, iFile_ReadStringEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadStringEx)
#else
  NULL
#endif
};

// Method: ReadStringLineEx
static const ni::sParameterDef iFile_ReadStringLineEx_Parameters[1] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }
}; 
static const ni::sMethodDef iFile_ReadStringLineEx = {
  "ReadStringLineEx",
  0|ni::eType_String, NULL, "cString",
  1, iFile_ReadStringLineEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadStringLineEx)
#else
  NULL
#endif
};

// Method: WriteStringEx
static const ni::sParameterDef iFile_WriteStringEx_Parameters[2] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }, 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteStringEx = {
  "WriteStringEx",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteStringEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteStringEx)
#else
  NULL
#endif
};

// Method: WriteStringZEx
static const ni::sParameterDef iFile_WriteStringZEx_Parameters[2] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }, 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteStringZEx = {
  "WriteStringZEx",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteStringZEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteStringZEx)
#else
  NULL
#endif
};

// Method: ReadCharEx
static const ni::sParameterDef iFile_ReadCharEx_Parameters[1] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }
}; 
static const ni::sMethodDef iFile_ReadCharEx = {
  "ReadCharEx",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_ReadCharEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadCharEx)
#else
  NULL
#endif
};

// Method: WriteCharEx
static const ni::sParameterDef iFile_WriteCharEx_Parameters[2] = { 
  { "aFmt", ni::eType_Enum, NULL, "eTextEncodingFormat" }, 
  { "anChar", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteCharEx = {
  "WriteCharEx",
  0|ni::eType_Size, NULL, "tSize",
  2, iFile_WriteCharEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteCharEx)
#else
  NULL
#endif
};

// Method: BeginWriteBits
static const ni::sMethodDef iFile_BeginWriteBits = {
  "BeginWriteBits",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_BeginWriteBits)
#else
  NULL
#endif
};

// Method: EndWriteBits
static const ni::sMethodDef iFile_EndWriteBits = {
  "EndWriteBits",
  0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_EndWriteBits)
#else
  NULL
#endif
};

// Method: IsWriteBitsBegan
static const ni::sMethodDef iFile_IsWriteBitsBegan = {
  "IsWriteBitsBegan",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_IsWriteBitsBegan)
#else
  NULL
#endif
};

// Method: WriteBit
static const ni::sParameterDef iFile_WriteBit_Parameters[1] = { 
  { "abBit", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_WriteBit = {
  "WriteBit",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBit_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBit)
#else
  NULL
#endif
};

// Method: WriteBits
static const ni::sParameterDef iFile_WriteBits_Parameters[3] = { 
  { "apData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }, 
  { "abInvertBytesOrder", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_WriteBits = {
  "WriteBits",
  0|ni::eType_Null, NULL, "void",
  3, iFile_WriteBits_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBits)
#else
  NULL
#endif
};

// Method: WriteBits8
static const ni::sParameterDef iFile_WriteBits8_Parameters[2] = { 
  { "anData", ni::eType_U8, NULL, "tU8" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBits8 = {
  "WriteBits8",
  0|ni::eType_Null, NULL, "void",
  2, iFile_WriteBits8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBits8)
#else
  NULL
#endif
};

// Method: WriteBits16
static const ni::sParameterDef iFile_WriteBits16_Parameters[2] = { 
  { "anData", ni::eType_U16, NULL, "tU16" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBits16 = {
  "WriteBits16",
  0|ni::eType_Null, NULL, "void",
  2, iFile_WriteBits16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBits16)
#else
  NULL
#endif
};

// Method: WriteBits32
static const ni::sParameterDef iFile_WriteBits32_Parameters[2] = { 
  { "anData", ni::eType_U32, NULL, "tU32" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBits32 = {
  "WriteBits32",
  0|ni::eType_Null, NULL, "void",
  2, iFile_WriteBits32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBits32)
#else
  NULL
#endif
};

// Method: WriteBits64
static const ni::sParameterDef iFile_WriteBits64_Parameters[2] = { 
  { "anData", ni::eType_U64, NULL, "tU64" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBits64 = {
  "WriteBits64",
  0|ni::eType_Null, NULL, "void",
  2, iFile_WriteBits64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBits64)
#else
  NULL
#endif
};

// Method: BeginReadBits
static const ni::sMethodDef iFile_BeginReadBits = {
  "BeginReadBits",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_BeginReadBits)
#else
  NULL
#endif
};

// Method: EndReadBits
static const ni::sMethodDef iFile_EndReadBits = {
  "EndReadBits",
  0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_EndReadBits)
#else
  NULL
#endif
};

// Method: IsReadBitsBegan
static const ni::sMethodDef iFile_IsReadBitsBegan = {
  "IsReadBitsBegan",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_IsReadBitsBegan)
#else
  NULL
#endif
};

// Method: ReadBit
static const ni::sMethodDef iFile_ReadBit = {
  "ReadBit",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBit)
#else
  NULL
#endif
};

// Method: ReadBits
static const ni::sParameterDef iFile_ReadBits_Parameters[3] = { 
  { "apData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anBits", ni::eType_U32, NULL, "tU32" }, 
  { "abInvertBytesOrder", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFile_ReadBits = {
  "ReadBits",
  0|ni::eType_Null, NULL, "void",
  3, iFile_ReadBits_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBits)
#else
  NULL
#endif
};

// Method: ReadBitsU8
static const ni::sParameterDef iFile_ReadBitsU8_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsU8 = {
  "ReadBitsU8",
  0|ni::eType_U8, NULL, "tU8",
  1, iFile_ReadBitsU8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsU8)
#else
  NULL
#endif
};

// Method: ReadBitsU16
static const ni::sParameterDef iFile_ReadBitsU16_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsU16 = {
  "ReadBitsU16",
  0|ni::eType_U16, NULL, "tU16",
  1, iFile_ReadBitsU16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsU16)
#else
  NULL
#endif
};

// Method: ReadBitsU32
static const ni::sParameterDef iFile_ReadBitsU32_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsU32 = {
  "ReadBitsU32",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_ReadBitsU32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsU32)
#else
  NULL
#endif
};

// Method: ReadBitsU64
static const ni::sParameterDef iFile_ReadBitsU64_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsU64 = {
  "ReadBitsU64",
  0|ni::eType_U64, NULL, "tU64",
  1, iFile_ReadBitsU64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsU64)
#else
  NULL
#endif
};

// Method: ReadBitsI8
static const ni::sParameterDef iFile_ReadBitsI8_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsI8 = {
  "ReadBitsI8",
  0|ni::eType_I8, NULL, "tI8",
  1, iFile_ReadBitsI8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsI8)
#else
  NULL
#endif
};

// Method: ReadBitsI16
static const ni::sParameterDef iFile_ReadBitsI16_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsI16 = {
  "ReadBitsI16",
  0|ni::eType_I16, NULL, "tI16",
  1, iFile_ReadBitsI16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsI16)
#else
  NULL
#endif
};

// Method: ReadBitsI32
static const ni::sParameterDef iFile_ReadBitsI32_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsI32 = {
  "ReadBitsI32",
  0|ni::eType_I32, NULL, "tI32",
  1, iFile_ReadBitsI32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsI32)
#else
  NULL
#endif
};

// Method: ReadBitsI64
static const ni::sParameterDef iFile_ReadBitsI64_Parameters[1] = { 
  { "anBits", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_ReadBitsI64 = {
  "ReadBitsI64",
  0|ni::eType_I64, NULL, "tI64",
  1, iFile_ReadBitsI64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsI64)
#else
  NULL
#endif
};

// Method: GetMinNumBitsU32
static const ni::sParameterDef iFile_GetMinNumBitsU32_Parameters[1] = { 
  { "anNumber", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_GetMinNumBitsU32 = {
  "GetMinNumBitsU32",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_GetMinNumBitsU32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetMinNumBitsU32)
#else
  NULL
#endif
};

// Method: GetMinNumBitsI32
static const ni::sParameterDef iFile_GetMinNumBitsI32_Parameters[1] = { 
  { "anNumber", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iFile_GetMinNumBitsI32 = {
  "GetMinNumBitsI32",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_GetMinNumBitsI32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetMinNumBitsI32)
#else
  NULL
#endif
};

// Method: GetMinNumBitsU64
static const ni::sParameterDef iFile_GetMinNumBitsU64_Parameters[1] = { 
  { "anNumber", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iFile_GetMinNumBitsU64 = {
  "GetMinNumBitsU64",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_GetMinNumBitsU64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetMinNumBitsU64)
#else
  NULL
#endif
};

// Method: GetMinNumBitsI64
static const ni::sParameterDef iFile_GetMinNumBitsI64_Parameters[1] = { 
  { "anNumber", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_GetMinNumBitsI64 = {
  "GetMinNumBitsI64",
  0|ni::eType_U32, NULL, "tU32",
  1, iFile_GetMinNumBitsI64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_GetMinNumBitsI64)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU64
static const ni::sParameterDef iFile_WriteBitsPackedU64_Parameters[1] = { 
  { "anNumber", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU64 = {
  "WriteBitsPackedU64",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU64)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU48
static const ni::sParameterDef iFile_WriteBitsPackedU48_Parameters[1] = { 
  { "anNumber", ni::eType_U64, NULL, "tU64" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU48 = {
  "WriteBitsPackedU48",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU48_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU48)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU32
static const ni::sParameterDef iFile_WriteBitsPackedU32_Parameters[1] = { 
  { "anNumber", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU32 = {
  "WriteBitsPackedU32",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU32)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU24
static const ni::sParameterDef iFile_WriteBitsPackedU24_Parameters[1] = { 
  { "anNumber", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU24 = {
  "WriteBitsPackedU24",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU24_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU24)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU16
static const ni::sParameterDef iFile_WriteBitsPackedU16_Parameters[1] = { 
  { "anNumber", ni::eType_U16, NULL, "tU16" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU16 = {
  "WriteBitsPackedU16",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU16)
#else
  NULL
#endif
};

// Method: WriteBitsPackedU8
static const ni::sParameterDef iFile_WriteBitsPackedU8_Parameters[1] = { 
  { "anNumber", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedU8 = {
  "WriteBitsPackedU8",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedU8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedU8)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU64
static const ni::sMethodDef iFile_ReadBitsPackedU64 = {
  "ReadBitsPackedU64",
  0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU64)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU48
static const ni::sMethodDef iFile_ReadBitsPackedU48 = {
  "ReadBitsPackedU48",
  0|ni::eType_U64, NULL, "tU64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU48)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU32
static const ni::sMethodDef iFile_ReadBitsPackedU32 = {
  "ReadBitsPackedU32",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU32)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU24
static const ni::sMethodDef iFile_ReadBitsPackedU24 = {
  "ReadBitsPackedU24",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU24)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU16
static const ni::sMethodDef iFile_ReadBitsPackedU16 = {
  "ReadBitsPackedU16",
  0|ni::eType_U16, NULL, "tU16",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU16)
#else
  NULL
#endif
};

// Method: ReadBitsPackedU8
static const ni::sMethodDef iFile_ReadBitsPackedU8 = {
  "ReadBitsPackedU8",
  0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedU8)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI64
static const ni::sParameterDef iFile_WriteBitsPackedI64_Parameters[1] = { 
  { "anNumber", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI64 = {
  "WriteBitsPackedI64",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI64_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI64)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI48
static const ni::sParameterDef iFile_WriteBitsPackedI48_Parameters[1] = { 
  { "anNumber", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI48 = {
  "WriteBitsPackedI48",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI48_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI48)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI32
static const ni::sParameterDef iFile_WriteBitsPackedI32_Parameters[1] = { 
  { "anNumber", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI32 = {
  "WriteBitsPackedI32",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI32_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI32)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI24
static const ni::sParameterDef iFile_WriteBitsPackedI24_Parameters[1] = { 
  { "anNumber", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI24 = {
  "WriteBitsPackedI24",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI24_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI24)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI16
static const ni::sParameterDef iFile_WriteBitsPackedI16_Parameters[1] = { 
  { "anNumber", ni::eType_I16, NULL, "tI16" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI16 = {
  "WriteBitsPackedI16",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI16_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI16)
#else
  NULL
#endif
};

// Method: WriteBitsPackedI8
static const ni::sParameterDef iFile_WriteBitsPackedI8_Parameters[1] = { 
  { "anNumber", ni::eType_I8, NULL, "tI8" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedI8 = {
  "WriteBitsPackedI8",
  0|ni::eType_Null, NULL, "void",
  1, iFile_WriteBitsPackedI8_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedI8)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI64
static const ni::sMethodDef iFile_ReadBitsPackedI64 = {
  "ReadBitsPackedI64",
  0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI64)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI48
static const ni::sMethodDef iFile_ReadBitsPackedI48 = {
  "ReadBitsPackedI48",
  0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI48)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI32
static const ni::sMethodDef iFile_ReadBitsPackedI32 = {
  "ReadBitsPackedI32",
  0|ni::eType_I32, NULL, "tI32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI32)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI24
static const ni::sMethodDef iFile_ReadBitsPackedI24 = {
  "ReadBitsPackedI24",
  0|ni::eType_I32, NULL, "tI32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI24)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI16
static const ni::sMethodDef iFile_ReadBitsPackedI16 = {
  "ReadBitsPackedI16",
  0|ni::eType_I16, NULL, "tI16",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI16)
#else
  NULL
#endif
};

// Method: ReadBitsPackedI8
static const ni::sMethodDef iFile_ReadBitsPackedI8 = {
  "ReadBitsPackedI8",
  0|ni::eType_I8, NULL, "tI8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedI8)
#else
  NULL
#endif
};

// Method: ReadBitsString
static const ni::sMethodDef iFile_ReadBitsString = {
  "ReadBitsString",
  0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsString)
#else
  NULL
#endif
};

// Method: WriteBitsString
static const ni::sParameterDef iFile_WriteBitsString_Parameters[1] = { 
  { "aaszIn", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteBitsString = {
  "WriteBitsString",
  0|ni::eType_Size, NULL, "tSize",
  1, iFile_WriteBitsString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsString)
#else
  NULL
#endif
};

// Method: WriteVar
static const ni::sParameterDef iFile_WriteVar_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iFile_WriteVar = {
  "WriteVar",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_WriteVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteVar)
#else
  NULL
#endif
};

// Method: ReadVar
static const ni::sMethodDef iFile_ReadVar = {
  "ReadVar",
  0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadVar)
#else
  NULL
#endif
};

// Method: ReadVarEx
static const ni::sParameterDef iFile_ReadVarEx_Parameters[1] = { 
  { "aVar", ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "Var&" }
}; 
static const ni::sMethodDef iFile_ReadVarEx = {
  "ReadVarEx",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_ReadVarEx_Parameters,
NULL
};

// Method: WriteBitsPackedVar
static const ni::sParameterDef iFile_WriteBitsPackedVar_Parameters[1] = { 
  { "aVar", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iFile_WriteBitsPackedVar = {
  "WriteBitsPackedVar",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_WriteBitsPackedVar_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteBitsPackedVar)
#else
  NULL
#endif
};

// Method: ReadBitsPackedVar
static const ni::sMethodDef iFile_ReadBitsPackedVar = {
  "ReadBitsPackedVar",
  0|ni::eType_Variant, NULL, "Var",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadBitsPackedVar)
#else
  NULL
#endif
};

// Method: ReadBitsPackedVarEx
static const ni::sParameterDef iFile_ReadBitsPackedVarEx_Parameters[1] = { 
  { "aVar", ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "Var&" }
}; 
static const ni::sMethodDef iFile_ReadBitsPackedVarEx = {
  "ReadBitsPackedVarEx",
  0|ni::eType_I8, NULL, "tBool",
  1, iFile_ReadBitsPackedVarEx_Parameters,
NULL
};

// Method: ReadRawToString
static const ni::sParameterDef iFile_ReadRawToString_Parameters[2] = { 
  { "aFormat", ni::eType_Enum, NULL, "eRawToStringEncoding" }, 
  { "anNumBytes", ni::eType_Int, NULL, "tInt" }
}; 
static const ni::sMethodDef iFile_ReadRawToString = {
  "ReadRawToString",
  0|ni::eType_String, NULL, "cString",
  2, iFile_ReadRawToString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadRawToString)
#else
  NULL
#endif
};

// Method: WriteRawFromString
static const ni::sParameterDef iFile_WriteRawFromString_Parameters[2] = { 
  { "aFormat", ni::eType_Enum, NULL, "eRawToStringEncoding" }, 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFile_WriteRawFromString = {
  "WriteRawFromString",
  0|ni::eType_Int, NULL, "tInt",
  2, iFile_WriteRawFromString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_WriteRawFromString)
#else
  NULL
#endif
};

// Method: ReadQuotedLine
static const ni::sMethodDef iFile_ReadQuotedLine = {
  "ReadQuotedLine",
  0|ni::eType_String, NULL, "ni::cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFile_ReadQuotedLine)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFile[] = {
	&iFile_GetFileBase,
	&iFile_GetSourcePath,
	&iFile_Seek,
	&iFile_SeekSet,
	&iFile_ReadRaw,
	&iFile_WriteRaw,
	&iFile_Tell,
	&iFile_GetSize,
	&iFile_SeekEnd,
	&iFile_Flush,
	&iFile_GetTime,
	&iFile_SetTime,
	&iFile_Resize,
	&iFile_GetBase,
	&iFile_GetHere,
	&iFile_GetStop,
	&iFile_SetMemPtr,
	&iFile_Reset,
	&iFile_WriteFile,
	&iFile_GetFileFlags,
	&iFile_GetCanRead,
	&iFile_GetCanWrite,
	&iFile_GetCanSeek,
	&iFile_GetPartialRead,
	&iFile_GetPartialWrite,
	&iFile_GetIsEncoder,
	&iFile_GetIsDummy,
	&iFile_GetIsMemory,
	&iFile_GetIsStream,
	&iFile_ReadF32,
	&iFile_ReadF64,
	&iFile_Read8,
	&iFile_ReadLE16,
	&iFile_ReadBE16,
	&iFile_ReadLE32,
	&iFile_ReadBE32,
	&iFile_ReadLE64,
	&iFile_ReadBE64,
	&iFile_ReadF32Array,
	&iFile_ReadF64Array,
	&iFile_ReadLE16Array,
	&iFile_ReadBE16Array,
	&iFile_ReadLE32Array,
	&iFile_ReadBE32Array,
	&iFile_ReadLE64Array,
	&iFile_ReadBE64Array,
	&iFile_WriteF32,
	&iFile_WriteF64,
	&iFile_Write8,
	&iFile_WriteLE16,
	&iFile_WriteBE16,
	&iFile_WriteLE32,
	&iFile_WriteBE32,
	&iFile_WriteLE64,
	&iFile_WriteBE64,
	&iFile_WriteF32Array,
	&iFile_WriteF64Array,
	&iFile_WriteLE16Array,
	&iFile_WriteBE16Array,
	&iFile_WriteLE32Array,
	&iFile_WriteBE32Array,
	&iFile_WriteLE64Array,
	&iFile_WriteBE64Array,
	&iFile_GetTextEncodingFormat,
	&iFile_SetTextEncodingFormat,
	&iFile_BeginTextFileRead,
	&iFile_BeginTextFileWrite,
	&iFile_ReadString,
	&iFile_ReadStringLine,
	&iFile_WriteString,
	&iFile_WriteStringZ,
	&iFile_ReadChar,
	&iFile_WriteChar,
	&iFile_ReadStringEx,
	&iFile_ReadStringLineEx,
	&iFile_WriteStringEx,
	&iFile_WriteStringZEx,
	&iFile_ReadCharEx,
	&iFile_WriteCharEx,
	&iFile_BeginWriteBits,
	&iFile_EndWriteBits,
	&iFile_IsWriteBitsBegan,
	&iFile_WriteBit,
	&iFile_WriteBits,
	&iFile_WriteBits8,
	&iFile_WriteBits16,
	&iFile_WriteBits32,
	&iFile_WriteBits64,
	&iFile_BeginReadBits,
	&iFile_EndReadBits,
	&iFile_IsReadBitsBegan,
	&iFile_ReadBit,
	&iFile_ReadBits,
	&iFile_ReadBitsU8,
	&iFile_ReadBitsU16,
	&iFile_ReadBitsU32,
	&iFile_ReadBitsU64,
	&iFile_ReadBitsI8,
	&iFile_ReadBitsI16,
	&iFile_ReadBitsI32,
	&iFile_ReadBitsI64,
	&iFile_GetMinNumBitsU32,
	&iFile_GetMinNumBitsI32,
	&iFile_GetMinNumBitsU64,
	&iFile_GetMinNumBitsI64,
	&iFile_WriteBitsPackedU64,
	&iFile_WriteBitsPackedU48,
	&iFile_WriteBitsPackedU32,
	&iFile_WriteBitsPackedU24,
	&iFile_WriteBitsPackedU16,
	&iFile_WriteBitsPackedU8,
	&iFile_ReadBitsPackedU64,
	&iFile_ReadBitsPackedU48,
	&iFile_ReadBitsPackedU32,
	&iFile_ReadBitsPackedU24,
	&iFile_ReadBitsPackedU16,
	&iFile_ReadBitsPackedU8,
	&iFile_WriteBitsPackedI64,
	&iFile_WriteBitsPackedI48,
	&iFile_WriteBitsPackedI32,
	&iFile_WriteBitsPackedI24,
	&iFile_WriteBitsPackedI16,
	&iFile_WriteBitsPackedI8,
	&iFile_ReadBitsPackedI64,
	&iFile_ReadBitsPackedI48,
	&iFile_ReadBitsPackedI32,
	&iFile_ReadBitsPackedI24,
	&iFile_ReadBitsPackedI16,
	&iFile_ReadBitsPackedI8,
	&iFile_ReadBitsString,
	&iFile_WriteBitsString,
	&iFile_WriteVar,
	&iFile_ReadVar,
	&iFile_ReadVarEx,
	&iFile_WriteBitsPackedVar,
	&iFile_ReadBitsPackedVar,
	&iFile_ReadBitsPackedVarEx,
	&iFile_ReadRawToString,
	&iFile_WriteRawFromString,
	&iFile_ReadQuotedLine,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFile[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFile = {
  niGetInterfaceID(iFile),
  &niGetInterfaceUUID(iFile),
  1,
  Parents_iFile,
  niCountOf(Methods_iFile),Methods_iFile,
  NULL
};

	return &InterfaceDef_iFile;
}

// End of iFile wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFileMemory wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFileMemory() {

// Method: GetBase
static const ni::sMethodDef iFileMemory_GetBase = {
  "GetBase",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileMemory_GetBase)
#else
  NULL
#endif
};

// Method: GetHere
static const ni::sMethodDef iFileMemory_GetHere = {
  "GetHere",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileMemory_GetHere)
#else
  NULL
#endif
};

// Method: GetStop
static const ni::sMethodDef iFileMemory_GetStop = {
  "GetStop",
  0|ni::eType_Ptr, NULL, "tPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileMemory_GetStop)
#else
  NULL
#endif
};

// Method: SetMemPtr
static const ni::sParameterDef iFileMemory_SetMemPtr_Parameters[4] = { 
  { "apMem", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "abFree", ni::eType_I8, NULL, "tBool" }, 
  { "abKeepHere", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iFileMemory_SetMemPtr = {
  "SetMemPtr",
  0|ni::eType_I8, NULL, "tBool",
  4, iFileMemory_SetMemPtr_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileMemory_SetMemPtr)
#else
  NULL
#endif
};

// Method: Reset
static const ni::sMethodDef iFileMemory_Reset = {
  "Reset",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileMemory_Reset)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFileMemory[] = {
	&iFileMemory_GetBase,
	&iFileMemory_GetHere,
	&iFileMemory_GetStop,
	&iFileMemory_SetMemPtr,
	&iFileMemory_Reset,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFileMemory[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFileMemory = {
  niGetInterfaceID(iFileMemory),
  &niGetInterfaceUUID(iFileMemory),
  1,
  Parents_iFileMemory,
  niCountOf(Methods_iFileMemory),Methods_iFileMemory,
  NULL
};

	return &InterfaceDef_iFileMemory;
}

// End of iFileMemory wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iURLFileHandler wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iURLFileHandler() {

// Method: URLOpen
static const ni::sParameterDef iURLFileHandler_URLOpen_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iURLFileHandler_URLOpen = {
  "URLOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  1, iURLFileHandler_URLOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iURLFileHandler_URLOpen)
#else
  NULL
#endif
};

// Method: URLExists
static const ni::sParameterDef iURLFileHandler_URLExists_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iURLFileHandler_URLExists = {
  "URLExists",
  0|ni::eType_I8, NULL, "tBool",
  1, iURLFileHandler_URLExists_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iURLFileHandler_URLExists)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iURLFileHandler[] = {
	&iURLFileHandler_URLOpen,
	&iURLFileHandler_URLExists,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iURLFileHandler : public ni::cIUnknownImpl<ni::iURLFileHandler,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iURLFileHandler(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iURLFileHandler() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iURLFileHandler))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iURLFileHandler));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iURLFileHandler::URLOpen
  iFile * __stdcall URLOpen(const achar * aURL) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = aURL;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iURLFileHandler_URLOpen,0,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iURLFileHandler_URLOpen.mReturnType,ni::eFalse)) {
        return (iFile *)_var_.GetRawIUnknownPointerAndSetNull();
      }
    }
    return NULL;
	}

  // Method (1): iURLFileHandler::URLExists
  tBool __stdcall URLExists(const achar * aURL) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = aURL;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iURLFileHandler_URLExists,1,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iURLFileHandler_URLExists.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iURLFileHandler, niCountOf(Methods_iURLFileHandler))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iURLFileHandler"));
      return NULL;
    }
		return niNew DispatchWrapper_iURLFileHandler(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iURLFileHandler[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iURLFileHandler = {
  niGetInterfaceID(iURLFileHandler),
  &niGetInterfaceUUID(iURLFileHandler),
  1,
  Parents_iURLFileHandler,
  niCountOf(Methods_iURLFileHandler),Methods_iURLFileHandler,
  DispatchWrapper_iURLFileHandler::Create
};

	return &InterfaceDef_iURLFileHandler;
}

// End of iURLFileHandler wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iBufferEncoder wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iBufferEncoder() {

// Method: EncodeMarker
static const ni::sMethodDef iBufferEncoder_EncodeMarker = {
  "EncodeMarker",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferEncoder_EncodeMarker)
#else
  NULL
#endif
};

// Method: EncodeMaxDestSize
static const ni::sParameterDef iBufferEncoder_EncodeMaxDestSize_Parameters[1] = { 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iBufferEncoder_EncodeMaxDestSize = {
  "EncodeMaxDestSize",
  0|ni::eType_Size, NULL, "tSize",
  1, iBufferEncoder_EncodeMaxDestSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferEncoder_EncodeMaxDestSize)
#else
  NULL
#endif
};

// Method: EncodeBuffer
static const ni::sParameterDef iBufferEncoder_EncodeBuffer_Parameters[4] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anDestSize", ni::eType_Size, NULL, "tSize" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iBufferEncoder_EncodeBuffer = {
  "EncodeBuffer",
  0|ni::eType_Size, NULL, "tSize",
  4, iBufferEncoder_EncodeBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferEncoder_EncodeBuffer)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iBufferEncoder[] = {
	&iBufferEncoder_EncodeMarker,
	&iBufferEncoder_EncodeMaxDestSize,
	&iBufferEncoder_EncodeBuffer,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iBufferEncoder[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iBufferEncoder = {
  niGetInterfaceID(iBufferEncoder),
  &niGetInterfaceUUID(iBufferEncoder),
  1,
  Parents_iBufferEncoder,
  niCountOf(Methods_iBufferEncoder),Methods_iBufferEncoder,
  NULL
};

	return &InterfaceDef_iBufferEncoder;
}

// End of iBufferEncoder wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iBufferDecoder wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iBufferDecoder() {

// Method: DecodeMarker
static const ni::sMethodDef iBufferDecoder_DecodeMarker = {
  "DecodeMarker",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferDecoder_DecodeMarker)
#else
  NULL
#endif
};

// Method: DecodeMaxDestSize
static const ni::sParameterDef iBufferDecoder_DecodeMaxDestSize_Parameters[1] = { 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iBufferDecoder_DecodeMaxDestSize = {
  "DecodeMaxDestSize",
  0|ni::eType_Size, NULL, "tSize",
  1, iBufferDecoder_DecodeMaxDestSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferDecoder_DecodeMaxDestSize)
#else
  NULL
#endif
};

// Method: DecodeBuffer
static const ni::sParameterDef iBufferDecoder_DecodeBuffer_Parameters[4] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anDestSize", ni::eType_Size, NULL, "tSize" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iBufferDecoder_DecodeBuffer = {
  "DecodeBuffer",
  0|ni::eType_Size, NULL, "tSize",
  4, iBufferDecoder_DecodeBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iBufferDecoder_DecodeBuffer)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iBufferDecoder[] = {
	&iBufferDecoder_DecodeMarker,
	&iBufferDecoder_DecodeMaxDestSize,
	&iBufferDecoder_DecodeBuffer,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iBufferDecoder[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iBufferDecoder = {
  niGetInterfaceID(iBufferDecoder),
  &niGetInterfaceUUID(iBufferDecoder),
  1,
  Parents_iBufferDecoder,
  niCountOf(Methods_iBufferDecoder),Methods_iBufferDecoder,
  NULL
};

	return &InterfaceDef_iBufferDecoder;
}

// End of iBufferDecoder wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFileSystemEnumerator wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFileSystemEnumerator() {

// Method: GetFileSystem
static const ni::sMethodDef iFileSystemEnumerator_GetFileSystem = {
  "GetFileSystem",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystem), "iFileSystem*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_GetFileSystem)
#else
  NULL
#endif
};

// Method: FindFirst
static const ni::sParameterDef iFileSystemEnumerator_FindFirst_Parameters[1] = { 
  { "aaszFilePattern", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystemEnumerator_FindFirst = {
  "FindFirst",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileSystemEnumerator_FindFirst_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_FindFirst)
#else
  NULL
#endif
};

// Method: FindNext
static const ni::sMethodDef iFileSystemEnumerator_FindNext = {
  "FindNext",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_FindNext)
#else
  NULL
#endif
};

// Method: GetFileName
static const ni::sMethodDef iFileSystemEnumerator_GetFileName = {
  "GetFileName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_GetFileName)
#else
  NULL
#endif
};

// Method: GetFileSize
static const ni::sMethodDef iFileSystemEnumerator_GetFileSize = {
  "GetFileSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_GetFileSize)
#else
  NULL
#endif
};

// Method: GetFileAttributes
static const ni::sMethodDef iFileSystemEnumerator_GetFileAttributes = {
  "GetFileAttributes",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tFileAttrFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_GetFileAttributes)
#else
  NULL
#endif
};

// Method: GetFileTime
static const ni::sMethodDef iFileSystemEnumerator_GetFileTime = {
  "GetFileTime",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystemEnumerator_GetFileTime)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFileSystemEnumerator[] = {
	&iFileSystemEnumerator_GetFileSystem,
	&iFileSystemEnumerator_FindFirst,
	&iFileSystemEnumerator_FindNext,
	&iFileSystemEnumerator_GetFileName,
	&iFileSystemEnumerator_GetFileSize,
	&iFileSystemEnumerator_GetFileAttributes,
	&iFileSystemEnumerator_GetFileTime,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFileSystemEnumerator[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFileSystemEnumerator = {
  niGetInterfaceID(iFileSystemEnumerator),
  &niGetInterfaceUUID(iFileSystemEnumerator),
  1,
  Parents_iFileSystemEnumerator,
  niCountOf(Methods_iFileSystemEnumerator),Methods_iFileSystemEnumerator,
  NULL
};

	return &InterfaceDef_iFileSystemEnumerator;
}

// End of iFileSystemEnumerator wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iFileSystem wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iFileSystem() {

// Method: GetRightsFlags
static const ni::sMethodDef iFileSystem_GetRightsFlags = {
  "GetRightsFlags",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tFileSystemRightsFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_GetRightsFlags)
#else
  NULL
#endif
};

// Method: GetBaseContainer
static const ni::sMethodDef iFileSystem_GetBaseContainer = {
  "GetBaseContainer",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_GetBaseContainer)
#else
  NULL
#endif
};

// Method: FileMakeDir
static const ni::sParameterDef iFileSystem_FileMakeDir_Parameters[1] = { 
  { "aszDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileMakeDir = {
  "FileMakeDir",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileSystem_FileMakeDir_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileMakeDir)
#else
  NULL
#endif
};

// Method: FileDeleteDir
static const ni::sParameterDef iFileSystem_FileDeleteDir_Parameters[1] = { 
  { "aszDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileDeleteDir = {
  "FileDeleteDir",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileSystem_FileDeleteDir_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileDeleteDir)
#else
  NULL
#endif
};

// Method: FileCopy
static const ni::sParameterDef iFileSystem_FileCopy_Parameters[2] = { 
  { "aszDest", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszSrc", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileCopy = {
  "FileCopy",
  0|ni::eType_I8, NULL, "tBool",
  2, iFileSystem_FileCopy_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileCopy)
#else
  NULL
#endif
};

// Method: FileMove
static const ni::sParameterDef iFileSystem_FileMove_Parameters[2] = { 
  { "aszDest", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszSrc", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileMove = {
  "FileMove",
  0|ni::eType_I8, NULL, "tBool",
  2, iFileSystem_FileMove_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileMove)
#else
  NULL
#endif
};

// Method: FileDelete
static const ni::sParameterDef iFileSystem_FileDelete_Parameters[1] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileDelete = {
  "FileDelete",
  0|ni::eType_I8, NULL, "tBool",
  1, iFileSystem_FileDelete_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileDelete)
#else
  NULL
#endif
};

// Method: FileEnum
static const ni::sParameterDef iFileSystem_FileEnum_Parameters[3] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aAttribs", ni::eType_U32, NULL, "tU32" }, 
  { "pSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileEnumSink), "iFileEnumSink*" }
}; 
static const ni::sMethodDef iFileSystem_FileEnum = {
  "FileEnum",
  0|ni::eType_U32, NULL, "tU32",
  3, iFileSystem_FileEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileEnum)
#else
  NULL
#endif
};

// Method: FileExists
static const ni::sParameterDef iFileSystem_FileExists_Parameters[2] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aAttribs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iFileSystem_FileExists = {
  "FileExists",
  0|ni::eType_U32, NULL, "tU32",
  2, iFileSystem_FileExists_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileExists)
#else
  NULL
#endif
};

// Method: FileSize
static const ni::sParameterDef iFileSystem_FileSize_Parameters[1] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_FileSize = {
  "FileSize",
  0|ni::eType_I64, NULL, "tI64",
  1, iFileSystem_FileSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileSize)
#else
  NULL
#endif
};

// Method: FileOpen
static const ni::sParameterDef iFileSystem_FileOpen_Parameters[2] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aMode", ni::eType_Enum, NULL, "eFileOpenMode" }
}; 
static const ni::sMethodDef iFileSystem_FileOpen = {
  "FileOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iFileSystem_FileOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileOpen)
#else
  NULL
#endif
};

// Method: FileBaseOpen
static const ni::sParameterDef iFileSystem_FileBaseOpen_Parameters[2] = { 
  { "aszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aMode", ni::eType_Enum, NULL, "eFileOpenMode" }
}; 
static const ni::sMethodDef iFileSystem_FileBaseOpen = {
  "FileBaseOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  2, iFileSystem_FileBaseOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_FileBaseOpen)
#else
  NULL
#endif
};

// Method: GetAbsolutePath
static const ni::sParameterDef iFileSystem_GetAbsolutePath_Parameters[1] = { 
  { "aaszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iFileSystem_GetAbsolutePath = {
  "GetAbsolutePath",
  0|ni::eType_String, NULL, "cString",
  1, iFileSystem_GetAbsolutePath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_GetAbsolutePath)
#else
  NULL
#endif
};

// Method: CreateEnumerator
static const ni::sMethodDef iFileSystem_CreateEnumerator = {
  "CreateEnumerator",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystemEnumerator), "iFileSystemEnumerator*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iFileSystem_CreateEnumerator)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iFileSystem[] = {
	&iFileSystem_GetRightsFlags,
	&iFileSystem_GetBaseContainer,
	&iFileSystem_FileMakeDir,
	&iFileSystem_FileDeleteDir,
	&iFileSystem_FileCopy,
	&iFileSystem_FileMove,
	&iFileSystem_FileDelete,
	&iFileSystem_FileEnum,
	&iFileSystem_FileExists,
	&iFileSystem_FileSize,
	&iFileSystem_FileOpen,
	&iFileSystem_FileBaseOpen,
	&iFileSystem_GetAbsolutePath,
	&iFileSystem_CreateEnumerator,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iFileSystem[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iFileSystem = {
  niGetInterfaceID(iFileSystem),
  &niGetInterfaceUUID(iFileSystem),
  1,
  Parents_iFileSystem,
  niCountOf(Methods_iFileSystem),Methods_iFileSystem,
  NULL
};

	return &InterfaceDef_iFileSystem;
}

// End of iFileSystem wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iGameCtrl wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iGameCtrl() {

// Method: Update
static const ni::sMethodDef iGameCtrl_Update = {
  "Update",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_Update)
#else
  NULL
#endif
};

// Method: GetIsConnected
static const ni::sMethodDef iGameCtrl_GetIsConnected = {
  "GetIsConnected",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetIsConnected)
#else
  NULL
#endif
};

// Method: GetName
static const ni::sMethodDef iGameCtrl_GetName = {
  "GetName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetName)
#else
  NULL
#endif
};

// Method: GetIndex
static const ni::sMethodDef iGameCtrl_GetIndex = {
  "GetIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetIndex)
#else
  NULL
#endif
};

// Method: GetNumButtons
static const ni::sMethodDef iGameCtrl_GetNumButtons = {
  "GetNumButtons",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetNumButtons)
#else
  NULL
#endif
};

// Method: GetButton
static const ni::sParameterDef iGameCtrl_GetButton_Parameters[1] = { 
  { "ulButton", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iGameCtrl_GetButton = {
  "GetButton",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  1, iGameCtrl_GetButton_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetButton)
#else
  NULL
#endif
};

// Method: GetNumAxis
static const ni::sMethodDef iGameCtrl_GetNumAxis = {
  "GetNumAxis",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetNumAxis)
#else
  NULL
#endif
};

// Method: GetAxis
static const ni::sParameterDef iGameCtrl_GetAxis_Parameters[1] = { 
  { "axis", ni::eType_Enum, NULL, "eGameCtrlAxis" }
}; 
static const ni::sMethodDef iGameCtrl_GetAxis = {
  "GetAxis",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  1, iGameCtrl_GetAxis_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetAxis)
#else
  NULL
#endif
};

// Method: GetCanVibrate
static const ni::sMethodDef iGameCtrl_GetCanVibrate = {
  "GetCanVibrate",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetCanVibrate)
#else
  NULL
#endif
};

// Method: Vibrate
static const ni::sParameterDef iGameCtrl_Vibrate_Parameters[1] = { 
  { "aSpeed", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iGameCtrl_Vibrate = {
  "Vibrate",
  0|ni::eType_Null, NULL, "void",
  1, iGameCtrl_Vibrate_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_Vibrate)
#else
  NULL
#endif
};

// Method: GetHasBattery
static const ni::sMethodDef iGameCtrl_GetHasBattery = {
  "GetHasBattery",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetHasBattery)
#else
  NULL
#endif
};

// Method: GetBatteryLevel
static const ni::sMethodDef iGameCtrl_GetBatteryLevel = {
  "GetBatteryLevel",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iGameCtrl_GetBatteryLevel)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iGameCtrl[] = {
	&iGameCtrl_Update,
	&iGameCtrl_GetIsConnected,
	&iGameCtrl_GetName,
	&iGameCtrl_GetIndex,
	&iGameCtrl_GetNumButtons,
	&iGameCtrl_GetButton,
	&iGameCtrl_GetNumAxis,
	&iGameCtrl_GetAxis,
	&iGameCtrl_GetCanVibrate,
	&iGameCtrl_Vibrate,
	&iGameCtrl_GetHasBattery,
	&iGameCtrl_GetBatteryLevel,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iGameCtrl : public ni::cIUnknownImpl<ni::iGameCtrl,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iGameCtrl(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iGameCtrl() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iGameCtrl))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iGameCtrl));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iGameCtrl::Update
  tBool __stdcall Update() {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_Update,0,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_Update.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (1): iGameCtrl::GetIsConnected
  tBool __stdcall GetIsConnected() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetIsConnected,1,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetIsConnected.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (2): iGameCtrl::GetName
  const achar * __stdcall GetName() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetName,2,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetName.mReturnType,ni::eFalse)) {
        return _var_.GetACharConstPointer();
      }
    }
    return AZEROSTR;
	}

  // Method (3): iGameCtrl::GetIndex
  tU32 __stdcall GetIndex() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetIndex,3,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetIndex.mReturnType,ni::eFalse)) {
        return _var_.GetU32();
      }
    }
    return 0;
	}

  // Method (4): iGameCtrl::GetNumButtons
  tU32 __stdcall GetNumButtons() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetNumButtons,4,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetNumButtons.mReturnType,ni::eFalse)) {
        return _var_.GetU32();
      }
    }
    return 0;
	}

  // Method (5): iGameCtrl::GetButton
  tF32 __stdcall GetButton(tU32 ulButton) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = ulButton;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetButton,5,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetButton.mReturnType,ni::eFalse)) {
        return _var_.GetF32();
      }
    }
    return 0;
	}

  // Method (6): iGameCtrl::GetNumAxis
  tU32 __stdcall GetNumAxis() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetNumAxis,6,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetNumAxis.mReturnType,ni::eFalse)) {
        return _var_.GetU32();
      }
    }
    return 0;
	}

  // Method (7): iGameCtrl::GetAxis
  tF32 __stdcall GetAxis(eGameCtrlAxis axis) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = (ni::tU32)axis;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetAxis,7,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetAxis.mReturnType,ni::eFalse)) {
        return _var_.GetF32();
      }
    }
    return 0;
	}

  // Method (8): iGameCtrl::GetCanVibrate
  tBool __stdcall GetCanVibrate() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetCanVibrate,8,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetCanVibrate.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (9): iGameCtrl::Vibrate
  void __stdcall Vibrate(const sVec2f & aSpeed) {
    ni::Var _params_[1];
    _params_[0] = aSpeed;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_Vibrate,9,_params_,1,NULL);
	}

  // Method (10): iGameCtrl::GetHasBattery
  tBool __stdcall GetHasBattery() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetHasBattery,10,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetHasBattery.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (11): iGameCtrl::GetBatteryLevel
  tF32 __stdcall GetBatteryLevel() const {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iGameCtrl_GetBatteryLevel,11,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iGameCtrl_GetBatteryLevel.mReturnType,ni::eFalse)) {
        return _var_.GetF32();
      }
    }
    return 0;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iGameCtrl, niCountOf(Methods_iGameCtrl))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iGameCtrl"));
      return NULL;
    }
		return niNew DispatchWrapper_iGameCtrl(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iGameCtrl[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iGameCtrl = {
  niGetInterfaceID(iGameCtrl),
  &niGetInterfaceUUID(iGameCtrl),
  1,
  Parents_iGameCtrl,
  niCountOf(Methods_iGameCtrl),Methods_iGameCtrl,
  DispatchWrapper_iGameCtrl::Create
};

	return &InterfaceDef_iGameCtrl;
}

// End of iGameCtrl wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iHString wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iHString() {

// Method: GetChars
static const ni::sMethodDef iHString_GetChars = {
  "GetChars",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_GetChars)
#else
  NULL
#endif
};

// Method: GetLength
static const ni::sMethodDef iHString_GetLength = {
  "GetLength",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_GetLength)
#else
  NULL
#endif
};

// Method: Cmp
static const ni::sParameterDef iHString_Cmp_Parameters[1] = { 
  { "ahspString", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "const iHString*" }
}; 
static const ni::sMethodDef iHString_Cmp = {
  "Cmp",
  0|ni::eType_I32, NULL, "tI32",
  1, iHString_Cmp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_Cmp)
#else
  NULL
#endif
};

// Method: ICmp
static const ni::sParameterDef iHString_ICmp_Parameters[1] = { 
  { "ahspString", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "const iHString*" }
}; 
static const ni::sMethodDef iHString_ICmp = {
  "ICmp",
  0|ni::eType_I32, NULL, "tI32",
  1, iHString_ICmp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_ICmp)
#else
  NULL
#endif
};

// Method: GetLocalized
static const ni::sMethodDef iHString_GetLocalized = {
  "GetLocalized",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_GetLocalized)
#else
  NULL
#endif
};

// Method: GetLocalizedEx
static const ni::sParameterDef iHString_GetLocalizedEx_Parameters[1] = { 
  { "locale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iHString_GetLocalizedEx = {
  "GetLocalizedEx",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  1, iHString_GetLocalizedEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_GetLocalizedEx)
#else
  NULL
#endif
};

// Method: IsLocalized
static const ni::sParameterDef iHString_IsLocalized_Parameters[1] = { 
  { "locale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iHString_IsLocalized = {
  "IsLocalized",
  0|ni::eType_I8, NULL, "tBool",
  1, iHString_IsLocalized_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_IsLocalized)
#else
  NULL
#endif
};

// Method: CreateCharIt
static const ni::sParameterDef iHString_CreateCharIt_Parameters[1] = { 
  { "offset", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHString_CreateCharIt = {
  "CreateCharIt",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHStringCharIt), "iHStringCharIt*",
  1, iHString_CreateCharIt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_CreateCharIt)
#else
  NULL
#endif
};

// Method: CreateRangeIt
static const ni::sParameterDef iHString_CreateRangeIt_Parameters[2] = { 
  { "offset", ni::eType_U32, NULL, "tU32" }, 
  { "size", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHString_CreateRangeIt = {
  "CreateRangeIt",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHStringCharIt), "iHStringCharIt*",
  2, iHString_CreateRangeIt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHString_CreateRangeIt)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iHString[] = {
	&iHString_GetChars,
	&iHString_GetLength,
	&iHString_Cmp,
	&iHString_ICmp,
	&iHString_GetLocalized,
	&iHString_GetLocalizedEx,
	&iHString_IsLocalized,
	&iHString_CreateCharIt,
	&iHString_CreateRangeIt,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iHString[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iHString = {
  niGetInterfaceID(iHString),
  &niGetInterfaceUUID(iHString),
  1,
  Parents_iHString,
  niCountOf(Methods_iHString),Methods_iHString,
  NULL
};

	return &InterfaceDef_iHString;
}

// End of iHString wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iHStringCharIt wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iHStringCharIt() {

// Method: GetString
static const ni::sMethodDef iHStringCharIt_GetString = {
  "GetString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetString)
#else
  NULL
#endif
};

// Method: Clone
static const ni::sMethodDef iHStringCharIt_Clone = {
  "Clone",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHStringCharIt), "iHStringCharIt*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_Clone)
#else
  NULL
#endif
};

// Method: GetIsStart
static const ni::sMethodDef iHStringCharIt_GetIsStart = {
  "GetIsStart",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetIsStart)
#else
  NULL
#endif
};

// Method: GetIsEnd
static const ni::sMethodDef iHStringCharIt_GetIsEnd = {
  "GetIsEnd",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetIsEnd)
#else
  NULL
#endif
};

// Method: GetPosition
static const ni::sMethodDef iHStringCharIt_GetPosition = {
  "GetPosition",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetPosition)
#else
  NULL
#endif
};

// Method: ToStart
static const ni::sMethodDef iHStringCharIt_ToStart = {
  "ToStart",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_ToStart)
#else
  NULL
#endif
};

// Method: ToEnd
static const ni::sMethodDef iHStringCharIt_ToEnd = {
  "ToEnd",
  0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_ToEnd)
#else
  NULL
#endif
};

// Method: GetNumChars
static const ni::sMethodDef iHStringCharIt_GetNumChars = {
  "GetNumChars",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetNumChars)
#else
  NULL
#endif
};

// Method: GetNumBytes
static const ni::sMethodDef iHStringCharIt_GetNumBytes = {
  "GetNumBytes",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Size, NULL, "tSize",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_GetNumBytes)
#else
  NULL
#endif
};

// Method: PeekNext
static const ni::sMethodDef iHStringCharIt_PeekNext = {
  "PeekNext",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_PeekNext)
#else
  NULL
#endif
};

// Method: Next
static const ni::sMethodDef iHStringCharIt_Next = {
  "Next",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_Next)
#else
  NULL
#endif
};

// Method: PeekPrior
static const ni::sMethodDef iHStringCharIt_PeekPrior = {
  "PeekPrior",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_PeekPrior)
#else
  NULL
#endif
};

// Method: Prior
static const ni::sMethodDef iHStringCharIt_Prior = {
  "Prior",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_Prior)
#else
  NULL
#endif
};

// Method: PeekAdvance
static const ni::sParameterDef iHStringCharIt_PeekAdvance_Parameters[1] = { 
  { "fwd", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHStringCharIt_PeekAdvance = {
  "PeekAdvance",
  0|ni::eType_U32, NULL, "tU32",
  1, iHStringCharIt_PeekAdvance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_PeekAdvance)
#else
  NULL
#endif
};

// Method: Advance
static const ni::sParameterDef iHStringCharIt_Advance_Parameters[1] = { 
  { "n", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHStringCharIt_Advance = {
  "Advance",
  0|ni::eType_U32, NULL, "tU32",
  1, iHStringCharIt_Advance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_Advance)
#else
  NULL
#endif
};

// Method: PeekRewind
static const ni::sParameterDef iHStringCharIt_PeekRewind_Parameters[1] = { 
  { "back", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHStringCharIt_PeekRewind = {
  "PeekRewind",
  0|ni::eType_U32, NULL, "tU32",
  1, iHStringCharIt_PeekRewind_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_PeekRewind)
#else
  NULL
#endif
};

// Method: Rewind
static const ni::sParameterDef iHStringCharIt_Rewind_Parameters[1] = { 
  { "n", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHStringCharIt_Rewind = {
  "Rewind",
  0|ni::eType_U32, NULL, "tU32",
  1, iHStringCharIt_Rewind_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_Rewind)
#else
  NULL
#endif
};

// Method: ToPosition
static const ni::sParameterDef iHStringCharIt_ToPosition_Parameters[1] = { 
  { "anOffsetInBytes", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iHStringCharIt_ToPosition = {
  "ToPosition",
  0|ni::eType_Null, NULL, "void",
  1, iHStringCharIt_ToPosition_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iHStringCharIt_ToPosition)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iHStringCharIt[] = {
	&iHStringCharIt_GetString,
	&iHStringCharIt_Clone,
	&iHStringCharIt_GetIsStart,
	&iHStringCharIt_GetIsEnd,
	&iHStringCharIt_GetPosition,
	&iHStringCharIt_ToStart,
	&iHStringCharIt_ToEnd,
	&iHStringCharIt_GetNumChars,
	&iHStringCharIt_GetNumBytes,
	&iHStringCharIt_PeekNext,
	&iHStringCharIt_Next,
	&iHStringCharIt_PeekPrior,
	&iHStringCharIt_Prior,
	&iHStringCharIt_PeekAdvance,
	&iHStringCharIt_Advance,
	&iHStringCharIt_PeekRewind,
	&iHStringCharIt_Rewind,
	&iHStringCharIt_ToPosition,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iHStringCharIt[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iHStringCharIt = {
  niGetInterfaceID(iHStringCharIt),
  &niGetInterfaceUUID(iHStringCharIt),
  1,
  Parents_iHStringCharIt,
  niCountOf(Methods_iHStringCharIt),Methods_iHStringCharIt,
  NULL
};

	return &InterfaceDef_iHStringCharIt;
}

// End of iHStringCharIt wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iJsonParserSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(20)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iJsonParserSink() {

#if niMinFeatures(20)
// Method: OnJsonParserSink_Error
static const ni::sParameterDef iJsonParserSink_OnJsonParserSink_Error_Parameters[3] = { 
  { "aaszReason", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "anLine", ni::eType_U32, NULL, "tU32" }, 
  { "anCol", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iJsonParserSink_OnJsonParserSink_Error = {
  "OnJsonParserSink_Error",
  0|ni::eType_Null, NULL, "void",
  3, iJsonParserSink_OnJsonParserSink_Error_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonParserSink_OnJsonParserSink_Error)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: OnJsonParserSink_Value
static const ni::sParameterDef iJsonParserSink_OnJsonParserSink_Value_Parameters[2] = { 
  { "aType", ni::eType_Enum, NULL, "eJsonType" }, 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonParserSink_OnJsonParserSink_Value = {
  "OnJsonParserSink_Value",
  0|ni::eType_Null, NULL, "void",
  2, iJsonParserSink_OnJsonParserSink_Value_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonParserSink_OnJsonParserSink_Value)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

static const ni::sMethodDef* Methods_iJsonParserSink[] = {
#if niMinFeatures(20)
	&iJsonParserSink_OnJsonParserSink_Error,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonParserSink_OnJsonParserSink_Value,
#endif // niMinFeatures(20)

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iJsonParserSink : public ni::cIUnknownImpl<ni::iJsonParserSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iJsonParserSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iJsonParserSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iJsonParserSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iJsonParserSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iJsonParserSink::OnJsonParserSink_Error
  void __stdcall OnJsonParserSink_Error(const achar * aaszReason, tU32 anLine, tU32 anCol) {
    ni::Var _params_[3];
    _params_[0] = aaszReason;
    _params_[1] = anLine;
    _params_[2] = anCol;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iJsonParserSink_OnJsonParserSink_Error,0,_params_,3,NULL);
	}

  // Method (1): iJsonParserSink::OnJsonParserSink_Value
  void __stdcall OnJsonParserSink_Value(eJsonType aType, const achar * aValue) {
    ni::Var _params_[2];
    _params_[0] = (ni::tU32)aType;
    _params_[1] = aValue;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iJsonParserSink_OnJsonParserSink_Value,1,_params_,2,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iJsonParserSink, niCountOf(Methods_iJsonParserSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iJsonParserSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iJsonParserSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iJsonParserSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iJsonParserSink = {
  niGetInterfaceID(iJsonParserSink),
  &niGetInterfaceUUID(iJsonParserSink),
  1,
  Parents_iJsonParserSink,
  niCountOf(Methods_iJsonParserSink),Methods_iJsonParserSink,
  DispatchWrapper_iJsonParserSink::Create
};

	return &InterfaceDef_iJsonParserSink;
}

// End of iJsonParserSink wrapper
#endif // niMinFeatures(20)


//////////////////////////////////////////////////////////////////////////////////////////////
// iJsonWriterSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(20)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iJsonWriterSink() {

#if niMinFeatures(20)
// Method: OnJsonWriterSink_Error
static const ni::sParameterDef iJsonWriterSink_OnJsonWriterSink_Error_Parameters[1] = { 
  { "aaszReason", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriterSink_OnJsonWriterSink_Error = {
  "OnJsonWriterSink_Error",
  0|ni::eType_Null, NULL, "void",
  1, iJsonWriterSink_OnJsonWriterSink_Error_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriterSink_OnJsonWriterSink_Error)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: OnJsonWriterSink_Write
static const ni::sParameterDef iJsonWriterSink_OnJsonWriterSink_Write_Parameters[2] = { 
  { "aValue", ni::eType_Enum, NULL, "eJsonType" }, 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriterSink_OnJsonWriterSink_Write = {
  "OnJsonWriterSink_Write",
  0|ni::eType_I8, NULL, "tBool",
  2, iJsonWriterSink_OnJsonWriterSink_Write_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriterSink_OnJsonWriterSink_Write)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

static const ni::sMethodDef* Methods_iJsonWriterSink[] = {
#if niMinFeatures(20)
	&iJsonWriterSink_OnJsonWriterSink_Error,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriterSink_OnJsonWriterSink_Write,
#endif // niMinFeatures(20)

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iJsonWriterSink : public ni::cIUnknownImpl<ni::iJsonWriterSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iJsonWriterSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iJsonWriterSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iJsonWriterSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iJsonWriterSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iJsonWriterSink::OnJsonWriterSink_Error
  void __stdcall OnJsonWriterSink_Error(const achar * aaszReason) {
    ni::Var _params_[1];
    _params_[0] = aaszReason;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iJsonWriterSink_OnJsonWriterSink_Error,0,_params_,1,NULL);
	}

  // Method (1): iJsonWriterSink::OnJsonWriterSink_Write
  tBool __stdcall OnJsonWriterSink_Write(eJsonType aValue, const achar * aaszString) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = (ni::tU32)aValue;
    _params_[1] = aaszString;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iJsonWriterSink_OnJsonWriterSink_Write,1,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iJsonWriterSink_OnJsonWriterSink_Write.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iJsonWriterSink, niCountOf(Methods_iJsonWriterSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iJsonWriterSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iJsonWriterSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iJsonWriterSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iJsonWriterSink = {
  niGetInterfaceID(iJsonWriterSink),
  &niGetInterfaceUUID(iJsonWriterSink),
  1,
  Parents_iJsonWriterSink,
  niCountOf(Methods_iJsonWriterSink),Methods_iJsonWriterSink,
  DispatchWrapper_iJsonWriterSink::Create
};

	return &InterfaceDef_iJsonWriterSink;
}

// End of iJsonWriterSink wrapper
#endif // niMinFeatures(20)


//////////////////////////////////////////////////////////////////////////////////////////////
// iJsonWriter wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(20)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iJsonWriter() {

#if niMinFeatures(20)
// Method: Reset
static const ni::sMethodDef iJsonWriter_Reset = {
  "Reset",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_Reset)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ArrayBegin
static const ni::sMethodDef iJsonWriter_ArrayBegin = {
  "ArrayBegin",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ArrayBegin)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ArrayEnd
static const ni::sMethodDef iJsonWriter_ArrayEnd = {
  "ArrayEnd",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ArrayEnd)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectBegin
static const ni::sMethodDef iJsonWriter_ObjectBegin = {
  "ObjectBegin",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectBegin)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectEnd
static const ni::sMethodDef iJsonWriter_ObjectEnd = {
  "ObjectEnd",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectEnd)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: Name
static const ni::sParameterDef iJsonWriter_Name_Parameters[1] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_Name = {
  "Name",
  0|ni::eType_I8, NULL, "tBool",
  1, iJsonWriter_Name_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_Name)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ValueString
static const ni::sParameterDef iJsonWriter_ValueString_Parameters[1] = { 
  { "aStr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_ValueString = {
  "ValueString",
  0|ni::eType_I8, NULL, "tBool",
  1, iJsonWriter_ValueString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ValueString)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ValueNumber
static const ni::sParameterDef iJsonWriter_ValueNumber_Parameters[1] = { 
  { "aStr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_ValueNumber = {
  "ValueNumber",
  0|ni::eType_I8, NULL, "tBool",
  1, iJsonWriter_ValueNumber_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ValueNumber)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ValueBool
static const ni::sParameterDef iJsonWriter_ValueBool_Parameters[1] = { 
  { "abItem", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iJsonWriter_ValueBool = {
  "ValueBool",
  0|ni::eType_I8, NULL, "tBool",
  1, iJsonWriter_ValueBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ValueBool)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ValueNull
static const ni::sMethodDef iJsonWriter_ValueNull = {
  "ValueNull",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ValueNull)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectString
static const ni::sParameterDef iJsonWriter_ObjectString_Parameters[2] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aStr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_ObjectString = {
  "ObjectString",
  0|ni::eType_I8, NULL, "tBool",
  2, iJsonWriter_ObjectString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectString)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectNumber
static const ni::sParameterDef iJsonWriter_ObjectNumber_Parameters[2] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aStr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_ObjectNumber = {
  "ObjectNumber",
  0|ni::eType_I8, NULL, "tBool",
  2, iJsonWriter_ObjectNumber_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectNumber)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectBool
static const ni::sParameterDef iJsonWriter_ObjectBool_Parameters[2] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "abValue", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iJsonWriter_ObjectBool = {
  "ObjectBool",
  0|ni::eType_I8, NULL, "tBool",
  2, iJsonWriter_ObjectBool_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectBool)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: ObjectNull
static const ni::sParameterDef iJsonWriter_ObjectNull_Parameters[1] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iJsonWriter_ObjectNull = {
  "ObjectNull",
  0|ni::eType_I8, NULL, "tBool",
  1, iJsonWriter_ObjectNull_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iJsonWriter_ObjectNull)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

static const ni::sMethodDef* Methods_iJsonWriter[] = {
#if niMinFeatures(20)
	&iJsonWriter_Reset,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ArrayBegin,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ArrayEnd,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectBegin,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectEnd,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_Name,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ValueString,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ValueNumber,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ValueBool,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ValueNull,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectString,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectNumber,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectBool,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iJsonWriter_ObjectNull,
#endif // niMinFeatures(20)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iJsonWriter[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iJsonWriter = {
  niGetInterfaceID(iJsonWriter),
  &niGetInterfaceUUID(iJsonWriter),
  1,
  Parents_iJsonWriter,
  niCountOf(Methods_iJsonWriter),Methods_iJsonWriter,
  NULL
};

	return &InterfaceDef_iJsonWriter;
}

// End of iJsonWriter wrapper
#endif // niMinFeatures(20)


//////////////////////////////////////////////////////////////////////////////////////////////
// iLang wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iLang() {

#if niMinFeatures(15)
// Method: GetProcessManager
static const ni::sMethodDef iLang_GetProcessManager = {
  "GetProcessManager",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcessManager), "iOSProcessManager*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetProcessManager)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

// Method: Exit
static const ni::sParameterDef iLang_Exit_Parameters[1] = { 
  { "aulErrorCode", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_Exit = {
  "Exit",
  0|ni::eType_Null, NULL, "void",
  1, iLang_Exit_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_Exit)
#else
  NULL
#endif
};

// Method: OnExit
static const ni::sParameterDef iLang_OnExit_Parameters[1] = { 
  { "apRunnable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iRunnable), "iRunnable*" }
}; 
static const ni::sMethodDef iLang_OnExit = {
  "OnExit",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_OnExit_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_OnExit)
#else
  NULL
#endif
};

// Method: FatalError
static const ni::sParameterDef iLang_FatalError_Parameters[1] = { 
  { "aszMsg", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_FatalError = {
  "FatalError",
  0|ni::eType_Null, NULL, "void",
  1, iLang_FatalError_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_FatalError)
#else
  NULL
#endif
};

// Method: SetEnv
static const ni::sParameterDef iLang_SetEnv_Parameters[2] = { 
  { "aaszEnv", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_SetEnv = {
  "SetEnv",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iLang_SetEnv_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetEnv)
#else
  NULL
#endif
};

// Method: GetEnv
static const ni::sParameterDef iLang_GetEnv_Parameters[1] = { 
  { "aaszEnv", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_GetEnv = {
  "GetEnv",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iLang_GetEnv_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetEnv)
#else
  NULL
#endif
};

// Method: GetProperties
static const ni::sMethodDef iLang_GetProperties = {
  "GetProperties",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCMap*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetProperties)
#else
  NULL
#endif
};

// Method: HasProperty
static const ni::sParameterDef iLang_HasProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_HasProperty = {
  "HasProperty",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_HasProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_HasProperty)
#else
  NULL
#endif
};

// Method: SetProperty
static const ni::sParameterDef iLang_SetProperty_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_SetProperty = {
  "SetProperty",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Null, NULL, "void",
  2, iLang_SetProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetProperty)
#else
  NULL
#endif
};

// Method: GetProperty
static const ni::sParameterDef iLang_GetProperty_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_GetProperty = {
  "GetProperty",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iLang_GetProperty_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetProperty)
#else
  NULL
#endif
};

// Method: RegisterModuleDef
static const ni::sParameterDef iLang_RegisterModuleDef_Parameters[1] = { 
  { "apDef", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iModuleDef), "const iModuleDef*" }
}; 
static const ni::sMethodDef iLang_RegisterModuleDef = {
  "RegisterModuleDef",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_RegisterModuleDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_RegisterModuleDef)
#else
  NULL
#endif
};

// Method: GetNumModuleDefs
static const ni::sMethodDef iLang_GetNumModuleDefs = {
  "GetNumModuleDefs",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetNumModuleDefs)
#else
  NULL
#endif
};

// Method: GetModuleDef
static const ni::sParameterDef iLang_GetModuleDef_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetModuleDef = {
  "GetModuleDef",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iModuleDef), "const iModuleDef*",
  1, iLang_GetModuleDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetModuleDef)
#else
  NULL
#endif
};

// Method: GetModuleDefIndex
static const ni::sParameterDef iLang_GetModuleDefIndex_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_GetModuleDefIndex = {
  "GetModuleDefIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iLang_GetModuleDefIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetModuleDefIndex)
#else
  NULL
#endif
};

// Method: LoadModuleDef
static const ni::sParameterDef iLang_LoadModuleDef_Parameters[2] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_LoadModuleDef = {
  "LoadModuleDef",
  0|ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iModuleDef), "const iModuleDef*",
  2, iLang_LoadModuleDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_LoadModuleDef)
#else
  NULL
#endif
};

// Method: GetCreateInstanceMap
static const ni::sMethodDef iLang_GetCreateInstanceMap = {
  "GetCreateInstanceMap",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tCreateInstanceCMap*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetCreateInstanceMap)
#else
  NULL
#endif
};

// Method: CreateInstance
static const ni::sParameterDef iLang_CreateInstance_Parameters[3] = { 
  { "aOID", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aVarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "aVarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iLang_CreateInstance = {
  "CreateInstance",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  3, iLang_CreateInstance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateInstance)
#else
  NULL
#endif
};

// Method: GetGlobalInstanceMap
static const ni::sMethodDef iLang_GetGlobalInstanceMap = {
  "GetGlobalInstanceMap",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tGlobalInstanceCMap*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetGlobalInstanceMap)
#else
  NULL
#endif
};

// Method: SetGlobalInstance
static const ni::sParameterDef iLang_SetGlobalInstance_Parameters[2] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apInstance", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iLang_SetGlobalInstance = {
  "SetGlobalInstance",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "tBool",
  2, iLang_SetGlobalInstance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetGlobalInstance)
#else
  NULL
#endif
};

// Method: GetGlobalInstance
static const ni::sParameterDef iLang_GetGlobalInstance_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_GetGlobalInstance = {
  "GetGlobalInstance",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  1, iLang_GetGlobalInstance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetGlobalInstance)
#else
  NULL
#endif
};

// Method: RegisterEnumDef
static const ni::sParameterDef iLang_RegisterEnumDef_Parameters[1] = { 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }
}; 
static const ni::sMethodDef iLang_RegisterEnumDef = {
  "RegisterEnumDef",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_RegisterEnumDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_RegisterEnumDef)
#else
  NULL
#endif
};

// Method: GetEnumDef
static const ni::sParameterDef iLang_GetEnumDef_Parameters[1] = { 
  { "aEID", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_GetEnumDef = {
  "GetEnumDef",
  0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*",
  1, iLang_GetEnumDef_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetEnumDef)
#else
  NULL
#endif
};

// Method: GetInterfaceName
static const ni::sParameterDef iLang_GetInterfaceName_Parameters[1] = { 
  { "aUUID", ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer, NULL, "const tUUID&" }
}; 
static const ni::sMethodDef iLang_GetInterfaceName = {
  "GetInterfaceName",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  1, iLang_GetInterfaceName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetInterfaceName)
#else
  NULL
#endif
};

// Method: GetInterfaceUUID
static const ni::sParameterDef iLang_GetInterfaceUUID_Parameters[1] = { 
  { "ahspStr", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_GetInterfaceUUID = {
  "GetInterfaceUUID",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer, NULL, "const tUUID&",
  1, iLang_GetInterfaceUUID_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetInterfaceUUID)
#else
  NULL
#endif
};

// Method: GetInterfaceDefFromUUID
static const ni::sParameterDef iLang_GetInterfaceDefFromUUID_Parameters[1] = { 
  { "aUUID", ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer, NULL, "const tUUID&" }
}; 
static const ni::sMethodDef iLang_GetInterfaceDefFromUUID = {
  "GetInterfaceDefFromUUID",
  0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sInterfaceDef*",
  1, iLang_GetInterfaceDefFromUUID_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetInterfaceDefFromUUID)
#else
  NULL
#endif
};

// Method: SetDefaultLocale
static const ni::sParameterDef iLang_SetDefaultLocale_Parameters[1] = { 
  { "ahspLocale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_SetDefaultLocale = {
  "SetDefaultLocale",
  ni::eTypeFlags_MethodSetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "void",
  1, iLang_SetDefaultLocale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetDefaultLocale)
#else
  NULL
#endif
};

// Method: GetDefaultLocale
static const ni::sMethodDef iLang_GetDefaultLocale = {
  "GetDefaultLocale",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetDefaultLocale)
#else
  NULL
#endif
};

// Method: GetNumLocales
static const ni::sMethodDef iLang_GetNumLocales = {
  "GetNumLocales",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetNumLocales)
#else
  NULL
#endif
};

// Method: GetLocale
static const ni::sParameterDef iLang_GetLocale_Parameters[1] = { 
  { "abIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetLocale = {
  "GetLocale",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  1, iLang_GetLocale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetLocale)
#else
  NULL
#endif
};

// Method: ClearLocalization
static const ni::sParameterDef iLang_ClearLocalization_Parameters[1] = { 
  { "ahspLocale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_ClearLocalization = {
  "ClearLocalization",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_ClearLocalization_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_ClearLocalization)
#else
  NULL
#endif
};

// Method: SetLocalization
static const ni::sParameterDef iLang_SetLocalization_Parameters[3] = { 
  { "ahspLocale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "ahspNative", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "ahspLocalized", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_SetLocalization = {
  "SetLocalization",
  0|ni::eType_I8, NULL, "tBool",
  3, iLang_SetLocalization_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetLocalization)
#else
  NULL
#endif
};

// Method: SetLocalizationMap
static const ni::sParameterDef iLang_SetLocalizationMap_Parameters[2] = { 
  { "ahspLocale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "apLocalizationMap", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCMap*" }
}; 
static const ni::sMethodDef iLang_SetLocalizationMap = {
  "SetLocalizationMap",
  0|ni::eType_I8, NULL, "tBool",
  2, iLang_SetLocalizationMap_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetLocalizationMap)
#else
  NULL
#endif
};

// Method: GetLocalizationMap
static const ni::sParameterDef iLang_GetLocalizationMap_Parameters[2] = { 
  { "ahspLocale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "apLocalizedMap", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tStringCMap*" }
}; 
static const ni::sMethodDef iLang_GetLocalizationMap = {
  "GetLocalizationMap",
  0|ni::eType_U32, NULL, "tU32",
  2, iLang_GetLocalizationMap_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetLocalizationMap)
#else
  NULL
#endif
};

// Method: SetMarkMissingLocalization
static const ni::sParameterDef iLang_SetMarkMissingLocalization_Parameters[1] = { 
  { "abMarkMissing", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iLang_SetMarkMissingLocalization = {
  "SetMarkMissingLocalization",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iLang_SetMarkMissingLocalization_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetMarkMissingLocalization)
#else
  NULL
#endif
};

// Method: GetMarkMissingLocalization
static const ni::sMethodDef iLang_GetMarkMissingLocalization = {
  "GetMarkMissingLocalization",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMarkMissingLocalization)
#else
  NULL
#endif
};

// Method: GetMissingLocalization
static const ni::sParameterDef iLang_GetMissingLocalization_Parameters[1] = { 
  { "locale", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_GetMissingLocalization = {
  "GetMissingLocalization",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tStringCVec*",
  1, iLang_GetMissingLocalization_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMissingLocalization)
#else
  NULL
#endif
};

// Method: CreateLocalUUID
static const ni::sMethodDef iLang_CreateLocalUUID = {
  "CreateLocalUUID",
  0|ni::eType_UUID, NULL, "tUUID",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateLocalUUID)
#else
  NULL
#endif
};

// Method: CreateGlobalUUID
static const ni::sMethodDef iLang_CreateGlobalUUID = {
  "CreateGlobalUUID",
  0|ni::eType_UUID, NULL, "tUUID",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateGlobalUUID)
#else
  NULL
#endif
};

// Method: SetLogFilter
static const ni::sParameterDef iLang_SetLogFilter_Parameters[1] = { 
  { "exclude", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_SetLogFilter = {
  "SetLogFilter",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "void",
  1, iLang_SetLogFilter_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetLogFilter)
#else
  NULL
#endif
};

// Method: GetLogFilter
static const ni::sMethodDef iLang_GetLogFilter = {
  "GetLogFilter",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetLogFilter)
#else
  NULL
#endif
};

// Method: Log
static const ni::sParameterDef iLang_Log_Parameters[5] = { 
  { "type", ni::eType_Enum, NULL, "tLogFlags" }, 
  { "msg", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "file", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "line", ni::eType_U32, NULL, "tU32" }, 
  { "func", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_Log = {
  "Log",
  0|ni::eType_Null, NULL, "void",
  5, iLang_Log_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_Log)
#else
  NULL
#endif
};

// Method: GetRootFS
static const ni::sMethodDef iLang_GetRootFS = {
  "GetRootFS",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystem), "iFileSystem*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetRootFS)
#else
  NULL
#endif
};

// Method: CreateFileSystemDir
static const ni::sParameterDef iLang_CreateFileSystemDir_Parameters[2] = { 
  { "aaszDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aRights", ni::eType_Enum, NULL, "tFileSystemRightsFlags" }
}; 
static const ni::sMethodDef iLang_CreateFileSystemDir = {
  "CreateFileSystemDir",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystem), "iFileSystem*",
  2, iLang_CreateFileSystemDir_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileSystemDir)
#else
  NULL
#endif
};

// Method: CreateFileSystemHashed
static const ni::sParameterDef iLang_CreateFileSystemHashed_Parameters[1] = { 
  { "apFS", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystem), "const iFileSystem*" }
}; 
static const ni::sMethodDef iLang_CreateFileSystemHashed = {
  "CreateFileSystemHashed",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileSystem), "iFileSystem*",
  1, iLang_CreateFileSystemHashed_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileSystemHashed)
#else
  NULL
#endif
};

// Method: CreateFile
static const ni::sParameterDef iLang_CreateFile_Parameters[1] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }
}; 
static const ni::sMethodDef iLang_CreateFile = {
  "CreateFile",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  1, iLang_CreateFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFile)
#else
  NULL
#endif
};

// Method: CreateFileBaseWriteDummy
static const ni::sMethodDef iLang_CreateFileBaseWriteDummy = {
  "CreateFileBaseWriteDummy",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseWriteDummy)
#else
  NULL
#endif
};

// Method: CreateFileWriteDummy
static const ni::sMethodDef iLang_CreateFileWriteDummy = {
  "CreateFileWriteDummy",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileWriteDummy)
#else
  NULL
#endif
};

// Method: CreateFileBaseMemory
static const ni::sParameterDef iLang_CreateFileBaseMemory_Parameters[4] = { 
  { "apMem", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "abFree", ni::eType_I8, NULL, "tBool" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseMemory = {
  "CreateFileBaseMemory",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  4, iLang_CreateFileBaseMemory_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseMemory)
#else
  NULL
#endif
};

// Method: CreateFileMemory
static const ni::sParameterDef iLang_CreateFileMemory_Parameters[4] = { 
  { "apMem", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "abFree", ni::eType_I8, NULL, "tBool" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileMemory = {
  "CreateFileMemory",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  4, iLang_CreateFileMemory_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileMemory)
#else
  NULL
#endif
};

// Method: CreateFileBaseMemoryAlloc
static const ni::sParameterDef iLang_CreateFileBaseMemoryAlloc_Parameters[2] = { 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseMemoryAlloc = {
  "CreateFileBaseMemoryAlloc",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  2, iLang_CreateFileBaseMemoryAlloc_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseMemoryAlloc)
#else
  NULL
#endif
};

// Method: CreateFileMemoryAlloc
static const ni::sParameterDef iLang_CreateFileMemoryAlloc_Parameters[2] = { 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileMemoryAlloc = {
  "CreateFileMemoryAlloc",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iLang_CreateFileMemoryAlloc_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileMemoryAlloc)
#else
  NULL
#endif
};

// Method: CreateFileBaseDynamicMemory
static const ni::sParameterDef iLang_CreateFileBaseDynamicMemory_Parameters[2] = { 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseDynamicMemory = {
  "CreateFileBaseDynamicMemory",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  2, iLang_CreateFileBaseDynamicMemory_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseDynamicMemory)
#else
  NULL
#endif
};

// Method: CreateFileDynamicMemory
static const ni::sParameterDef iLang_CreateFileDynamicMemory_Parameters[2] = { 
  { "anSize", ni::eType_Size, NULL, "tSize" }, 
  { "aszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateFileDynamicMemory = {
  "CreateFileDynamicMemory",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iLang_CreateFileDynamicMemory_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileDynamicMemory)
#else
  NULL
#endif
};

// Method: CreateFileBaseWindow
static const ni::sParameterDef iLang_CreateFileBaseWindow_Parameters[5] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "anBase", ni::eType_I64, NULL, "tI64" }, 
  { "anSize", ni::eType_I64, NULL, "tI64" }, 
  { "aaszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "abAutoSeekSet", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseWindow = {
  "CreateFileBaseWindow",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  5, iLang_CreateFileBaseWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseWindow)
#else
  NULL
#endif
};

// Method: CreateFileWindow
static const ni::sParameterDef iLang_CreateFileWindow_Parameters[5] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "anBase", ni::eType_I64, NULL, "tI64" }, 
  { "anSize", ni::eType_I64, NULL, "tI64" }, 
  { "aaszPath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "abAutoSeekSet", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iLang_CreateFileWindow = {
  "CreateFileWindow",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  5, iLang_CreateFileWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileWindow)
#else
  NULL
#endif
};

// Method: CreateFileBaseBufferEncoder
static const ni::sParameterDef iLang_CreateFileBaseBufferEncoder_Parameters[2] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "apEnc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferEncoder), "iBufferEncoder*" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseBufferEncoder = {
  "CreateFileBaseBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  2, iLang_CreateFileBaseBufferEncoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateFileBufferEncoder
static const ni::sParameterDef iLang_CreateFileBufferEncoder_Parameters[2] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "apEnc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferEncoder), "iBufferEncoder*" }
}; 
static const ni::sMethodDef iLang_CreateFileBufferEncoder = {
  "CreateFileBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iLang_CreateFileBufferEncoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateFileBaseBufferDecoder
static const ni::sParameterDef iLang_CreateFileBaseBufferDecoder_Parameters[3] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "apDec", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferDecoder), "iBufferDecoder*" }, 
  { "aDecodedSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iLang_CreateFileBaseBufferDecoder = {
  "CreateFileBaseBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*",
  3, iLang_CreateFileBaseBufferDecoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBaseBufferDecoder)
#else
  NULL
#endif
};

// Method: CreateFileBufferDecoder
static const ni::sParameterDef iLang_CreateFileBufferDecoder_Parameters[3] = { 
  { "apBase", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "apDec", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferDecoder), "iBufferDecoder*" }, 
  { "aDecodedSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iLang_CreateFileBufferDecoder = {
  "CreateFileBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  3, iLang_CreateFileBufferDecoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateFileBufferDecoder)
#else
  NULL
#endif
};

// Method: FileBufferEncode
static const ni::sParameterDef iLang_FileBufferEncode_Parameters[4] = { 
  { "apEnc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferEncoder), "iBufferEncoder*" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSrcSize", ni::eType_Size, NULL, "tSize" }, 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }
}; 
static const ni::sMethodDef iLang_FileBufferEncode = {
  "FileBufferEncode",
  0|ni::eType_Size, NULL, "tSize",
  4, iLang_FileBufferEncode_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_FileBufferEncode)
#else
  NULL
#endif
};

// Method: FileBufferDecode
static const ni::sParameterDef iLang_FileBufferDecode_Parameters[5] = { 
  { "apDec", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferDecoder), "iBufferDecoder*" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSrcSize", ni::eType_Size, NULL, "tSize" }, 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anDestSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iLang_FileBufferDecode = {
  "FileBufferDecode",
  0|ni::eType_Size, NULL, "tSize",
  5, iLang_FileBufferDecode_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_FileBufferDecode)
#else
  NULL
#endif
};

// Method: RunCommand
static const ni::sParameterDef iLang_RunCommand_Parameters[1] = { 
  { "aaszCmd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_RunCommand = {
  "RunCommand",
  0|ni::eType_I32, NULL, "tI32",
  1, iLang_RunCommand_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_RunCommand)
#else
  NULL
#endif
};

// Method: StartPath
static const ni::sParameterDef iLang_StartPath_Parameters[1] = { 
  { "aaszFile", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_StartPath = {
  "StartPath",
  0|ni::eType_I32, NULL, "tI32",
  1, iLang_StartPath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_StartPath)
#else
  NULL
#endif
};

// Method: GetCurrentTime
static const ni::sMethodDef iLang_GetCurrentTime = {
  "GetCurrentTime",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "const iTime*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetCurrentTime)
#else
  NULL
#endif
};

// Method: TimerInSeconds
static const ni::sMethodDef iLang_TimerInSeconds = {
  "TimerInSeconds",
  0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_TimerInSeconds)
#else
  NULL
#endif
};

// Method: ResetFrameTime
static const ni::sMethodDef iLang_ResetFrameTime = {
  "ResetFrameTime",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_ResetFrameTime)
#else
  NULL
#endif
};

// Method: UpdateFrameTime
static const ni::sParameterDef iLang_UpdateFrameTime_Parameters[1] = { 
  { "afElapsedTime", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }
}; 
static const ni::sMethodDef iLang_UpdateFrameTime = {
  "UpdateFrameTime",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_UpdateFrameTime_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_UpdateFrameTime)
#else
  NULL
#endif
};

// Method: GetTotalFrameTime
static const ni::sMethodDef iLang_GetTotalFrameTime = {
  "GetTotalFrameTime",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetTotalFrameTime)
#else
  NULL
#endif
};

// Method: GetFrameTime
static const ni::sMethodDef iLang_GetFrameTime = {
  "GetFrameTime",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F64, NULL, "tF64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetFrameTime)
#else
  NULL
#endif
};

// Method: GetFrameNumber
static const ni::sMethodDef iLang_GetFrameNumber = {
  "GetFrameNumber",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetFrameNumber)
#else
  NULL
#endif
};

// Method: GetFrameRate
static const ni::sMethodDef iLang_GetFrameRate = {
  "GetFrameRate",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetFrameRate)
#else
  NULL
#endif
};

// Method: GetAverageFrameRate
static const ni::sMethodDef iLang_GetAverageFrameRate = {
  "GetAverageFrameRate",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetAverageFrameRate)
#else
  NULL
#endif
};

#if niMinFeatures(20)
// Method: JsonParseFile
static const ni::sParameterDef iLang_JsonParseFile_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iJsonParserSink), "ni::iJsonParserSink*" }
}; 
static const ni::sMethodDef iLang_JsonParseFile = {
  "JsonParseFile",
  0|ni::eType_I8, NULL, "ni::tBool",
  2, iLang_JsonParseFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_JsonParseFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: JsonParseString
static const ni::sParameterDef iLang_JsonParseString_Parameters[2] = { 
  { "aString", ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer, NULL, "const ni::cString&" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iJsonParserSink), "ni::iJsonParserSink*" }
}; 
static const ni::sMethodDef iLang_JsonParseString = {
  "JsonParseString",
  0|ni::eType_I8, NULL, "ni::tBool",
  2, iLang_JsonParseString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_JsonParseString)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: CreateJsonSinkWriter
static const ni::sParameterDef iLang_CreateJsonSinkWriter_Parameters[2] = { 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iJsonWriterSink), "ni::iJsonWriterSink*" }, 
  { "abPrettyPrint", ni::eType_I8, NULL, "ni::tBool" }
}; 
static const ni::sMethodDef iLang_CreateJsonSinkWriter = {
  "CreateJsonSinkWriter",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iJsonWriter), "ni::iJsonWriter*",
  2, iLang_CreateJsonSinkWriter_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateJsonSinkWriter)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: CreateJsonFileWriter
static const ni::sParameterDef iLang_CreateJsonFileWriter_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }, 
  { "abPrettyPrint", ni::eType_I8, NULL, "ni::tBool" }
}; 
static const ni::sMethodDef iLang_CreateJsonFileWriter = {
  "CreateJsonFileWriter",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iJsonWriter), "ni::iJsonWriter*",
  2, iLang_CreateJsonFileWriter_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateJsonFileWriter)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: XmlParseFile
static const ni::sParameterDef iLang_XmlParseFile_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iXmlParserSink), "ni::iXmlParserSink*" }
}; 
static const ni::sMethodDef iLang_XmlParseFile = {
  "XmlParseFile",
  0|ni::eType_I8, NULL, "ni::tBool",
  2, iLang_XmlParseFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_XmlParseFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: XmlParseString
static const ni::sParameterDef iLang_XmlParseString_Parameters[2] = { 
  { "aString", ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer, NULL, "const ni::cString&" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iXmlParserSink), "ni::iXmlParserSink*" }
}; 
static const ni::sMethodDef iLang_XmlParseString = {
  "XmlParseString",
  0|ni::eType_I8, NULL, "ni::tBool",
  2, iLang_XmlParseString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_XmlParseString)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

// Method: GetExpressionContext
static const ni::sMethodDef iLang_GetExpressionContext = {
  "GetExpressionContext",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionContext), "iExpressionContext*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetExpressionContext)
#else
  NULL
#endif
};

// Method: CreateExpressionContext
static const ni::sMethodDef iLang_CreateExpressionContext = {
  "CreateExpressionContext",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionContext), "iExpressionContext*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateExpressionContext)
#else
  NULL
#endif
};

// Method: Eval
static const ni::sParameterDef iLang_Eval_Parameters[1] = { 
  { "aaszExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_Eval = {
  "Eval",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iExpressionVariable), "Ptr<iExpressionVariable>",
  1, iLang_Eval_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_Eval)
#else
  NULL
#endif
};

// Method: EnumToString
static const ni::sParameterDef iLang_EnumToString_Parameters[3] = { 
  { "anValue", ni::eType_U32, NULL, "tU32" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }
}; 
static const ni::sMethodDef iLang_EnumToString = {
  "EnumToString",
  0|ni::eType_String, NULL, "cString",
  3, iLang_EnumToString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_EnumToString)
#else
  NULL
#endif
};

// Method: StringToEnum
static const ni::sParameterDef iLang_StringToEnum_Parameters[3] = { 
  { "aExpr", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnumDef", ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tEnumToStringFlags" }
}; 
static const ni::sMethodDef iLang_StringToEnum = {
  "StringToEnum",
  0|ni::eType_U32, NULL, "tU32",
  3, iLang_StringToEnum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_StringToEnum)
#else
  NULL
#endif
};

#if niMinFeatures(15)
// Method: AddScriptingHost
static const ni::sParameterDef iLang_AddScriptingHost_Parameters[2] = { 
  { "ahspName", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "apHost", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*" }
}; 
static const ni::sMethodDef iLang_AddScriptingHost = {
  "AddScriptingHost",
  0|ni::eType_I8, NULL, "tBool",
  2, iLang_AddScriptingHost_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_AddScriptingHost)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RemoveScriptingHost
static const ni::sParameterDef iLang_RemoveScriptingHost_Parameters[1] = { 
  { "ahspName", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_RemoveScriptingHost = {
  "RemoveScriptingHost",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_RemoveScriptingHost_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_RemoveScriptingHost)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNumScriptingHosts
static const ni::sMethodDef iLang_GetNumScriptingHosts = {
  "GetNumScriptingHosts",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetNumScriptingHosts)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetScriptingHostName
static const ni::sParameterDef iLang_GetScriptingHostName_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetScriptingHostName = {
  "GetScriptingHostName",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*",
  1, iLang_GetScriptingHostName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetScriptingHostName)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetScriptingHost
static const ni::sParameterDef iLang_GetScriptingHost_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetScriptingHost = {
  "GetScriptingHost",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*",
  1, iLang_GetScriptingHost_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetScriptingHost)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetScriptingHostFromName
static const ni::sParameterDef iLang_GetScriptingHostFromName_Parameters[1] = { 
  { "ahspName", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_GetScriptingHostFromName = {
  "GetScriptingHostFromName",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*",
  1, iLang_GetScriptingHostFromName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetScriptingHostFromName)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetScriptingHostIndex
static const ni::sParameterDef iLang_GetScriptingHostIndex_Parameters[1] = { 
  { "apHost", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*" }
}; 
static const ni::sMethodDef iLang_GetScriptingHostIndex = {
  "GetScriptingHostIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iLang_GetScriptingHostIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetScriptingHostIndex)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ServiceAllScriptingHosts
static const ni::sParameterDef iLang_ServiceAllScriptingHosts_Parameters[1] = { 
  { "abForceGC", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iLang_ServiceAllScriptingHosts = {
  "ServiceAllScriptingHosts",
  0|ni::eType_Null, NULL, "void",
  1, iLang_ServiceAllScriptingHosts_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_ServiceAllScriptingHosts)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FindScriptingHost
static const ni::sParameterDef iLang_FindScriptingHost_Parameters[2] = { 
  { "ahspContext", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "ahspCodeResource", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iLang_FindScriptingHost = {
  "FindScriptingHost",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iScriptingHost), "iScriptingHost*",
  2, iLang_FindScriptingHost_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_FindScriptingHost)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

// Method: GetProf
static const ni::sMethodDef iLang_GetProf = {
  "GetProf",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iProf), "iProf*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetProf)
#else
  NULL
#endif
};

// Method: URLGetProtocol
static const ni::sParameterDef iLang_URLGetProtocol_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_URLGetProtocol = {
  "URLGetProtocol",
  0|ni::eType_String, NULL, "cString",
  1, iLang_URLGetProtocol_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_URLGetProtocol)
#else
  NULL
#endif
};

// Method: URLGetHandler
static const ni::sParameterDef iLang_URLGetHandler_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_URLGetHandler = {
  "URLGetHandler",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iURLFileHandler), "iURLFileHandler*",
  1, iLang_URLGetHandler_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_URLGetHandler)
#else
  NULL
#endif
};

// Method: URLOpen
static const ni::sParameterDef iLang_URLOpen_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_URLOpen = {
  "URLOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  1, iLang_URLOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_URLOpen)
#else
  NULL
#endif
};

// Method: URLExists
static const ni::sParameterDef iLang_URLExists_Parameters[1] = { 
  { "aURL", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_URLExists = {
  "URLExists",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_URLExists_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_URLExists)
#else
  NULL
#endif
};

// Method: URLFindFilePath
static const ni::sParameterDef iLang_URLFindFilePath_Parameters[3] = { 
  { "aszRes", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszBasePath", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aLoaderPrefix", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_URLFindFilePath = {
  "URLFindFilePath",
  0|ni::eType_String, NULL, "cString",
  3, iLang_URLFindFilePath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_URLFindFilePath)
#else
  NULL
#endif
};

// Method: CreateHString
static const ni::sParameterDef iLang_CreateHString_Parameters[1] = { 
  { "aStr", ni::eTypeFlags_Constant|ni::eType_String|ni::eTypeFlags_Pointer, NULL, "const cString&" }
}; 
static const ni::sMethodDef iLang_CreateHString = {
  "CreateHString",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "Ptr<iHString>",
  1, iLang_CreateHString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateHString)
#else
  NULL
#endif
};

// Method: LoadLocalization
static const ni::sParameterDef iLang_LoadLocalization_Parameters[1] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iLang_LoadLocalization = {
  "LoadLocalization",
  0|ni::eType_I8, NULL, "tBool",
  1, iLang_LoadLocalization_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_LoadLocalization)
#else
  NULL
#endif
};

// Method: IsSerializedObject
static const ni::sParameterDef iLang_IsSerializedObject_Parameters[3] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aID", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apObjSize", ni::eType_I64|ni::eTypeFlags_Pointer, NULL, "tI64*" }
}; 
static const ni::sMethodDef iLang_IsSerializedObject = {
  "IsSerializedObject",
  0|ni::eType_I8, NULL, "tBool",
  3, iLang_IsSerializedObject_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_IsSerializedObject)
#else
  NULL
#endif
};

// Method: SerializeObject
static const ni::sParameterDef iLang_SerializeObject_Parameters[4] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apObject", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }, 
  { "aMode", ni::eType_Enum, NULL, "eSerializeMode" }, 
  { "apObjSize", ni::eType_I64|ni::eTypeFlags_Pointer, NULL, "tI64*" }
}; 
static const ni::sMethodDef iLang_SerializeObject = {
  "SerializeObject",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  4, iLang_SerializeObject_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SerializeObject)
#else
  NULL
#endif
};

// Method: ReadSerializationHeader
static const ni::sParameterDef iLang_ReadSerializationHeader_Parameters[3] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apID", ni::eType_String|ni::eTypeFlags_Pointer, NULL, "cString*" }, 
  { "apSize", ni::eType_I64|ni::eTypeFlags_Pointer, NULL, "tI64*" }
}; 
static const ni::sMethodDef iLang_ReadSerializationHeader = {
  "ReadSerializationHeader",
  0|ni::eType_I64, NULL, "tI64",
  3, iLang_ReadSerializationHeader_Parameters,
NULL
};

// Method: WriteSerializationHeader
static const ni::sParameterDef iLang_WriteSerializationHeader_Parameters[3] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apID", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "anSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iLang_WriteSerializationHeader = {
  "WriteSerializationHeader",
  0|ni::eType_I64, NULL, "tI64",
  3, iLang_WriteSerializationHeader_Parameters,
NULL
};

// Method: CreateDeviceResourceManager
static const ni::sParameterDef iLang_CreateDeviceResourceManager_Parameters[1] = { 
  { "aszType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateDeviceResourceManager = {
  "CreateDeviceResourceManager",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDeviceResourceManager), "iDeviceResourceManager*",
  1, iLang_CreateDeviceResourceManager_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateDeviceResourceManager)
#else
  NULL
#endif
};

// Method: GetSystemMessageHandlers
static const ni::sMethodDef iLang_GetSystemMessageHandlers = {
  "GetSystemMessageHandlers",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iSinkList), "tMessageHandlerSinkLst*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetSystemMessageHandlers)
#else
  NULL
#endif
};

// Method: CreateDataTable
static const ni::sParameterDef iLang_CreateDataTable_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateDataTable = {
  "CreateDataTable",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  1, iLang_CreateDataTable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateDataTable)
#else
  NULL
#endif
};

// Method: SerializeDataTable
static const ni::sParameterDef iLang_SerializeDataTable_Parameters[4] = { 
  { "aaszType", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aMode", ni::eType_Enum, NULL, "eSerializeMode" }, 
  { "apTable", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }
}; 
static const ni::sMethodDef iLang_SerializeDataTable = {
  "SerializeDataTable",
  0|ni::eType_I8, NULL, "tBool",
  4, iLang_SerializeDataTable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SerializeDataTable)
#else
  NULL
#endif
};

// Method: CreateDataTableWriteStack
static const ni::sParameterDef iLang_CreateDataTableWriteStack_Parameters[1] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iLang_CreateDataTableWriteStack = {
  "CreateDataTableWriteStack",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTableWriteStack), "iDataTableWriteStack*",
  1, iLang_CreateDataTableWriteStack_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateDataTableWriteStack)
#else
  NULL
#endif
};

// Method: CreateDataTableWriteStackFromName
static const ni::sParameterDef iLang_CreateDataTableWriteStackFromName_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_CreateDataTableWriteStackFromName = {
  "CreateDataTableWriteStackFromName",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTableWriteStack), "iDataTableWriteStack*",
  1, iLang_CreateDataTableWriteStackFromName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateDataTableWriteStackFromName)
#else
  NULL
#endif
};

// Method: CreateDataTableReadStack
static const ni::sParameterDef iLang_CreateDataTableReadStack_Parameters[1] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iLang_CreateDataTableReadStack = {
  "CreateDataTableReadStack",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTableReadStack), "iDataTableReadStack*",
  1, iLang_CreateDataTableReadStack_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateDataTableReadStack)
#else
  NULL
#endif
};

// Method: GetAbsoluteDataTablePath
static const ni::sParameterDef iLang_GetAbsoluteDataTablePath_Parameters[2] = { 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }, 
  { "anPropIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetAbsoluteDataTablePath = {
  "GetAbsoluteDataTablePath",
  0|ni::eType_String, NULL, "cString",
  2, iLang_GetAbsoluteDataTablePath_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetAbsoluteDataTablePath)
#else
  NULL
#endif
};

// Method: SetClipboard
static const ni::sParameterDef iLang_SetClipboard_Parameters[2] = { 
  { "aType", ni::eType_Enum, NULL, "eClipboardType" }, 
  { "apDT", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*" }
}; 
static const ni::sMethodDef iLang_SetClipboard = {
  "SetClipboard",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "tBool",
  2, iLang_SetClipboard_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SetClipboard)
#else
  NULL
#endif
};

// Method: GetClipboard
static const ni::sParameterDef iLang_GetClipboard_Parameters[1] = { 
  { "aType", ni::eType_Enum, NULL, "eClipboardType" }
}; 
static const ni::sMethodDef iLang_GetClipboard = {
  "GetClipboard",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iDataTable), "iDataTable*",
  1, iLang_GetClipboard_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetClipboard)
#else
  NULL
#endif
};

// Method: GetNumMonitors
static const ni::sMethodDef iLang_GetNumMonitors = {
  "GetNumMonitors",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetNumMonitors)
#else
  NULL
#endif
};

// Method: GetMonitorIndex
static const ni::sParameterDef iLang_GetMonitorIndex_Parameters[1] = { 
  { "aHandle", ni::eType_IntPtr, NULL, "tIntPtr" }
}; 
static const ni::sMethodDef iLang_GetMonitorIndex = {
  "GetMonitorIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iLang_GetMonitorIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMonitorIndex)
#else
  NULL
#endif
};

// Method: GetMonitorHandle
static const ni::sParameterDef iLang_GetMonitorHandle_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetMonitorHandle = {
  "GetMonitorHandle",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  1, iLang_GetMonitorHandle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMonitorHandle)
#else
  NULL
#endif
};

// Method: GetMonitorName
static const ni::sParameterDef iLang_GetMonitorName_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetMonitorName = {
  "GetMonitorName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  1, iLang_GetMonitorName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMonitorName)
#else
  NULL
#endif
};

// Method: GetMonitorRect
static const ni::sParameterDef iLang_GetMonitorRect_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetMonitorRect = {
  "GetMonitorRect",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4i, NULL, "sRecti",
  1, iLang_GetMonitorRect_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMonitorRect)
#else
  NULL
#endif
};

// Method: GetMonitorFlags
static const ni::sParameterDef iLang_GetMonitorFlags_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetMonitorFlags = {
  "GetMonitorFlags",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tOSMonitorFlags",
  1, iLang_GetMonitorFlags_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetMonitorFlags)
#else
  NULL
#endif
};

// Method: CreateWindow
static const ni::sParameterDef iLang_CreateWindow_Parameters[5] = { 
  { "apParent", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*" }, 
  { "aaszTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aRect", ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer, NULL, "const sRecti&" }, 
  { "aCreate", ni::eType_Enum, NULL, "tOSWindowCreateFlags" }, 
  { "aStyle", ni::eType_Enum, NULL, "tOSWindowStyleFlags" }
}; 
static const ni::sMethodDef iLang_CreateWindow = {
  "CreateWindow",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*",
  5, iLang_CreateWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateWindow)
#else
  NULL
#endif
};

// Method: CreateWindowEx
static const ni::sParameterDef iLang_CreateWindowEx_Parameters[2] = { 
  { "aOSWindowHandle", ni::eType_IntPtr, NULL, "tIntPtr" }, 
  { "aCreate", ni::eType_Enum, NULL, "tOSWindowCreateFlags" }
}; 
static const ni::sMethodDef iLang_CreateWindowEx = {
  "CreateWindowEx",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*",
  2, iLang_CreateWindowEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_CreateWindowEx)
#else
  NULL
#endif
};

// Method: MessageBox
static const ni::sParameterDef iLang_MessageBox_Parameters[4] = { 
  { "apParent", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*" }, 
  { "aaszTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszText", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aFlags", ni::eType_Enum, NULL, "tOSMessageBoxFlags" }
}; 
static const ni::sMethodDef iLang_MessageBox = {
  "MessageBox",
  0|ni::eType_Enum, NULL, "eOSMessageBoxReturn",
  4, iLang_MessageBox_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_MessageBox)
#else
  NULL
#endif
};

// Method: OpenFileDialog
static const ni::sParameterDef iLang_OpenFileDialog_Parameters[4] = { 
  { "aParent", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*" }, 
  { "aTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aFilter", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aInitDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_OpenFileDialog = {
  "OpenFileDialog",
  0|ni::eType_String, NULL, "cString",
  4, iLang_OpenFileDialog_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_OpenFileDialog)
#else
  NULL
#endif
};

// Method: SaveFileDialog
static const ni::sParameterDef iLang_SaveFileDialog_Parameters[4] = { 
  { "aParent", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*" }, 
  { "aTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aFilter", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aInitDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_SaveFileDialog = {
  "SaveFileDialog",
  0|ni::eType_String, NULL, "cString",
  4, iLang_SaveFileDialog_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_SaveFileDialog)
#else
  NULL
#endif
};

// Method: PickDirectoryDialog
static const ni::sParameterDef iLang_PickDirectoryDialog_Parameters[3] = { 
  { "aParent", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*" }, 
  { "aTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aInitDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iLang_PickDirectoryDialog = {
  "PickDirectoryDialog",
  0|ni::eType_String, NULL, "cString",
  3, iLang_PickDirectoryDialog_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_PickDirectoryDialog)
#else
  NULL
#endif
};

// Method: GetNumGameCtrls
static const ni::sMethodDef iLang_GetNumGameCtrls = {
  "GetNumGameCtrls",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetNumGameCtrls)
#else
  NULL
#endif
};

// Method: GetGameCtrl
static const ni::sParameterDef iLang_GetGameCtrl_Parameters[1] = { 
  { "aulIdx", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iLang_GetGameCtrl = {
  "GetGameCtrl",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iGameCtrl), "iGameCtrl*",
  1, iLang_GetGameCtrl_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iLang_GetGameCtrl)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iLang[] = {
#if niMinFeatures(15)
	&iLang_GetProcessManager,
#endif // niMinFeatures(15)
	&iLang_Exit,
	&iLang_OnExit,
	&iLang_FatalError,
	&iLang_SetEnv,
	&iLang_GetEnv,
	&iLang_GetProperties,
	&iLang_HasProperty,
	&iLang_SetProperty,
	&iLang_GetProperty,
	&iLang_RegisterModuleDef,
	&iLang_GetNumModuleDefs,
	&iLang_GetModuleDef,
	&iLang_GetModuleDefIndex,
	&iLang_LoadModuleDef,
	&iLang_GetCreateInstanceMap,
	&iLang_CreateInstance,
	&iLang_GetGlobalInstanceMap,
	&iLang_SetGlobalInstance,
	&iLang_GetGlobalInstance,
	&iLang_RegisterEnumDef,
	&iLang_GetEnumDef,
	&iLang_GetInterfaceName,
	&iLang_GetInterfaceUUID,
	&iLang_GetInterfaceDefFromUUID,
	&iLang_SetDefaultLocale,
	&iLang_GetDefaultLocale,
	&iLang_GetNumLocales,
	&iLang_GetLocale,
	&iLang_ClearLocalization,
	&iLang_SetLocalization,
	&iLang_SetLocalizationMap,
	&iLang_GetLocalizationMap,
	&iLang_SetMarkMissingLocalization,
	&iLang_GetMarkMissingLocalization,
	&iLang_GetMissingLocalization,
	&iLang_CreateLocalUUID,
	&iLang_CreateGlobalUUID,
	&iLang_SetLogFilter,
	&iLang_GetLogFilter,
	&iLang_Log,
	&iLang_GetRootFS,
	&iLang_CreateFileSystemDir,
	&iLang_CreateFileSystemHashed,
	&iLang_CreateFile,
	&iLang_CreateFileBaseWriteDummy,
	&iLang_CreateFileWriteDummy,
	&iLang_CreateFileBaseMemory,
	&iLang_CreateFileMemory,
	&iLang_CreateFileBaseMemoryAlloc,
	&iLang_CreateFileMemoryAlloc,
	&iLang_CreateFileBaseDynamicMemory,
	&iLang_CreateFileDynamicMemory,
	&iLang_CreateFileBaseWindow,
	&iLang_CreateFileWindow,
	&iLang_CreateFileBaseBufferEncoder,
	&iLang_CreateFileBufferEncoder,
	&iLang_CreateFileBaseBufferDecoder,
	&iLang_CreateFileBufferDecoder,
	&iLang_FileBufferEncode,
	&iLang_FileBufferDecode,
	&iLang_RunCommand,
	&iLang_StartPath,
	&iLang_GetCurrentTime,
	&iLang_TimerInSeconds,
	&iLang_ResetFrameTime,
	&iLang_UpdateFrameTime,
	&iLang_GetTotalFrameTime,
	&iLang_GetFrameTime,
	&iLang_GetFrameNumber,
	&iLang_GetFrameRate,
	&iLang_GetAverageFrameRate,
#if niMinFeatures(20)
	&iLang_JsonParseFile,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iLang_JsonParseString,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iLang_CreateJsonSinkWriter,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iLang_CreateJsonFileWriter,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iLang_XmlParseFile,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iLang_XmlParseString,
#endif // niMinFeatures(20)
	&iLang_GetExpressionContext,
	&iLang_CreateExpressionContext,
	&iLang_Eval,
	&iLang_EnumToString,
	&iLang_StringToEnum,
#if niMinFeatures(15)
	&iLang_AddScriptingHost,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_RemoveScriptingHost,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_GetNumScriptingHosts,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_GetScriptingHostName,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_GetScriptingHost,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_GetScriptingHostFromName,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_GetScriptingHostIndex,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_ServiceAllScriptingHosts,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iLang_FindScriptingHost,
#endif // niMinFeatures(15)
	&iLang_GetProf,
	&iLang_URLGetProtocol,
	&iLang_URLGetHandler,
	&iLang_URLOpen,
	&iLang_URLExists,
	&iLang_URLFindFilePath,
	&iLang_CreateHString,
	&iLang_LoadLocalization,
	&iLang_IsSerializedObject,
	&iLang_SerializeObject,
	&iLang_ReadSerializationHeader,
	&iLang_WriteSerializationHeader,
	&iLang_CreateDeviceResourceManager,
	&iLang_GetSystemMessageHandlers,
	&iLang_CreateDataTable,
	&iLang_SerializeDataTable,
	&iLang_CreateDataTableWriteStack,
	&iLang_CreateDataTableWriteStackFromName,
	&iLang_CreateDataTableReadStack,
	&iLang_GetAbsoluteDataTablePath,
	&iLang_SetClipboard,
	&iLang_GetClipboard,
	&iLang_GetNumMonitors,
	&iLang_GetMonitorIndex,
	&iLang_GetMonitorHandle,
	&iLang_GetMonitorName,
	&iLang_GetMonitorRect,
	&iLang_GetMonitorFlags,
	&iLang_CreateWindow,
	&iLang_CreateWindowEx,
	&iLang_MessageBox,
	&iLang_OpenFileDialog,
	&iLang_SaveFileDialog,
	&iLang_PickDirectoryDialog,
	&iLang_GetNumGameCtrls,
	&iLang_GetGameCtrl,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iLang[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iLang = {
  niGetInterfaceID(iLang),
  &niGetInterfaceUUID(iLang),
  1,
  Parents_iLang,
  niCountOf(Methods_iLang),Methods_iLang,
  NULL
};

	return &InterfaceDef_iLang;
}

// End of iLang wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iMath wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iMath() {

#if niMinFeatures(15)
// Method: Sqrt
static const ni::sParameterDef iMath_Sqrt_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Sqrt = {
  "Sqrt",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Sqrt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Sqrt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Sin
static const ni::sParameterDef iMath_Sin_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Sin = {
  "Sin",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Sin_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Sin)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Cos
static const ni::sParameterDef iMath_Cos_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Cos = {
  "Cos",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Cos_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Cos)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ASin
static const ni::sParameterDef iMath_ASin_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ASin = {
  "ASin",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ASin_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ASin)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ACos
static const ni::sParameterDef iMath_ACos_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ACos = {
  "ACos",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ACos_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ACos)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Tan
static const ni::sParameterDef iMath_Tan_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Tan = {
  "Tan",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Tan_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Tan)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ATan
static const ni::sParameterDef iMath_ATan_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ATan = {
  "ATan",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ATan_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ATan)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ATan2
static const ni::sParameterDef iMath_ATan2_Parameters[2] = { 
  { "x", ni::eType_F64, NULL, "tF64" }, 
  { "y", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ATan2 = {
  "ATan2",
  0|ni::eType_F64, NULL, "tF64",
  2, iMath_ATan2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ATan2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: LogX
static const ni::sParameterDef iMath_LogX_Parameters[2] = { 
  { "v", ni::eType_F64, NULL, "tF64" }, 
  { "n", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_LogX = {
  "LogX",
  0|ni::eType_F64, NULL, "tF64",
  2, iMath_LogX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_LogX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: LogE
static const ni::sParameterDef iMath_LogE_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_LogE = {
  "LogE",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_LogE_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_LogE)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Log2
static const ni::sParameterDef iMath_Log2_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Log2 = {
  "Log2",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Log2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Log2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Log10
static const ni::sParameterDef iMath_Log10_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Log10 = {
  "Log10",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Log10_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Log10)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Pow
static const ni::sParameterDef iMath_Pow_Parameters[2] = { 
  { "v", ni::eType_F64, NULL, "tF64" }, 
  { "e", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Pow = {
  "Pow",
  0|ni::eType_F64, NULL, "tF64",
  2, iMath_Pow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Pow)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Floor
static const ni::sParameterDef iMath_Floor_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Floor = {
  "Floor",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Floor_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Floor)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Ceil
static const ni::sParameterDef iMath_Ceil_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Ceil = {
  "Ceil",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Ceil_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Ceil)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Exp
static const ni::sParameterDef iMath_Exp_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Exp = {
  "Exp",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Exp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Exp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Abs
static const ni::sParameterDef iMath_Abs_Parameters[1] = { 
  { "v", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Abs = {
  "Abs",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_Abs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Abs)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ToRad
static const ni::sParameterDef iMath_ToRad_Parameters[1] = { 
  { "afDeg", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ToRad = {
  "ToRad",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ToRad_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ToRad)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ToDeg
static const ni::sParameterDef iMath_ToDeg_Parameters[1] = { 
  { "afRad", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ToDeg = {
  "ToDeg",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ToDeg_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ToDeg)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Min
static const ni::sParameterDef iMath_Min_Parameters[2] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Min = {
  "Min",
  0|ni::eType_F64, NULL, "tF64",
  2, iMath_Min_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Min)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Min3
static const ni::sParameterDef iMath_Min3_Parameters[3] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }, 
  { "c", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Min3 = {
  "Min3",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_Min3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Min3)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Max
static const ni::sParameterDef iMath_Max_Parameters[2] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Max = {
  "Max",
  0|ni::eType_F64, NULL, "tF64",
  2, iMath_Max_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Max)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Max3
static const ni::sParameterDef iMath_Max3_Parameters[3] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }, 
  { "c", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Max3 = {
  "Max3",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_Max3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Max3)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Clamp
static const ni::sParameterDef iMath_Clamp_Parameters[3] = { 
  { "v", ni::eType_F64, NULL, "tF64" }, 
  { "afMin", ni::eType_F64, NULL, "tF64" }, 
  { "afMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Clamp = {
  "Clamp",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_Clamp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Clamp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ClampZeroOne
static const ni::sParameterDef iMath_ClampZeroOne_Parameters[1] = { 
  { "a", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ClampZeroOne = {
  "ClampZeroOne",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ClampZeroOne_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ClampZeroOne)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Lerp
static const ni::sParameterDef iMath_Lerp_Parameters[3] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }, 
  { "f", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_Lerp = {
  "Lerp",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_Lerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Lerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: BlendIntoAccumulator
static const ni::sParameterDef iMath_BlendIntoAccumulator_Parameters[3] = { 
  { "accumulator", ni::eType_F64, NULL, "tF64" }, 
  { "newValue", ni::eType_F64, NULL, "tF64" }, 
  { "smoothRate", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_BlendIntoAccumulator = {
  "BlendIntoAccumulator",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_BlendIntoAccumulator_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_BlendIntoAccumulator)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandSeed
static const ni::sParameterDef iMath_RandSeed_Parameters[1] = { 
  { "ulSeed", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iMath_RandSeed = {
  "RandSeed",
  0|ni::eType_Null, NULL, "void",
  1, iMath_RandSeed_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandSeed)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandInt
static const ni::sMethodDef iMath_RandInt = {
  "RandInt",
  0|ni::eType_I32, NULL, "tI32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandInt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandIntRange
static const ni::sParameterDef iMath_RandIntRange_Parameters[2] = { 
  { "aMin", ni::eType_I32, NULL, "tI32" }, 
  { "aMax", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iMath_RandIntRange = {
  "RandIntRange",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_RandIntRange_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandIntRange)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandFloat
static const ni::sMethodDef iMath_RandFloat = {
  "RandFloat",
  0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandFloat)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandFloatRange
static const ni::sParameterDef iMath_RandFloatRange_Parameters[2] = { 
  { "afMin", ni::eType_F32, NULL, "tF32" }, 
  { "afMax", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_RandFloatRange = {
  "RandFloatRange",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_RandFloatRange_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandFloatRange)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandNormal
static const ni::sParameterDef iMath_RandNormal_Parameters[1] = { 
  { "sigma", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_RandNormal = {
  "RandNormal",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_RandNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandomDirection
static const ni::sParameterDef iMath_RandomDirection_Parameters[1] = { 
  { "vN", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_RandomDirection = {
  "RandomDirection",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_RandomDirection_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandomDirection)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandomDirectionEx
static const ni::sParameterDef iMath_RandomDirectionEx_Parameters[2] = { 
  { "avN", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afDeviAngle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_RandomDirectionEx = {
  "RandomDirectionEx",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_RandomDirectionEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandomDirectionEx)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RotateRay
static const ni::sParameterDef iMath_RotateRay_Parameters[2] = { 
  { "avIn", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avN", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_RotateRay = {
  "RotateRay",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_RotateRay_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RotateRay)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandColorA
static const ni::sParameterDef iMath_RandColorA_Parameters[1] = { 
  { "aA", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iMath_RandColorA = {
  "RandColorA",
  0|ni::eType_U32, NULL, "tU32",
  1, iMath_RandColorA_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandColorA)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandColorAf
static const ni::sParameterDef iMath_RandColorAf_Parameters[1] = { 
  { "aA", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_RandColorAf = {
  "RandColorAf",
  0|ni::eType_U32, NULL, "tU32",
  1, iMath_RandColorAf_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandColorAf)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RandColor
static const ni::sMethodDef iMath_RandColor = {
  "RandColor",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RandColor)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Add
static const ni::sParameterDef iMath_Vec2Add_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Add = {
  "Vec2Add",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Add)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Sub
static const ni::sParameterDef iMath_Vec2Sub_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Sub = {
  "Vec2Sub",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Sub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Sub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Mul
static const ni::sParameterDef iMath_Vec2Mul_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Mul = {
  "Vec2Mul",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Mul_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Mul)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Div
static const ni::sParameterDef iMath_Vec2Div_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Div = {
  "Vec2Div",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Div_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Div)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Scale
static const ni::sParameterDef iMath_Vec2Scale_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "afRight", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2Scale = {
  "Vec2Scale",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Scale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Scale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Compare
static const ni::sParameterDef iMath_Vec2Compare_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Compare = {
  "Vec2Compare",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_Vec2Compare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Compare)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Length
static const ni::sParameterDef iMath_Vec2Length_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Length = {
  "Vec2Length",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec2Length_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Length)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2LengthSq
static const ni::sParameterDef iMath_Vec2LengthSq_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2LengthSq = {
  "Vec2LengthSq",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec2LengthSq_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2LengthSq)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Normalize
static const ni::sParameterDef iMath_Vec2Normalize_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Normalize = {
  "Vec2Normalize",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  1, iMath_Vec2Normalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Normalize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2IsNormal
static const ni::sParameterDef iMath_Vec2IsNormal_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2IsNormal = {
  "Vec2IsNormal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_Vec2IsNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2IsNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Dot
static const ni::sParameterDef iMath_Vec2Dot_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Dot = {
  "Vec2Dot",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_Vec2Dot_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Dot)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Lerp
static const ni::sParameterDef iMath_Vec2Lerp_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "afF", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2Lerp = {
  "Vec2Lerp",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  3, iMath_Vec2Lerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Lerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Lerp2
static const ni::sParameterDef iMath_Vec2Lerp2_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aF", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Lerp2 = {
  "Vec2Lerp2",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  3, iMath_Vec2Lerp2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Lerp2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2BlendIntoAccumulator
static const ni::sParameterDef iMath_Vec2BlendIntoAccumulator_Parameters[3] = { 
  { "accumulator", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "newValue", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "smoothRate", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2BlendIntoAccumulator = {
  "Vec2BlendIntoAccumulator",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  3, iMath_Vec2BlendIntoAccumulator_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2BlendIntoAccumulator)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Abs
static const ni::sParameterDef iMath_Vec2Abs_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Abs = {
  "Vec2Abs",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  1, iMath_Vec2Abs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Abs)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Min
static const ni::sParameterDef iMath_Vec2Min_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Min = {
  "Vec2Min",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Min_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Min)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Max
static const ni::sParameterDef iMath_Vec2Max_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_Vec2Max = {
  "Vec2Max",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2Max_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Max)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2CatmullRom
static const ni::sParameterDef iMath_Vec2CatmullRom_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2CatmullRom = {
  "Vec2CatmullRom",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  5, iMath_Vec2CatmullRom_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2CatmullRom)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Hermite
static const ni::sParameterDef iMath_Vec2Hermite_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2Hermite = {
  "Vec2Hermite",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  5, iMath_Vec2Hermite_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Hermite)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2BaryCentric
static const ni::sParameterDef iMath_Vec2BaryCentric_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "u", ni::eType_F32, NULL, "tF32" }, 
  { "v", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec2BaryCentric = {
  "Vec2BaryCentric",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  5, iMath_Vec2BaryCentric_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2BaryCentric)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2Transform
static const ni::sParameterDef iMath_Vec2Transform_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec2Transform = {
  "Vec2Transform",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec2Transform_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2Transform)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2TransformCoord
static const ni::sParameterDef iMath_Vec2TransformCoord_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec2TransformCoord = {
  "Vec2TransformCoord",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2TransformCoord_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2TransformCoord)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2TransformNormal
static const ni::sParameterDef iMath_Vec2TransformNormal_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec2TransformNormal = {
  "Vec2TransformNormal",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_Vec2TransformNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2TransformNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2TransformCoordArray
static const ni::sParameterDef iMath_Vec2TransformCoordArray_Parameters[2] = { 
  { "apVecs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tVec2fCVec*" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec2TransformCoordArray = {
  "Vec2TransformCoordArray",
  0|ni::eType_Null, NULL, "void",
  2, iMath_Vec2TransformCoordArray_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2TransformCoordArray)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec2TransformNormalArray
static const ni::sParameterDef iMath_Vec2TransformNormalArray_Parameters[2] = { 
  { "apVecs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tVec2fCVec*" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec2TransformNormalArray = {
  "Vec2TransformNormalArray",
  0|ni::eType_Null, NULL, "void",
  2, iMath_Vec2TransformNormalArray_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec2TransformNormalArray)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Add
static const ni::sParameterDef iMath_Vec3Add_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Add = {
  "Vec3Add",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Add)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Sub
static const ni::sParameterDef iMath_Vec3Sub_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Sub = {
  "Vec3Sub",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Sub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Sub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Mul
static const ni::sParameterDef iMath_Vec3Mul_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Mul = {
  "Vec3Mul",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Mul_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Mul)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Div
static const ni::sParameterDef iMath_Vec3Div_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Div = {
  "Vec3Div",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Div_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Div)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Scale
static const ni::sParameterDef iMath_Vec3Scale_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afRight", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3Scale = {
  "Vec3Scale",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Scale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Scale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Compare
static const ni::sParameterDef iMath_Vec3Compare_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Compare = {
  "Vec3Compare",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_Vec3Compare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Compare)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Length
static const ni::sParameterDef iMath_Vec3Length_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Length = {
  "Vec3Length",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec3Length_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Length)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3LengthSq
static const ni::sParameterDef iMath_Vec3LengthSq_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3LengthSq = {
  "Vec3LengthSq",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec3LengthSq_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3LengthSq)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Normalize
static const ni::sParameterDef iMath_Vec3Normalize_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Normalize = {
  "Vec3Normalize",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_Vec3Normalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Normalize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3IsNormal
static const ni::sParameterDef iMath_Vec3IsNormal_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3IsNormal = {
  "Vec3IsNormal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_Vec3IsNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3IsNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Dot
static const ni::sParameterDef iMath_Vec3Dot_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Dot = {
  "Vec3Dot",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_Vec3Dot_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Dot)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Cross
static const ni::sParameterDef iMath_Vec3Cross_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Cross = {
  "Vec3Cross",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Cross_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Cross)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Lerp
static const ni::sParameterDef iMath_Vec3Lerp_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afF", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3Lerp = {
  "Vec3Lerp",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3Lerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Lerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Lerp2
static const ni::sParameterDef iMath_Vec3Lerp2_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aF", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Lerp2 = {
  "Vec3Lerp2",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3Lerp2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Lerp2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3BlendIntoAccumulator
static const ni::sParameterDef iMath_Vec3BlendIntoAccumulator_Parameters[3] = { 
  { "accumulator", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "newValue", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "smoothRate", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3BlendIntoAccumulator = {
  "Vec3BlendIntoAccumulator",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3BlendIntoAccumulator_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3BlendIntoAccumulator)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Abs
static const ni::sParameterDef iMath_Vec3Abs_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Abs = {
  "Vec3Abs",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_Vec3Abs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Abs)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Min
static const ni::sParameterDef iMath_Vec3Min_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Min = {
  "Vec3Min",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Min_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Min)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Max
static const ni::sParameterDef iMath_Vec3Max_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Max = {
  "Vec3Max",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Max_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Max)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3CatmullRom
static const ni::sParameterDef iMath_Vec3CatmullRom_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3CatmullRom = {
  "Vec3CatmullRom",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  5, iMath_Vec3CatmullRom_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3CatmullRom)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Hermite
static const ni::sParameterDef iMath_Vec3Hermite_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3Hermite = {
  "Vec3Hermite",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  5, iMath_Vec3Hermite_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Hermite)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3BaryCentric
static const ni::sParameterDef iMath_Vec3BaryCentric_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "u", ni::eType_F32, NULL, "tF32" }, 
  { "v", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3BaryCentric = {
  "Vec3BaryCentric",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  5, iMath_Vec3BaryCentric_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3BaryCentric)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Transform
static const ni::sParameterDef iMath_Vec3Transform_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3Transform = {
  "Vec3Transform",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec3Transform_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Transform)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3TransformCoord
static const ni::sParameterDef iMath_Vec3TransformCoord_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3TransformCoord = {
  "Vec3TransformCoord",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3TransformCoord_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3TransformCoord)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3TransformNormal
static const ni::sParameterDef iMath_Vec3TransformNormal_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3TransformNormal = {
  "Vec3TransformNormal",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3TransformNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3TransformNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3TransformCoordArray
static const ni::sParameterDef iMath_Vec3TransformCoordArray_Parameters[2] = { 
  { "apVecs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tVec3fCVec*" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3TransformCoordArray = {
  "Vec3TransformCoordArray",
  0|ni::eType_Null, NULL, "void",
  2, iMath_Vec3TransformCoordArray_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3TransformCoordArray)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3TransformNormalArray
static const ni::sParameterDef iMath_Vec3TransformNormalArray_Parameters[2] = { 
  { "apVecs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tVec3fCVec*" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3TransformNormalArray = {
  "Vec3TransformNormalArray",
  0|ni::eType_Null, NULL, "void",
  2, iMath_Vec3TransformNormalArray_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3TransformNormalArray)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Unproject
static const ni::sParameterDef iMath_Vec3Unproject_Parameters[3] = { 
  { "avIn", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }, 
  { "amtxViewProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec3Unproject = {
  "Vec3Unproject",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3Unproject_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Unproject)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Project
static const ni::sParameterDef iMath_Vec3Project_Parameters[3] = { 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "amtxWVP", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRect", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_Vec3Project = {
  "Vec3Project",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3Project_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Project)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3ProjectRHW
static const ni::sParameterDef iMath_Vec3ProjectRHW_Parameters[3] = { 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "amtxWVP", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRect", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_Vec3ProjectRHW = {
  "Vec3ProjectRHW",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_Vec3ProjectRHW_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3ProjectRHW)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3Reflect
static const ni::sParameterDef iMath_Vec3Reflect_Parameters[2] = { 
  { "Dir", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "Normal", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3Reflect = {
  "Vec3Reflect",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_Vec3Reflect_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3Reflect)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Add
static const ni::sParameterDef iMath_Vec4Add_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Add = {
  "Vec4Add",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Add_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Add)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Sub
static const ni::sParameterDef iMath_Vec4Sub_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Sub = {
  "Vec4Sub",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Sub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Sub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Mul
static const ni::sParameterDef iMath_Vec4Mul_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Mul = {
  "Vec4Mul",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Mul_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Mul)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Div
static const ni::sParameterDef iMath_Vec4Div_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Div = {
  "Vec4Div",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Div_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Div)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Scale
static const ni::sParameterDef iMath_Vec4Scale_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "afRight", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4Scale = {
  "Vec4Scale",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Scale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Scale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Compare
static const ni::sParameterDef iMath_Vec4Compare_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Compare = {
  "Vec4Compare",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_Vec4Compare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Compare)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Length
static const ni::sParameterDef iMath_Vec4Length_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Length = {
  "Vec4Length",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec4Length_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Length)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4LengthSq
static const ni::sParameterDef iMath_Vec4LengthSq_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4LengthSq = {
  "Vec4LengthSq",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_Vec4LengthSq_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4LengthSq)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Normalize
static const ni::sParameterDef iMath_Vec4Normalize_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Normalize = {
  "Vec4Normalize",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iMath_Vec4Normalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Normalize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4IsNormal
static const ni::sParameterDef iMath_Vec4IsNormal_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4IsNormal = {
  "Vec4IsNormal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_Vec4IsNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4IsNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Dot
static const ni::sParameterDef iMath_Vec4Dot_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Dot = {
  "Vec4Dot",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_Vec4Dot_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Dot)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Cross
static const ni::sParameterDef iMath_Vec4Cross_Parameters[3] = { 
  { "aA", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aB", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aC", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Cross = {
  "Vec4Cross",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_Vec4Cross_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Cross)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Lerp
static const ni::sParameterDef iMath_Vec4Lerp_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "afF", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4Lerp = {
  "Vec4Lerp",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_Vec4Lerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Lerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Lerp2
static const ni::sParameterDef iMath_Vec4Lerp2_Parameters[3] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aF", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Lerp2 = {
  "Vec4Lerp2",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_Vec4Lerp2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Lerp2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4BlendIntoAccumulator
static const ni::sParameterDef iMath_Vec4BlendIntoAccumulator_Parameters[3] = { 
  { "accumulator", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "newValue", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "smoothRate", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4BlendIntoAccumulator = {
  "Vec4BlendIntoAccumulator",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_Vec4BlendIntoAccumulator_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4BlendIntoAccumulator)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Abs
static const ni::sParameterDef iMath_Vec4Abs_Parameters[1] = { 
  { "aV", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Abs = {
  "Vec4Abs",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iMath_Vec4Abs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Abs)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Min
static const ni::sParameterDef iMath_Vec4Min_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Min = {
  "Vec4Min",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Min_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Min)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Max
static const ni::sParameterDef iMath_Vec4Max_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_Vec4Max = {
  "Vec4Max",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Max_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Max)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4CatmullRom
static const ni::sParameterDef iMath_Vec4CatmullRom_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4CatmullRom = {
  "Vec4CatmullRom",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  5, iMath_Vec4CatmullRom_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4CatmullRom)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Hermite
static const ni::sParameterDef iMath_Vec4Hermite_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V4", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "s", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4Hermite = {
  "Vec4Hermite",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  5, iMath_Vec4Hermite_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Hermite)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4BaryCentric
static const ni::sParameterDef iMath_Vec4BaryCentric_Parameters[5] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "u", ni::eType_F32, NULL, "tF32" }, 
  { "v", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec4BaryCentric = {
  "Vec4BaryCentric",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  5, iMath_Vec4BaryCentric_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4BaryCentric)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4Transform
static const ni::sParameterDef iMath_Vec4Transform_Parameters[2] = { 
  { "aVec", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec4Transform = {
  "Vec4Transform",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  2, iMath_Vec4Transform_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4Transform)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec4TransformArray
static const ni::sParameterDef iMath_Vec4TransformArray_Parameters[2] = { 
  { "apVecs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tVec4fCVec*" }, 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_Vec4TransformArray = {
  "Vec4TransformArray",
  0|ni::eType_Null, NULL, "void",
  2, iMath_Vec4TransformArray_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec4TransformArray)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixIdentity
static const ni::sMethodDef iMath_MatrixIdentity = {
  "MatrixIdentity",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixIdentity)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixIsIdentity
static const ni::sParameterDef iMath_MatrixIsIdentity_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixIsIdentity = {
  "MatrixIsIdentity",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_MatrixIsIdentity_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixIsIdentity)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixAdd
static const ni::sParameterDef iMath_MatrixAdd_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixAdd = {
  "MatrixAdd",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixAdd_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixAdd)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSub
static const ni::sParameterDef iMath_MatrixSub_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixSub = {
  "MatrixSub",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixScale
static const ni::sParameterDef iMath_MatrixScale_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "afRight", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixScale = {
  "MatrixScale",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixScale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixScale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixLerp
static const ni::sParameterDef iMath_MatrixLerp_Parameters[3] = { 
  { "A", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "B", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "fFac", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixLerp = {
  "MatrixLerp",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixLerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixLerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixCompare
static const ni::sParameterDef iMath_MatrixCompare_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixCompare = {
  "MatrixCompare",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_MatrixCompare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixCompare)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixMultiply
static const ni::sParameterDef iMath_MatrixMultiply_Parameters[2] = { 
  { "M1", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "M2", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixMultiply = {
  "MatrixMultiply",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixMultiply_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixMultiply)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDeterminant2
static const ni::sParameterDef iMath_MatrixDeterminant2_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDeterminant2 = {
  "MatrixDeterminant2",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_MatrixDeterminant2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDeterminant2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDeterminant3
static const ni::sParameterDef iMath_MatrixDeterminant3_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDeterminant3 = {
  "MatrixDeterminant3",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_MatrixDeterminant3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDeterminant3)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDeterminant
static const ni::sParameterDef iMath_MatrixDeterminant_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDeterminant = {
  "MatrixDeterminant",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_MatrixDeterminant_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDeterminant)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetHandeness
static const ni::sParameterDef iMath_MatrixGetHandeness_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetHandeness = {
  "MatrixGetHandeness",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_MatrixGetHandeness_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetHandeness)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixInverse
static const ni::sParameterDef iMath_MatrixInverse_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixInverse = {
  "MatrixInverse",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixInverse_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixInverse)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTransformInverse
static const ni::sParameterDef iMath_MatrixTransformInverse_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixTransformInverse = {
  "MatrixTransformInverse",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixTransformInverse_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTransformInverse)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixLookAtRH
static const ni::sParameterDef iMath_MatrixLookAtRH_Parameters[3] = { 
  { "Eye", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "At", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "Up", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixLookAtRH = {
  "MatrixLookAtRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixLookAtRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixLookAtRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixLookAtLH
static const ni::sParameterDef iMath_MatrixLookAtLH_Parameters[3] = { 
  { "Eye", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "At", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "Up", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixLookAtLH = {
  "MatrixLookAtLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixLookAtLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixLookAtLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixOrthoRH
static const ni::sParameterDef iMath_MatrixOrthoRH_Parameters[4] = { 
  { "w", ni::eType_F32, NULL, "tF32" }, 
  { "h", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixOrthoRH = {
  "MatrixOrthoRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixOrthoRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixOrthoRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixOrthoLH
static const ni::sParameterDef iMath_MatrixOrthoLH_Parameters[4] = { 
  { "w", ni::eType_F32, NULL, "tF32" }, 
  { "h", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixOrthoLH = {
  "MatrixOrthoLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixOrthoLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixOrthoLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixOrthoOffCenterRH
static const ni::sParameterDef iMath_MatrixOrthoOffCenterRH_Parameters[6] = { 
  { "l", ni::eType_F32, NULL, "tF32" }, 
  { "r", ni::eType_F32, NULL, "tF32" }, 
  { "t", ni::eType_F32, NULL, "tF32" }, 
  { "b", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixOrthoOffCenterRH = {
  "MatrixOrthoOffCenterRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  6, iMath_MatrixOrthoOffCenterRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixOrthoOffCenterRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixOrthoOffCenterLH
static const ni::sParameterDef iMath_MatrixOrthoOffCenterLH_Parameters[6] = { 
  { "l", ni::eType_F32, NULL, "tF32" }, 
  { "r", ni::eType_F32, NULL, "tF32" }, 
  { "t", ni::eType_F32, NULL, "tF32" }, 
  { "b", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixOrthoOffCenterLH = {
  "MatrixOrthoOffCenterLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  6, iMath_MatrixOrthoOffCenterLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixOrthoOffCenterLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveRH
static const ni::sParameterDef iMath_MatrixPerspectiveRH_Parameters[4] = { 
  { "w", ni::eType_F32, NULL, "tF32" }, 
  { "h", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveRH = {
  "MatrixPerspectiveRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixPerspectiveRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveLH
static const ni::sParameterDef iMath_MatrixPerspectiveLH_Parameters[4] = { 
  { "w", ni::eType_F32, NULL, "tF32" }, 
  { "h", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveLH = {
  "MatrixPerspectiveLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixPerspectiveLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveFovRH
static const ni::sParameterDef iMath_MatrixPerspectiveFovRH_Parameters[4] = { 
  { "fovy", ni::eType_F32, NULL, "tF32" }, 
  { "aspect", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveFovRH = {
  "MatrixPerspectiveFovRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixPerspectiveFovRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveFovRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveFovLH
static const ni::sParameterDef iMath_MatrixPerspectiveFovLH_Parameters[4] = { 
  { "fovy", ni::eType_F32, NULL, "tF32" }, 
  { "aspect", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveFovLH = {
  "MatrixPerspectiveFovLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixPerspectiveFovLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveFovLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveOffCenterRH
static const ni::sParameterDef iMath_MatrixPerspectiveOffCenterRH_Parameters[6] = { 
  { "l", ni::eType_F32, NULL, "tF32" }, 
  { "r", ni::eType_F32, NULL, "tF32" }, 
  { "t", ni::eType_F32, NULL, "tF32" }, 
  { "b", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveOffCenterRH = {
  "MatrixPerspectiveOffCenterRH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  6, iMath_MatrixPerspectiveOffCenterRH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveOffCenterRH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixPerspectiveOffCenterLH
static const ni::sParameterDef iMath_MatrixPerspectiveOffCenterLH_Parameters[6] = { 
  { "l", ni::eType_F32, NULL, "tF32" }, 
  { "r", ni::eType_F32, NULL, "tF32" }, 
  { "t", ni::eType_F32, NULL, "tF32" }, 
  { "b", ni::eType_F32, NULL, "tF32" }, 
  { "zn", ni::eType_F32, NULL, "tF32" }, 
  { "zf", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixPerspectiveOffCenterLH = {
  "MatrixPerspectiveOffCenterLH",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  6, iMath_MatrixPerspectiveOffCenterLH_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixPerspectiveOffCenterLH)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixReflect
static const ni::sParameterDef iMath_MatrixReflect_Parameters[1] = { 
  { "Plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_MatrixReflect = {
  "MatrixReflect",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixReflect_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixReflect)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationAxis
static const ni::sParameterDef iMath_MatrixRotationAxis_Parameters[2] = { 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixRotationAxis = {
  "MatrixRotationAxis",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixRotationAxis_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationAxis)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationQuat
static const ni::sParameterDef iMath_MatrixRotationQuat_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_MatrixRotationQuat = {
  "MatrixRotationQuat",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixRotationQuat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationQuat)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationX
static const ni::sParameterDef iMath_MatrixRotationX_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixRotationX = {
  "MatrixRotationX",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixRotationX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationY
static const ni::sParameterDef iMath_MatrixRotationY_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixRotationY = {
  "MatrixRotationY",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixRotationY_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationY)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationZ
static const ni::sParameterDef iMath_MatrixRotationZ_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixRotationZ = {
  "MatrixRotationZ",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixRotationZ_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationZ)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotationYawPitchRoll
static const ni::sParameterDef iMath_MatrixRotationYawPitchRoll_Parameters[3] = { 
  { "yaw", ni::eType_F32, NULL, "tF32" }, 
  { "pitch", ni::eType_F32, NULL, "tF32" }, 
  { "roll", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixRotationYawPitchRoll = {
  "MatrixRotationYawPitchRoll",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixRotationYawPitchRoll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotationYawPitchRoll)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDecomposeYawPitchRoll
static const ni::sParameterDef iMath_MatrixDecomposeYawPitchRoll_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDecomposeYawPitchRoll = {
  "MatrixDecomposeYawPitchRoll",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixDecomposeYawPitchRoll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDecomposeYawPitchRoll)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixScaling
static const ni::sParameterDef iMath_MatrixScaling_Parameters[1] = { 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixScaling = {
  "MatrixScaling",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixScaling_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixScaling)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixVecScale
static const ni::sParameterDef iMath_MatrixVecScale_Parameters[2] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixVecScale = {
  "MatrixVecScale",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixVecScale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixVecScale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixShadow
static const ni::sParameterDef iMath_MatrixShadow_Parameters[2] = { 
  { "vLight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "Plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_MatrixShadow = {
  "MatrixShadow",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixShadow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixShadow)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTranslation
static const ni::sParameterDef iMath_MatrixTranslation_Parameters[1] = { 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixTranslation = {
  "MatrixTranslation",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTranspose
static const ni::sParameterDef iMath_MatrixTranspose_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixTranspose = {
  "MatrixTranspose",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixTranspose_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTranspose)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTranspose3x3
static const ni::sParameterDef iMath_MatrixTranspose3x3_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixTranspose3x3 = {
  "MatrixTranspose3x3",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  1, iMath_MatrixTranspose3x3_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTranspose3x3)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTextureOffset
static const ni::sParameterDef iMath_MatrixTextureOffset_Parameters[3] = { 
  { "fBias", ni::eType_F32, NULL, "tF32" }, 
  { "nTexW", ni::eType_I32, NULL, "tI32" }, 
  { "nTexH", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iMath_MatrixTextureOffset = {
  "MatrixTextureOffset",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixTextureOffset_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTextureOffset)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixTextureOffset2
static const ni::sParameterDef iMath_MatrixTextureOffset2_Parameters[4] = { 
  { "fBias", ni::eType_F32, NULL, "tF32" }, 
  { "nTexW", ni::eType_I32, NULL, "tI32" }, 
  { "nTexH", ni::eType_I32, NULL, "tI32" }, 
  { "nDepthBits", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iMath_MatrixTextureOffset2 = {
  "MatrixTextureOffset2",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixTextureOffset2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixTextureOffset2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetForward
static const ni::sParameterDef iMath_MatrixGetForward_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetForward = {
  "MatrixGetForward",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixGetForward_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetForward)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetUp
static const ni::sParameterDef iMath_MatrixGetUp_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetUp = {
  "MatrixGetUp",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixGetUp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetUp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetRight
static const ni::sParameterDef iMath_MatrixGetRight_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetRight = {
  "MatrixGetRight",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixGetRight_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetRight)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetTranslation
static const ni::sParameterDef iMath_MatrixGetTranslation_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetTranslation = {
  "MatrixGetTranslation",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixGetTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetForward
static const ni::sParameterDef iMath_MatrixSetForward_Parameters[2] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixSetForward = {
  "MatrixSetForward",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetForward_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetForward)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetUp
static const ni::sParameterDef iMath_MatrixSetUp_Parameters[2] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixSetUp = {
  "MatrixSetUp",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetUp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetUp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetRight
static const ni::sParameterDef iMath_MatrixSetRight_Parameters[2] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixSetRight = {
  "MatrixSetRight",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetRight_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetRight)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetTranslation
static const ni::sParameterDef iMath_MatrixSetTranslation_Parameters[2] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixSetTranslation = {
  "MatrixSetTranslation",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixIsNormal
static const ni::sParameterDef iMath_MatrixIsNormal_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixIsNormal = {
  "MatrixIsNormal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_MatrixIsNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixIsNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixIsOrthogonal
static const ni::sParameterDef iMath_MatrixIsOrthogonal_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixIsOrthogonal = {
  "MatrixIsOrthogonal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_MatrixIsOrthogonal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixIsOrthogonal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixIsOrthoNormal
static const ni::sParameterDef iMath_MatrixIsOrthoNormal_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixIsOrthoNormal = {
  "MatrixIsOrthoNormal",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_MatrixIsOrthoNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixIsOrthoNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetRotation
static const ni::sParameterDef iMath_MatrixSetRotation_Parameters[2] = { 
  { "In", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "RotM", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixSetRotation = {
  "MatrixSetRotation",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetRotation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetRotation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixToEuler
static const ni::sParameterDef iMath_MatrixToEuler_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixToEuler = {
  "MatrixToEuler",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixToEuler_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixToEuler)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixToCoordinateSystem
static const ni::sParameterDef iMath_MatrixToCoordinateSystem_Parameters[4] = { 
  { "avRight", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avUp", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avFwd", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avOrg", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixToCoordinateSystem = {
  "MatrixToCoordinateSystem",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixToCoordinateSystem_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixToCoordinateSystem)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixGetProjectedTranslation
static const ni::sParameterDef iMath_MatrixGetProjectedTranslation_Parameters[1] = { 
  { "In", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixGetProjectedTranslation = {
  "MatrixGetProjectedTranslation",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixGetProjectedTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixGetProjectedTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetProjectedTranslation
static const ni::sParameterDef iMath_MatrixSetProjectedTranslation_Parameters[2] = { 
  { "In", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "avT", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_MatrixSetProjectedTranslation = {
  "MatrixSetProjectedTranslation",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetProjectedTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetProjectedTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixSetNotRotation
static const ni::sParameterDef iMath_MatrixSetNotRotation_Parameters[2] = { 
  { "In", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixSetNotRotation = {
  "MatrixSetNotRotation",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixSetNotRotation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixSetNotRotation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixRotate
static const ni::sParameterDef iMath_MatrixRotate_Parameters[2] = { 
  { "M1", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "M2", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixRotate = {
  "MatrixRotate",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_MatrixRotate_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixRotate)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixViewport
static const ni::sParameterDef iMath_MatrixViewport_Parameters[3] = { 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "afMinZ", ni::eType_F32, NULL, "tF32" }, 
  { "afMaxZ", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixViewport = {
  "MatrixViewport",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixViewport_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixViewport)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixAdjustViewport
static const ni::sParameterDef iMath_MatrixAdjustViewport_Parameters[4] = { 
  { "aContextVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "aVirtualVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }, 
  { "afMinZ", ni::eType_F32, NULL, "tF32" }, 
  { "afMaxZ", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_MatrixAdjustViewport = {
  "MatrixAdjustViewport",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  4, iMath_MatrixAdjustViewport_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixAdjustViewport)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDecomposeGetTranslation
static const ni::sParameterDef iMath_MatrixDecomposeGetTranslation_Parameters[1] = { 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDecomposeGetTranslation = {
  "MatrixDecomposeGetTranslation",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixDecomposeGetTranslation_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDecomposeGetTranslation)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDecomposeGetZYX
static const ni::sParameterDef iMath_MatrixDecomposeGetZYX_Parameters[1] = { 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDecomposeGetZYX = {
  "MatrixDecomposeGetZYX",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_MatrixDecomposeGetZYX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDecomposeGetZYX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDecomposeGetQuat
static const ni::sParameterDef iMath_MatrixDecomposeGetQuat_Parameters[1] = { 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDecomposeGetQuat = {
  "MatrixDecomposeGetQuat",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_MatrixDecomposeGetQuat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDecomposeGetQuat)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixDecomposeGetScale
static const ni::sParameterDef iMath_MatrixDecomposeGetScale_Parameters[1] = { 
  { "aMatrix", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_MatrixDecomposeGetScale = {
  "MatrixDecomposeGetScale",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iMath_MatrixDecomposeGetScale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixDecomposeGetScale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixCompose
static const ni::sParameterDef iMath_MatrixCompose_Parameters[3] = { 
  { "aT", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aZYX", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aS", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_MatrixCompose = {
  "MatrixCompose",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixCompose_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixCompose)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatrixComposeQ
static const ni::sParameterDef iMath_MatrixComposeQ_Parameters[3] = { 
  { "aT", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aQ", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "aS", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_MatrixComposeQ = {
  "MatrixComposeQ",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  3, iMath_MatrixComposeQ_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MatrixComposeQ)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatIdentity
static const ni::sMethodDef iMath_QuatIdentity = {
  "QuatIdentity",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatIdentity)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatIsIdentity
static const ni::sParameterDef iMath_QuatIsIdentity_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatIsIdentity = {
  "QuatIsIdentity",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_QuatIsIdentity_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatIsIdentity)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatAdd
static const ni::sParameterDef iMath_QuatAdd_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatAdd = {
  "QuatAdd",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatAdd_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatAdd)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatSub
static const ni::sParameterDef iMath_QuatSub_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatSub = {
  "QuatSub",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatSub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatSub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatScale
static const ni::sParameterDef iMath_QuatScale_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "afRight", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatScale = {
  "QuatScale",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatScale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatScale)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatCompare
static const ni::sParameterDef iMath_QuatCompare_Parameters[2] = { 
  { "aLeft", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "aRight", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatCompare = {
  "QuatCompare",
  0|ni::eType_I32, NULL, "tI32",
  2, iMath_QuatCompare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatCompare)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatBaryCentric
static const ni::sParameterDef iMath_QuatBaryCentric_Parameters[5] = { 
  { "Q1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q3", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "f", ni::eType_F32, NULL, "tF32" }, 
  { "g", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatBaryCentric = {
  "QuatBaryCentric",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  5, iMath_QuatBaryCentric_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatBaryCentric)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatConjugate
static const ni::sParameterDef iMath_QuatConjugate_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatConjugate = {
  "QuatConjugate",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatConjugate_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatConjugate)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatDot
static const ni::sParameterDef iMath_QuatDot_Parameters[2] = { 
  { "Q1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatDot = {
  "QuatDot",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_QuatDot_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatDot)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatExp
static const ni::sParameterDef iMath_QuatExp_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatExp = {
  "QuatExp",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatExp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatExp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatInverse
static const ni::sParameterDef iMath_QuatInverse_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatInverse = {
  "QuatInverse",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatInverse_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatInverse)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatLength
static const ni::sParameterDef iMath_QuatLength_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatLength = {
  "QuatLength",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_QuatLength_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatLength)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatLengthSq
static const ni::sParameterDef iMath_QuatLengthSq_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatLengthSq = {
  "QuatLengthSq",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_QuatLengthSq_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatLengthSq)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatLn
static const ni::sParameterDef iMath_QuatLn_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatLn = {
  "QuatLn",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatLn_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatLn)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatMultiply
static const ni::sParameterDef iMath_QuatMultiply_Parameters[2] = { 
  { "Q1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatMultiply = {
  "QuatMultiply",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatMultiply_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatMultiply)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatNormalize
static const ni::sParameterDef iMath_QuatNormalize_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatNormalize = {
  "QuatNormalize",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatNormalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatNormalize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationAxis
static const ni::sParameterDef iMath_QuatRotationAxis_Parameters[2] = { 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatRotationAxis = {
  "QuatRotationAxis",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatRotationAxis_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationAxis)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationX
static const ni::sParameterDef iMath_QuatRotationX_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatRotationX = {
  "QuatRotationX",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatRotationX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationY
static const ni::sParameterDef iMath_QuatRotationY_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatRotationY = {
  "QuatRotationY",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatRotationY_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationY)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationZ
static const ni::sParameterDef iMath_QuatRotationZ_Parameters[1] = { 
  { "angle", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatRotationZ = {
  "QuatRotationZ",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatRotationZ_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationZ)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationXYZ
static const ni::sParameterDef iMath_QuatRotationXYZ_Parameters[1] = { 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_QuatRotationXYZ = {
  "QuatRotationXYZ",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatRotationXYZ_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationXYZ)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationMatrix
static const ni::sParameterDef iMath_QuatRotationMatrix_Parameters[1] = { 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_QuatRotationMatrix = {
  "QuatRotationMatrix",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  1, iMath_QuatRotationMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationMatrix)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationYawPitchRoll
static const ni::sParameterDef iMath_QuatRotationYawPitchRoll_Parameters[3] = { 
  { "yaw", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "pitch", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "roll", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }
}; 
static const ni::sMethodDef iMath_QuatRotationYawPitchRoll = {
  "QuatRotationYawPitchRoll",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  3, iMath_QuatRotationYawPitchRoll_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationYawPitchRoll)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatRotationVector
static const ni::sParameterDef iMath_QuatRotationVector_Parameters[2] = { 
  { "vFrom", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "vTo", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_QuatRotationVector = {
  "QuatRotationVector",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  2, iMath_QuatRotationVector_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatRotationVector)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatSlerp
static const ni::sParameterDef iMath_QuatSlerp_Parameters[4] = { 
  { "Q1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "t", ni::eType_F32, NULL, "tF32" }, 
  { "mode", ni::eType_Enum, NULL, "eQuatSlerp" }
}; 
static const ni::sMethodDef iMath_QuatSlerp = {
  "QuatSlerp",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  4, iMath_QuatSlerp_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatSlerp)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatSquad
static const ni::sParameterDef iMath_QuatSquad_Parameters[5] = { 
  { "Q1", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q2", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q3", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "Q4", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }, 
  { "t", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_QuatSquad = {
  "QuatSquad",
  0|ni::eType_Vec4f, NULL, "sQuatf",
  5, iMath_QuatSquad_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatSquad)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatToAxisAngle
static const ni::sParameterDef iMath_QuatToAxisAngle_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatToAxisAngle = {
  "QuatToAxisAngle",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  1, iMath_QuatToAxisAngle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatToAxisAngle)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: QuatToEuler
static const ni::sParameterDef iMath_QuatToEuler_Parameters[1] = { 
  { "Q", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sQuatf&" }
}; 
static const ni::sMethodDef iMath_QuatToEuler = {
  "QuatToEuler",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_QuatToEuler_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_QuatToEuler)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneDot
static const ni::sParameterDef iMath_PlaneDot_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sVec4f&" }
}; 
static const ni::sMethodDef iMath_PlaneDot = {
  "PlaneDot",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_PlaneDot_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneDot)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneDotCoord
static const ni::sParameterDef iMath_PlaneDotCoord_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneDotCoord = {
  "PlaneDotCoord",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_PlaneDotCoord_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneDotCoord)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneDotNormal
static const ni::sParameterDef iMath_PlaneDotNormal_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneDotNormal = {
  "PlaneDotNormal",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_PlaneDotNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneDotNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneDistance
static const ni::sParameterDef iMath_PlaneDistance_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "V", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneDistance = {
  "PlaneDistance",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_PlaneDistance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneDistance)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneFromPointNormal
static const ni::sParameterDef iMath_PlaneFromPointNormal_Parameters[2] = { 
  { "vPoint", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "vNormal", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneFromPointNormal = {
  "PlaneFromPointNormal",
  0|ni::eType_Vec4f, NULL, "sPlanef",
  2, iMath_PlaneFromPointNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneFromPointNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneFromPoints
static const ni::sParameterDef iMath_PlaneFromPoints_Parameters[3] = { 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V3", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneFromPoints = {
  "PlaneFromPoints",
  0|ni::eType_Vec4f, NULL, "sPlanef",
  3, iMath_PlaneFromPoints_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneFromPoints)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneIntersectLine
static const ni::sParameterDef iMath_PlaneIntersectLine_Parameters[3] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneIntersectLine = {
  "PlaneIntersectLine",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_PlaneIntersectLine_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneIntersectLine)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneIntersectRay
static const ni::sParameterDef iMath_PlaneIntersectRay_Parameters[3] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "avRayPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avRayDir", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneIntersectRay = {
  "PlaneIntersectRay",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_PlaneIntersectRay_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneIntersectRay)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneNormalize
static const ni::sParameterDef iMath_PlaneNormalize_Parameters[1] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_PlaneNormalize = {
  "PlaneNormalize",
  0|ni::eType_Vec4f, NULL, "sPlanef",
  1, iMath_PlaneNormalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneNormalize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneTransform
static const ni::sParameterDef iMath_PlaneTransform_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_PlaneTransform = {
  "PlaneTransform",
  0|ni::eType_Vec4f, NULL, "sPlanef",
  2, iMath_PlaneTransform_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneTransform)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneTransformInversedMatrix
static const ni::sParameterDef iMath_PlaneTransformInversedMatrix_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "M", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }
}; 
static const ni::sMethodDef iMath_PlaneTransformInversedMatrix = {
  "PlaneTransformInversedMatrix",
  0|ni::eType_Vec4f, NULL, "sPlanef",
  2, iMath_PlaneTransformInversedMatrix_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneTransformInversedMatrix)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneIntersection
static const ni::sParameterDef iMath_PlaneIntersection_Parameters[3] = { 
  { "PA", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "PB", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "PC", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_PlaneIntersection = {
  "PlaneIntersection",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_PlaneIntersection_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneIntersection)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneClosest
static const ni::sParameterDef iMath_PlaneClosest_Parameters[2] = { 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "A", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneClosest = {
  "PlaneClosest",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  2, iMath_PlaneClosest_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneClosest)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneType
static const ni::sParameterDef iMath_PlaneType_Parameters[1] = { 
  { "Plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_PlaneType = {
  "PlaneType",
  0|ni::eType_Enum, NULL, "ePlaneType",
  1, iMath_PlaneType_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneType)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneMaxType
static const ni::sParameterDef iMath_PlaneMaxType_Parameters[1] = { 
  { "Plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }
}; 
static const ni::sMethodDef iMath_PlaneMaxType = {
  "PlaneMaxType",
  0|ni::eType_Enum, NULL, "ePlaneType",
  1, iMath_PlaneMaxType_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneMaxType)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneExtractCoordinateSystem
static const ni::sParameterDef iMath_PlaneExtractCoordinateSystem_Parameters[2] = { 
  { "Plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "avFwdDir", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_PlaneExtractCoordinateSystem = {
  "PlaneExtractCoordinateSystem",
  0|ni::eType_Matrixf, NULL, "sMatrixf",
  2, iMath_PlaneExtractCoordinateSystem_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneExtractCoordinateSystem)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: PlaneIntersectSphere
static const ni::sParameterDef iMath_PlaneIntersectSphere_Parameters[3] = { 
  { "plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "avCenter", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afRadius", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }
}; 
static const ni::sMethodDef iMath_PlaneIntersectSphere = {
  "PlaneIntersectSphere",
  0|ni::eType_I8, NULL, "tBool",
  3, iMath_PlaneIntersectSphere_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_PlaneIntersectSphere)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleAreaNormal
static const ni::sParameterDef iMath_TriangleAreaNormal_Parameters[3] = { 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleAreaNormal = {
  "TriangleAreaNormal",
  0|ni::eType_Vec4f, NULL, "sVec4f",
  3, iMath_TriangleAreaNormal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleAreaNormal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleIsDegenerate
static const ni::sParameterDef iMath_TriangleIsDegenerate_Parameters[3] = { 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleIsDegenerate = {
  "TriangleIsDegenerate",
  0|ni::eType_I8, NULL, "tBool",
  3, iMath_TriangleIsDegenerate_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleIsDegenerate)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleIntersectTriangle
static const ni::sParameterDef iMath_TriangleIntersectTriangle_Parameters[6] = { 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "U0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "U1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "U2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleIntersectTriangle = {
  "TriangleIntersectTriangle",
  0|ni::eType_I8, NULL, "tBool",
  6, iMath_TriangleIntersectTriangle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleIntersectTriangle)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleIntersectRay
static const ni::sParameterDef iMath_TriangleIntersectRay_Parameters[5] = { 
  { "avOrigin", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avDir", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleIntersectRay = {
  "TriangleIntersectRay",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  5, iMath_TriangleIntersectRay_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleIntersectRay)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleIntersectRayCull
static const ni::sParameterDef iMath_TriangleIntersectRayCull_Parameters[5] = { 
  { "avOrigin", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avDir", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleIntersectRayCull = {
  "TriangleIntersectRayCull",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  5, iMath_TriangleIntersectRayCull_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleIntersectRayCull)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleIntersectAABB
static const ni::sParameterDef iMath_TriangleIntersectAABB_Parameters[5] = { 
  { "V0", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V1", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "V2", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avMin", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "avMax", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleIntersectAABB = {
  "TriangleIntersectAABB",
  0|ni::eType_I8, NULL, "tBool",
  5, iMath_TriangleIntersectAABB_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleIntersectAABB)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: TriangleBaryCentric
static const ni::sParameterDef iMath_TriangleBaryCentric_Parameters[4] = { 
  { "A", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "B", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "C", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_TriangleBaryCentric = {
  "TriangleBaryCentric",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  4, iMath_TriangleBaryCentric_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_TriangleBaryCentric)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: WrapFloat
static const ni::sParameterDef iMath_WrapFloat_Parameters[3] = { 
  { "aX", ni::eType_F32, NULL, "tF32" }, 
  { "aMin", ni::eType_F32, NULL, "tF32" }, 
  { "aMax", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_WrapFloat = {
  "WrapFloat",
  0|ni::eType_F32, NULL, "tF32",
  3, iMath_WrapFloat_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_WrapFloat)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: WrapInt
static const ni::sParameterDef iMath_WrapInt_Parameters[3] = { 
  { "aX", ni::eType_I32, NULL, "tI32" }, 
  { "aMin", ni::eType_I32, NULL, "tI32" }, 
  { "aMax", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iMath_WrapInt = {
  "WrapInt",
  0|ni::eType_I32, NULL, "tI32",
  3, iMath_WrapInt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_WrapInt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: WrapRad
static const ni::sParameterDef iMath_WrapRad_Parameters[1] = { 
  { "aX", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_WrapRad = {
  "WrapRad",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_WrapRad_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_WrapRad)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: WrapRad2
static const ni::sParameterDef iMath_WrapRad2_Parameters[1] = { 
  { "aX", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_WrapRad2 = {
  "WrapRad2",
  0|ni::eType_F32, NULL, "tF32",
  1, iMath_WrapRad2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_WrapRad2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetAngleFromPoints2D
static const ni::sParameterDef iMath_GetAngleFromPoints2D_Parameters[2] = { 
  { "aStartPos", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }, 
  { "aGoalPos", ni::eTypeFlags_Constant|ni::eType_Vec2f|ni::eTypeFlags_Pointer, NULL, "const sVec2f&" }
}; 
static const ni::sMethodDef iMath_GetAngleFromPoints2D = {
  "GetAngleFromPoints2D",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_GetAngleFromPoints2D_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_GetAngleFromPoints2D)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetAngleFromPoints3D
static const ni::sParameterDef iMath_GetAngleFromPoints3D_Parameters[2] = { 
  { "aStartPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aGoalPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_GetAngleFromPoints3D = {
  "GetAngleFromPoints3D",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  2, iMath_GetAngleFromPoints3D_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_GetAngleFromPoints3D)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ClassifyPoint
static const ni::sParameterDef iMath_ClassifyPoint_Parameters[2] = { 
  { "plane", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sPlanef&" }, 
  { "point", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_ClassifyPoint = {
  "ClassifyPoint",
  0|ni::eType_Enum, NULL, "eClassify",
  2, iMath_ClassifyPoint_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ClassifyPoint)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: IsPointInsideEdge
static const ni::sParameterDef iMath_IsPointInsideEdge_Parameters[3] = { 
  { "A", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "B", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_IsPointInsideEdge = {
  "IsPointInsideEdge",
  0|ni::eType_I8, NULL, "tBool",
  3, iMath_IsPointInsideEdge_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_IsPointInsideEdge)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ClosestPointOnLine
static const ni::sParameterDef iMath_ClosestPointOnLine_Parameters[3] = { 
  { "A", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "B", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_ClosestPointOnLine = {
  "ClosestPointOnLine",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_ClosestPointOnLine_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ClosestPointOnLine)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ClosestPointOnTriangle
static const ni::sParameterDef iMath_ClosestPointOnTriangle_Parameters[4] = { 
  { "A", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "B", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "C", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "P", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_ClosestPointOnTriangle = {
  "ClosestPointOnTriangle",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  4, iMath_ClosestPointOnTriangle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ClosestPointOnTriangle)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetAngularDifference
static const ni::sParameterDef iMath_GetAngularDifference_Parameters[2] = { 
  { "afA", ni::eType_F32, NULL, "tF32" }, 
  { "afB", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_GetAngularDifference = {
  "GetAngularDifference",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_GetAngularDifference_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_GetAngularDifference)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetScreenPosition
static const ni::sParameterDef iMath_GetScreenPosition_Parameters[3] = { 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "mtxVP", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aRect", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_GetScreenPosition = {
  "GetScreenPosition",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_GetScreenPosition_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_GetScreenPosition)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3SphericalToCartesian
static const ni::sParameterDef iMath_Vec3SphericalToCartesian_Parameters[1] = { 
  { "avS", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3SphericalToCartesian = {
  "Vec3SphericalToCartesian",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_Vec3SphericalToCartesian_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3SphericalToCartesian)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3CartesianToSpherical
static const ni::sParameterDef iMath_Vec3CartesianToSpherical_Parameters[1] = { 
  { "avC", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }
}; 
static const ni::sMethodDef iMath_Vec3CartesianToSpherical = {
  "Vec3CartesianToSpherical",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  1, iMath_Vec3CartesianToSpherical_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3CartesianToSpherical)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3OrbitPitch
static const ni::sParameterDef iMath_Vec3OrbitPitch_Parameters[3] = { 
  { "aTarget", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afPitch", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3OrbitPitch = {
  "Vec3OrbitPitch",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3OrbitPitch_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3OrbitPitch)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3OrbitYaw
static const ni::sParameterDef iMath_Vec3OrbitYaw_Parameters[3] = { 
  { "aTarget", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afYaw", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3OrbitYaw = {
  "Vec3OrbitYaw",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  3, iMath_Vec3OrbitYaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3OrbitYaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Vec3OrbitYawPitch
static const ni::sParameterDef iMath_Vec3OrbitYawPitch_Parameters[4] = { 
  { "aTarget", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "aPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "afYaw", ni::eType_F32, NULL, "tF32" }, 
  { "afPitch", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_Vec3OrbitYawPitch = {
  "Vec3OrbitYawPitch",
  0|ni::eType_Vec3f, NULL, "sVec3f",
  4, iMath_Vec3OrbitYawPitch_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Vec3OrbitYawPitch)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelScaleX
static const ni::sParameterDef iMath_ComputePixelScaleX_Parameters[4] = { 
  { "aPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "amtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "amtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelScaleX = {
  "ComputePixelScaleX",
  0|ni::eType_F32, NULL, "tF32",
  4, iMath_ComputePixelScaleX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelScaleX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelScaleY
static const ni::sParameterDef iMath_ComputePixelScaleY_Parameters[4] = { 
  { "aPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "amtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "amtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelScaleY = {
  "ComputePixelScaleY",
  0|ni::eType_F32, NULL, "tF32",
  4, iMath_ComputePixelScaleY_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelScaleY)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelWorldSizeX
static const ni::sParameterDef iMath_ComputePixelWorldSizeX_Parameters[5] = { 
  { "afPixelSize", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "mtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "mtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelWorldSizeX = {
  "ComputePixelWorldSizeX",
  0|ni::eType_F32, NULL, "tF32",
  5, iMath_ComputePixelWorldSizeX_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelWorldSizeX)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelWorldSizeY
static const ni::sParameterDef iMath_ComputePixelWorldSizeY_Parameters[5] = { 
  { "afPixelSize", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "mtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "mtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelWorldSizeY = {
  "ComputePixelWorldSizeY",
  0|ni::eType_F32, NULL, "tF32",
  5, iMath_ComputePixelWorldSizeY_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelWorldSizeY)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelWorldSizeVec2
static const ni::sParameterDef iMath_ComputePixelWorldSizeVec2_Parameters[5] = { 
  { "afPixelSize", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "mtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "mtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelWorldSizeVec2 = {
  "ComputePixelWorldSizeVec2",
  0|ni::eType_Vec2f, NULL, "sVec2f",
  5, iMath_ComputePixelWorldSizeVec2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelWorldSizeVec2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ComputePixelWorldSize
static const ni::sParameterDef iMath_ComputePixelWorldSize_Parameters[5] = { 
  { "afPixelSize", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec3f|ni::eTypeFlags_Pointer, NULL, "const sVec3f&" }, 
  { "amtxWorldView", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "amtxProj", ni::eTypeFlags_Constant|ni::eType_Matrixf|ni::eTypeFlags_Pointer, NULL, "const sMatrixf&" }, 
  { "aVP", ni::eTypeFlags_Constant|ni::eType_Vec4f|ni::eTypeFlags_Pointer, NULL, "const sRectf&" }
}; 
static const ni::sMethodDef iMath_ComputePixelWorldSize = {
  "ComputePixelWorldSize",
  0|ni::eType_F32, NULL, "tF32",
  5, iMath_ComputePixelWorldSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ComputePixelWorldSize)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det2x2f
static const ni::sParameterDef iMath_Det2x2f_Parameters[4] = { 
  { "a", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "b", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "c", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "d", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }
}; 
static const ni::sMethodDef iMath_Det2x2f = {
  "Det2x2f",
  0|ni::eType_F32, NULL, "tF32",
  4, iMath_Det2x2f_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det2x2f)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det3x3f
static const ni::sParameterDef iMath_Det3x3f_Parameters[9] = { 
  { "a0", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a1", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a2", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a3", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a4", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a5", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a6", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a7", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a8", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }
}; 
static const ni::sMethodDef iMath_Det3x3f = {
  "Det3x3f",
  0|ni::eType_F32, NULL, "tF32",
  9, iMath_Det3x3f_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det3x3f)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det4x4f
static const ni::sParameterDef iMath_Det4x4f_Parameters[16] = { 
  { "a0", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a1", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a2", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a3", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a4", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a5", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a6", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a7", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a8", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a9", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a10", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a11", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a12", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a13", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a14", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }, 
  { "a15", ni::eTypeFlags_Constant|ni::eType_F32, NULL, "const tF32" }
}; 
static const ni::sMethodDef iMath_Det4x4f = {
  "Det4x4f",
  0|ni::eType_F32, NULL, "tF32",
  16, iMath_Det4x4f_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det4x4f)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det2x2d
static const ni::sParameterDef iMath_Det2x2d_Parameters[4] = { 
  { "a", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "b", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "c", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "d", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }
}; 
static const ni::sMethodDef iMath_Det2x2d = {
  "Det2x2d",
  0|ni::eType_F64, NULL, "tF64",
  4, iMath_Det2x2d_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det2x2d)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det3x3d
static const ni::sParameterDef iMath_Det3x3d_Parameters[9] = { 
  { "a0", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a1", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a2", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a3", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a4", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a5", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a6", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a7", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a8", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }
}; 
static const ni::sMethodDef iMath_Det3x3d = {
  "Det3x3d",
  0|ni::eType_F64, NULL, "tF64",
  9, iMath_Det3x3d_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det3x3d)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Det4x4d
static const ni::sParameterDef iMath_Det4x4d_Parameters[16] = { 
  { "a0", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a1", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a2", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a3", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a4", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a5", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a6", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a7", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a8", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a9", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a10", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a11", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a12", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a13", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a14", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }, 
  { "a15", ni::eTypeFlags_Constant|ni::eType_F64, NULL, "const tF64" }
}; 
static const ni::sMethodDef iMath_Det4x4d = {
  "Det4x4d",
  0|ni::eType_F64, NULL, "tF64",
  16, iMath_Det4x4d_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_Det4x4d)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FovHzToVt
static const ni::sParameterDef iMath_FovHzToVt_Parameters[2] = { 
  { "afHFov", ni::eType_F32, NULL, "tF32" }, 
  { "afWbyHAspect", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_FovHzToVt = {
  "FovHzToVt",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_FovHzToVt_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_FovHzToVt)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: FovVtToHz
static const ni::sParameterDef iMath_FovVtToHz_Parameters[2] = { 
  { "afVFov", ni::eType_F32, NULL, "tF32" }, 
  { "afWbyHAspect", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iMath_FovVtToHz = {
  "FovVtToHz",
  0|ni::eType_F32, NULL, "tF32",
  2, iMath_FovVtToHz_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_FovVtToHz)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ClampT
static const ni::sParameterDef iMath_ClampT_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_ClampT = {
  "ClampT",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_ClampT_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ClampT)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: RepeatT
static const ni::sParameterDef iMath_RepeatT_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_RepeatT = {
  "RepeatT",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_RepeatT_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_RepeatT)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MirrorT
static const ni::sParameterDef iMath_MirrorT_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_MirrorT = {
  "MirrorT",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_MirrorT_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_MirrorT)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CycleT
static const ni::sParameterDef iMath_CycleT_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CycleT = {
  "CycleT",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CycleT_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CycleT)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveStep
static const ni::sParameterDef iMath_CurveStep_Parameters[3] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }, 
  { "t", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveStep = {
  "CurveStep",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CurveStep_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveStep)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveLinear
static const ni::sParameterDef iMath_CurveLinear_Parameters[3] = { 
  { "V1", ni::eType_F64, NULL, "tF64" }, 
  { "V2", ni::eType_F64, NULL, "tF64" }, 
  { "s", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveLinear = {
  "CurveLinear",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CurveLinear_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveLinear)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveCos
static const ni::sParameterDef iMath_CurveCos_Parameters[3] = { 
  { "a", ni::eType_F64, NULL, "tF64" }, 
  { "b", ni::eType_F64, NULL, "tF64" }, 
  { "t", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveCos = {
  "CurveCos",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CurveCos_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveCos)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveHermite
static const ni::sParameterDef iMath_CurveHermite_Parameters[5] = { 
  { "V1", ni::eType_F64, NULL, "tF64" }, 
  { "T1", ni::eType_F64, NULL, "tF64" }, 
  { "V2", ni::eType_F64, NULL, "tF64" }, 
  { "T2", ni::eType_F64, NULL, "tF64" }, 
  { "s", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveHermite = {
  "CurveHermite",
  0|ni::eType_F64, NULL, "tF64",
  5, iMath_CurveHermite_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveHermite)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveCatmullRom
static const ni::sParameterDef iMath_CurveCatmullRom_Parameters[5] = { 
  { "V1", ni::eType_F64, NULL, "tF64" }, 
  { "V2", ni::eType_F64, NULL, "tF64" }, 
  { "V3", ni::eType_F64, NULL, "tF64" }, 
  { "V4", ni::eType_F64, NULL, "tF64" }, 
  { "s", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveCatmullRom = {
  "CurveCatmullRom",
  0|ni::eType_F64, NULL, "tF64",
  5, iMath_CurveCatmullRom_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveCatmullRom)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveCardinal
static const ni::sParameterDef iMath_CurveCardinal_Parameters[4] = { 
  { "V1", ni::eType_F64, NULL, "tF64" }, 
  { "V2", ni::eType_F64, NULL, "tF64" }, 
  { "s", ni::eType_F64, NULL, "tF64" }, 
  { "a", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveCardinal = {
  "CurveCardinal",
  0|ni::eType_F64, NULL, "tF64",
  4, iMath_CurveCardinal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveCardinal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CurveCardinal4
static const ni::sParameterDef iMath_CurveCardinal4_Parameters[6] = { 
  { "V1", ni::eType_F64, NULL, "tF64" }, 
  { "V2", ni::eType_F64, NULL, "tF64" }, 
  { "V3", ni::eType_F64, NULL, "tF64" }, 
  { "V4", ni::eType_F64, NULL, "tF64" }, 
  { "s", ni::eType_F64, NULL, "tF64" }, 
  { "a", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CurveCardinal4 = {
  "CurveCardinal4",
  0|ni::eType_F64, NULL, "tF64",
  6, iMath_CurveCardinal4_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CurveCardinal4)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CycleLinear
static const ni::sParameterDef iMath_CycleLinear_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CycleLinear = {
  "CycleLinear",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CycleLinear_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CycleLinear)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CycleCos
static const ni::sParameterDef iMath_CycleCos_Parameters[3] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CycleCos = {
  "CycleCos",
  0|ni::eType_F64, NULL, "tF64",
  3, iMath_CycleCos_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CycleCos)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CycleCardinal
static const ni::sParameterDef iMath_CycleCardinal_Parameters[4] = { 
  { "aX", ni::eType_F64, NULL, "tF64" }, 
  { "aMin", ni::eType_F64, NULL, "tF64" }, 
  { "aMax", ni::eType_F64, NULL, "tF64" }, 
  { "a", ni::eType_F64, NULL, "tF64" }
}; 
static const ni::sMethodDef iMath_CycleCardinal = {
  "CycleCardinal",
  0|ni::eType_F64, NULL, "tF64",
  4, iMath_CycleCardinal_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_CycleCardinal)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

// Method: ProbSum
static const ni::sParameterDef iMath_ProbSum_Parameters[1] = { 
  { "apProbs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tF64CVec*" }
}; 
static const ni::sMethodDef iMath_ProbSum = {
  "ProbSum",
  0|ni::eType_F64, NULL, "tF64",
  1, iMath_ProbSum_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ProbSum)
#else
  NULL
#endif
};

// Method: ProbNormalize
static const ni::sParameterDef iMath_ProbNormalize_Parameters[1] = { 
  { "apProbs", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tF64CVec*" }
}; 
static const ni::sMethodDef iMath_ProbNormalize = {
  "ProbNormalize",
  0|ni::eType_I8, NULL, "tBool",
  1, iMath_ProbNormalize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ProbNormalize)
#else
  NULL
#endif
};

// Method: ProbSampleBuildAliasMethodArrays
static const ni::sParameterDef iMath_ProbSampleBuildAliasMethodArrays_Parameters[3] = { 
  { "apProbs", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tF64CVec*" }, 
  { "apAMQ", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tF64CVec*" }, 
  { "apAMA", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tU32CVec*" }
}; 
static const ni::sMethodDef iMath_ProbSampleBuildAliasMethodArrays = {
  "ProbSampleBuildAliasMethodArrays",
  0|ni::eType_I8, NULL, "tBool",
  3, iMath_ProbSampleBuildAliasMethodArrays_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ProbSampleBuildAliasMethodArrays)
#else
  NULL
#endif
};

// Method: ProbSampleAliasMethod
static const ni::sParameterDef iMath_ProbSampleAliasMethod_Parameters[3] = { 
  { "apResults", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "tU32CVec*" }, 
  { "apAMQ", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tF64CVec*" }, 
  { "apAMA", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tU32CVec*" }
}; 
static const ni::sMethodDef iMath_ProbSampleAliasMethod = {
  "ProbSampleAliasMethod",
  0|ni::eType_I8, NULL, "tBool",
  3, iMath_ProbSampleAliasMethod_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iMath_ProbSampleAliasMethod)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iMath[] = {
#if niMinFeatures(15)
	&iMath_Sqrt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Sin,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Cos,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ASin,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ACos,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Tan,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ATan,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ATan2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_LogX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_LogE,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Log2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Log10,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Pow,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Floor,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Ceil,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Exp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Abs,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ToRad,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ToDeg,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Min,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Min3,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Max,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Max3,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Clamp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ClampZeroOne,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Lerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_BlendIntoAccumulator,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandSeed,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandInt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandIntRange,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandFloat,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandFloatRange,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandomDirection,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandomDirectionEx,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RotateRay,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandColorA,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandColorAf,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RandColor,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Add,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Sub,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Mul,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Div,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Scale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Compare,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Length,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2LengthSq,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Normalize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2IsNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Dot,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Lerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Lerp2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2BlendIntoAccumulator,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Abs,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Min,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Max,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2CatmullRom,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Hermite,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2BaryCentric,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2Transform,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2TransformCoord,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2TransformNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2TransformCoordArray,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec2TransformNormalArray,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Add,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Sub,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Mul,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Div,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Scale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Compare,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Length,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3LengthSq,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Normalize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3IsNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Dot,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Cross,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Lerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Lerp2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3BlendIntoAccumulator,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Abs,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Min,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Max,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3CatmullRom,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Hermite,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3BaryCentric,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Transform,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3TransformCoord,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3TransformNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3TransformCoordArray,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3TransformNormalArray,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Unproject,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Project,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3ProjectRHW,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3Reflect,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Add,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Sub,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Mul,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Div,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Scale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Compare,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Length,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4LengthSq,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Normalize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4IsNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Dot,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Cross,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Lerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Lerp2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4BlendIntoAccumulator,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Abs,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Min,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Max,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4CatmullRom,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Hermite,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4BaryCentric,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4Transform,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec4TransformArray,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixIdentity,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixIsIdentity,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixAdd,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSub,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixScale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixLerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixCompare,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixMultiply,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDeterminant2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDeterminant3,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDeterminant,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetHandeness,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixInverse,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTransformInverse,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixLookAtRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixLookAtLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixOrthoRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixOrthoLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixOrthoOffCenterRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixOrthoOffCenterLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveFovRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveFovLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveOffCenterRH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixPerspectiveOffCenterLH,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixReflect,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationAxis,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationQuat,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationY,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationZ,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotationYawPitchRoll,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDecomposeYawPitchRoll,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixScaling,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixVecScale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixShadow,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTranspose,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTranspose3x3,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTextureOffset,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixTextureOffset2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetForward,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetUp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetRight,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetForward,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetUp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetRight,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixIsNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixIsOrthogonal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixIsOrthoNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetRotation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixToEuler,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixToCoordinateSystem,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixGetProjectedTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetProjectedTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixSetNotRotation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixRotate,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixViewport,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixAdjustViewport,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDecomposeGetTranslation,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDecomposeGetZYX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDecomposeGetQuat,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixDecomposeGetScale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixCompose,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MatrixComposeQ,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatIdentity,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatIsIdentity,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatAdd,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatSub,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatScale,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatCompare,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatBaryCentric,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatConjugate,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatDot,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatExp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatInverse,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatLength,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatLengthSq,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatLn,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatMultiply,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatNormalize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationAxis,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationY,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationZ,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationXYZ,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationMatrix,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationYawPitchRoll,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatRotationVector,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatSlerp,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatSquad,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatToAxisAngle,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_QuatToEuler,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneDot,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneDotCoord,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneDotNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneDistance,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneFromPointNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneFromPoints,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneIntersectLine,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneIntersectRay,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneNormalize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneTransform,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneTransformInversedMatrix,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneIntersection,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneClosest,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneType,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneMaxType,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneExtractCoordinateSystem,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_PlaneIntersectSphere,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleAreaNormal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleIsDegenerate,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleIntersectTriangle,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleIntersectRay,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleIntersectRayCull,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleIntersectAABB,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_TriangleBaryCentric,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_WrapFloat,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_WrapInt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_WrapRad,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_WrapRad2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_GetAngleFromPoints2D,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_GetAngleFromPoints3D,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ClassifyPoint,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_IsPointInsideEdge,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ClosestPointOnLine,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ClosestPointOnTriangle,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_GetAngularDifference,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_GetScreenPosition,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3SphericalToCartesian,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3CartesianToSpherical,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3OrbitPitch,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3OrbitYaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Vec3OrbitYawPitch,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelScaleX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelScaleY,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelWorldSizeX,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelWorldSizeY,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelWorldSizeVec2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ComputePixelWorldSize,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det2x2f,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det3x3f,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det4x4f,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det2x2d,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det3x3d,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_Det4x4d,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_FovHzToVt,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_FovVtToHz,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_ClampT,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_RepeatT,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_MirrorT,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CycleT,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveStep,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveLinear,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveCos,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveHermite,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveCatmullRom,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveCardinal,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CurveCardinal4,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CycleLinear,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CycleCos,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iMath_CycleCardinal,
#endif // niMinFeatures(15)
	&iMath_ProbSum,
	&iMath_ProbNormalize,
	&iMath_ProbSampleBuildAliasMethodArrays,
	&iMath_ProbSampleAliasMethod,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iMath[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iMath = {
  niGetInterfaceID(iMath),
  &niGetInterfaceUUID(iMath),
  1,
  Parents_iMath,
  niCountOf(Methods_iMath),Methods_iMath,
  NULL
};

	return &InterfaceDef_iMath;
}

// End of iMath wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSProcess wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSProcess() {

#if niMinFeatures(15)
// Method: GetExePath
static const ni::sMethodDef iOSProcess_GetExePath = {
  "GetExePath",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetExePath)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetCommandLine
static const ni::sMethodDef iOSProcess_GetCommandLine = {
  "GetCommandLine",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetCommandLine)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetPID
static const ni::sMethodDef iOSProcess_GetPID = {
  "GetPID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Int, NULL, "tInt",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetPID)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetParentPID
static const ni::sMethodDef iOSProcess_GetParentPID = {
  "GetParentPID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Int, NULL, "tInt",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetParentPID)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: IsParentProcess
static const ni::sParameterDef iOSProcess_IsParentProcess_Parameters[1] = { 
  { "aParentPID", ni::eType_Int, NULL, "tInt" }
}; 
static const ni::sMethodDef iOSProcess_IsParentProcess = {
  "IsParentProcess",
  0|ni::eType_U32, NULL, "tU32",
  1, iOSProcess_IsParentProcess_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_IsParentProcess)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetIsCurrent
static const ni::sMethodDef iOSProcess_GetIsCurrent = {
  "GetIsCurrent",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetIsCurrent)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetDidCrash
static const ni::sMethodDef iOSProcess_GetDidCrash = {
  "GetDidCrash",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetDidCrash)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Kill
static const ni::sParameterDef iOSProcess_Kill_Parameters[2] = { 
  { "anExitCode", ni::eType_Int, NULL, "tInt" }, 
  { "abWait", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iOSProcess_Kill = {
  "Kill",
  0|ni::eType_I8, NULL, "tBool",
  2, iOSProcess_Kill_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_Kill)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Wait
static const ni::sParameterDef iOSProcess_Wait_Parameters[1] = { 
  { "anTimeoutMs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iOSProcess_Wait = {
  "Wait",
  0|ni::eType_I8, NULL, "tBool",
  1, iOSProcess_Wait_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_Wait)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: WaitForExitCode
static const ni::sParameterDef iOSProcess_WaitForExitCode_Parameters[1] = { 
  { "anTimeoutMs", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iOSProcess_WaitForExitCode = {
  "WaitForExitCode",
  0|ni::eType_Vec2i, NULL, "sVec2i",
  1, iOSProcess_WaitForExitCode_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_WaitForExitCode)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Terminate
static const ni::sParameterDef iOSProcess_Terminate_Parameters[1] = { 
  { "aResultCode", ni::eType_Int, NULL, "tInt" }
}; 
static const ni::sMethodDef iOSProcess_Terminate = {
  "Terminate",
  0|ni::eType_Null, NULL, "void",
  1, iOSProcess_Terminate_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_Terminate)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetFile
static const ni::sParameterDef iOSProcess_GetFile_Parameters[1] = { 
  { "aFile", ni::eType_Enum, NULL, "eOSProcessFile" }
}; 
static const ni::sMethodDef iOSProcess_GetFile = {
  "GetFile",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  1, iOSProcess_GetFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcess_GetFile)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iOSProcess[] = {
#if niMinFeatures(15)
	&iOSProcess_GetExePath,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetCommandLine,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetPID,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetParentPID,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_IsParentProcess,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetIsCurrent,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetDidCrash,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_Kill,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_Wait,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_WaitForExitCode,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_Terminate,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcess_GetFile,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSProcess[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSProcess = {
  niGetInterfaceID(iOSProcess),
  &niGetInterfaceUUID(iOSProcess),
  1,
  Parents_iOSProcess,
  niCountOf(Methods_iOSProcess),Methods_iOSProcess,
  NULL
};

	return &InterfaceDef_iOSProcess;
}

// End of iOSProcess wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSProcessEnumSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSProcessEnumSink() {

#if niMinFeatures(15)
// Method: OnOSProcessEnumSink
static const ni::sParameterDef iOSProcessEnumSink_OnOSProcessEnumSink_Parameters[3] = { 
  { "aPID", ni::eType_IntPtr, NULL, "tIntPtr" }, 
  { "aParentPID", ni::eType_IntPtr, NULL, "tIntPtr" }, 
  { "aaszExeName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }
}; 
static const ni::sMethodDef iOSProcessEnumSink_OnOSProcessEnumSink = {
  "OnOSProcessEnumSink",
  0|ni::eType_I8, NULL, "ni::tBool",
  3, iOSProcessEnumSink_OnOSProcessEnumSink_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessEnumSink_OnOSProcessEnumSink)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iOSProcessEnumSink[] = {
#if niMinFeatures(15)
	&iOSProcessEnumSink_OnOSProcessEnumSink,
#endif // niMinFeatures(15)

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iOSProcessEnumSink : public ni::cIUnknownImpl<ni::iOSProcessEnumSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iOSProcessEnumSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iOSProcessEnumSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iOSProcessEnumSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iOSProcessEnumSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iOSProcessEnumSink::OnOSProcessEnumSink
  ni::tBool __stdcall OnOSProcessEnumSink(tIntPtr aPID, tIntPtr aParentPID, const ni::achar * aaszExeName) {
    ni::Var _var_;
    ni::Var _params_[3];
    _params_[0] = aPID;
    _params_[1] = aParentPID;
    _params_[2] = aaszExeName;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iOSProcessEnumSink_OnOSProcessEnumSink,0,_params_,3,&_var_)) {
      if (VarIsType(&_var_,iOSProcessEnumSink_OnOSProcessEnumSink.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iOSProcessEnumSink, niCountOf(Methods_iOSProcessEnumSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iOSProcessEnumSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iOSProcessEnumSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSProcessEnumSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSProcessEnumSink = {
  niGetInterfaceID(iOSProcessEnumSink),
  &niGetInterfaceUUID(iOSProcessEnumSink),
  1,
  Parents_iOSProcessEnumSink,
  niCountOf(Methods_iOSProcessEnumSink),Methods_iOSProcessEnumSink,
  DispatchWrapper_iOSProcessEnumSink::Create
};

	return &InterfaceDef_iOSProcessEnumSink;
}

// End of iOSProcessEnumSink wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSProcessManager wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSProcessManager() {

#if niMinFeatures(15)
// Method: GetCurrentProcessID
static const ni::sMethodDef iOSProcessManager_GetCurrentProcessID = {
  "GetCurrentProcessID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Int, NULL, "tInt",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_GetCurrentProcessID)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetCurrentProcess
static const ni::sMethodDef iOSProcessManager_GetCurrentProcess = {
  "GetCurrentProcess",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcess), "iOSProcess*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_GetCurrentProcess)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CreateProcess
static const ni::sParameterDef iOSProcessManager_CreateProcess_Parameters[1] = { 
  { "aPID", ni::eType_Int, NULL, "tInt" }
}; 
static const ni::sMethodDef iOSProcessManager_CreateProcess = {
  "CreateProcess",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcess), "iOSProcess*",
  1, iOSProcessManager_CreateProcess_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_CreateProcess)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: SpawnProcess
static const ni::sParameterDef iOSProcessManager_SpawnProcess_Parameters[2] = { 
  { "aaszCmdLine", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }, 
  { "aSpawn", ni::eType_Enum, NULL, "tOSProcessSpawnFlags" }
}; 
static const ni::sMethodDef iOSProcessManager_SpawnProcess = {
  "SpawnProcess",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcess), "iOSProcess*",
  2, iOSProcessManager_SpawnProcess_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_SpawnProcess)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: SpawnProcessEx
static const ni::sParameterDef iOSProcessManager_SpawnProcessEx_Parameters[4] = { 
  { "aaszCmdLine", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }, 
  { "aaszWorkDir", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apEnvs", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCMap*" }, 
  { "aSpawn", ni::eType_Enum, NULL, "tOSProcessSpawnFlags" }
}; 
static const ni::sMethodDef iOSProcessManager_SpawnProcessEx = {
  "SpawnProcessEx",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcess), "iOSProcess*",
  4, iOSProcessManager_SpawnProcessEx_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_SpawnProcessEx)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: EnumProcesses
static const ni::sParameterDef iOSProcessManager_EnumProcesses_Parameters[2] = { 
  { "apFilter", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iRegex), "ni::iRegex*" }, 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSProcessEnumSink), "iOSProcessEnumSink*" }
}; 
static const ni::sMethodDef iOSProcessManager_EnumProcesses = {
  "EnumProcesses",
  0|ni::eType_U32, NULL, "tU32",
  2, iOSProcessManager_EnumProcesses_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_EnumProcesses)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetCwd
static const ni::sMethodDef iOSProcessManager_GetCwd = {
  "GetCwd",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_GetCwd)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetEnvs
static const ni::sMethodDef iOSProcessManager_GetEnvs = {
  "GetEnvs",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "Ptr<tStringCMap>",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSProcessManager_GetEnvs)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iOSProcessManager[] = {
#if niMinFeatures(15)
	&iOSProcessManager_GetCurrentProcessID,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_GetCurrentProcess,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_CreateProcess,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_SpawnProcess,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_SpawnProcessEx,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_EnumProcesses,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_GetCwd,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iOSProcessManager_GetEnvs,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSProcessManager[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSProcessManager = {
  niGetInterfaceID(iOSProcessManager),
  &niGetInterfaceUUID(iOSProcessManager),
  1,
  Parents_iOSProcessManager,
  niCountOf(Methods_iOSProcessManager),Methods_iOSProcessManager,
  NULL
};

	return &InterfaceDef_iOSProcessManager;
}

// End of iOSProcessManager wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSGraphicsAPI wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSGraphicsAPI() {

// Method: GetName
static const ni::sMethodDef iOSGraphicsAPI_GetName = {
  "GetName",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSGraphicsAPI_GetName)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iOSGraphicsAPI[] = {
	&iOSGraphicsAPI_GetName,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSGraphicsAPI[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSGraphicsAPI = {
  niGetInterfaceID(iOSGraphicsAPI),
  &niGetInterfaceUUID(iOSGraphicsAPI),
  1,
  Parents_iOSGraphicsAPI,
  niCountOf(Methods_iOSGraphicsAPI),Methods_iOSGraphicsAPI,
  NULL
};

	return &InterfaceDef_iOSGraphicsAPI;
}

// End of iOSGraphicsAPI wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSWindow wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSWindow() {

// Method: GetParent
static const ni::sMethodDef iOSWindow_GetParent = {
  "GetParent",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSWindow), "iOSWindow*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetParent)
#else
  NULL
#endif
};

// Method: SetClientAreaWindow
static const ni::sParameterDef iOSWindow_SetClientAreaWindow_Parameters[1] = { 
  { "aHandle", ni::eType_IntPtr, NULL, "tIntPtr" }
}; 
static const ni::sMethodDef iOSWindow_SetClientAreaWindow = {
  "SetClientAreaWindow",
  ni::eTypeFlags_MethodSetter|0|ni::eType_IntPtr, NULL, "void",
  1, iOSWindow_SetClientAreaWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetClientAreaWindow)
#else
  NULL
#endif
};

// Method: GetClientAreaWindow
static const ni::sMethodDef iOSWindow_GetClientAreaWindow = {
  "GetClientAreaWindow",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetClientAreaWindow)
#else
  NULL
#endif
};

// Method: GetPID
static const ni::sMethodDef iOSWindow_GetPID = {
  "GetPID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetPID)
#else
  NULL
#endif
};

// Method: GetHandle
static const ni::sMethodDef iOSWindow_GetHandle = {
  "GetHandle",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetHandle)
#else
  NULL
#endif
};

// Method: GetIsHandleOwned
static const ni::sMethodDef iOSWindow_GetIsHandleOwned = {
  "GetIsHandleOwned",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetIsHandleOwned)
#else
  NULL
#endif
};

// Method: ActivateWindow
static const ni::sMethodDef iOSWindow_ActivateWindow = {
  "ActivateWindow",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_ActivateWindow)
#else
  NULL
#endif
};

// Method: GetIsActive
static const ni::sMethodDef iOSWindow_GetIsActive = {
  "GetIsActive",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetIsActive)
#else
  NULL
#endif
};

// Method: SwitchIn
static const ni::sParameterDef iOSWindow_SwitchIn_Parameters[1] = { 
  { "anReason", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iOSWindow_SwitchIn = {
  "SwitchIn",
  0|ni::eType_I8, NULL, "tBool",
  1, iOSWindow_SwitchIn_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SwitchIn)
#else
  NULL
#endif
};

// Method: SwitchOut
static const ni::sParameterDef iOSWindow_SwitchOut_Parameters[1] = { 
  { "anReason", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iOSWindow_SwitchOut = {
  "SwitchOut",
  0|ni::eType_I8, NULL, "tBool",
  1, iOSWindow_SwitchOut_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SwitchOut)
#else
  NULL
#endif
};

// Method: SetTitle
static const ni::sParameterDef iOSWindow_SetTitle_Parameters[1] = { 
  { "aaszTitle", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iOSWindow_SetTitle = {
  "SetTitle",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetTitle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetTitle)
#else
  NULL
#endif
};

// Method: GetTitle
static const ni::sMethodDef iOSWindow_GetTitle = {
  "GetTitle",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetTitle)
#else
  NULL
#endif
};

// Method: SetStyle
static const ni::sParameterDef iOSWindow_SetStyle_Parameters[1] = { 
  { "aStyle", ni::eType_Enum, NULL, "tOSWindowStyleFlags" }
}; 
static const ni::sMethodDef iOSWindow_SetStyle = {
  "SetStyle",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Enum, NULL, "void",
  1, iOSWindow_SetStyle_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetStyle)
#else
  NULL
#endif
};

// Method: GetStyle
static const ni::sMethodDef iOSWindow_GetStyle = {
  "GetStyle",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tOSWindowStyleFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetStyle)
#else
  NULL
#endif
};

// Method: SetShow
static const ni::sParameterDef iOSWindow_SetShow_Parameters[1] = { 
  { "aStyle", ni::eType_Enum, NULL, "tOSWindowShowFlags" }
}; 
static const ni::sMethodDef iOSWindow_SetShow = {
  "SetShow",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Enum, NULL, "void",
  1, iOSWindow_SetShow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetShow)
#else
  NULL
#endif
};

// Method: GetShow
static const ni::sMethodDef iOSWindow_GetShow = {
  "GetShow",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tOSWindowShowFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetShow)
#else
  NULL
#endif
};

// Method: SetZOrder
static const ni::sParameterDef iOSWindow_SetZOrder_Parameters[1] = { 
  { "aZOrder", ni::eType_Enum, NULL, "eOSWindowZOrder" }
}; 
static const ni::sMethodDef iOSWindow_SetZOrder = {
  "SetZOrder",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Enum, NULL, "void",
  1, iOSWindow_SetZOrder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetZOrder)
#else
  NULL
#endif
};

// Method: GetZOrder
static const ni::sMethodDef iOSWindow_GetZOrder = {
  "GetZOrder",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eOSWindowZOrder",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetZOrder)
#else
  NULL
#endif
};

// Method: SetSize
static const ni::sParameterDef iOSWindow_SetSize_Parameters[1] = { 
  { "avSize", ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "const sVec2i&" }
}; 
static const ni::sMethodDef iOSWindow_SetSize = {
  "SetSize",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetSize)
#else
  NULL
#endif
};

// Method: GetSize
static const ni::sMethodDef iOSWindow_GetSize = {
  "GetSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetSize)
#else
  NULL
#endif
};

// Method: SetPosition
static const ni::sParameterDef iOSWindow_SetPosition_Parameters[1] = { 
  { "avPos", ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "const sVec2i&" }
}; 
static const ni::sMethodDef iOSWindow_SetPosition = {
  "SetPosition",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetPosition_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetPosition)
#else
  NULL
#endif
};

// Method: GetPosition
static const ni::sMethodDef iOSWindow_GetPosition = {
  "GetPosition",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetPosition)
#else
  NULL
#endif
};

// Method: SetRect
static const ni::sParameterDef iOSWindow_SetRect_Parameters[1] = { 
  { "aRect", ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer, NULL, "const sRecti&" }
}; 
static const ni::sMethodDef iOSWindow_SetRect = {
  "SetRect",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec4i|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetRect_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetRect)
#else
  NULL
#endif
};

// Method: GetRect
static const ni::sMethodDef iOSWindow_GetRect = {
  "GetRect",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec4i, NULL, "sRecti",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetRect)
#else
  NULL
#endif
};

// Method: SetClientSize
static const ni::sParameterDef iOSWindow_SetClientSize_Parameters[1] = { 
  { "avSize", ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "const sVec2i&" }
}; 
static const ni::sMethodDef iOSWindow_SetClientSize = {
  "SetClientSize",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetClientSize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetClientSize)
#else
  NULL
#endif
};

// Method: GetClientSize
static const ni::sMethodDef iOSWindow_GetClientSize = {
  "GetClientSize",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetClientSize)
#else
  NULL
#endif
};

// Method: GetContentsScale
static const ni::sMethodDef iOSWindow_GetContentsScale = {
  "GetContentsScale",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetContentsScale)
#else
  NULL
#endif
};

// Method: GetMessageHandlers
static const ni::sMethodDef iOSWindow_GetMessageHandlers = {
  "GetMessageHandlers",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iSinkList), "tMessageHandlerSinkLst*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetMessageHandlers)
#else
  NULL
#endif
};

// Method: UpdateWindow
static const ni::sParameterDef iOSWindow_UpdateWindow_Parameters[1] = { 
  { "abBlockingMessages", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iOSWindow_UpdateWindow = {
  "UpdateWindow",
  0|ni::eType_I8, NULL, "tBool",
  1, iOSWindow_UpdateWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_UpdateWindow)
#else
  NULL
#endif
};

// Method: CenterWindow
static const ni::sMethodDef iOSWindow_CenterWindow = {
  "CenterWindow",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_CenterWindow)
#else
  NULL
#endif
};

// Method: GetRequestedClose
static const ni::sMethodDef iOSWindow_GetRequestedClose = {
  "GetRequestedClose",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetRequestedClose)
#else
  NULL
#endif
};

// Method: SetRequestedClose
static const ni::sParameterDef iOSWindow_SetRequestedClose_Parameters[1] = { 
  { "abRequested", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iOSWindow_SetRequestedClose = {
  "SetRequestedClose",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iOSWindow_SetRequestedClose_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetRequestedClose)
#else
  NULL
#endif
};

// Method: SetCursor
static const ni::sParameterDef iOSWindow_SetCursor_Parameters[1] = { 
  { "aCursor", ni::eType_Enum, NULL, "eOSCursor" }
}; 
static const ni::sMethodDef iOSWindow_SetCursor = {
  "SetCursor",
  ni::eTypeFlags_MethodSetter|0|ni::eType_Enum, NULL, "void",
  1, iOSWindow_SetCursor_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetCursor)
#else
  NULL
#endif
};

// Method: GetCursor
static const ni::sMethodDef iOSWindow_GetCursor = {
  "GetCursor",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "eOSCursor",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetCursor)
#else
  NULL
#endif
};

// Method: InitCustomCursor
static const ni::sParameterDef iOSWindow_InitCustomCursor_Parameters[6] = { 
  { "aID", ni::eType_IntPtr, NULL, "tIntPtr" }, 
  { "anWidth", ni::eType_U32, NULL, "tU32" }, 
  { "anHeight", ni::eType_U32, NULL, "tU32" }, 
  { "anHotSpotX", ni::eType_U32, NULL, "tU32" }, 
  { "anHotSpotY", ni::eType_U32, NULL, "tU32" }, 
  { "apData", ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "const tU32*" }
}; 
static const ni::sMethodDef iOSWindow_InitCustomCursor = {
  "InitCustomCursor",
  0|ni::eType_I8, NULL, "tBool",
  6, iOSWindow_InitCustomCursor_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_InitCustomCursor)
#else
  NULL
#endif
};

// Method: GetCustomCursorID
static const ni::sMethodDef iOSWindow_GetCustomCursorID = {
  "GetCustomCursorID",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetCustomCursorID)
#else
  NULL
#endif
};

// Method: SetCursorPosition
static const ni::sParameterDef iOSWindow_SetCursorPosition_Parameters[1] = { 
  { "avCursorPos", ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "const sVec2i&" }
}; 
static const ni::sMethodDef iOSWindow_SetCursorPosition = {
  "SetCursorPosition",
  ni::eTypeFlags_MethodSetter|0|ni::eTypeFlags_Constant|ni::eType_Vec2i|ni::eTypeFlags_Pointer, NULL, "void",
  1, iOSWindow_SetCursorPosition_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetCursorPosition)
#else
  NULL
#endif
};

// Method: GetCursorPosition
static const ni::sMethodDef iOSWindow_GetCursorPosition = {
  "GetCursorPosition",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetCursorPosition)
#else
  NULL
#endif
};

// Method: SetCursorCapture
static const ni::sParameterDef iOSWindow_SetCursorCapture_Parameters[1] = { 
  { "abCapture", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iOSWindow_SetCursorCapture = {
  "SetCursorCapture",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iOSWindow_SetCursorCapture_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetCursorCapture)
#else
  NULL
#endif
};

// Method: GetCursorCapture
static const ni::sMethodDef iOSWindow_GetCursorCapture = {
  "GetCursorCapture",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetCursorCapture)
#else
  NULL
#endif
};

// Method: GetIsCursorOverClient
static const ni::sMethodDef iOSWindow_GetIsCursorOverClient = {
  "GetIsCursorOverClient",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetIsCursorOverClient)
#else
  NULL
#endif
};

// Method: TryClose
static const ni::sMethodDef iOSWindow_TryClose = {
  "TryClose",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_TryClose)
#else
  NULL
#endif
};

// Method: SetDropTarget
static const ni::sParameterDef iOSWindow_SetDropTarget_Parameters[1] = { 
  { "abDropTarget", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iOSWindow_SetDropTarget = {
  "SetDropTarget",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iOSWindow_SetDropTarget_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetDropTarget)
#else
  NULL
#endif
};

// Method: GetDropTarget
static const ni::sMethodDef iOSWindow_GetDropTarget = {
  "GetDropTarget",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetDropTarget)
#else
  NULL
#endif
};

// Method: Clear
static const ni::sMethodDef iOSWindow_Clear = {
  "Clear",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_Clear)
#else
  NULL
#endif
};

// Method: RedrawWindow
static const ni::sMethodDef iOSWindow_RedrawWindow = {
  "RedrawWindow",
  0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_RedrawWindow)
#else
  NULL
#endif
};

// Method: GetMonitor
static const ni::sMethodDef iOSWindow_GetMonitor = {
  "GetMonitor",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetMonitor)
#else
  NULL
#endif
};

// Method: SetFullScreen
static const ni::sParameterDef iOSWindow_SetFullScreen_Parameters[1] = { 
  { "anMonitor", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iOSWindow_SetFullScreen = {
  "SetFullScreen",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U32, NULL, "tBool",
  1, iOSWindow_SetFullScreen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetFullScreen)
#else
  NULL
#endif
};

// Method: GetFullScreen
static const ni::sMethodDef iOSWindow_GetFullScreen = {
  "GetFullScreen",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetFullScreen)
#else
  NULL
#endif
};

// Method: GetIsMinimized
static const ni::sMethodDef iOSWindow_GetIsMinimized = {
  "GetIsMinimized",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetIsMinimized)
#else
  NULL
#endif
};

// Method: GetIsMaximized
static const ni::sMethodDef iOSWindow_GetIsMaximized = {
  "GetIsMaximized",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetIsMaximized)
#else
  NULL
#endif
};

// Method: SetFocus
static const ni::sMethodDef iOSWindow_SetFocus = {
  "SetFocus",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetFocus)
#else
  NULL
#endif
};

// Method: GetHasFocus
static const ni::sMethodDef iOSWindow_GetHasFocus = {
  "GetHasFocus",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetHasFocus)
#else
  NULL
#endif
};

// Method: SetRefreshTimer
static const ni::sParameterDef iOSWindow_SetRefreshTimer_Parameters[1] = { 
  { "afTime", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iOSWindow_SetRefreshTimer = {
  "SetRefreshTimer",
  ni::eTypeFlags_MethodSetter|0|ni::eType_F32, NULL, "void",
  1, iOSWindow_SetRefreshTimer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_SetRefreshTimer)
#else
  NULL
#endif
};

// Method: GetRefreshTimer
static const ni::sMethodDef iOSWindow_GetRefreshTimer = {
  "GetRefreshTimer",
  ni::eTypeFlags_MethodGetter|0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetRefreshTimer)
#else
  NULL
#endif
};

// Method: GetParentHandle
static const ni::sMethodDef iOSWindow_GetParentHandle = {
  "GetParentHandle",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IntPtr, NULL, "tIntPtr",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetParentHandle)
#else
  NULL
#endif
};

// Method: IsParentWindow
static const ni::sParameterDef iOSWindow_IsParentWindow_Parameters[1] = { 
  { "aHandle", ni::eType_IntPtr, NULL, "tIntPtr" }
}; 
static const ni::sMethodDef iOSWindow_IsParentWindow = {
  "IsParentWindow",
  0|ni::eType_U32, NULL, "tU32",
  1, iOSWindow_IsParentWindow_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_IsParentWindow)
#else
  NULL
#endif
};

// Method: AttachGraphicsAPI
static const ni::sParameterDef iOSWindow_AttachGraphicsAPI_Parameters[1] = { 
  { "apAPI", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSGraphicsAPI), "iOSGraphicsAPI*" }
}; 
static const ni::sMethodDef iOSWindow_AttachGraphicsAPI = {
  "AttachGraphicsAPI",
  0|ni::eType_I8, NULL, "tBool",
  1, iOSWindow_AttachGraphicsAPI_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_AttachGraphicsAPI)
#else
  NULL
#endif
};

// Method: GetGraphicsAPI
static const ni::sMethodDef iOSWindow_GetGraphicsAPI = {
  "GetGraphicsAPI",
  ni::eTypeFlags_MethodGetter|0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iOSGraphicsAPI), "iOSGraphicsAPI*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindow_GetGraphicsAPI)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iOSWindow[] = {
	&iOSWindow_GetParent,
	&iOSWindow_SetClientAreaWindow,
	&iOSWindow_GetClientAreaWindow,
	&iOSWindow_GetPID,
	&iOSWindow_GetHandle,
	&iOSWindow_GetIsHandleOwned,
	&iOSWindow_ActivateWindow,
	&iOSWindow_GetIsActive,
	&iOSWindow_SwitchIn,
	&iOSWindow_SwitchOut,
	&iOSWindow_SetTitle,
	&iOSWindow_GetTitle,
	&iOSWindow_SetStyle,
	&iOSWindow_GetStyle,
	&iOSWindow_SetShow,
	&iOSWindow_GetShow,
	&iOSWindow_SetZOrder,
	&iOSWindow_GetZOrder,
	&iOSWindow_SetSize,
	&iOSWindow_GetSize,
	&iOSWindow_SetPosition,
	&iOSWindow_GetPosition,
	&iOSWindow_SetRect,
	&iOSWindow_GetRect,
	&iOSWindow_SetClientSize,
	&iOSWindow_GetClientSize,
	&iOSWindow_GetContentsScale,
	&iOSWindow_GetMessageHandlers,
	&iOSWindow_UpdateWindow,
	&iOSWindow_CenterWindow,
	&iOSWindow_GetRequestedClose,
	&iOSWindow_SetRequestedClose,
	&iOSWindow_SetCursor,
	&iOSWindow_GetCursor,
	&iOSWindow_InitCustomCursor,
	&iOSWindow_GetCustomCursorID,
	&iOSWindow_SetCursorPosition,
	&iOSWindow_GetCursorPosition,
	&iOSWindow_SetCursorCapture,
	&iOSWindow_GetCursorCapture,
	&iOSWindow_GetIsCursorOverClient,
	&iOSWindow_TryClose,
	&iOSWindow_SetDropTarget,
	&iOSWindow_GetDropTarget,
	&iOSWindow_Clear,
	&iOSWindow_RedrawWindow,
	&iOSWindow_GetMonitor,
	&iOSWindow_SetFullScreen,
	&iOSWindow_GetFullScreen,
	&iOSWindow_GetIsMinimized,
	&iOSWindow_GetIsMaximized,
	&iOSWindow_SetFocus,
	&iOSWindow_GetHasFocus,
	&iOSWindow_SetRefreshTimer,
	&iOSWindow_GetRefreshTimer,
	&iOSWindow_GetParentHandle,
	&iOSWindow_IsParentWindow,
	&iOSWindow_AttachGraphicsAPI,
	&iOSWindow_GetGraphicsAPI,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSWindow[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSWindow = {
  niGetInterfaceID(iOSWindow),
  &niGetInterfaceUUID(iOSWindow),
  1,
  Parents_iOSWindow,
  niCountOf(Methods_iOSWindow),Methods_iOSWindow,
  NULL
};

	return &InterfaceDef_iOSWindow;
}

// End of iOSWindow wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iOSWindowGeneric wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iOSWindowGeneric() {

// Method: GenericInputString
static const ni::sParameterDef iOSWindowGeneric_GenericInputString_Parameters[1] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iOSWindowGeneric_GenericInputString = {
  "GenericInputString",
  0|ni::eType_Null, NULL, "void",
  1, iOSWindowGeneric_GenericInputString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindowGeneric_GenericInputString)
#else
  NULL
#endif
};

// Method: GenericSendMessage
static const ni::sParameterDef iOSWindowGeneric_GenericSendMessage_Parameters[3] = { 
  { "anMsg", ni::eType_U32, NULL, "tU32" }, 
  { "avarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "avarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iOSWindowGeneric_GenericSendMessage = {
  "GenericSendMessage",
  0|ni::eType_Null, NULL, "void",
  3, iOSWindowGeneric_GenericSendMessage_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindowGeneric_GenericSendMessage)
#else
  NULL
#endif
};

// Method: SetContentsScale
static const ni::sParameterDef iOSWindowGeneric_SetContentsScale_Parameters[1] = { 
  { "afContentsScale", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iOSWindowGeneric_SetContentsScale = {
  "SetContentsScale",
  ni::eTypeFlags_MethodSetter|0|ni::eType_F32, NULL, "void",
  1, iOSWindowGeneric_SetContentsScale_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iOSWindowGeneric_SetContentsScale)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iOSWindowGeneric[] = {
	&iOSWindowGeneric_GenericInputString,
	&iOSWindowGeneric_GenericSendMessage,
	&iOSWindowGeneric_SetContentsScale,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iOSWindowGeneric[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iOSWindowGeneric = {
  niGetInterfaceID(iOSWindowGeneric),
  &niGetInterfaceUUID(iOSWindowGeneric),
  1,
  Parents_iOSWindowGeneric,
  niCountOf(Methods_iOSWindowGeneric),Methods_iOSWindowGeneric,
  NULL
};

	return &InterfaceDef_iOSWindowGeneric;
}

// End of iOSWindowGeneric wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iProfDraw wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iProfDraw() {

// Method: BeginDraw
static const ni::sParameterDef iProfDraw_BeginDraw_Parameters[1] = { 
  { "abTranslucent", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iProfDraw_BeginDraw = {
  "BeginDraw",
  0|ni::eType_Null, NULL, "void",
  1, iProfDraw_BeginDraw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_BeginDraw)
#else
  NULL
#endif
};

// Method: EndDraw
static const ni::sMethodDef iProfDraw_EndDraw = {
  "EndDraw",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_EndDraw)
#else
  NULL
#endif
};

// Method: DrawRect
static const ni::sParameterDef iProfDraw_DrawRect_Parameters[5] = { 
  { "x0", ni::eType_F32, NULL, "tF32" }, 
  { "y0", ni::eType_F32, NULL, "tF32" }, 
  { "x1", ni::eType_F32, NULL, "tF32" }, 
  { "y1", ni::eType_F32, NULL, "tF32" }, 
  { "anColor", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iProfDraw_DrawRect = {
  "DrawRect",
  0|ni::eType_Null, NULL, "void",
  5, iProfDraw_DrawRect_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_DrawRect)
#else
  NULL
#endif
};

// Method: DrawLine
static const ni::sParameterDef iProfDraw_DrawLine_Parameters[5] = { 
  { "x0", ni::eType_F32, NULL, "tF32" }, 
  { "y0", ni::eType_F32, NULL, "tF32" }, 
  { "x1", ni::eType_F32, NULL, "tF32" }, 
  { "y1", ni::eType_F32, NULL, "tF32" }, 
  { "anColor", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iProfDraw_DrawLine = {
  "DrawLine",
  0|ni::eType_Null, NULL, "void",
  5, iProfDraw_DrawLine_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_DrawLine)
#else
  NULL
#endif
};

// Method: GetTextHeight
static const ni::sMethodDef iProfDraw_GetTextHeight = {
  "GetTextHeight",
  0|ni::eType_F32, NULL, "tF32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_GetTextHeight)
#else
  NULL
#endif
};

// Method: GetTextWidth
static const ni::sParameterDef iProfDraw_GetTextWidth_Parameters[1] = { 
  { "aText", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iProfDraw_GetTextWidth = {
  "GetTextWidth",
  0|ni::eType_F32, NULL, "tF32",
  1, iProfDraw_GetTextWidth_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_GetTextWidth)
#else
  NULL
#endif
};

// Method: BeginText
static const ni::sMethodDef iProfDraw_BeginText = {
  "BeginText",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_BeginText)
#else
  NULL
#endif
};

// Method: EndText
static const ni::sMethodDef iProfDraw_EndText = {
  "EndText",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_EndText)
#else
  NULL
#endif
};

// Method: Text
static const ni::sParameterDef iProfDraw_Text_Parameters[4] = { 
  { "x", ni::eType_F32, NULL, "tF32" }, 
  { "y", ni::eType_F32, NULL, "tF32" }, 
  { "aText", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "anColor", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iProfDraw_Text = {
  "Text",
  0|ni::eType_Null, NULL, "void",
  4, iProfDraw_Text_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProfDraw_Text)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iProfDraw[] = {
	&iProfDraw_BeginDraw,
	&iProfDraw_EndDraw,
	&iProfDraw_DrawRect,
	&iProfDraw_DrawLine,
	&iProfDraw_GetTextHeight,
	&iProfDraw_GetTextWidth,
	&iProfDraw_BeginText,
	&iProfDraw_EndText,
	&iProfDraw_Text,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iProfDraw : public ni::cIUnknownImpl<ni::iProfDraw,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iProfDraw(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iProfDraw() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iProfDraw))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iProfDraw));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iProfDraw::BeginDraw
  void __stdcall BeginDraw(tBool abTranslucent) {
    ni::Var _params_[1];
    _params_[0] = abTranslucent;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_BeginDraw,0,_params_,1,NULL);
	}

  // Method (1): iProfDraw::EndDraw
  void __stdcall EndDraw() {
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_EndDraw,1,NULL,0,NULL);
	}

  // Method (2): iProfDraw::DrawRect
  void __stdcall DrawRect(tF32 x0, tF32 y0, tF32 x1, tF32 y1, tU32 anColor) {
    ni::Var _params_[5];
    _params_[0] = x0;
    _params_[1] = y0;
    _params_[2] = x1;
    _params_[3] = y1;
    _params_[4] = anColor;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_DrawRect,2,_params_,5,NULL);
	}

  // Method (3): iProfDraw::DrawLine
  void __stdcall DrawLine(tF32 x0, tF32 y0, tF32 x1, tF32 y1, tU32 anColor) {
    ni::Var _params_[5];
    _params_[0] = x0;
    _params_[1] = y0;
    _params_[2] = x1;
    _params_[3] = y1;
    _params_[4] = anColor;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_DrawLine,3,_params_,5,NULL);
	}

  // Method (4): iProfDraw::GetTextHeight
  tF32 __stdcall GetTextHeight() {
    ni::Var _var_;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_GetTextHeight,4,NULL,0,&_var_)) {
      if (VarIsType(&_var_,iProfDraw_GetTextHeight.mReturnType,ni::eFalse)) {
        return _var_.GetF32();
      }
    }
    return 0;
	}

  // Method (5): iProfDraw::GetTextWidth
  tF32 __stdcall GetTextWidth(const achar * aText) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = aText;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_GetTextWidth,5,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iProfDraw_GetTextWidth.mReturnType,ni::eFalse)) {
        return _var_.GetF32();
      }
    }
    return 0;
	}

  // Method (6): iProfDraw::BeginText
  void __stdcall BeginText() {
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_BeginText,6,NULL,0,NULL);
	}

  // Method (7): iProfDraw::EndText
  void __stdcall EndText() {
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_EndText,7,NULL,0,NULL);
	}

  // Method (8): iProfDraw::Text
  void __stdcall Text(tF32 x, tF32 y, const achar * aText, tU32 anColor) {
    ni::Var _params_[4];
    _params_[0] = x;
    _params_[1] = y;
    _params_[2] = aText;
    _params_[3] = anColor;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iProfDraw_Text,8,_params_,4,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iProfDraw, niCountOf(Methods_iProfDraw))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iProfDraw"));
      return NULL;
    }
		return niNew DispatchWrapper_iProfDraw(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iProfDraw[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iProfDraw = {
  niGetInterfaceID(iProfDraw),
  &niGetInterfaceUUID(iProfDraw),
  1,
  Parents_iProfDraw,
  niCountOf(Methods_iProfDraw),Methods_iProfDraw,
  DispatchWrapper_iProfDraw::Create
};

	return &InterfaceDef_iProfDraw;
}

// End of iProfDraw wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iProf wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iProf() {

// Method: SetRecord
static const ni::sParameterDef iProf_SetRecord_Parameters[1] = { 
  { "abRecord", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iProf_SetRecord = {
  "SetRecord",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iProf_SetRecord_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_SetRecord)
#else
  NULL
#endif
};

// Method: GetRecord
static const ni::sMethodDef iProf_GetRecord = {
  "GetRecord",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_GetRecord)
#else
  NULL
#endif
};

// Method: Update
static const ni::sMethodDef iProf_Update = {
  "Update",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_Update)
#else
  NULL
#endif
};

// Method: GetZoneStackDummy
static const ni::sMethodDef iProf_GetZoneStackDummy = {
  "GetZoneStackDummy",
  0|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sProfilerZoneStack*",
  0, NULL,
NULL
};

// Method: GetZoneStack
static const ni::sMethodDef iProf_GetZoneStack = {
  "GetZoneStack",
  0|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sProfilerZoneStack**",
  0, NULL,
NULL
};

// Method: SetZoneStack
static const ni::sParameterDef iProf_SetZoneStack_Parameters[1] = { 
  { "apZoneStack", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sProfilerZoneStack*" }
}; 
static const ni::sMethodDef iProf_SetZoneStack = {
  "SetZoneStack",
  0|ni::eType_Null, NULL, "void",
  1, iProf_SetZoneStack_Parameters,
NULL
};

// Method: StackAppend
static const ni::sParameterDef iProf_StackAppend_Parameters[1] = { 
  { "apZoneStack", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sProfilerZone*" }
}; 
static const ni::sMethodDef iProf_StackAppend = {
  "StackAppend",
  0|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "sProfilerZoneStack*",
  1, iProf_StackAppend_Parameters,
NULL
};

// Method: GetTimeStamp
static const ni::sParameterDef iProf_GetTimeStamp_Parameters[1] = { 
  { "apTimeStamp", ni::eType_I64|ni::eTypeFlags_Pointer, NULL, "tI64*" }
}; 
static const ni::sMethodDef iProf_GetTimeStamp = {
  "GetTimeStamp",
  0|ni::eType_Null, NULL, "void",
  1, iProf_GetTimeStamp_Parameters,
NULL
};

// Method: SetReportMode
static const ni::sParameterDef iProf_SetReportMode_Parameters[1] = { 
  { "aMode", ni::eType_Enum, NULL, "eProfilerReportMode" }
}; 
static const ni::sMethodDef iProf_SetReportMode = {
  "SetReportMode",
  0|ni::eType_Null, NULL, "void",
  1, iProf_SetReportMode_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_SetReportMode)
#else
  NULL
#endif
};

// Method: GetReportMode
static const ni::sMethodDef iProf_GetReportMode = {
  "GetReportMode",
  0|ni::eType_Enum, NULL, "eProfilerReportMode",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_GetReportMode)
#else
  NULL
#endif
};

// Method: InputMoveCursor
static const ni::sParameterDef iProf_InputMoveCursor_Parameters[1] = { 
  { "anDelta", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iProf_InputMoveCursor = {
  "InputMoveCursor",
  0|ni::eType_Null, NULL, "void",
  1, iProf_InputMoveCursor_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputMoveCursor)
#else
  NULL
#endif
};

// Method: InputSelect
static const ni::sMethodDef iProf_InputSelect = {
  "InputSelect",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputSelect)
#else
  NULL
#endif
};

// Method: InputSelectParent
static const ni::sMethodDef iProf_InputSelectParent = {
  "InputSelectParent",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputSelectParent)
#else
  NULL
#endif
};

// Method: InputMoveFrame
static const ni::sParameterDef iProf_InputMoveFrame_Parameters[1] = { 
  { "anDelta", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iProf_InputMoveFrame = {
  "InputMoveFrame",
  0|ni::eType_Null, NULL, "void",
  1, iProf_InputMoveFrame_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputMoveFrame)
#else
  NULL
#endif
};

// Method: InputSetFrame
static const ni::sParameterDef iProf_InputSetFrame_Parameters[1] = { 
  { "anFrame", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iProf_InputSetFrame = {
  "InputSetFrame",
  0|ni::eType_Null, NULL, "void",
  1, iProf_InputSetFrame_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputSetFrame)
#else
  NULL
#endif
};

// Method: InputSetCursor
static const ni::sParameterDef iProf_InputSetCursor_Parameters[1] = { 
  { "anLine", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iProf_InputSetCursor = {
  "InputSetCursor",
  0|ni::eType_Null, NULL, "void",
  1, iProf_InputSetCursor_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_InputSetCursor)
#else
  NULL
#endif
};

// Method: TextReport
static const ni::sParameterDef iProf_TextReport_Parameters[2] = { 
  { "cols", ni::eType_U32, NULL, "tU32" }, 
  { "rows", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iProf_TextReport = {
  "TextReport",
  0|ni::eType_String, NULL, "cString",
  2, iProf_TextReport_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_TextReport)
#else
  NULL
#endif
};

// Method: DrawTable
static const ni::sParameterDef iProf_DrawTable_Parameters[6] = { 
  { "drawer", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iProfDraw), "ni::iProfDraw*" }, 
  { "sx", ni::eType_F32, NULL, "tF32" }, 
  { "sy", ni::eType_F32, NULL, "tF32" }, 
  { "full_width", ni::eType_F32, NULL, "tF32" }, 
  { "height", ni::eType_F32, NULL, "tF32" }, 
  { "precision", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iProf_DrawTable = {
  "DrawTable",
  0|ni::eType_I8, NULL, "tBool",
  6, iProf_DrawTable_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_DrawTable)
#else
  NULL
#endif
};

// Method: DrawGraph
static const ni::sParameterDef iProf_DrawGraph_Parameters[5] = { 
  { "drawer", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iProfDraw), "ni::iProfDraw*" }, 
  { "sx", ni::eType_F32, NULL, "tF32" }, 
  { "sy", ni::eType_F32, NULL, "tF32" }, 
  { "x_spacing", ni::eType_F32, NULL, "tF32" }, 
  { "y_spacing", ni::eType_F32, NULL, "tF32" }
}; 
static const ni::sMethodDef iProf_DrawGraph = {
  "DrawGraph",
  0|ni::eType_I8, NULL, "tBool",
  5, iProf_DrawGraph_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iProf_DrawGraph)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iProf[] = {
	&iProf_SetRecord,
	&iProf_GetRecord,
	&iProf_Update,
	&iProf_GetZoneStackDummy,
	&iProf_GetZoneStack,
	&iProf_SetZoneStack,
	&iProf_StackAppend,
	&iProf_GetTimeStamp,
	&iProf_SetReportMode,
	&iProf_GetReportMode,
	&iProf_InputMoveCursor,
	&iProf_InputSelect,
	&iProf_InputSelectParent,
	&iProf_InputMoveFrame,
	&iProf_InputSetFrame,
	&iProf_InputSetCursor,
	&iProf_TextReport,
	&iProf_DrawTable,
	&iProf_DrawGraph,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iProf[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iProf = {
  niGetInterfaceID(iProf),
  &niGetInterfaceUUID(iProf),
  1,
  Parents_iProf,
  niCountOf(Methods_iProf),Methods_iProf,
  NULL
};

	return &InterfaceDef_iProf;
}

// End of iProf wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iRegex wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iRegex() {

// Method: GetImplType
static const ni::sMethodDef iRegex_GetImplType = {
  "GetImplType",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRegex_GetImplType)
#else
  NULL
#endif
};

// Method: DoesMatch
static const ni::sParameterDef iRegex_DoesMatch_Parameters[1] = { 
  { "aaszText", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iRegex_DoesMatch = {
  "DoesMatch",
  0|ni::eType_I8, NULL, "tBool",
  1, iRegex_DoesMatch_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iRegex_DoesMatch)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iRegex[] = {
	&iRegex_GetImplType,
	&iRegex_DoesMatch,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iRegex[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iRegex = {
  niGetInterfaceID(iRegex),
  &niGetInterfaceUUID(iRegex),
  1,
  Parents_iRegex,
  niCountOf(Methods_iRegex),Methods_iRegex,
  NULL
};

	return &InterfaceDef_iRegex;
}

// End of iRegex wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iPCRE wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(15)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iPCRE() {

#if niMinFeatures(15)
// Method: Compile
static const ni::sParameterDef iPCRE_Compile_Parameters[2] = { 
  { "aaszRegEx", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszOpt", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iPCRE_Compile = {
  "Compile",
  0|ni::eType_Enum, NULL, "ePCREError",
  2, iPCRE_Compile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Compile)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Compile2
static const ni::sParameterDef iPCRE_Compile2_Parameters[2] = { 
  { "aaszRegEx", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aOpt", ni::eType_Enum, NULL, "tPCREOptionsFlags" }
}; 
static const ni::sMethodDef iPCRE_Compile2 = {
  "Compile2",
  0|ni::eType_Enum, NULL, "ePCREError",
  2, iPCRE_Compile2_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Compile2)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetIsCompiled
static const ni::sMethodDef iPCRE_GetIsCompiled = {
  "GetIsCompiled",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetIsCompiled)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetLastCompileError
static const ni::sMethodDef iPCRE_GetLastCompileError = {
  "GetLastCompileError",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "ePCREError",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetLastCompileError)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetLastCompileErrorDesc
static const ni::sMethodDef iPCRE_GetLastCompileErrorDesc = {
  "GetLastCompileErrorDesc",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetLastCompileErrorDesc)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetLastCompileErrorOffset
static const ni::sMethodDef iPCRE_GetLastCompileErrorOffset = {
  "GetLastCompileErrorOffset",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetLastCompileErrorOffset)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetOptions
static const ni::sMethodDef iPCRE_GetOptions = {
  "GetOptions",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Enum, NULL, "tPCREOptionsFlags",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetOptions)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Reset
static const ni::sMethodDef iPCRE_Reset = {
  "Reset",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Reset)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNumMarkers
static const ni::sMethodDef iPCRE_GetNumMarkers = {
  "GetNumMarkers",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNumMarkers)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetMarker
static const ni::sParameterDef iPCRE_GetMarker_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iPCRE_GetMarker = {
  "GetMarker",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  1, iPCRE_GetMarker_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetMarker)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetString
static const ni::sParameterDef iPCRE_GetString_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iPCRE_GetString = {
  "GetString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iPCRE_GetString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetString)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNumNamed
static const ni::sMethodDef iPCRE_GetNumNamed = {
  "GetNumNamed",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNumNamed)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNamedName
static const ni::sParameterDef iPCRE_GetNamedName_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iPCRE_GetNamedName = {
  "GetNamedName",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  1, iPCRE_GetNamedName_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNamedName)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNamedMarker
static const ni::sParameterDef iPCRE_GetNamedMarker_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iPCRE_GetNamedMarker = {
  "GetNamedMarker",
  ni::eTypeFlags_MethodGetter|0|ni::eType_Vec2i, NULL, "sVec2i",
  1, iPCRE_GetNamedMarker_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNamedMarker)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNamedString
static const ni::sParameterDef iPCRE_GetNamedString_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iPCRE_GetNamedString = {
  "GetNamedString",
  ni::eTypeFlags_MethodGetter|0|ni::eType_String, NULL, "cString",
  1, iPCRE_GetNamedString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNamedString)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GetNamedIndex
static const ni::sParameterDef iPCRE_GetNamedIndex_Parameters[1] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iPCRE_GetNamedIndex = {
  "GetNamedIndex",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U32, NULL, "tU32",
  1, iPCRE_GetNamedIndex_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_GetNamedIndex)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: MatchRaw
static const ni::sParameterDef iPCRE_MatchRaw_Parameters[1] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iPCRE_MatchRaw = {
  "MatchRaw",
  0|ni::eType_I32, NULL, "tI32",
  1, iPCRE_MatchRaw_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_MatchRaw)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Match
static const ni::sParameterDef iPCRE_Match_Parameters[2] = { 
  { "ahspString", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "anOffset", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iPCRE_Match = {
  "Match",
  0|ni::eType_I32, NULL, "tI32",
  2, iPCRE_Match_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Match)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Split
static const ni::sParameterDef iPCRE_Split_Parameters[2] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "anMaxFields", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iPCRE_Split = {
  "Split",
  0|ni::eType_I32, NULL, "tI32",
  2, iPCRE_Split_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Split)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Sub
static const ni::sParameterDef iPCRE_Sub_Parameters[3] = { 
  { "aaszString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aaszReplacement", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "abDoDollarSub", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iPCRE_Sub = {
  "Sub",
  0|ni::eType_String, NULL, "cString",
  3, iPCRE_Sub_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iPCRE_Sub)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iPCRE[] = {
#if niMinFeatures(15)
	&iPCRE_Compile,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_Compile2,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetIsCompiled,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetLastCompileError,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetLastCompileErrorDesc,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetLastCompileErrorOffset,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetOptions,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_Reset,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNumMarkers,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetMarker,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetString,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNumNamed,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNamedName,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNamedMarker,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNamedString,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_GetNamedIndex,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_MatchRaw,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_Match,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_Split,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iPCRE_Sub,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iPCRE[] = {
  &niGetInterfaceUUID(iRegex),
};

static const ni::sInterfaceDef InterfaceDef_iPCRE = {
  niGetInterfaceID(iPCRE),
  &niGetInterfaceUUID(iPCRE),
  1,
  Parents_iPCRE,
  niCountOf(Methods_iPCRE),Methods_iPCRE,
  NULL
};

	return &InterfaceDef_iPCRE;
}

// End of iPCRE wrapper
#endif // niMinFeatures(15)


//////////////////////////////////////////////////////////////////////////////////////////////
// iScriptingHost wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iScriptingHost() {

#if niMinFeatures(15)
// Method: EvalString
static const ni::sParameterDef iScriptingHost_EvalString_Parameters[2] = { 
  { "ahspContext", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "aaszCode", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }
}; 
static const ni::sMethodDef iScriptingHost_EvalString = {
  "EvalString",
  0|ni::eType_I8, NULL, "tBool",
  2, iScriptingHost_EvalString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iScriptingHost_EvalString)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: CanEvalImpl
static const ni::sParameterDef iScriptingHost_CanEvalImpl_Parameters[2] = { 
  { "ahspContext", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "ahspCodeResource", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }
}; 
static const ni::sMethodDef iScriptingHost_CanEvalImpl = {
  "CanEvalImpl",
  0|ni::eType_I8, NULL, "tBool",
  2, iScriptingHost_CanEvalImpl_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iScriptingHost_CanEvalImpl)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: EvalImpl
static const ni::sParameterDef iScriptingHost_EvalImpl_Parameters[3] = { 
  { "ahspContext", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "ahspCodeResource", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iHString), "iHString*" }, 
  { "aIID", ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer, NULL, "const tUUID&" }
}; 
static const ni::sMethodDef iScriptingHost_EvalImpl = {
  "EvalImpl",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  3, iScriptingHost_EvalImpl_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iScriptingHost_EvalImpl)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: Service
static const ni::sParameterDef iScriptingHost_Service_Parameters[1] = { 
  { "abForceGC", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iScriptingHost_Service = {
  "Service",
  0|ni::eType_Null, NULL, "void",
  1, iScriptingHost_Service_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iScriptingHost_Service)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iScriptingHost[] = {
#if niMinFeatures(15)
	&iScriptingHost_EvalString,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iScriptingHost_CanEvalImpl,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iScriptingHost_EvalImpl,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iScriptingHost_Service,
#endif // niMinFeatures(15)

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iScriptingHost : public ni::cIUnknownImpl<ni::iScriptingHost,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iScriptingHost(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iScriptingHost() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iScriptingHost))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iScriptingHost));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iScriptingHost::EvalString
  tBool __stdcall EvalString(iHString * ahspContext, const ni::achar * aaszCode) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(ahspContext);
    _params_[1] = aaszCode;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iScriptingHost_EvalString,0,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iScriptingHost_EvalString.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (1): iScriptingHost::CanEvalImpl
  tBool __stdcall CanEvalImpl(iHString * ahspContext, iHString * ahspCodeResource) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = niIUnknownCast(ahspContext);
    _params_[1] = niIUnknownCast(ahspCodeResource);
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iScriptingHost_CanEvalImpl,1,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iScriptingHost_CanEvalImpl.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (2): iScriptingHost::EvalImpl
  iUnknown * __stdcall EvalImpl(iHString * ahspContext, iHString * ahspCodeResource, const tUUID & aIID) {
    ni::Var _var_;
    ni::Var _params_[3];
    _params_[0] = niIUnknownCast(ahspContext);
    _params_[1] = niIUnknownCast(ahspCodeResource);
    _params_[2] = aIID;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iScriptingHost_EvalImpl,2,_params_,3,&_var_)) {
      if (VarIsType(&_var_,iScriptingHost_EvalImpl.mReturnType,ni::eFalse)) {
        return (iUnknown *)_var_.GetRawIUnknownPointerAndSetNull();
      }
    }
    return NULL;
	}

  // Method (3): iScriptingHost::Service
  void __stdcall Service(tBool abForceGC) {
    ni::Var _params_[1];
    _params_[0] = abForceGC;
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iScriptingHost_Service,3,_params_,1,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iScriptingHost, niCountOf(Methods_iScriptingHost))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iScriptingHost"));
      return NULL;
    }
		return niNew DispatchWrapper_iScriptingHost(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iScriptingHost[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iScriptingHost = {
  niGetInterfaceID(iScriptingHost),
  &niGetInterfaceUUID(iScriptingHost),
  1,
  Parents_iScriptingHost,
  niCountOf(Methods_iScriptingHost),Methods_iScriptingHost,
  DispatchWrapper_iScriptingHost::Create
};

	return &InterfaceDef_iScriptingHost;
}

// End of iScriptingHost wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iSerializable wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iSerializable() {

// Method: GetSerializeObjectTypeID
static const ni::sMethodDef iSerializable_GetSerializeObjectTypeID = {
  "GetSerializeObjectTypeID",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSerializable_GetSerializeObjectTypeID)
#else
  NULL
#endif
};

// Method: Serialize
static const ni::sParameterDef iSerializable_Serialize_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aMode", ni::eType_Enum, NULL, "eSerializeMode" }
}; 
static const ni::sMethodDef iSerializable_Serialize = {
  "Serialize",
  0|ni::eType_Size, NULL, "tSize",
  2, iSerializable_Serialize_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSerializable_Serialize)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iSerializable[] = {
	&iSerializable_GetSerializeObjectTypeID,
	&iSerializable_Serialize,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iSerializable[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iSerializable = {
  niGetInterfaceID(iSerializable),
  &niGetInterfaceUUID(iSerializable),
  1,
  Parents_iSerializable,
  niCountOf(Methods_iSerializable),Methods_iSerializable,
  NULL
};

	return &InterfaceDef_iSerializable;
}

// End of iSerializable wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iSinkList wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iSinkList() {

// Method: GetSinkUUID
static const ni::sMethodDef iSinkList_GetSinkUUID = {
  "GetSinkUUID",
  ni::eTypeFlags_MethodGetter|0|ni::eTypeFlags_Constant|ni::eType_UUID|ni::eTypeFlags_Pointer, NULL, "const tUUID&",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_GetSinkUUID)
#else
  NULL
#endif
};

// Method: Clear
static const ni::sMethodDef iSinkList_Clear = {
  "Clear",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_Clear)
#else
  NULL
#endif
};

// Method: HasSink
static const ni::sParameterDef iSinkList_HasSink_Parameters[1] = { 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iSinkList_HasSink = {
  "HasSink",
  0|ni::eType_I8, NULL, "tBool",
  1, iSinkList_HasSink_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_HasSink)
#else
  NULL
#endif
};

// Method: AddSink
static const ni::sParameterDef iSinkList_AddSink_Parameters[1] = { 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iSinkList_AddSink = {
  "AddSink",
  0|ni::eType_I8, NULL, "tBool",
  1, iSinkList_AddSink_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_AddSink)
#else
  NULL
#endif
};

// Method: RemoveSink
static const ni::sParameterDef iSinkList_RemoveSink_Parameters[1] = { 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iSinkList_RemoveSink = {
  "RemoveSink",
  0|ni::eType_I8, NULL, "tBool",
  1, iSinkList_RemoveSink_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_RemoveSink)
#else
  NULL
#endif
};

// Method: AddFrontSink
static const ni::sParameterDef iSinkList_AddFrontSink_Parameters[1] = { 
  { "apSink", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*" }
}; 
static const ni::sMethodDef iSinkList_AddFrontSink = {
  "AddFrontSink",
  0|ni::eType_I8, NULL, "tBool",
  1, iSinkList_AddFrontSink_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_AddFrontSink)
#else
  NULL
#endif
};

// Method: SetMute
static const ni::sParameterDef iSinkList_SetMute_Parameters[1] = { 
  { "abMute", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iSinkList_SetMute = {
  "SetMute",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iSinkList_SetMute_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_SetMute)
#else
  NULL
#endif
};

// Method: GetMute
static const ni::sMethodDef iSinkList_GetMute = {
  "GetMute",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iSinkList_GetMute)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iSinkList[] = {
	&iSinkList_GetSinkUUID,
	&iSinkList_Clear,
	&iSinkList_HasSink,
	&iSinkList_AddSink,
	&iSinkList_RemoveSink,
	&iSinkList_AddFrontSink,
	&iSinkList_SetMute,
	&iSinkList_GetMute,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iSinkList[] = {
  &niGetInterfaceUUID(iCollection),
};

static const ni::sInterfaceDef InterfaceDef_iSinkList = {
  niGetInterfaceID(iSinkList),
  &niGetInterfaceUUID(iSinkList),
  1,
  Parents_iSinkList,
  niCountOf(Methods_iSinkList),Methods_iSinkList,
  NULL
};

	return &InterfaceDef_iSinkList;
}

// End of iSinkList wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iStringTokenizer wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iStringTokenizer() {

// Method: GetCharType
static const ni::sParameterDef iStringTokenizer_GetCharType_Parameters[1] = { 
  { "c", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iStringTokenizer_GetCharType = {
  "GetCharType",
  0|ni::eType_Enum, NULL, "eStringTokenizerCharType",
  1, iStringTokenizer_GetCharType_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iStringTokenizer_GetCharType)
#else
  NULL
#endif
};

// Method: OnNewLine
static const ni::sMethodDef iStringTokenizer_OnNewLine = {
  "OnNewLine",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iStringTokenizer_OnNewLine)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iStringTokenizer[] = {
	&iStringTokenizer_GetCharType,
	&iStringTokenizer_OnNewLine,

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iStringTokenizer : public ni::cIUnknownImpl<ni::iStringTokenizer,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iStringTokenizer(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iStringTokenizer() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iStringTokenizer))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iStringTokenizer));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iStringTokenizer::GetCharType
  eStringTokenizerCharType __stdcall GetCharType(tU32 c) {
    ni::Var _var_;
    ni::Var _params_[1];
    _params_[0] = c;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iStringTokenizer_GetCharType,0,_params_,1,&_var_)) {
      if (VarIsType(&_var_,iStringTokenizer_GetCharType.mReturnType,ni::eFalse)) {
        return (eStringTokenizerCharType)_var_.GetU32();
      }
    }
    return (eStringTokenizerCharType)ni::eInvalidHandle;
	}

  // Method (1): iStringTokenizer::OnNewLine
  void __stdcall OnNewLine() {
    ((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iStringTokenizer_OnNewLine,1,NULL,0,NULL);
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iStringTokenizer, niCountOf(Methods_iStringTokenizer))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iStringTokenizer"));
      return NULL;
    }
		return niNew DispatchWrapper_iStringTokenizer(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iStringTokenizer[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iStringTokenizer = {
  niGetInterfaceID(iStringTokenizer),
  &niGetInterfaceUUID(iStringTokenizer),
  1,
  Parents_iStringTokenizer,
  niCountOf(Methods_iStringTokenizer),Methods_iStringTokenizer,
  DispatchWrapper_iStringTokenizer::Create
};

	return &InterfaceDef_iStringTokenizer;
}

// End of iStringTokenizer wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iTime wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iTime() {

// Method: UpdateFromCurrentSystemTime
static const ni::sMethodDef iTime_UpdateFromCurrentSystemTime = {
  "UpdateFromCurrentSystemTime",
  0|ni::eType_Null, NULL, "void",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_UpdateFromCurrentSystemTime)
#else
  NULL
#endif
};

// Method: SetYear
static const ni::sParameterDef iTime_SetYear_Parameters[1] = { 
  { "anYear", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iTime_SetYear = {
  "SetYear",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I32, NULL, "void",
  1, iTime_SetYear_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetYear)
#else
  NULL
#endif
};

// Method: GetYear
static const ni::sMethodDef iTime_GetYear = {
  "GetYear",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I32, NULL, "tI32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetYear)
#else
  NULL
#endif
};

// Method: SetMonth
static const ni::sParameterDef iTime_SetMonth_Parameters[1] = { 
  { "anMonth", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iTime_SetMonth = {
  "SetMonth",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U8, NULL, "void",
  1, iTime_SetMonth_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetMonth)
#else
  NULL
#endif
};

// Method: GetMonth
static const ni::sMethodDef iTime_GetMonth = {
  "GetMonth",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetMonth)
#else
  NULL
#endif
};

// Method: SetDay
static const ni::sParameterDef iTime_SetDay_Parameters[1] = { 
  { "anDay", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iTime_SetDay = {
  "SetDay",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U8, NULL, "void",
  1, iTime_SetDay_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetDay)
#else
  NULL
#endif
};

// Method: GetDay
static const ni::sMethodDef iTime_GetDay = {
  "GetDay",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetDay)
#else
  NULL
#endif
};

// Method: GetWeekday
static const ni::sMethodDef iTime_GetWeekday = {
  "GetWeekday",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetWeekday)
#else
  NULL
#endif
};

// Method: SetHour
static const ni::sParameterDef iTime_SetHour_Parameters[1] = { 
  { "anHour", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iTime_SetHour = {
  "SetHour",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U8, NULL, "void",
  1, iTime_SetHour_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetHour)
#else
  NULL
#endif
};

// Method: GetHour
static const ni::sMethodDef iTime_GetHour = {
  "GetHour",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetHour)
#else
  NULL
#endif
};

// Method: SetMinute
static const ni::sParameterDef iTime_SetMinute_Parameters[1] = { 
  { "anMinute", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iTime_SetMinute = {
  "SetMinute",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U8, NULL, "void",
  1, iTime_SetMinute_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetMinute)
#else
  NULL
#endif
};

// Method: GetMinute
static const ni::sMethodDef iTime_GetMinute = {
  "GetMinute",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetMinute)
#else
  NULL
#endif
};

// Method: SetSecond
static const ni::sParameterDef iTime_SetSecond_Parameters[1] = { 
  { "anSecond", ni::eType_U8, NULL, "tU8" }
}; 
static const ni::sMethodDef iTime_SetSecond = {
  "SetSecond",
  ni::eTypeFlags_MethodSetter|0|ni::eType_U8, NULL, "void",
  1, iTime_SetSecond_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetSecond)
#else
  NULL
#endif
};

// Method: GetSecond
static const ni::sMethodDef iTime_GetSecond = {
  "GetSecond",
  ni::eTypeFlags_MethodGetter|0|ni::eType_U8, NULL, "tU8",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetSecond)
#else
  NULL
#endif
};

// Method: Copy
static const ni::sParameterDef iTime_Copy_Parameters[1] = { 
  { "apTime", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "const iTime*" }
}; 
static const ni::sMethodDef iTime_Copy = {
  "Copy",
  0|ni::eType_I8, NULL, "tBool",
  1, iTime_Copy_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_Copy)
#else
  NULL
#endif
};

// Method: Clone
static const ni::sMethodDef iTime_Clone = {
  "Clone",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_Clone)
#else
  NULL
#endif
};

// Method: SetDayLightSaving
static const ni::sParameterDef iTime_SetDayLightSaving_Parameters[1] = { 
  { "abDayLightSaving", ni::eType_I8, NULL, "ni::tBool" }
}; 
static const ni::sMethodDef iTime_SetDayLightSaving = {
  "SetDayLightSaving",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I8, NULL, "void",
  1, iTime_SetDayLightSaving_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetDayLightSaving)
#else
  NULL
#endif
};

// Method: GetDayLightSaving
static const ni::sMethodDef iTime_GetDayLightSaving = {
  "GetDayLightSaving",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I8, NULL, "tBool",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetDayLightSaving)
#else
  NULL
#endif
};

// Method: SetTimeZone
static const ni::sParameterDef iTime_SetTimeZone_Parameters[1] = { 
  { "anTimeZone", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iTime_SetTimeZone = {
  "SetTimeZone",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I32, NULL, "void",
  1, iTime_SetTimeZone_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetTimeZone)
#else
  NULL
#endif
};

// Method: GetTimeZone
static const ni::sMethodDef iTime_GetTimeZone = {
  "GetTimeZone",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I32, NULL, "tI32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetTimeZone)
#else
  NULL
#endif
};

// Method: SetUnixTimeSecs
static const ni::sParameterDef iTime_SetUnixTimeSecs_Parameters[1] = { 
  { "anFmt", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iTime_SetUnixTimeSecs = {
  "SetUnixTimeSecs",
  ni::eTypeFlags_MethodSetter|0|ni::eType_I64, NULL, "void",
  1, iTime_SetUnixTimeSecs_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_SetUnixTimeSecs)
#else
  NULL
#endif
};

// Method: GetUnixTimeSecs
static const ni::sMethodDef iTime_GetUnixTimeSecs = {
  "GetUnixTimeSecs",
  ni::eTypeFlags_MethodGetter|0|ni::eType_I64, NULL, "tI64",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_GetUnixTimeSecs)
#else
  NULL
#endif
};

// Method: Compare
static const ni::sParameterDef iTime_Compare_Parameters[1] = { 
  { "apTime", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "const iTime*" }
}; 
static const ni::sMethodDef iTime_Compare = {
  "Compare",
  0|ni::eType_I32, NULL, "tI32",
  1, iTime_Compare_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_Compare)
#else
  NULL
#endif
};

// Method: ParseString
static const ni::sParameterDef iTime_ParseString_Parameters[2] = { 
  { "szString", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "aszFormat", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iTime_ParseString = {
  "ParseString",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*",
  2, iTime_ParseString_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_ParseString)
#else
  NULL
#endif
};

// Method: Format
static const ni::sParameterDef iTime_Format_Parameters[1] = { 
  { "aszFormat", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iTime_Format = {
  "Format",
  0|ni::eType_String, NULL, "cString",
  1, iTime_Format_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_Format)
#else
  NULL
#endif
};

// Method: AddSeconds
static const ni::sParameterDef iTime_AddSeconds_Parameters[1] = { 
  { "anSeconds", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iTime_AddSeconds = {
  "AddSeconds",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iTime), "iTime*",
  1, iTime_AddSeconds_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iTime_AddSeconds)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iTime[] = {
	&iTime_UpdateFromCurrentSystemTime,
	&iTime_SetYear,
	&iTime_GetYear,
	&iTime_SetMonth,
	&iTime_GetMonth,
	&iTime_SetDay,
	&iTime_GetDay,
	&iTime_GetWeekday,
	&iTime_SetHour,
	&iTime_GetHour,
	&iTime_SetMinute,
	&iTime_GetMinute,
	&iTime_SetSecond,
	&iTime_GetSecond,
	&iTime_Copy,
	&iTime_Clone,
	&iTime_SetDayLightSaving,
	&iTime_GetDayLightSaving,
	&iTime_SetTimeZone,
	&iTime_GetTimeZone,
	&iTime_SetUnixTimeSecs,
	&iTime_GetUnixTimeSecs,
	&iTime_Compare,
	&iTime_ParseString,
	&iTime_Format,
	&iTime_AddSeconds,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iTime[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iTime = {
  niGetInterfaceID(iTime),
  &niGetInterfaceUUID(iTime),
  1,
  Parents_iTime,
  niCountOf(Methods_iTime),Methods_iTime,
  NULL
};

	return &InterfaceDef_iTime;
}

// End of iTime wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iToString wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iToString() {

// Method: ToString
static const ni::sMethodDef iToString_ToString = {
  "ToString",
  0|ni::eType_String, NULL, "ni::cString",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iToString_ToString)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iToString[] = {
	&iToString_ToString,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iToString[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iToString = {
  niGetInterfaceID(iToString),
  &niGetInterfaceUUID(iToString),
  1,
  Parents_iToString,
  niCountOf(Methods_iToString),Methods_iToString,
  NULL
};

	return &InterfaceDef_iToString;
}

// End of iToString wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iXmlParserSink wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
#if niMinFeatures(20)
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iXmlParserSink() {

#if niMinFeatures(20)
// Method: OnXmlParserSink_Node
static const ni::sParameterDef iXmlParserSink_OnXmlParserSink_Node_Parameters[2] = { 
  { "aType", ni::eType_Enum, NULL, "eXmlParserNodeType" }, 
  { "aNameOrData", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }
}; 
static const ni::sMethodDef iXmlParserSink_OnXmlParserSink_Node = {
  "OnXmlParserSink_Node",
  0|ni::eType_I8, NULL, "tBool",
  2, iXmlParserSink_OnXmlParserSink_Node_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iXmlParserSink_OnXmlParserSink_Node)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

#if niMinFeatures(20)
// Method: OnXmlParserSink_Attribute
static const ni::sParameterDef iXmlParserSink_OnXmlParserSink_Attribute_Parameters[2] = { 
  { "aName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }, 
  { "aValue", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const ni::achar*" }
}; 
static const ni::sMethodDef iXmlParserSink_OnXmlParserSink_Attribute = {
  "OnXmlParserSink_Attribute",
  0|ni::eType_I8, NULL, "tBool",
  2, iXmlParserSink_OnXmlParserSink_Attribute_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iXmlParserSink_OnXmlParserSink_Attribute)
#else
  NULL
#endif
};
#endif // niMinFeatures(20)

static const ni::sMethodDef* Methods_iXmlParserSink[] = {
#if niMinFeatures(20)
	&iXmlParserSink_OnXmlParserSink_Node,
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	&iXmlParserSink_OnXmlParserSink_Attribute,
#endif // niMinFeatures(20)

};

//// Interface dispatch wrapper /////////////////////////////
struct niHidden DispatchWrapper_iXmlParserSink : public ni::cIUnknownImpl<ni::iXmlParserSink,ni::eIUnknownImplFlags_Aggregatable|ni::eIUnknownImplFlags_NoRefCount>
{
	DispatchWrapper_iXmlParserSink(ni::iDispatch* apDispatch) {
    mprotected_pAggregateParent = apDispatch;
	}
	~DispatchWrapper_iXmlParserSink() {
    this->Invalidate();
  }

	ni::iUnknown* __stdcall QueryInterface(const ni::tUUID& aIID) niImpl {
    if (aIID == niGetInterfaceUUID(iXmlParserSink))
      return this;
		return mprotected_pAggregateParent->QueryInterface(aIID);
	}
	void __stdcall ListInterfaces(ni::iMutableCollection* apLst, ni::tU32 anFlags) const niImpl {
    apLst->Add(niGetInterfaceUUID(iXmlParserSink));
		mprotected_pAggregateParent->ListInterfaces(apLst,anFlags);
	}

  // Method (0): iXmlParserSink::OnXmlParserSink_Node
  tBool __stdcall OnXmlParserSink_Node(eXmlParserNodeType aType, const ni::achar * aNameOrData) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = (ni::tU32)aType;
    _params_[1] = aNameOrData;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iXmlParserSink_OnXmlParserSink_Node,0,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iXmlParserSink_OnXmlParserSink_Node.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

  // Method (1): iXmlParserSink::OnXmlParserSink_Attribute
  tBool __stdcall OnXmlParserSink_Attribute(const ni::achar * aName, const ni::achar * aValue) {
    ni::Var _var_;
    ni::Var _params_[2];
    _params_[0] = aName;
    _params_[1] = aValue;
    if (((ni::iDispatch*)(mprotected_pAggregateParent))->CallMethod(&iXmlParserSink_OnXmlParserSink_Attribute,1,_params_,2,&_var_)) {
      if (VarIsType(&_var_,iXmlParserSink_OnXmlParserSink_Attribute.mReturnType,ni::eFalse)) {
        return (ni::tBool)_var_.GetI8();
      }
    }
    return ni::eFalse;
	}

	static ni::iUnknown* Create(ni::iDispatch* apDispatch) {
		niAssert(niIsOK(apDispatch));
    if (!apDispatch->InitializeMethods(Methods_iXmlParserSink, niCountOf(Methods_iXmlParserSink))) {
      niError(niFmt("Can't initialize dispatch methods for %s.",  "iXmlParserSink"));
      return NULL;
    }
		return niNew DispatchWrapper_iXmlParserSink(apDispatch);
	}
};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iXmlParserSink[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iXmlParserSink = {
  niGetInterfaceID(iXmlParserSink),
  &niGetInterfaceUUID(iXmlParserSink),
  1,
  Parents_iXmlParserSink,
  niCountOf(Methods_iXmlParserSink),Methods_iXmlParserSink,
  DispatchWrapper_iXmlParserSink::Create
};

	return &InterfaceDef_iXmlParserSink;
}

// End of iXmlParserSink wrapper
#endif // niMinFeatures(20)


//////////////////////////////////////////////////////////////////////////////////////////////
// iZipArchWrite wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iZipArchWrite() {

// Method: AddFileBlock
static const ni::sParameterDef iZipArchWrite_AddFileBlock_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aSize", ni::eType_I64, NULL, "tI64" }
}; 
static const ni::sMethodDef iZipArchWrite_AddFileBlock = {
  "AddFileBlock",
  0|ni::eType_I8, NULL, "tBool",
  3, iZipArchWrite_AddFileBlock_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZipArchWrite_AddFileBlock)
#else
  NULL
#endif
};

// Method: AddRawBlock
static const ni::sParameterDef iZipArchWrite_AddRawBlock_Parameters[3] = { 
  { "aaszName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apData", ni::eType_Ptr, NULL, "tPtr" }, 
  { "aSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iZipArchWrite_AddRawBlock = {
  "AddRawBlock",
  0|ni::eType_I8, NULL, "tBool",
  3, iZipArchWrite_AddRawBlock_Parameters,
NULL
};

static const ni::sMethodDef* Methods_iZipArchWrite[] = {
	&iZipArchWrite_AddFileBlock,
	&iZipArchWrite_AddRawBlock,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iZipArchWrite[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iZipArchWrite = {
  niGetInterfaceID(iZipArchWrite),
  &niGetInterfaceUUID(iZipArchWrite),
  1,
  Parents_iZipArchWrite,
  niCountOf(Methods_iZipArchWrite),Methods_iZipArchWrite,
  NULL
};

	return &InterfaceDef_iZipArchWrite;
}

// End of iZipArchWrite wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iZip wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iZip() {

// Method: ZipUncompressBuffer
static const ni::sParameterDef iZip_ZipUncompressBuffer_Parameters[4] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anDestSize", ni::eType_U32, NULL, "tU32" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipUncompressBuffer = {
  "ZipUncompressBuffer",
  0|ni::eType_I8, NULL, "tBool",
  4, iZip_ZipUncompressBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipUncompressBuffer)
#else
  NULL
#endif
};

// Method: ZipUncompressBufferInFile
static const ni::sParameterDef iZip_ZipUncompressBufferInFile_Parameters[4] = { 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anDestSize", ni::eType_U32, NULL, "tU32" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipUncompressBufferInFile = {
  "ZipUncompressBufferInFile",
  0|ni::eType_I8, NULL, "tBool",
  4, iZip_ZipUncompressBufferInFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipUncompressBufferInFile)
#else
  NULL
#endif
};

// Method: ZipUncompressFile
static const ni::sParameterDef iZip_ZipUncompressFile_Parameters[4] = { 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anDestSize", ni::eType_U32, NULL, "tU32" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipUncompressFile = {
  "ZipUncompressFile",
  0|ni::eType_I8, NULL, "tBool",
  4, iZip_ZipUncompressFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipUncompressFile)
#else
  NULL
#endif
};

// Method: ZipUncompressFileInBuffer
static const ni::sParameterDef iZip_ZipUncompressFileInBuffer_Parameters[4] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anDestSize", ni::eType_U32, NULL, "tU32" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipUncompressFileInBuffer = {
  "ZipUncompressFileInBuffer",
  0|ni::eType_I8, NULL, "tBool",
  4, iZip_ZipUncompressFileInBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipUncompressFileInBuffer)
#else
  NULL
#endif
};

// Method: ZipInflateFileInBuffer
static const ni::sParameterDef iZip_ZipInflateFileInBuffer_Parameters[3] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anDestSize", ni::eType_U32, NULL, "tU32" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }
}; 
static const ni::sMethodDef iZip_ZipInflateFileInBuffer = {
  "ZipInflateFileInBuffer",
  0|ni::eType_I8, NULL, "tBool",
  3, iZip_ZipInflateFileInBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipInflateFileInBuffer)
#else
  NULL
#endif
};

// Method: ZipCompressBuffer
static const ni::sParameterDef iZip_ZipCompressBuffer_Parameters[4] = { 
  { "apDest", ni::eType_Ptr, NULL, "tPtr" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }, 
  { "anLevel", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipCompressBuffer = {
  "ZipCompressBuffer",
  0|ni::eType_U32, NULL, "tU32",
  4, iZip_ZipCompressBuffer_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipCompressBuffer)
#else
  NULL
#endif
};

// Method: ZipCompressBufferInFile
static const ni::sParameterDef iZip_ZipCompressBufferInFile_Parameters[4] = { 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apSrc", ni::eType_Ptr, NULL, "tPtr" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }, 
  { "anLevel", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipCompressBufferInFile = {
  "ZipCompressBufferInFile",
  0|ni::eType_U32, NULL, "tU32",
  4, iZip_ZipCompressBufferInFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipCompressBufferInFile)
#else
  NULL
#endif
};

// Method: ZipCompressFile
static const ni::sParameterDef iZip_ZipCompressFile_Parameters[4] = { 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "apSrc", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "anSrcSize", ni::eType_U32, NULL, "tU32" }, 
  { "anLevel", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipCompressFile = {
  "ZipCompressFile",
  0|ni::eType_U32, NULL, "tU32",
  4, iZip_ZipCompressFile_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipCompressFile)
#else
  NULL
#endif
};

// Method: UnzOpen
static const ni::sParameterDef iZip_UnzOpen_Parameters[1] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iFile), "ni::iFile*" }
}; 
static const ni::sMethodDef iZip_UnzOpen = {
  "UnzOpen",
  0|ni::eType_UIntPtr, NULL, "tHandle",
  1, iZip_UnzOpen_Parameters,
NULL
};

// Method: UnzClose
static const ni::sParameterDef iZip_UnzClose_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_UnzClose = {
  "UnzClose",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_UnzClose_Parameters,
NULL
};

// Method: UnzGetGlobalInfo
static const ni::sParameterDef iZip_UnzGetGlobalInfo_Parameters[2] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "pglobal_info", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "unz_global_info*" }
}; 
static const ni::sMethodDef iZip_UnzGetGlobalInfo = {
  "UnzGetGlobalInfo",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_UnzGetGlobalInfo_Parameters,
NULL
};

// Method: UnzGetGlobalComment
static const ni::sParameterDef iZip_UnzGetGlobalComment_Parameters[2] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "strComment", ni::eType_String|ni::eTypeFlags_Pointer, NULL, "cString&" }
}; 
static const ni::sMethodDef iZip_UnzGetGlobalComment = {
  "UnzGetGlobalComment",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_UnzGetGlobalComment_Parameters,
NULL
};

// Method: UnzGoToFirstFile
static const ni::sParameterDef iZip_UnzGoToFirstFile_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_UnzGoToFirstFile = {
  "UnzGoToFirstFile",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_UnzGoToFirstFile_Parameters,
NULL
};

// Method: UnzGoToNextFile
static const ni::sParameterDef iZip_UnzGoToNextFile_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_UnzGoToNextFile = {
  "UnzGoToNextFile",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_UnzGoToNextFile_Parameters,
NULL
};

// Method: UnzLocateFile
static const ni::sParameterDef iZip_UnzLocateFile_Parameters[3] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "szFileName", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "bCaseSensitivity", ni::eType_I8, NULL, "tBool" }
}; 
static const ni::sMethodDef iZip_UnzLocateFile = {
  "UnzLocateFile",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_UnzLocateFile_Parameters,
NULL
};

// Method: UnzLocateFileInc
static const ni::sParameterDef iZip_UnzLocateFileInc_Parameters[3] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "num", ni::eType_U32, NULL, "tU32" }, 
  { "pos", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_UnzLocateFileInc = {
  "UnzLocateFileInc",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_UnzLocateFileInc_Parameters,
NULL
};

// Method: UnzGetCurrentFileInfo
static const ni::sParameterDef iZip_UnzGetCurrentFileInfo_Parameters[5] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "pfile_info", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "unz_file_info*" }, 
  { "strFileName", ni::eType_String|ni::eTypeFlags_Pointer, NULL, "cString&" }, 
  { "strExtraField", ni::eType_String|ni::eTypeFlags_Pointer, NULL, "cString&" }, 
  { "strComment", ni::eType_String|ni::eTypeFlags_Pointer, NULL, "cString&" }
}; 
static const ni::sMethodDef iZip_UnzGetCurrentFileInfo = {
  "UnzGetCurrentFileInfo",
  0|ni::eType_I32, NULL, "tI32",
  5, iZip_UnzGetCurrentFileInfo_Parameters,
NULL
};

// Method: UnzOpenCurrentFile
static const ni::sParameterDef iZip_UnzOpenCurrentFile_Parameters[2] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "pwd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }
}; 
static const ni::sMethodDef iZip_UnzOpenCurrentFile = {
  "UnzOpenCurrentFile",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_UnzOpenCurrentFile_Parameters,
NULL
};

// Method: UnzCloseCurrentFile
static const ni::sParameterDef iZip_UnzCloseCurrentFile_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_UnzCloseCurrentFile = {
  "UnzCloseCurrentFile",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_UnzCloseCurrentFile_Parameters,
NULL
};

// Method: UnzReadCurrentFile
static const ni::sParameterDef iZip_UnzReadCurrentFile_Parameters[3] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "buf", ni::eType_Ptr, NULL, "tPtr" }, 
  { "len", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_UnzReadCurrentFile = {
  "UnzReadCurrentFile",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_UnzReadCurrentFile_Parameters,
NULL
};

// Method: Unztell
static const ni::sParameterDef iZip_Unztell_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_Unztell = {
  "Unztell",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_Unztell_Parameters,
NULL
};

// Method: Unzeof
static const ni::sParameterDef iZip_Unzeof_Parameters[1] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }
}; 
static const ni::sMethodDef iZip_Unzeof = {
  "Unzeof",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_Unzeof_Parameters,
NULL
};

// Method: UnzGetLocalExtrafield
static const ni::sParameterDef iZip_UnzGetLocalExtrafield_Parameters[3] = { 
  { "file", ni::eType_UIntPtr, NULL, "tHandle" }, 
  { "buf", ni::eType_Ptr, NULL, "tPtr" }, 
  { "len", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_UnzGetLocalExtrafield = {
  "UnzGetLocalExtrafield",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_UnzGetLocalExtrafield_Parameters,
NULL
};

// Method: ZlibVersion
static const ni::sMethodDef iZip_ZlibVersion = {
  "ZlibVersion",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
NULL
};

// Method: Deflate
static const ni::sParameterDef iZip_Deflate_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "flush", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_Deflate = {
  "Deflate",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_Deflate_Parameters,
NULL
};

// Method: DeflateEnd
static const ni::sParameterDef iZip_DeflateEnd_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_DeflateEnd = {
  "DeflateEnd",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_DeflateEnd_Parameters,
NULL
};

// Method: Inflate
static const ni::sParameterDef iZip_Inflate_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "flush", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_Inflate = {
  "Inflate",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_Inflate_Parameters,
NULL
};

// Method: InflateEnd
static const ni::sParameterDef iZip_InflateEnd_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateEnd = {
  "InflateEnd",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateEnd_Parameters,
NULL
};

// Method: DeflateSetDictionary
static const ni::sParameterDef iZip_DeflateSetDictionary_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "dictionary", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "dictLength", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflateSetDictionary = {
  "DeflateSetDictionary",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_DeflateSetDictionary_Parameters,
NULL
};

// Method: DeflateCopy
static const ni::sParameterDef iZip_DeflateCopy_Parameters[2] = { 
  { "dest", ni::eType_Null, NULL, "z_streamp" }, 
  { "source", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_DeflateCopy = {
  "DeflateCopy",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_DeflateCopy_Parameters,
NULL
};

// Method: DeflateReset
static const ni::sParameterDef iZip_DeflateReset_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_DeflateReset = {
  "DeflateReset",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_DeflateReset_Parameters,
NULL
};

// Method: DeflateParams
static const ni::sParameterDef iZip_DeflateParams_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "level", ni::eType_I32, NULL, "tI32" }, 
  { "strategy", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflateParams = {
  "DeflateParams",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_DeflateParams_Parameters,
NULL
};

// Method: DeflateTune
static const ni::sParameterDef iZip_DeflateTune_Parameters[5] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "good_length", ni::eType_I32, NULL, "tI32" }, 
  { "max_lazy", ni::eType_I32, NULL, "tI32" }, 
  { "nice_length", ni::eType_I32, NULL, "tI32" }, 
  { "max_chain", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflateTune = {
  "DeflateTune",
  0|ni::eType_I32, NULL, "tI32",
  5, iZip_DeflateTune_Parameters,
NULL
};

// Method: DeflateBound
static const ni::sParameterDef iZip_DeflateBound_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "sourceLen", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_DeflateBound = {
  "DeflateBound",
  0|ni::eType_U32, NULL, "tU32",
  2, iZip_DeflateBound_Parameters,
NULL
};

// Method: DeflatePrime
static const ni::sParameterDef iZip_DeflatePrime_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "bits", ni::eType_I32, NULL, "tI32" }, 
  { "value", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflatePrime = {
  "DeflatePrime",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_DeflatePrime_Parameters,
NULL
};

// Method: DeflateSetHeader
static const ni::sParameterDef iZip_DeflateSetHeader_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "head", ni::eType_Null, NULL, "gz_headerp" }
}; 
static const ni::sMethodDef iZip_DeflateSetHeader = {
  "DeflateSetHeader",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_DeflateSetHeader_Parameters,
NULL
};

// Method: InflateSetDictionary
static const ni::sParameterDef iZip_InflateSetDictionary_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "dictionary", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "dictLength", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_InflateSetDictionary = {
  "InflateSetDictionary",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_InflateSetDictionary_Parameters,
NULL
};

// Method: InflateSync
static const ni::sParameterDef iZip_InflateSync_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateSync = {
  "InflateSync",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateSync_Parameters,
NULL
};

// Method: InflateCopy
static const ni::sParameterDef iZip_InflateCopy_Parameters[2] = { 
  { "dest", ni::eType_Null, NULL, "z_streamp" }, 
  { "source", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateCopy = {
  "InflateCopy",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_InflateCopy_Parameters,
NULL
};

// Method: InflateReset
static const ni::sParameterDef iZip_InflateReset_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateReset = {
  "InflateReset",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateReset_Parameters,
NULL
};

// Method: InflatePrime
static const ni::sParameterDef iZip_InflatePrime_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "bits", ni::eType_I32, NULL, "tI32" }, 
  { "value", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_InflatePrime = {
  "InflatePrime",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_InflatePrime_Parameters,
NULL
};

// Method: InflateGetHeader
static const ni::sParameterDef iZip_InflateGetHeader_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "head", ni::eType_Null, NULL, "gz_headerp" }
}; 
static const ni::sMethodDef iZip_InflateGetHeader = {
  "InflateGetHeader",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_InflateGetHeader_Parameters,
NULL
};

// Method: InflateBack
static const ni::sParameterDef iZip_InflateBack_Parameters[5] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "aIn", ni::eType_Null, NULL, "zlib_in_func" }, 
  { "in_desc", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "void*" }, 
  { "aOut", ni::eType_Null, NULL, "zlib_out_func" }, 
  { "out_desc", ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "void*" }
}; 
static const ni::sMethodDef iZip_InflateBack = {
  "InflateBack",
  0|ni::eType_I32, NULL, "tI32",
  5, iZip_InflateBack_Parameters,
NULL
};

// Method: InflateBackEnd
static const ni::sParameterDef iZip_InflateBackEnd_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateBackEnd = {
  "InflateBackEnd",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateBackEnd_Parameters,
NULL
};

// Method: ZlibCompileFlags
static const ni::sMethodDef iZip_ZlibCompileFlags = {
  "ZlibCompileFlags",
  0|ni::eType_U32, NULL, "tU32",
  0, NULL,
NULL
};

// Method: Compress
static const ni::sParameterDef iZip_Compress_Parameters[4] = { 
  { "dest", ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "tU8*" }, 
  { "destLen", ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "tU32*" }, 
  { "source", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "sourceLen", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_Compress = {
  "Compress",
  0|ni::eType_I32, NULL, "tI32",
  4, iZip_Compress_Parameters,
NULL
};

// Method: Compress2
static const ni::sParameterDef iZip_Compress2_Parameters[5] = { 
  { "dest", ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "tU8*" }, 
  { "destLen", ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "tU32*" }, 
  { "source", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "sourceLen", ni::eType_U32, NULL, "tU32" }, 
  { "level", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_Compress2 = {
  "Compress2",
  0|ni::eType_I32, NULL, "tI32",
  5, iZip_Compress2_Parameters,
NULL
};

// Method: CompressBound
static const ni::sParameterDef iZip_CompressBound_Parameters[1] = { 
  { "sourceLen", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_CompressBound = {
  "CompressBound",
  0|ni::eType_U32, NULL, "tU32",
  1, iZip_CompressBound_Parameters,
NULL
};

// Method: Uncompress
static const ni::sParameterDef iZip_Uncompress_Parameters[4] = { 
  { "dest", ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "tU8*" }, 
  { "destLen", ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "tU32*" }, 
  { "source", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "sourceLen", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_Uncompress = {
  "Uncompress",
  0|ni::eType_I32, NULL, "tI32",
  4, iZip_Uncompress_Parameters,
NULL
};

// Method: Adler32
static const ni::sParameterDef iZip_Adler32_Parameters[3] = { 
  { "adler", ni::eType_U32, NULL, "tU32" }, 
  { "buf", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "len", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_Adler32 = {
  "Adler32",
  0|ni::eType_U32, NULL, "tU32",
  3, iZip_Adler32_Parameters,
NULL
};

// Method: Adler32Combine
static const ni::sParameterDef iZip_Adler32Combine_Parameters[3] = { 
  { "adler1", ni::eType_U32, NULL, "tU32" }, 
  { "adler2", ni::eType_U32, NULL, "tU32" }, 
  { "len2", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iZip_Adler32Combine = {
  "Adler32Combine",
  0|ni::eType_U32, NULL, "tU32",
  3, iZip_Adler32Combine_Parameters,
NULL
};

// Method: Crc32
static const ni::sParameterDef iZip_Crc32_Parameters[3] = { 
  { "crc", ni::eType_U32, NULL, "tU32" }, 
  { "buf", ni::eTypeFlags_Constant|ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "const tU8*" }, 
  { "len", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_Crc32 = {
  "Crc32",
  0|ni::eType_U32, NULL, "tU32",
  3, iZip_Crc32_Parameters,
NULL
};

// Method: Crc32Combine
static const ni::sParameterDef iZip_Crc32Combine_Parameters[3] = { 
  { "crc1", ni::eType_U32, NULL, "tU32" }, 
  { "crc2", ni::eType_U32, NULL, "tU32" }, 
  { "len2", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iZip_Crc32Combine = {
  "Crc32Combine",
  0|ni::eType_U32, NULL, "tU32",
  3, iZip_Crc32Combine_Parameters,
NULL
};

// Method: DeflateInit
static const ni::sParameterDef iZip_DeflateInit_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "level", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflateInit = {
  "DeflateInit",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_DeflateInit_Parameters,
NULL
};

// Method: InflateInit
static const ni::sParameterDef iZip_InflateInit_Parameters[1] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateInit = {
  "InflateInit",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateInit_Parameters,
NULL
};

// Method: DeflateInit2
static const ni::sParameterDef iZip_DeflateInit2_Parameters[6] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "level", ni::eType_I32, NULL, "tI32" }, 
  { "method", ni::eType_I32, NULL, "tI32" }, 
  { "windowBits", ni::eType_I32, NULL, "tI32" }, 
  { "memLevel", ni::eType_I32, NULL, "tI32" }, 
  { "strategy", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_DeflateInit2 = {
  "DeflateInit2",
  0|ni::eType_I32, NULL, "tI32",
  6, iZip_DeflateInit2_Parameters,
NULL
};

// Method: InflateInit2
static const ni::sParameterDef iZip_InflateInit2_Parameters[2] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "windowBits", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_InflateInit2 = {
  "InflateInit2",
  0|ni::eType_I32, NULL, "tI32",
  2, iZip_InflateInit2_Parameters,
NULL
};

// Method: InflateBackInit
static const ni::sParameterDef iZip_InflateBackInit_Parameters[3] = { 
  { "strm", ni::eType_Null, NULL, "z_streamp" }, 
  { "windowBits", ni::eType_I32, NULL, "tI32" }, 
  { "window", ni::eType_U8|ni::eTypeFlags_Pointer, NULL, "tU8*" }
}; 
static const ni::sMethodDef iZip_InflateBackInit = {
  "InflateBackInit",
  0|ni::eType_I32, NULL, "tI32",
  3, iZip_InflateBackInit_Parameters,
NULL
};

// Method: ZError
static const ni::sParameterDef iZip_ZError_Parameters[1] = { 
  { "err", ni::eType_I32, NULL, "tI32" }
}; 
static const ni::sMethodDef iZip_ZError = {
  "ZError",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  1, iZip_ZError_Parameters,
NULL
};

// Method: InflateSyncPoint
static const ni::sParameterDef iZip_InflateSyncPoint_Parameters[1] = { 
  { "z", ni::eType_Null, NULL, "z_streamp" }
}; 
static const ni::sMethodDef iZip_InflateSyncPoint = {
  "InflateSyncPoint",
  0|ni::eType_I32, NULL, "tI32",
  1, iZip_InflateSyncPoint_Parameters,
NULL
};

// Method: GetCRCTable
static const ni::sMethodDef iZip_GetCRCTable = {
  "GetCRCTable",
  0|ni::eTypeFlags_Constant|ni::eType_U32|ni::eTypeFlags_Pointer, NULL, "const tU32*",
  0, NULL,
NULL
};

// Method: CreateZipBufferEncoder
static const ni::sParameterDef iZip_CreateZipBufferEncoder_Parameters[1] = { 
  { "anCLevel", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_CreateZipBufferEncoder = {
  "CreateZipBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferEncoder), "iBufferEncoder*",
  1, iZip_CreateZipBufferEncoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateZipBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateZipBufferDecoder
static const ni::sMethodDef iZip_CreateZipBufferDecoder = {
  "CreateZipBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferDecoder), "iBufferDecoder*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateZipBufferDecoder)
#else
  NULL
#endif
};

// Method: CreateFileZipBufferEncoder
static const ni::sParameterDef iZip_CreateFileZipBufferEncoder_Parameters[2] = { 
  { "apBaseFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "anCLevel", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_CreateFileZipBufferEncoder = {
  "CreateFileZipBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iZip_CreateFileZipBufferEncoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateFileZipBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateFileZipBufferDecoder
static const ni::sParameterDef iZip_CreateFileZipBufferDecoder_Parameters[2] = { 
  { "apBaseFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "aDecodedSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iZip_CreateFileZipBufferDecoder = {
  "CreateFileZipBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iZip_CreateFileZipBufferDecoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateFileZipBufferDecoder)
#else
  NULL
#endif
};

// Method: CreateRawBufferEncoder
static const ni::sMethodDef iZip_CreateRawBufferEncoder = {
  "CreateRawBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferEncoder), "iBufferEncoder*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateRawBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateRawBufferDecoder
static const ni::sMethodDef iZip_CreateRawBufferDecoder = {
  "CreateRawBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iBufferDecoder), "iBufferDecoder*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateRawBufferDecoder)
#else
  NULL
#endif
};

// Method: CreateFileRawBufferEncoder
static const ni::sParameterDef iZip_CreateFileRawBufferEncoder_Parameters[1] = { 
  { "apBaseFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }
}; 
static const ni::sMethodDef iZip_CreateFileRawBufferEncoder = {
  "CreateFileRawBufferEncoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  1, iZip_CreateFileRawBufferEncoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateFileRawBufferEncoder)
#else
  NULL
#endif
};

// Method: CreateFileRawBufferDecoder
static const ni::sParameterDef iZip_CreateFileRawBufferDecoder_Parameters[2] = { 
  { "apBaseFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "aDecodedSize", ni::eType_Size, NULL, "tSize" }
}; 
static const ni::sMethodDef iZip_CreateFileRawBufferDecoder = {
  "CreateFileRawBufferDecoder",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iZip_CreateFileRawBufferDecoder_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateFileRawBufferDecoder)
#else
  NULL
#endif
};

#if niMinFeatures(15)
// Method: CreateZipArchive
static const ni::sParameterDef iZip_CreateZipArchive_Parameters[3] = { 
  { "apDest", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*" }, 
  { "aaszPwd", ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*" }, 
  { "apStoredExtensions", ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(ni::iCollection), "const tStringCVec*" }
}; 
static const ni::sMethodDef iZip_CreateZipArchive = {
  "CreateZipArchive",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iZipArchWrite), "iZipArchWrite*",
  3, iZip_CreateZipArchive_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_CreateZipArchive)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: GZipOpen
static const ni::sParameterDef iZip_GZipOpen_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "aulCompressionMode", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_GZipOpen = {
  "GZipOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iZip_GZipOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_GZipOpen)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

#if niMinFeatures(15)
// Method: ZipOpen
static const ni::sParameterDef iZip_ZipOpen_Parameters[2] = { 
  { "apFile", ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFileBase), "iFileBase*" }, 
  { "aulCompressionMode", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iZip_ZipOpen = {
  "ZipOpen",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iFile), "iFile*",
  2, iZip_ZipOpen_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iZip_ZipOpen)
#else
  NULL
#endif
};
#endif // niMinFeatures(15)

static const ni::sMethodDef* Methods_iZip[] = {
	&iZip_ZipUncompressBuffer,
	&iZip_ZipUncompressBufferInFile,
	&iZip_ZipUncompressFile,
	&iZip_ZipUncompressFileInBuffer,
	&iZip_ZipInflateFileInBuffer,
	&iZip_ZipCompressBuffer,
	&iZip_ZipCompressBufferInFile,
	&iZip_ZipCompressFile,
	&iZip_UnzOpen,
	&iZip_UnzClose,
	&iZip_UnzGetGlobalInfo,
	&iZip_UnzGetGlobalComment,
	&iZip_UnzGoToFirstFile,
	&iZip_UnzGoToNextFile,
	&iZip_UnzLocateFile,
	&iZip_UnzLocateFileInc,
	&iZip_UnzGetCurrentFileInfo,
	&iZip_UnzOpenCurrentFile,
	&iZip_UnzCloseCurrentFile,
	&iZip_UnzReadCurrentFile,
	&iZip_Unztell,
	&iZip_Unzeof,
	&iZip_UnzGetLocalExtrafield,
	&iZip_ZlibVersion,
	&iZip_Deflate,
	&iZip_DeflateEnd,
	&iZip_Inflate,
	&iZip_InflateEnd,
	&iZip_DeflateSetDictionary,
	&iZip_DeflateCopy,
	&iZip_DeflateReset,
	&iZip_DeflateParams,
	&iZip_DeflateTune,
	&iZip_DeflateBound,
	&iZip_DeflatePrime,
	&iZip_DeflateSetHeader,
	&iZip_InflateSetDictionary,
	&iZip_InflateSync,
	&iZip_InflateCopy,
	&iZip_InflateReset,
	&iZip_InflatePrime,
	&iZip_InflateGetHeader,
	&iZip_InflateBack,
	&iZip_InflateBackEnd,
	&iZip_ZlibCompileFlags,
	&iZip_Compress,
	&iZip_Compress2,
	&iZip_CompressBound,
	&iZip_Uncompress,
	&iZip_Adler32,
	&iZip_Adler32Combine,
	&iZip_Crc32,
	&iZip_Crc32Combine,
	&iZip_DeflateInit,
	&iZip_InflateInit,
	&iZip_DeflateInit2,
	&iZip_InflateInit2,
	&iZip_InflateBackInit,
	&iZip_ZError,
	&iZip_InflateSyncPoint,
	&iZip_GetCRCTable,
	&iZip_CreateZipBufferEncoder,
	&iZip_CreateZipBufferDecoder,
	&iZip_CreateFileZipBufferEncoder,
	&iZip_CreateFileZipBufferDecoder,
	&iZip_CreateRawBufferEncoder,
	&iZip_CreateRawBufferDecoder,
	&iZip_CreateFileRawBufferEncoder,
	&iZip_CreateFileRawBufferDecoder,
#if niMinFeatures(15)
	&iZip_CreateZipArchive,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iZip_GZipOpen,
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	&iZip_ZipOpen,
#endif // niMinFeatures(15)

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iZip[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iZip = {
  niGetInterfaceID(iZip),
  &niGetInterfaceUUID(iZip),
  1,
  Parents_iZip,
  niCountOf(Methods_iZip),Methods_iZip,
  NULL
};

	return &InterfaceDef_iZip;
}

// End of iZip wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iObjectTypeDef wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iObjectTypeDef() {

// Method: GetName
static const ni::sMethodDef iObjectTypeDef_GetName = {
  "GetName",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iObjectTypeDef_GetName)
#else
  NULL
#endif
};

// Method: CreateInstance
static const ni::sParameterDef iObjectTypeDef_CreateInstance_Parameters[2] = { 
  { "aVarA", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }, 
  { "aVarB", ni::eTypeFlags_Constant|ni::eType_Variant|ni::eTypeFlags_Pointer, NULL, "const Var&" }
}; 
static const ni::sMethodDef iObjectTypeDef_CreateInstance = {
  "CreateInstance",
  0|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iUnknown), "iUnknown*",
  2, iObjectTypeDef_CreateInstance_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iObjectTypeDef_CreateInstance)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iObjectTypeDef[] = {
	&iObjectTypeDef_GetName,
	&iObjectTypeDef_CreateInstance,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iObjectTypeDef[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iObjectTypeDef = {
  niGetInterfaceID(iObjectTypeDef),
  &niGetInterfaceUUID(iObjectTypeDef),
  1,
  Parents_iObjectTypeDef,
  niCountOf(Methods_iObjectTypeDef),Methods_iObjectTypeDef,
  NULL
};

	return &InterfaceDef_iObjectTypeDef;
}

// End of iObjectTypeDef wrapper


//////////////////////////////////////////////////////////////////////////////////////////////
// iModuleDef wrapper
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::sInterfaceDef*) GetInterfaceDef_iModuleDef() {

// Method: GetName
static const ni::sMethodDef iModuleDef_GetName = {
  "GetName",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetName)
#else
  NULL
#endif
};

// Method: GetVersion
static const ni::sMethodDef iModuleDef_GetVersion = {
  "GetVersion",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetVersion)
#else
  NULL
#endif
};

// Method: GetDesc
static const ni::sMethodDef iModuleDef_GetDesc = {
  "GetDesc",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetDesc)
#else
  NULL
#endif
};

// Method: GetAuthor
static const ni::sMethodDef iModuleDef_GetAuthor = {
  "GetAuthor",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetAuthor)
#else
  NULL
#endif
};

// Method: GetCopyright
static const ni::sMethodDef iModuleDef_GetCopyright = {
  "GetCopyright",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetCopyright)
#else
  NULL
#endif
};

// Method: GetNumDependencies
static const ni::sMethodDef iModuleDef_GetNumDependencies = {
  "GetNumDependencies",
  0|ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetNumDependencies)
#else
  NULL
#endif
};

// Method: GetDependency
static const ni::sParameterDef iModuleDef_GetDependency_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iModuleDef_GetDependency = {
  "GetDependency",
  0|ni::eTypeFlags_Constant|ni::eType_AChar|ni::eTypeFlags_Pointer, NULL, "const achar*",
  1, iModuleDef_GetDependency_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetDependency)
#else
  NULL
#endif
};

// Method: GetNumInterfaces
static const ni::sMethodDef iModuleDef_GetNumInterfaces = {
  "GetNumInterfaces",
  0|ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetNumInterfaces)
#else
  NULL
#endif
};

// Method: GetInterface
static const ni::sParameterDef iModuleDef_GetInterface_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iModuleDef_GetInterface = {
  "GetInterface",
  0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sInterfaceDef*",
  1, iModuleDef_GetInterface_Parameters,
NULL
};

// Method: GetNumEnums
static const ni::sMethodDef iModuleDef_GetNumEnums = {
  "GetNumEnums",
  0|ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetNumEnums)
#else
  NULL
#endif
};

// Method: GetEnum
static const ni::sParameterDef iModuleDef_GetEnum_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iModuleDef_GetEnum = {
  "GetEnum",
  0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sEnumDef*",
  1, iModuleDef_GetEnum_Parameters,
NULL
};

// Method: GetNumConstants
static const ni::sMethodDef iModuleDef_GetNumConstants = {
  "GetNumConstants",
  0|ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetNumConstants)
#else
  NULL
#endif
};

// Method: GetConstant
static const ni::sParameterDef iModuleDef_GetConstant_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iModuleDef_GetConstant = {
  "GetConstant",
  0|ni::eTypeFlags_Constant|ni::eType_Null|ni::eTypeFlags_Pointer, NULL, "const sConstantDef*",
  1, iModuleDef_GetConstant_Parameters,
NULL
};

// Method: GetNumObjectTypes
static const ni::sMethodDef iModuleDef_GetNumObjectTypes = {
  "GetNumObjectTypes",
  0|ni::eTypeFlags_Constant|ni::eType_U32, NULL, "const tU32",
  0, NULL,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetNumObjectTypes)
#else
  NULL
#endif
};

// Method: GetObjectType
static const ni::sParameterDef iModuleDef_GetObjectType_Parameters[1] = { 
  { "anIndex", ni::eType_U32, NULL, "tU32" }
}; 
static const ni::sMethodDef iModuleDef_GetObjectType = {
  "GetObjectType",
  0|ni::eTypeFlags_Constant|ni::eType_IUnknown|ni::eTypeFlags_Pointer, &niGetInterfaceUUID(iObjectTypeDef), "const iObjectTypeDef*",
  1, iModuleDef_GetObjectType_Parameters,
#ifndef niConfig_NoXCALL
  XCALL_CIMPL(iModuleDef_GetObjectType)
#else
  NULL
#endif
};

static const ni::sMethodDef* Methods_iModuleDef[] = {
	&iModuleDef_GetName,
	&iModuleDef_GetVersion,
	&iModuleDef_GetDesc,
	&iModuleDef_GetAuthor,
	&iModuleDef_GetCopyright,
	&iModuleDef_GetNumDependencies,
	&iModuleDef_GetDependency,
	&iModuleDef_GetNumInterfaces,
	&iModuleDef_GetInterface,
	&iModuleDef_GetNumEnums,
	&iModuleDef_GetEnum,
	&iModuleDef_GetNumConstants,
	&iModuleDef_GetConstant,
	&iModuleDef_GetNumObjectTypes,
	&iModuleDef_GetObjectType,

};

//// Interface description //////////////////////////////////
static const ni::tUUID* Parents_iModuleDef[] = {
  &niGetInterfaceUUID(iUnknown),
};

static const ni::sInterfaceDef InterfaceDef_iModuleDef = {
  niGetInterfaceID(iModuleDef),
  &niGetInterfaceUUID(iModuleDef),
  1,
  Parents_iModuleDef,
  niCountOf(Methods_iModuleDef),Methods_iModuleDef,
  NULL
};

	return &InterfaceDef_iModuleDef;
}

// End of iModuleDef wrapper

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef


//////////////////////////////////////////////////////////////////////////////////////////////
// Enumerations definition
//////////////////////////////////////////////////////////////////////////////////////////////
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef

// --- Not named enums ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_Unnamed() {

static const ni::sEnumValueDef Enum_Unnamed_Values[] = {
	{ "True", ni::eTrue },
	{ "False", ni::eFalse },
	{ "TrueInDebug", ni::eTrueInDebug },
	{ "FalseInDebug", ni::eFalseInDebug },
};
static const ni::sEnumDef Enum_Unnamed = {
	"niLang.Unnamed",
	4, Enum_Unnamed_Values
};

	return &Enum_Unnamed;
}
// --- eDataTablePropertyType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eDataTablePropertyType() {

static const ni::sEnumValueDef Enum_eDataTablePropertyType_Values[] = {
	{ "Unknown", ni::eDataTablePropertyType_Unknown },
	{ "String", ni::eDataTablePropertyType_String },
	{ "Int", ni::eDataTablePropertyType_Int },
	{ "Int32", ni::eDataTablePropertyType_Int32 },
	{ "Int64", ni::eDataTablePropertyType_Int64 },
	{ "Bool", ni::eDataTablePropertyType_Bool },
	{ "Float", ni::eDataTablePropertyType_Float },
	{ "Float32", ni::eDataTablePropertyType_Float32 },
	{ "Float64", ni::eDataTablePropertyType_Float64 },
	{ "Vec2", ni::eDataTablePropertyType_Vec2 },
	{ "Vec3", ni::eDataTablePropertyType_Vec3 },
	{ "Vec4", ni::eDataTablePropertyType_Vec4 },
	{ "Matrix", ni::eDataTablePropertyType_Matrix },
	{ "IUnknown", ni::eDataTablePropertyType_IUnknown },
};
static const ni::sEnumDef Enum_eDataTablePropertyType = {
	"eDataTablePropertyType",
  niCountOf(Enum_eDataTablePropertyType_Values), Enum_eDataTablePropertyType_Values
};

	return &Enum_eDataTablePropertyType;
}

// --- eDataTableCopyFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eDataTableCopyFlags() {

static const ni::sEnumValueDef Enum_eDataTableCopyFlags_Values[] = {
	{ "Default", ni::eDataTableCopyFlags_Default },
	{ "Skip", ni::eDataTableCopyFlags_Skip },
	{ "Recursive", ni::eDataTableCopyFlags_Recursive },
	{ "AppendAllChildren", ni::eDataTableCopyFlags_AppendAllChildren },
	{ "UniqueChild", ni::eDataTableCopyFlags_UniqueChild },
	{ "Clone", ni::eDataTableCopyFlags_Clone },
};
static const ni::sEnumDef Enum_eDataTableCopyFlags = {
	"eDataTableCopyFlags",
  niCountOf(Enum_eDataTableCopyFlags_Values), Enum_eDataTableCopyFlags_Values
};

	return &Enum_eDataTableCopyFlags;
}

// --- eExpressionVariableType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eExpressionVariableType() {

static const ni::sEnumValueDef Enum_eExpressionVariableType_Values[] = {
	{ "Float", ni::eExpressionVariableType_Float },
	{ "Vec2", ni::eExpressionVariableType_Vec2 },
	{ "Vec3", ni::eExpressionVariableType_Vec3 },
	{ "Vec4", ni::eExpressionVariableType_Vec4 },
	{ "Matrix", ni::eExpressionVariableType_Matrix },
	{ "String", ni::eExpressionVariableType_String },
};
static const ni::sEnumDef Enum_eExpressionVariableType = {
	"eExpressionVariableType",
  niCountOf(Enum_eExpressionVariableType_Values), Enum_eExpressionVariableType_Values
};

	return &Enum_eExpressionVariableType;
}

// --- eExpressionVariableFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eExpressionVariableFlags() {

static const ni::sEnumValueDef Enum_eExpressionVariableFlags_Values[] = {
	{ "Default", ni::eExpressionVariableFlags_Default },
	{ "Reserved", ni::eExpressionVariableFlags_Reserved },
	{ "Constant", ni::eExpressionVariableFlags_Constant },
	{ "Color", ni::eExpressionVariableFlags_Color },
	{ "Quat", ni::eExpressionVariableFlags_Quat },
};
static const ni::sEnumDef Enum_eExpressionVariableFlags = {
	"eExpressionVariableFlags",
  niCountOf(Enum_eExpressionVariableFlags_Values), Enum_eExpressionVariableFlags_Values
};

	return &Enum_eExpressionVariableFlags;
}

// --- eTextEncodingFormat ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eTextEncodingFormat() {

static const ni::sEnumValueDef Enum_eTextEncodingFormat_Values[] = {
	{ "Unknown", ni::eTextEncodingFormat_Unknown },
	{ "UTF8", ni::eTextEncodingFormat_UTF8 },
	{ "UTF8BOM", ni::eTextEncodingFormat_UTF8BOM },
	{ "UTF16LE", ni::eTextEncodingFormat_UTF16LE },
	{ "UTF16BE", ni::eTextEncodingFormat_UTF16BE },
	{ "UTF32LE", ni::eTextEncodingFormat_UTF32LE },
	{ "UTF32BE", ni::eTextEncodingFormat_UTF32BE },
	{ "BitStream", ni::eTextEncodingFormat_BitStream },
	{ "Unicode", ni::eTextEncodingFormat_Unicode },
	{ "Native", ni::eTextEncodingFormat_Native },
};
static const ni::sEnumDef Enum_eTextEncodingFormat = {
	"eTextEncodingFormat",
  niCountOf(Enum_eTextEncodingFormat_Values), Enum_eTextEncodingFormat_Values
};

	return &Enum_eTextEncodingFormat;
}

// --- eFileFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFileFlags() {

static const ni::sEnumValueDef Enum_eFileFlags_Values[] = {
	{ "Read", ni::eFileFlags_Read },
	{ "Write", ni::eFileFlags_Write },
	{ "Append", ni::eFileFlags_Append },
	{ "PartialRead", ni::eFileFlags_PartialRead },
	{ "PartialWrite", ni::eFileFlags_PartialWrite },
	{ "Encoder", ni::eFileFlags_Encoder },
	{ "NoSeek", ni::eFileFlags_NoSeek },
	{ "Dummy", ni::eFileFlags_Dummy },
	{ "Stream", ni::eFileFlags_Stream },
};
static const ni::sEnumDef Enum_eFileFlags = {
	"eFileFlags",
  niCountOf(Enum_eFileFlags_Values), Enum_eFileFlags_Values
};

	return &Enum_eFileFlags;
}

// --- eFileSystemRightsFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFileSystemRightsFlags() {

static const ni::sEnumValueDef Enum_eFileSystemRightsFlags_Values[] = {
	{ "Enum", ni::eFileSystemRightsFlags_Enum },
	{ "Read", ni::eFileSystemRightsFlags_Read },
	{ "Write", ni::eFileSystemRightsFlags_Write },
	{ "Create", ni::eFileSystemRightsFlags_Create },
	{ "Delete", ni::eFileSystemRightsFlags_Delete },
	{ "Execute", ni::eFileSystemRightsFlags_Execute },
	{ "ReadOnly", ni::eFileSystemRightsFlags_ReadOnly },
	{ "WriteOnly", ni::eFileSystemRightsFlags_WriteOnly },
	{ "ReadWriteOnly", ni::eFileSystemRightsFlags_ReadWriteOnly },
	{ "IOOnly", ni::eFileSystemRightsFlags_IOOnly },
	{ "All", ni::eFileSystemRightsFlags_All },
};
static const ni::sEnumDef Enum_eFileSystemRightsFlags = {
	"eFileSystemRightsFlags",
  niCountOf(Enum_eFileSystemRightsFlags_Values), Enum_eFileSystemRightsFlags_Values
};

	return &Enum_eFileSystemRightsFlags;
}

// --- eGameCtrlAxis ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eGameCtrlAxis() {

static const ni::sEnumValueDef Enum_eGameCtrlAxis_Values[] = {
	{ "LX", ni::eGameCtrlAxis_LX },
	{ "LY", ni::eGameCtrlAxis_LY },
	{ "LZ", ni::eGameCtrlAxis_LZ },
	{ "RX", ni::eGameCtrlAxis_RX },
	{ "RY", ni::eGameCtrlAxis_RY },
	{ "RZ", ni::eGameCtrlAxis_RZ },
	{ "Last", ni::eGameCtrlAxis_Last },
};
static const ni::sEnumDef Enum_eGameCtrlAxis = {
	"eGameCtrlAxis",
  niCountOf(Enum_eGameCtrlAxis_Values), Enum_eGameCtrlAxis_Values
};

	return &Enum_eGameCtrlAxis;
}

// --- eGameCtrlButton ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eGameCtrlButton() {

static const ni::sEnumValueDef Enum_eGameCtrlButton_Values[] = {
	{ "A", ni::eGameCtrlButton_A },
	{ "B", ni::eGameCtrlButton_B },
	{ "X", ni::eGameCtrlButton_X },
	{ "Y", ni::eGameCtrlButton_Y },
	{ "LeftBlock", ni::eGameCtrlButton_LeftBlock },
	{ "RightBlock", ni::eGameCtrlButton_RightBlock },
	{ "Back", ni::eGameCtrlButton_Back },
	{ "Start", ni::eGameCtrlButton_Start },
	{ "LeftThumb", ni::eGameCtrlButton_LeftThumb },
	{ "RightThumb", ni::eGameCtrlButton_RightThumb },
	{ "LeftTrigger", ni::eGameCtrlButton_LeftTrigger },
	{ "RightTrigger", ni::eGameCtrlButton_RightTrigger },
	{ "DPadUp", ni::eGameCtrlButton_DPadUp },
	{ "DPadDown", ni::eGameCtrlButton_DPadDown },
	{ "DPadLeft", ni::eGameCtrlButton_DPadLeft },
	{ "DPadRight", ni::eGameCtrlButton_DPadRight },
};
static const ni::sEnumDef Enum_eGameCtrlButton = {
	"eGameCtrlButton",
  niCountOf(Enum_eGameCtrlButton_Values), Enum_eGameCtrlButton_Values
};

	return &Enum_eGameCtrlButton;
}

// --- eJsonType ---
#if niMinFeatures(20)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eJsonType() {

static const ni::sEnumValueDef Enum_eJsonType_Values[] = {
#if niMinFeatures(20)
	{ "Syntax", ni::eJsonType_Syntax },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "Name", ni::eJsonType_Name },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "String", ni::eJsonType_String },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "Number", ni::eJsonType_Number },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "True", ni::eJsonType_True },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "False", ni::eJsonType_False },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "Null", ni::eJsonType_Null },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "ObjectBegin", ni::eJsonType_ObjectBegin },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "ObjectEnd", ni::eJsonType_ObjectEnd },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "ArrayBegin", ni::eJsonType_ArrayBegin },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "ArrayEnd", ni::eJsonType_ArrayEnd },
#endif // niMinFeatures(20)
};
static const ni::sEnumDef Enum_eJsonType = {
	"eJsonType",
  niCountOf(Enum_eJsonType_Values), Enum_eJsonType_Values
};

	return &Enum_eJsonType;
}
#endif // niMinFeatures(20)

// --- eEnumToStringFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eEnumToStringFlags() {

static const ni::sEnumValueDef Enum_eEnumToStringFlags_Values[] = {
	{ "Full", ni::eEnumToStringFlags_Full },
	{ "Flags", ni::eEnumToStringFlags_Flags },
	{ "GlobalSearch", ni::eEnumToStringFlags_GlobalSearch },
};
static const ni::sEnumDef Enum_eEnumToStringFlags = {
	"eEnumToStringFlags",
  niCountOf(Enum_eEnumToStringFlags_Values), Enum_eEnumToStringFlags_Values
};

	return &Enum_eEnumToStringFlags;
}

// --- eSystemMessage ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eSystemMessage() {

static const ni::sEnumValueDef Enum_eSystemMessage_Values[] = {
	{ "Exit", ni::eSystemMessage_Exit },
	{ "SetupParentWindow", ni::eSystemMessage_SetupParentWindow },
	{ "SetupClientWindow", ni::eSystemMessage_SetupClientWindow },
	{ "Log", ni::eSystemMessage_Log },
	{ "OpenFile", ni::eSystemMessage_OpenFile },
};
static const ni::sEnumDef Enum_eSystemMessage = {
	"eSystemMessage",
  niCountOf(Enum_eSystemMessage_Values), Enum_eSystemMessage_Values
};

	return &Enum_eSystemMessage;
}

// --- eClipboardType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eClipboardType() {

static const ni::sEnumValueDef Enum_eClipboardType_Values[] = {
	{ "System", ni::eClipboardType_System },
	{ "Memory1", ni::eClipboardType_Memory1 },
	{ "Memory2", ni::eClipboardType_Memory2 },
	{ "Memory3", ni::eClipboardType_Memory3 },
	{ "Memory4", ni::eClipboardType_Memory4 },
	{ "Memory5", ni::eClipboardType_Memory5 },
	{ "Memory6", ni::eClipboardType_Memory6 },
	{ "Memory7", ni::eClipboardType_Memory7 },
	{ "Memory8", ni::eClipboardType_Memory8 },
	{ "Memory9", ni::eClipboardType_Memory9 },
	{ "Memory10", ni::eClipboardType_Memory10 },
	{ "Last", ni::eClipboardType_Last },
};
static const ni::sEnumDef Enum_eClipboardType = {
	"eClipboardType",
  niCountOf(Enum_eClipboardType_Values), Enum_eClipboardType_Values
};

	return &Enum_eClipboardType;
}

// --- eClassify ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eClassify() {

static const ni::sEnumValueDef Enum_eClassify_Values[] = {
	{ "Front", ni::eClassify_Front },
	{ "Back", ni::eClassify_Back },
	{ "Coplanar", ni::eClassify_Coplanar },
	{ "Spanned", ni::eClassify_Spanned },
};
static const ni::sEnumDef Enum_eClassify = {
	"eClassify",
  niCountOf(Enum_eClassify_Values), Enum_eClassify_Values
};

	return &Enum_eClassify;
}

// --- eOSProcessSpawnFlags ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSProcessSpawnFlags() {

static const ni::sEnumValueDef Enum_eOSProcessSpawnFlags_Values[] = {
#if niMinFeatures(15)
	{ "None", ni::eOSProcessSpawnFlags_None },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "StdFiles", ni::eOSProcessSpawnFlags_StdFiles },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DifferentStdOutAndStdErr", ni::eOSProcessSpawnFlags_DifferentStdOutAndStdErr },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "SandBox", ni::eOSProcessSpawnFlags_SandBox },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Detached", ni::eOSProcessSpawnFlags_Detached },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_eOSProcessSpawnFlags = {
	"eOSProcessSpawnFlags",
  niCountOf(Enum_eOSProcessSpawnFlags_Values), Enum_eOSProcessSpawnFlags_Values
};

	return &Enum_eOSProcessSpawnFlags;
}
#endif // niMinFeatures(15)

// --- eOSProcessFile ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSProcessFile() {

static const ni::sEnumValueDef Enum_eOSProcessFile_Values[] = {
#if niMinFeatures(15)
	{ "StdIn", ni::eOSProcessFile_StdIn },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "StdOut", ni::eOSProcessFile_StdOut },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "StdErr", ni::eOSProcessFile_StdErr },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Last", ni::eOSProcessFile_Last },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_eOSProcessFile = {
	"eOSProcessFile",
  niCountOf(Enum_eOSProcessFile_Values), Enum_eOSProcessFile_Values
};

	return &Enum_eOSProcessFile;
}
#endif // niMinFeatures(15)

// --- eKey ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eKey() {

static const ni::sEnumValueDef Enum_eKey_Values[] = {
	{ "Unknown", ni::eKey_Unknown },
	{ "Escape", ni::eKey_Escape },
	{ "n1", ni::eKey_n1 },
	{ "n2", ni::eKey_n2 },
	{ "n3", ni::eKey_n3 },
	{ "n4", ni::eKey_n4 },
	{ "n5", ni::eKey_n5 },
	{ "n6", ni::eKey_n6 },
	{ "n7", ni::eKey_n7 },
	{ "n8", ni::eKey_n8 },
	{ "n9", ni::eKey_n9 },
	{ "n0", ni::eKey_n0 },
	{ "Minus", ni::eKey_Minus },
	{ "Equals", ni::eKey_Equals },
	{ "BackSpace", ni::eKey_BackSpace },
	{ "Tab", ni::eKey_Tab },
	{ "Q", ni::eKey_Q },
	{ "W", ni::eKey_W },
	{ "E", ni::eKey_E },
	{ "R", ni::eKey_R },
	{ "T", ni::eKey_T },
	{ "Y", ni::eKey_Y },
	{ "U", ni::eKey_U },
	{ "I", ni::eKey_I },
	{ "O", ni::eKey_O },
	{ "P", ni::eKey_P },
	{ "LBracket", ni::eKey_LBracket },
	{ "RBracket", ni::eKey_RBracket },
	{ "Enter", ni::eKey_Enter },
	{ "LControl", ni::eKey_LControl },
	{ "A", ni::eKey_A },
	{ "S", ni::eKey_S },
	{ "D", ni::eKey_D },
	{ "F", ni::eKey_F },
	{ "G", ni::eKey_G },
	{ "H", ni::eKey_H },
	{ "J", ni::eKey_J },
	{ "K", ni::eKey_K },
	{ "L", ni::eKey_L },
	{ "Semicolon", ni::eKey_Semicolon },
	{ "Apostrophe", ni::eKey_Apostrophe },
	{ "Grave", ni::eKey_Grave },
	{ "Tilde", ni::eKey_Tilde },
	{ "LShift", ni::eKey_LShift },
	{ "BackSlash", ni::eKey_BackSlash },
	{ "Z", ni::eKey_Z },
	{ "X", ni::eKey_X },
	{ "C", ni::eKey_C },
	{ "V", ni::eKey_V },
	{ "B", ni::eKey_B },
	{ "N", ni::eKey_N },
	{ "M", ni::eKey_M },
	{ "Comma", ni::eKey_Comma },
	{ "Period", ni::eKey_Period },
	{ "Slash", ni::eKey_Slash },
	{ "RShift", ni::eKey_RShift },
	{ "NumPadStar", ni::eKey_NumPadStar },
	{ "LAlt", ni::eKey_LAlt },
	{ "Space", ni::eKey_Space },
	{ "CapsLock", ni::eKey_CapsLock },
	{ "F1", ni::eKey_F1 },
	{ "F2", ni::eKey_F2 },
	{ "F3", ni::eKey_F3 },
	{ "F4", ni::eKey_F4 },
	{ "F5", ni::eKey_F5 },
	{ "F6", ni::eKey_F6 },
	{ "F7", ni::eKey_F7 },
	{ "F8", ni::eKey_F8 },
	{ "F9", ni::eKey_F9 },
	{ "F10", ni::eKey_F10 },
	{ "NumLock", ni::eKey_NumLock },
	{ "Scroll", ni::eKey_Scroll },
	{ "NumPad7", ni::eKey_NumPad7 },
	{ "NumPad8", ni::eKey_NumPad8 },
	{ "NumPad9", ni::eKey_NumPad9 },
	{ "NumPadMinus", ni::eKey_NumPadMinus },
	{ "NumPad4", ni::eKey_NumPad4 },
	{ "NumPad5", ni::eKey_NumPad5 },
	{ "NumPad6", ni::eKey_NumPad6 },
	{ "NumPadPlus", ni::eKey_NumPadPlus },
	{ "NumPad1", ni::eKey_NumPad1 },
	{ "NumPad2", ni::eKey_NumPad2 },
	{ "NumPad3", ni::eKey_NumPad3 },
	{ "NumPad0", ni::eKey_NumPad0 },
	{ "NumPadPeriod", ni::eKey_NumPadPeriod },
	{ "OEM_102", ni::eKey_OEM_102 },
	{ "F11", ni::eKey_F11 },
	{ "F12", ni::eKey_F12 },
	{ "F13", ni::eKey_F13 },
	{ "F14", ni::eKey_F14 },
	{ "F15", ni::eKey_F15 },
	{ "Kana", ni::eKey_Kana },
	{ "ABNT_C1", ni::eKey_ABNT_C1 },
	{ "Convert", ni::eKey_Convert },
	{ "NoConvert", ni::eKey_NoConvert },
	{ "Yen", ni::eKey_Yen },
	{ "ABNT_C2", ni::eKey_ABNT_C2 },
	{ "NumPadEquals", ni::eKey_NumPadEquals },
	{ "Circumflex", ni::eKey_Circumflex },
	{ "PrevTrack", ni::eKey_PrevTrack },
	{ "AT", ni::eKey_AT },
	{ "Colon", ni::eKey_Colon },
	{ "Underline", ni::eKey_Underline },
	{ "Kanji", ni::eKey_Kanji },
	{ "Stop", ni::eKey_Stop },
	{ "AX", ni::eKey_AX },
	{ "Unlabeled", ni::eKey_Unlabeled },
	{ "NextTrack", ni::eKey_NextTrack },
	{ "NumPadEnter", ni::eKey_NumPadEnter },
	{ "RControl", ni::eKey_RControl },
	{ "Mute", ni::eKey_Mute },
	{ "Calculator", ni::eKey_Calculator },
	{ "PlayPause", ni::eKey_PlayPause },
	{ "MediaStop", ni::eKey_MediaStop },
	{ "VolumeDown", ni::eKey_VolumeDown },
	{ "VolumeUp", ni::eKey_VolumeUp },
	{ "WebHome", ni::eKey_WebHome },
	{ "NumPadComma", ni::eKey_NumPadComma },
	{ "NumPadSlash", ni::eKey_NumPadSlash },
	{ "SysRQ", ni::eKey_SysRQ },
	{ "PrintScreen", ni::eKey_PrintScreen },
	{ "RAlt", ni::eKey_RAlt },
	{ "AltGr", ni::eKey_AltGr },
	{ "Pause", ni::eKey_Pause },
	{ "Home", ni::eKey_Home },
	{ "Up", ni::eKey_Up },
	{ "PgUp", ni::eKey_PgUp },
	{ "Left", ni::eKey_Left },
	{ "Right", ni::eKey_Right },
	{ "End", ni::eKey_End },
	{ "Down", ni::eKey_Down },
	{ "PgDn", ni::eKey_PgDn },
	{ "Insert", ni::eKey_Insert },
	{ "Delete", ni::eKey_Delete },
	{ "LWin", ni::eKey_LWin },
	{ "RWin", ni::eKey_RWin },
	{ "Apps", ni::eKey_Apps },
	{ "Power", ni::eKey_Power },
	{ "Sleep", ni::eKey_Sleep },
	{ "Wake", ni::eKey_Wake },
	{ "WebSearch", ni::eKey_WebSearch },
	{ "WebFavorites", ni::eKey_WebFavorites },
	{ "WebRefresh", ni::eKey_WebRefresh },
	{ "WebStop", ni::eKey_WebStop },
	{ "WebForward", ni::eKey_WebForward },
	{ "WebBack", ni::eKey_WebBack },
	{ "MyComputer", ni::eKey_MyComputer },
	{ "Mail", ni::eKey_Mail },
	{ "MediaSelect", ni::eKey_MediaSelect },
	{ "Last", ni::eKey_Last },
};
static const ni::sEnumDef Enum_eKey = {
	"eKey",
  niCountOf(Enum_eKey_Values), Enum_eKey_Values
};

	return &Enum_eKey;
}

// --- eKeyMod ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eKeyMod() {

static const ni::sEnumValueDef Enum_eKeyMod_Values[] = {
	{ "Control", ni::eKeyMod_Control },
	{ "Shift", ni::eKeyMod_Shift },
	{ "Alt", ni::eKeyMod_Alt },
	{ "AltGr", ni::eKeyMod_AltGr },
	{ "NumLock", ni::eKeyMod_NumLock },
	{ "CapsLock", ni::eKeyMod_CapsLock },
	{ "ScrollLock", ni::eKeyMod_ScrollLock },
};
static const ni::sEnumDef Enum_eKeyMod = {
	"eKeyMod",
  niCountOf(Enum_eKeyMod_Values), Enum_eKeyMod_Values
};

	return &Enum_eKeyMod;
}

// --- ePointerButton ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_ePointerButton() {

static const ni::sEnumValueDef Enum_ePointerButton_Values[] = {
	{ "Bt0", ni::ePointerButton_Bt0 },
	{ "Bt1", ni::ePointerButton_Bt1 },
	{ "Bt2", ni::ePointerButton_Bt2 },
	{ "Bt3", ni::ePointerButton_Bt3 },
	{ "Bt4", ni::ePointerButton_Bt4 },
	{ "Bt5", ni::ePointerButton_Bt5 },
	{ "Bt6", ni::ePointerButton_Bt6 },
	{ "Bt7", ni::ePointerButton_Bt7 },
	{ "Last", ni::ePointerButton_Last },
	{ "Left", ni::ePointerButton_Left },
	{ "Right", ni::ePointerButton_Right },
	{ "Middle", ni::ePointerButton_Middle },
};
static const ni::sEnumDef Enum_ePointerButton = {
	"ePointerButton",
  niCountOf(Enum_ePointerButton_Values), Enum_ePointerButton_Values
};

	return &Enum_ePointerButton;
}

// --- ePointerAxis ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_ePointerAxis() {

static const ni::sEnumValueDef Enum_ePointerAxis_Values[] = {
	{ "X", ni::ePointerAxis_X },
	{ "Y", ni::ePointerAxis_Y },
	{ "Z", ni::ePointerAxis_Z },
	{ "Absolute", ni::ePointerAxis_Absolute },
	{ "Last", ni::ePointerAxis_Last },
};
static const ni::sEnumDef Enum_ePointerAxis = {
	"ePointerAxis",
  niCountOf(Enum_ePointerAxis_Values), Enum_ePointerAxis_Values
};

	return &Enum_ePointerAxis;
}

// --- eGestureState ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eGestureState() {

static const ni::sEnumValueDef Enum_eGestureState_Values[] = {
	{ "Unknown", ni::eGestureState_Unknown },
	{ "Began", ni::eGestureState_Began },
	{ "Updated", ni::eGestureState_Updated },
	{ "Ended", ni::eGestureState_Ended },
	{ "Cancelled", ni::eGestureState_Cancelled },
};
static const ni::sEnumDef Enum_eGestureState = {
	"eGestureState",
  niCountOf(Enum_eGestureState_Values), Enum_eGestureState_Values
};

	return &Enum_eGestureState;
}

// --- eOSWindowMessage ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowMessage() {

static const ni::sEnumValueDef Enum_eOSWindowMessage_Values[] = {
	{ "Close", ni::eOSWindowMessage_Close },
	{ "SwitchIn", ni::eOSWindowMessage_SwitchIn },
	{ "SwitchOut", ni::eOSWindowMessage_SwitchOut },
	{ "Drop", ni::eOSWindowMessage_Drop },
	{ "Paint", ni::eOSWindowMessage_Paint },
	{ "Size", ni::eOSWindowMessage_Size },
	{ "Move", ni::eOSWindowMessage_Move },
	{ "KeyDown", ni::eOSWindowMessage_KeyDown },
	{ "KeyUp", ni::eOSWindowMessage_KeyUp },
	{ "KeyChar", ni::eOSWindowMessage_KeyChar },
	{ "MouseMove", ni::eOSWindowMessage_MouseMove },
	{ "RelativeMouseMove", ni::eOSWindowMessage_RelativeMouseMove },
	{ "MouseButtonDown", ni::eOSWindowMessage_MouseButtonDown },
	{ "MouseButtonUp", ni::eOSWindowMessage_MouseButtonUp },
	{ "MouseButtonDoubleClick", ni::eOSWindowMessage_MouseButtonDoubleClick },
	{ "MouseWheel", ni::eOSWindowMessage_MouseWheel },
	{ "LostFocus", ni::eOSWindowMessage_LostFocus },
	{ "SetFocus", ni::eOSWindowMessage_SetFocus },
	{ "FingerDown", ni::eOSWindowMessage_FingerDown },
	{ "FingerUp", ni::eOSWindowMessage_FingerUp },
	{ "FingerMove", ni::eOSWindowMessage_FingerMove },
	{ "FingerRelativeMove", ni::eOSWindowMessage_FingerRelativeMove },
	{ "Pinch", ni::eOSWindowMessage_Pinch },
};
static const ni::sEnumDef Enum_eOSWindowMessage = {
	"eOSWindowMessage",
  niCountOf(Enum_eOSWindowMessage_Values), Enum_eOSWindowMessage_Values
};

	return &Enum_eOSWindowMessage;
}

// --- eOSWindowStyleFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowStyleFlags() {

static const ni::sEnumValueDef Enum_eOSWindowStyleFlags_Values[] = {
	{ "Regular", ni::eOSWindowStyleFlags_Regular },
	{ "Overlay", ni::eOSWindowStyleFlags_Overlay },
	{ "Toolbox", ni::eOSWindowStyleFlags_Toolbox },
	{ "FixedSize", ni::eOSWindowStyleFlags_FixedSize },
	{ "ClientArea", ni::eOSWindowStyleFlags_ClientArea },
	{ "NoTitle", ni::eOSWindowStyleFlags_NoTitle },
	{ "FullBright", ni::eOSWindowStyleFlags_FullBright },
	{ "FullScreen", ni::eOSWindowStyleFlags_FullScreen },
	{ "FullScreenNoTaskBar", ni::eOSWindowStyleFlags_FullScreenNoTaskBar },
};
static const ni::sEnumDef Enum_eOSWindowStyleFlags = {
	"eOSWindowStyleFlags",
  niCountOf(Enum_eOSWindowStyleFlags_Values), Enum_eOSWindowStyleFlags_Values
};

	return &Enum_eOSWindowStyleFlags;
}

// --- eOSWindowCreateFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowCreateFlags() {

static const ni::sEnumValueDef Enum_eOSWindowCreateFlags_Values[] = {
	{ "NoThread", ni::eOSWindowCreateFlags_NoThread },
	{ "OwnHandle", ni::eOSWindowCreateFlags_OwnHandle },
	{ "SetWindowProc", ni::eOSWindowCreateFlags_SetWindowProc },
};
static const ni::sEnumDef Enum_eOSWindowCreateFlags = {
	"eOSWindowCreateFlags",
  niCountOf(Enum_eOSWindowCreateFlags_Values), Enum_eOSWindowCreateFlags_Values
};

	return &Enum_eOSWindowCreateFlags;
}

// --- eOSWindowShowFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowShowFlags() {

static const ni::sEnumValueDef Enum_eOSWindowShowFlags_Values[] = {
	{ "Hide", ni::eOSWindowShowFlags_Hide },
	{ "Show", ni::eOSWindowShowFlags_Show },
	{ "ShowNoActivate", ni::eOSWindowShowFlags_ShowNoActivate },
	{ "Maximize", ni::eOSWindowShowFlags_Maximize },
	{ "Minimize", ni::eOSWindowShowFlags_Minimize },
	{ "Restore", ni::eOSWindowShowFlags_Restore },
};
static const ni::sEnumDef Enum_eOSWindowShowFlags = {
	"eOSWindowShowFlags",
  niCountOf(Enum_eOSWindowShowFlags_Values), Enum_eOSWindowShowFlags_Values
};

	return &Enum_eOSWindowShowFlags;
}

// --- eOSWindowZOrder ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowZOrder() {

static const ni::sEnumValueDef Enum_eOSWindowZOrder_Values[] = {
	{ "Bottom", ni::eOSWindowZOrder_Bottom },
	{ "Normal", ni::eOSWindowZOrder_Normal },
	{ "TopMost", ni::eOSWindowZOrder_TopMost },
};
static const ni::sEnumDef Enum_eOSWindowZOrder = {
	"eOSWindowZOrder",
  niCountOf(Enum_eOSWindowZOrder_Values), Enum_eOSWindowZOrder_Values
};

	return &Enum_eOSWindowZOrder;
}

// --- eOSCursor ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSCursor() {

static const ni::sEnumValueDef Enum_eOSCursor_Values[] = {
	{ "None", ni::eOSCursor_None },
	{ "Arrow", ni::eOSCursor_Arrow },
	{ "Wait", ni::eOSCursor_Wait },
	{ "ResizeVt", ni::eOSCursor_ResizeVt },
	{ "ResizeHz", ni::eOSCursor_ResizeHz },
	{ "ResizeDiag", ni::eOSCursor_ResizeDiag },
	{ "Hand", ni::eOSCursor_Hand },
	{ "Text", ni::eOSCursor_Text },
	{ "Help", ni::eOSCursor_Help },
	{ "Custom", ni::eOSCursor_Custom },
};
static const ni::sEnumDef Enum_eOSCursor = {
	"eOSCursor",
  niCountOf(Enum_eOSCursor_Values), Enum_eOSCursor_Values
};

	return &Enum_eOSCursor;
}

// --- eOSMonitorFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSMonitorFlags() {

static const ni::sEnumValueDef Enum_eOSMonitorFlags_Values[] = {
	{ "Primary", ni::eOSMonitorFlags_Primary },
};
static const ni::sEnumDef Enum_eOSMonitorFlags = {
	"eOSMonitorFlags",
  niCountOf(Enum_eOSMonitorFlags_Values), Enum_eOSMonitorFlags_Values
};

	return &Enum_eOSMonitorFlags;
}

// --- eOSMessageBoxFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSMessageBoxFlags() {

static const ni::sEnumValueDef Enum_eOSMessageBoxFlags_Values[] = {
	{ "Ok", ni::eOSMessageBoxFlags_Ok },
	{ "OkCancel", ni::eOSMessageBoxFlags_OkCancel },
	{ "YesNo", ni::eOSMessageBoxFlags_YesNo },
	{ "IconInfo", ni::eOSMessageBoxFlags_IconInfo },
	{ "IconQuestion", ni::eOSMessageBoxFlags_IconQuestion },
	{ "IconWarning", ni::eOSMessageBoxFlags_IconWarning },
	{ "IconError", ni::eOSMessageBoxFlags_IconError },
	{ "IconHand", ni::eOSMessageBoxFlags_IconHand },
	{ "IconStop", ni::eOSMessageBoxFlags_IconStop },
	{ "NotTopMost", ni::eOSMessageBoxFlags_NotTopMost },
	{ "FatalError", ni::eOSMessageBoxFlags_FatalError },
};
static const ni::sEnumDef Enum_eOSMessageBoxFlags = {
	"eOSMessageBoxFlags",
  niCountOf(Enum_eOSMessageBoxFlags_Values), Enum_eOSMessageBoxFlags_Values
};

	return &Enum_eOSMessageBoxFlags;
}

// --- eOSMessageBoxReturn ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSMessageBoxReturn() {

static const ni::sEnumValueDef Enum_eOSMessageBoxReturn_Values[] = {
	{ "Error", ni::eOSMessageBoxReturn_Error },
	{ "Yes", ni::eOSMessageBoxReturn_Yes },
	{ "OK", ni::eOSMessageBoxReturn_OK },
	{ "No", ni::eOSMessageBoxReturn_No },
	{ "Cancel", ni::eOSMessageBoxReturn_Cancel },
};
static const ni::sEnumDef Enum_eOSMessageBoxReturn = {
	"eOSMessageBoxReturn",
  niCountOf(Enum_eOSMessageBoxReturn_Values), Enum_eOSMessageBoxReturn_Values
};

	return &Enum_eOSMessageBoxReturn;
}

// --- eOSWindowSwitchReason ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eOSWindowSwitchReason() {

static const ni::sEnumValueDef Enum_eOSWindowSwitchReason_Values[] = {
	{ "Activated", ni::eOSWindowSwitchReason_Activated },
	{ "Deactivated", ni::eOSWindowSwitchReason_Deactivated },
	{ "LostFocus", ni::eOSWindowSwitchReason_LostFocus },
	{ "SetFocus", ni::eOSWindowSwitchReason_SetFocus },
	{ "EnterMenu", ni::eOSWindowSwitchReason_EnterMenu },
	{ "LeaveMenu", ni::eOSWindowSwitchReason_LeaveMenu },
	{ "Minimized", ni::eOSWindowSwitchReason_Minimized },
	{ "User", ni::eOSWindowSwitchReason_User },
};
static const ni::sEnumDef Enum_eOSWindowSwitchReason = {
	"eOSWindowSwitchReason",
  niCountOf(Enum_eOSWindowSwitchReason_Values), Enum_eOSWindowSwitchReason_Values
};

	return &Enum_eOSWindowSwitchReason;
}

// --- eProfilerReportMode ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eProfilerReportMode() {

static const ni::sEnumValueDef Enum_eProfilerReportMode_Values[] = {
	{ "SelfTime", ni::eProfilerReportMode_SelfTime },
	{ "HierTime", ni::eProfilerReportMode_HierTime },
	{ "CallGraph", ni::eProfilerReportMode_CallGraph },
	{ "Last", ni::eProfilerReportMode_Last },
};
static const ni::sEnumDef Enum_eProfilerReportMode = {
	"eProfilerReportMode",
  niCountOf(Enum_eProfilerReportMode_Values), Enum_eProfilerReportMode_Values
};

	return &Enum_eProfilerReportMode;
}

// --- ePCREOptionsFlags ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_ePCREOptionsFlags() {

static const ni::sEnumValueDef Enum_ePCREOptionsFlags_Values[] = {
#if niMinFeatures(15)
	{ "Caseless", ni::ePCREOptionsFlags_Caseless },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Multiline", ni::ePCREOptionsFlags_Multiline },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DotAll", ni::ePCREOptionsFlags_DotAll },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Extended", ni::ePCREOptionsFlags_Extended },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Anchored", ni::ePCREOptionsFlags_Anchored },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DollarEndOnly", ni::ePCREOptionsFlags_DollarEndOnly },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Extra", ni::ePCREOptionsFlags_Extra },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NotBOL", ni::ePCREOptionsFlags_NotBOL },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NotEOL", ni::ePCREOptionsFlags_NotEOL },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ungreedy", ni::ePCREOptionsFlags_Ungreedy },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NotEmpty", ni::ePCREOptionsFlags_NotEmpty },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "UTF8", ni::ePCREOptionsFlags_UTF8 },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NoAutoCapture", ni::ePCREOptionsFlags_NoAutoCapture },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NoUTF8Check", ni::ePCREOptionsFlags_NoUTF8Check },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "AutoCallout", ni::ePCREOptionsFlags_AutoCallout },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFAShortest", ni::ePCREOptionsFlags_DFAShortest },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "FirstLine", ni::ePCREOptionsFlags_FirstLine },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DupNames", ni::ePCREOptionsFlags_DupNames },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NewLineCR", ni::ePCREOptionsFlags_NewLineCR },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NewLineLF", ni::ePCREOptionsFlags_NewLineLF },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NewLineCRLF", ni::ePCREOptionsFlags_NewLineCRLF },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NewLineAny", ni::ePCREOptionsFlags_NewLineAny },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NewLineAnyCRLF", ni::ePCREOptionsFlags_NewLineAnyCRLF },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BsrAnyCRLF", ni::ePCREOptionsFlags_BsrAnyCRLF },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BsrUnicode", ni::ePCREOptionsFlags_BsrUnicode },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Global", ni::ePCREOptionsFlags_Global },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Optimize", ni::ePCREOptionsFlags_Optimize },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_ePCREOptionsFlags = {
	"ePCREOptionsFlags",
  niCountOf(Enum_ePCREOptionsFlags_Values), Enum_ePCREOptionsFlags_Values
};

	return &Enum_ePCREOptionsFlags;
}
#endif // niMinFeatures(15)

// --- ePCREError ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_ePCREError() {

static const ni::sEnumValueDef Enum_ePCREError_Values[] = {
#if niMinFeatures(15)
	{ "OK", ni::ePCREError_OK },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NoMatch", ni::ePCREError_NoMatch },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Null", ni::ePCREError_Null },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadOption", ni::ePCREError_BadOption },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadMagic", ni::ePCREError_BadMagic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "UnknownOpcode", ni::ePCREError_UnknownOpcode },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NoMemory", ni::ePCREError_NoMemory },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NoSubstring", ni::ePCREError_NoSubstring },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "MatchLimit", ni::ePCREError_MatchLimit },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Callout", ni::ePCREError_Callout },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadUTF8", ni::ePCREError_BadUTF8 },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadUTF8Offset", ni::ePCREError_BadUTF8Offset },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Partial", ni::ePCREError_Partial },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadPartial", ni::ePCREError_BadPartial },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Internal", ni::ePCREError_Internal },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadCount", ni::ePCREError_BadCount },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFA_UITEM", ni::ePCREError_DFA_UITEM },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFA_UCOND", ni::ePCREError_DFA_UCOND },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFA_UMLIMIT", ni::ePCREError_DFA_UMLIMIT },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFA_WSSIZE", ni::ePCREError_DFA_WSSIZE },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "DFA_RECURSE", ni::ePCREError_DFA_RECURSE },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "RecursionLimit", ni::ePCREError_RecursionLimit },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "NullWSLimit", ni::ePCREError_NullWSLimit },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadNewLine", ni::ePCREError_BadNewLine },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "LoopLimit", ni::ePCREError_LoopLimit },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "BadRegexString", ni::ePCREError_BadRegexString },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_ePCREError = {
	"ePCREError",
  niCountOf(Enum_ePCREError_Values), Enum_ePCREError_Values
};

	return &Enum_ePCREError;
}
#endif // niMinFeatures(15)

// --- eSerializeFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eSerializeFlags() {

static const ni::sEnumValueDef Enum_eSerializeFlags_Values[] = {
	{ "Write", ni::eSerializeFlags_Write },
	{ "Read", ni::eSerializeFlags_Read },
	{ "Category1", ni::eSerializeFlags_Category1 },
	{ "Category2", ni::eSerializeFlags_Category2 },
	{ "Category3", ni::eSerializeFlags_Category3 },
	{ "Category4", ni::eSerializeFlags_Category4 },
	{ "Category5", ni::eSerializeFlags_Category5 },
	{ "Category6", ni::eSerializeFlags_Category6 },
	{ "Category7", ni::eSerializeFlags_Category7 },
	{ "Category8", ni::eSerializeFlags_Category8 },
	{ "CategoryBase", ni::eSerializeFlags_CategoryBase },
	{ "CategoryExtended", ni::eSerializeFlags_CategoryExtended },
	{ "CategoryAll", ni::eSerializeFlags_CategoryAll },
	{ "TypeInfoMetadata", ni::eSerializeFlags_TypeInfoMetadata },
	{ "Raw", ni::eSerializeFlags_Raw },
};
static const ni::sEnumDef Enum_eSerializeFlags = {
	"eSerializeFlags",
  niCountOf(Enum_eSerializeFlags_Values), Enum_eSerializeFlags_Values
};

	return &Enum_eSerializeFlags;
}

// --- eSerializeMode ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eSerializeMode() {

static const ni::sEnumValueDef Enum_eSerializeMode_Values[] = {
	{ "Write", ni::eSerializeMode_Write },
	{ "WriteRaw", ni::eSerializeMode_WriteRaw },
	{ "Read", ni::eSerializeMode_Read },
	{ "ReadRaw", ni::eSerializeMode_ReadRaw },
};
static const ni::sEnumDef Enum_eSerializeMode = {
	"eSerializeMode",
  niCountOf(Enum_eSerializeMode_Values), Enum_eSerializeMode_Values
};

	return &Enum_eSerializeMode;
}

// --- eStringTokenizerCharType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eStringTokenizerCharType() {

static const ni::sEnumValueDef Enum_eStringTokenizerCharType_Values[] = {
	{ "Normal", ni::eStringTokenizerCharType_Normal },
	{ "Skip", ni::eStringTokenizerCharType_Skip },
	{ "Splitter", ni::eStringTokenizerCharType_Splitter },
	{ "SplitterStart", ni::eStringTokenizerCharType_SplitterStart },
	{ "SplitterEnd", ni::eStringTokenizerCharType_SplitterEnd },
	{ "SplitterAndToken", ni::eStringTokenizerCharType_SplitterAndToken },
};
static const ni::sEnumDef Enum_eStringTokenizerCharType = {
	"eStringTokenizerCharType",
  niCountOf(Enum_eStringTokenizerCharType_Values), Enum_eStringTokenizerCharType_Values
};

	return &Enum_eStringTokenizerCharType;
}

// --- eTimeZone ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eTimeZone() {

static const ni::sEnumValueDef Enum_eTimeZone_Values[] = {
	{ "UTC", ni::eTimeZone_UTC },
	{ "WET", ni::eTimeZone_WET },
	{ "GMT", ni::eTimeZone_GMT },
	{ "A", ni::eTimeZone_A },
	{ "ADT", ni::eTimeZone_ADT },
	{ "AKDT", ni::eTimeZone_AKDT },
	{ "AKST", ni::eTimeZone_AKST },
	{ "AST", ni::eTimeZone_AST },
	{ "B", ni::eTimeZone_B },
	{ "BST", ni::eTimeZone_BST },
	{ "C", ni::eTimeZone_C },
	{ "CDT", ni::eTimeZone_CDT },
	{ "CEDT", ni::eTimeZone_CEDT },
	{ "CEST", ni::eTimeZone_CEST },
	{ "CET", ni::eTimeZone_CET },
	{ "CST", ni::eTimeZone_CST },
	{ "D", ni::eTimeZone_D },
	{ "E", ni::eTimeZone_E },
	{ "EDT", ni::eTimeZone_EDT },
	{ "EEDT", ni::eTimeZone_EEDT },
	{ "EEST", ni::eTimeZone_EEST },
	{ "EET", ni::eTimeZone_EET },
	{ "EST", ni::eTimeZone_EST },
	{ "F", ni::eTimeZone_F },
	{ "G", ni::eTimeZone_G },
	{ "H", ni::eTimeZone_H },
	{ "HAA", ni::eTimeZone_HAA },
	{ "HAC", ni::eTimeZone_HAC },
	{ "HADT", ni::eTimeZone_HADT },
	{ "HAE", ni::eTimeZone_HAE },
	{ "HAP", ni::eTimeZone_HAP },
	{ "HAR", ni::eTimeZone_HAR },
	{ "HAST", ni::eTimeZone_HAST },
	{ "HAT", ni::eTimeZone_HAT },
	{ "HAY", ni::eTimeZone_HAY },
	{ "HNA", ni::eTimeZone_HNA },
	{ "HNC", ni::eTimeZone_HNC },
	{ "HNE", ni::eTimeZone_HNE },
	{ "HNP", ni::eTimeZone_HNP },
	{ "HNR", ni::eTimeZone_HNR },
	{ "HNT", ni::eTimeZone_HNT },
	{ "HNY", ni::eTimeZone_HNY },
	{ "I", ni::eTimeZone_I },
	{ "IST", ni::eTimeZone_IST },
	{ "K", ni::eTimeZone_K },
	{ "L", ni::eTimeZone_L },
	{ "M", ni::eTimeZone_M },
	{ "MDT", ni::eTimeZone_MDT },
	{ "MESZ", ni::eTimeZone_MESZ },
	{ "MEZ", ni::eTimeZone_MEZ },
	{ "MST", ni::eTimeZone_MST },
	{ "N", ni::eTimeZone_N },
	{ "NDT", ni::eTimeZone_NDT },
	{ "NST", ni::eTimeZone_NST },
	{ "O", ni::eTimeZone_O },
	{ "P", ni::eTimeZone_P },
	{ "PDT", ni::eTimeZone_PDT },
	{ "PST", ni::eTimeZone_PST },
	{ "Q", ni::eTimeZone_Q },
	{ "R", ni::eTimeZone_R },
	{ "S", ni::eTimeZone_S },
	{ "T", ni::eTimeZone_T },
	{ "U", ni::eTimeZone_U },
	{ "V", ni::eTimeZone_V },
	{ "W", ni::eTimeZone_W },
	{ "WEDT", ni::eTimeZone_WEDT },
	{ "WEST", ni::eTimeZone_WEST },
	{ "X", ni::eTimeZone_X },
	{ "Y", ni::eTimeZone_Y },
	{ "Z", ni::eTimeZone_Z },
};
static const ni::sEnumDef Enum_eTimeZone = {
	"eTimeZone",
  niCountOf(Enum_eTimeZone_Values), Enum_eTimeZone_Values
};

	return &Enum_eTimeZone;
}

// --- eRawToStringEncoding ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eRawToStringEncoding() {

static const ni::sEnumValueDef Enum_eRawToStringEncoding_Values[] = {
	{ "Hex", ni::eRawToStringEncoding_Hex },
	{ "Base64", ni::eRawToStringEncoding_Base64 },
	{ "Base32", ni::eRawToStringEncoding_Base32 },
};
static const ni::sEnumDef Enum_eRawToStringEncoding = {
	"eRawToStringEncoding",
  niCountOf(Enum_eRawToStringEncoding_Values), Enum_eRawToStringEncoding_Values
};

	return &Enum_eRawToStringEncoding;
}

// --- eXmlParserNodeType ---
#if niMinFeatures(20)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eXmlParserNodeType() {

static const ni::sEnumValueDef Enum_eXmlParserNodeType_Values[] = {
#if niMinFeatures(20)
	{ "ElementBegin", ni::eXmlParserNodeType_ElementBegin },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "ElementEnd", ni::eXmlParserNodeType_ElementEnd },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "Text", ni::eXmlParserNodeType_Text },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "EmptyText", ni::eXmlParserNodeType_EmptyText },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "Comment", ni::eXmlParserNodeType_Comment },
#endif // niMinFeatures(20)
#if niMinFeatures(20)
	{ "CDATA", ni::eXmlParserNodeType_CDATA },
#endif // niMinFeatures(20)
};
static const ni::sEnumDef Enum_eXmlParserNodeType = {
	"eXmlParserNodeType",
  niCountOf(Enum_eXmlParserNodeType_Values), Enum_eXmlParserNodeType_Values
};

	return &Enum_eXmlParserNodeType;
}
#endif // niMinFeatures(20)

// --- eStrFindFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eStrFindFlags() {

static const ni::sEnumValueDef Enum_eStrFindFlags_Values[] = {
	{ "Forward", ni::eStrFindFlags_Forward },
	{ "Reversed", ni::eStrFindFlags_Reversed },
	{ "ICmp", ni::eStrFindFlags_ICmp },
	{ "ForwardI", ni::eStrFindFlags_ForwardI },
	{ "ReversedI", ni::eStrFindFlags_ReversedI },
};
static const ni::sEnumDef Enum_eStrFindFlags = {
	"eStrFindFlags",
  niCountOf(Enum_eStrFindFlags_Values), Enum_eStrFindFlags_Values
};

	return &Enum_eStrFindFlags;
}

// --- eUCPCategory ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eUCPCategory() {

static const ni::sEnumValueDef Enum_eUCPCategory_Values[] = {
#if niMinFeatures(15)
	{ "Other", ni::eUCPCategory_Other },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Letter", ni::eUCPCategory_Letter },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Mark", ni::eUCPCategory_Mark },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Number", ni::eUCPCategory_Number },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Punctuation", ni::eUCPCategory_Punctuation },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Symbol", ni::eUCPCategory_Symbol },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Separator", ni::eUCPCategory_Separator },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_eUCPCategory = {
	"eUCPCategory",
  niCountOf(Enum_eUCPCategory_Values), Enum_eUCPCategory_Values
};

	return &Enum_eUCPCategory;
}
#endif // niMinFeatures(15)

// --- eUCPCharType ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eUCPCharType() {

static const ni::sEnumValueDef Enum_eUCPCharType_Values[] = {
#if niMinFeatures(15)
	{ "Cc", ni::eUCPCharType_Cc },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cf", ni::eUCPCharType_Cf },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cn", ni::eUCPCharType_Cn },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Co", ni::eUCPCharType_Co },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cs", ni::eUCPCharType_Cs },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ll", ni::eUCPCharType_Ll },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Lm", ni::eUCPCharType_Lm },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Lo", ni::eUCPCharType_Lo },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Lt", ni::eUCPCharType_Lt },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Lu", ni::eUCPCharType_Lu },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Mc", ni::eUCPCharType_Mc },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Me", ni::eUCPCharType_Me },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Mn", ni::eUCPCharType_Mn },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Nd", ni::eUCPCharType_Nd },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Nl", ni::eUCPCharType_Nl },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "No", ni::eUCPCharType_No },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Pc", ni::eUCPCharType_Pc },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Pd", ni::eUCPCharType_Pd },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Pe", ni::eUCPCharType_Pe },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Pf", ni::eUCPCharType_Pf },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Pi", ni::eUCPCharType_Pi },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Po", ni::eUCPCharType_Po },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ps", ni::eUCPCharType_Ps },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Sc", ni::eUCPCharType_Sc },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Sk", ni::eUCPCharType_Sk },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Sm", ni::eUCPCharType_Sm },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "So", ni::eUCPCharType_So },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Zl", ni::eUCPCharType_Zl },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Zp", ni::eUCPCharType_Zp },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Zs", ni::eUCPCharType_Zs },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_eUCPCharType = {
	"eUCPCharType",
  niCountOf(Enum_eUCPCharType_Values), Enum_eUCPCharType_Values
};

	return &Enum_eUCPCharType;
}
#endif // niMinFeatures(15)

// --- eUCPScript ---
#if niMinFeatures(15)
niExportFunc(const ni::sEnumDef*) GetEnumDef_eUCPScript() {

static const ni::sEnumValueDef Enum_eUCPScript_Values[] = {
#if niMinFeatures(15)
	{ "Arabic", ni::eUCPScript_Arabic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Armenian", ni::eUCPScript_Armenian },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Bengali", ni::eUCPScript_Bengali },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Bopomofo", ni::eUCPScript_Bopomofo },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Braille", ni::eUCPScript_Braille },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Buginese", ni::eUCPScript_Buginese },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Buhid", ni::eUCPScript_Buhid },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Canadian_Aboriginal", ni::eUCPScript_Canadian_Aboriginal },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cherokee", ni::eUCPScript_Cherokee },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Common", ni::eUCPScript_Common },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Coptic", ni::eUCPScript_Coptic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cypriot", ni::eUCPScript_Cypriot },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cyrillic", ni::eUCPScript_Cyrillic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Deseret", ni::eUCPScript_Deseret },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Devanagari", ni::eUCPScript_Devanagari },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ethiopic", ni::eUCPScript_Ethiopic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Georgian", ni::eUCPScript_Georgian },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Glagolitic", ni::eUCPScript_Glagolitic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Gothic", ni::eUCPScript_Gothic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Greek", ni::eUCPScript_Greek },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Gujarati", ni::eUCPScript_Gujarati },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Gurmukhi", ni::eUCPScript_Gurmukhi },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Han", ni::eUCPScript_Han },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Hangul", ni::eUCPScript_Hangul },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Hanunoo", ni::eUCPScript_Hanunoo },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Hebrew", ni::eUCPScript_Hebrew },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Hiragana", ni::eUCPScript_Hiragana },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Inherited", ni::eUCPScript_Inherited },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Kannada", ni::eUCPScript_Kannada },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Katakana", ni::eUCPScript_Katakana },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Kharoshthi", ni::eUCPScript_Kharoshthi },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Khmer", ni::eUCPScript_Khmer },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Lao", ni::eUCPScript_Lao },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Latin", ni::eUCPScript_Latin },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Limbu", ni::eUCPScript_Limbu },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Linear_B", ni::eUCPScript_Linear_B },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Malayalam", ni::eUCPScript_Malayalam },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Mongolian", ni::eUCPScript_Mongolian },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Myanmar", ni::eUCPScript_Myanmar },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "New_Tai_Lue", ni::eUCPScript_New_Tai_Lue },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ogham", ni::eUCPScript_Ogham },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Old_Italic", ni::eUCPScript_Old_Italic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Old_Persian", ni::eUCPScript_Old_Persian },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Oriya", ni::eUCPScript_Oriya },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Osmanya", ni::eUCPScript_Osmanya },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Runic", ni::eUCPScript_Runic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Shavian", ni::eUCPScript_Shavian },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Sinhala", ni::eUCPScript_Sinhala },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Syloti_Nagri", ni::eUCPScript_Syloti_Nagri },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Syriac", ni::eUCPScript_Syriac },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tagalog", ni::eUCPScript_Tagalog },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tagbanwa", ni::eUCPScript_Tagbanwa },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tai_Le", ni::eUCPScript_Tai_Le },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tamil", ni::eUCPScript_Tamil },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Telugu", ni::eUCPScript_Telugu },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Thaana", ni::eUCPScript_Thaana },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Thai", ni::eUCPScript_Thai },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tibetan", ni::eUCPScript_Tibetan },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Tifinagh", ni::eUCPScript_Tifinagh },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Ugaritic", ni::eUCPScript_Ugaritic },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Yi", ni::eUCPScript_Yi },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Balinese", ni::eUCPScript_Balinese },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Cuneiform", ni::eUCPScript_Cuneiform },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Nko", ni::eUCPScript_Nko },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Phags_Pa", ni::eUCPScript_Phags_Pa },
#endif // niMinFeatures(15)
#if niMinFeatures(15)
	{ "Phoenicia", ni::eUCPScript_Phoenicia },
#endif // niMinFeatures(15)
};
static const ni::sEnumDef Enum_eUCPScript = {
	"eUCPScript",
  niCountOf(Enum_eUCPScript_Values), Enum_eUCPScript_Values
};

	return &Enum_eUCPScript;
}
#endif // niMinFeatures(15)

// --- eTypeFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eTypeFlags() {

static const ni::sEnumValueDef Enum_eTypeFlags_Values[] = {
	{ "Constant", ni::eTypeFlags_Constant },
	{ "Pointer", ni::eTypeFlags_Pointer },
	{ "Collectable", ni::eTypeFlags_Collectable },
	{ "Numeric", ni::eTypeFlags_Numeric },
	{ "FUNCPROTO", ni::eTypeFlags_FUNCPROTO },
	{ "STRING", ni::eTypeFlags_STRING },
	{ "TABLE", ni::eTypeFlags_TABLE },
	{ "ARRAY", ni::eTypeFlags_ARRAY },
	{ "USERDATA", ni::eTypeFlags_USERDATA },
	{ "CLOSURE", ni::eTypeFlags_CLOSURE },
	{ "NATIVECLOSURE", ni::eTypeFlags_NATIVECLOSURE },
	{ "MethodOptional", ni::eTypeFlags_MethodOptional },
	{ "MethodSetter", ni::eTypeFlags_MethodSetter },
	{ "MethodGetter", ni::eTypeFlags_MethodGetter },
	{ "MethodStatic", ni::eTypeFlags_MethodStatic },
};
static const ni::sEnumDef Enum_eTypeFlags = {
	"eTypeFlags",
  niCountOf(Enum_eTypeFlags_Values), Enum_eTypeFlags_Values
};

	return &Enum_eTypeFlags;
}

// --- eType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eType() {

static const ni::sEnumValueDef Enum_eType_Values[] = {
	{ "Null", ni::eType_Null },
	{ "IUnknown", ni::eType_IUnknown },
	{ "FirstGroup4", ni::eType_FirstGroup4 },
	{ "I8", ni::eType_I8 },
	{ "U8", ni::eType_U8 },
	{ "I16", ni::eType_I16 },
	{ "U16", ni::eType_U16 },
	{ "I32", ni::eType_I32 },
	{ "U32", ni::eType_U32 },
	{ "F32", ni::eType_F32 },
	{ "AChar", ni::eType_AChar },
	{ "LastGroup4", ni::eType_LastGroup4 },
	{ "FirstGroup8", ni::eType_FirstGroup8 },
	{ "I64", ni::eType_I64 },
	{ "U64", ni::eType_U64 },
	{ "F64", ni::eType_F64 },
	{ "Vec2f", ni::eType_Vec2f },
	{ "Vec2i", ni::eType_Vec2i },
	{ "LastGroup8", ni::eType_LastGroup8 },
	{ "FirstGroup12", ni::eType_FirstGroup12 },
	{ "Vec3f", ni::eType_Vec3f },
	{ "Vec3i", ni::eType_Vec3i },
	{ "String", ni::eType_String },
	{ "LastGroup12", ni::eType_LastGroup12 },
	{ "FirstGroup16", ni::eType_FirstGroup16 },
	{ "Vec4f", ni::eType_Vec4f },
	{ "Vec4i", ni::eType_Vec4i },
	{ "UUID", ni::eType_UUID },
	{ "LastGroup16", ni::eType_LastGroup16 },
	{ "FirstExtended", ni::eType_FirstExtended },
	{ "Matrixf", ni::eType_Matrixf },
	{ "Variant", ni::eType_Variant },
	{ "LastExtended", ni::eType_LastExtended },
	{ "Enum", ni::eType_Enum },
	{ "Ptr", ni::eType_Ptr },
	{ "Size", ni::eType_Size },
	{ "Offset", ni::eType_Offset },
	{ "IntPtr", ni::eType_IntPtr },
	{ "UIntPtr", ni::eType_UIntPtr },
	{ "Int", ni::eType_Int },
	{ "UInt", ni::eType_UInt },
	{ "ASZ", ni::eType_ASZ },
	{ "IUnknownPtr", ni::eType_IUnknownPtr },
};
static const ni::sEnumDef Enum_eType = {
	"eType",
  niCountOf(Enum_eType_Values), Enum_eType_Values
};

	return &Enum_eType;
}

// --- eLogFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eLogFlags() {

static const ni::sEnumValueDef Enum_eLogFlags_Values[] = {
	{ "Raw", ni::eLogFlags_Raw },
	{ "Debug", ni::eLogFlags_Debug },
	{ "Info", ni::eLogFlags_Info },
	{ "Warning", ni::eLogFlags_Warning },
	{ "Error", ni::eLogFlags_Error },
	{ "All", ni::eLogFlags_All },
	{ "FormatMSVC", ni::eLogFlags_FormatMSVC },
	{ "NoCallbackOutput", ni::eLogFlags_NoCallbackOutput },
	{ "NoRegularOutput", ni::eLogFlags_NoRegularOutput },
	{ "NoNewLine", ni::eLogFlags_NoNewLine },
	{ "Stdout", ni::eLogFlags_Stdout },
	{ "NoLogTypePrefix", ni::eLogFlags_NoLogTypePrefix },
};
static const ni::sEnumDef Enum_eLogFlags = {
	"eLogFlags",
  niCountOf(Enum_eLogFlags_Values), Enum_eLogFlags_Values
};

	return &Enum_eLogFlags;
}

// --- ePlaneType ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_ePlaneType() {

static const ni::sEnumValueDef Enum_ePlaneType_Values[] = {
	{ "X", ni::ePlaneType_X },
	{ "YZ", ni::ePlaneType_YZ },
	{ "Y", ni::ePlaneType_Y },
	{ "XZ", ni::ePlaneType_XZ },
	{ "Z", ni::ePlaneType_Z },
	{ "XY", ni::ePlaneType_XY },
	{ "NonAxial", ni::ePlaneType_NonAxial },
};
static const ni::sEnumDef Enum_ePlaneType = {
	"ePlaneType",
  niCountOf(Enum_ePlaneType_Values), Enum_ePlaneType_Values
};

	return &Enum_ePlaneType;
}

// --- eQuatSlerp ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eQuatSlerp() {

static const ni::sEnumValueDef Enum_eQuatSlerp_Values[] = {
	{ "Short", ni::eQuatSlerp_Short },
	{ "Long", ni::eQuatSlerp_Long },
	{ "NoCorrection", ni::eQuatSlerp_NoCorrection },
};
static const ni::sEnumDef Enum_eQuatSlerp = {
	"eQuatSlerp",
  niCountOf(Enum_eQuatSlerp_Values), Enum_eQuatSlerp_Values
};

	return &Enum_eQuatSlerp;
}

// --- eRectCorners ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eRectCorners() {

static const ni::sEnumValueDef Enum_eRectCorners_Values[] = {
	{ "TopLeft", ni::eRectCorners_TopLeft },
	{ "TopRight", ni::eRectCorners_TopRight },
	{ "BottomRight", ni::eRectCorners_BottomRight },
	{ "BottomLeft", ni::eRectCorners_BottomLeft },
	{ "Top", ni::eRectCorners_Top },
	{ "Right", ni::eRectCorners_Right },
	{ "Bottom", ni::eRectCorners_Bottom },
	{ "Left", ni::eRectCorners_Left },
	{ "All", ni::eRectCorners_All },
};
static const ni::sEnumDef Enum_eRectCorners = {
	"eRectCorners",
  niCountOf(Enum_eRectCorners_Values), Enum_eRectCorners_Values
};

	return &Enum_eRectCorners;
}

// --- eRectEdges ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eRectEdges() {

static const ni::sEnumValueDef Enum_eRectEdges_Values[] = {
	{ "Top", ni::eRectEdges_Top },
	{ "Right", ni::eRectEdges_Right },
	{ "Bottom", ni::eRectEdges_Bottom },
	{ "Left", ni::eRectEdges_Left },
	{ "Vertical", ni::eRectEdges_Vertical },
	{ "Horizontal", ni::eRectEdges_Horizontal },
	{ "All", ni::eRectEdges_All },
};
static const ni::sEnumDef Enum_eRectEdges = {
	"eRectEdges",
  niCountOf(Enum_eRectEdges_Values), Enum_eRectEdges_Values
};

	return &Enum_eRectEdges;
}

// --- eRectFrameFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eRectFrameFlags() {

static const ni::sEnumValueDef Enum_eRectFrameFlags_Values[] = {
	{ "TopEdge", ni::eRectFrameFlags_TopEdge },
	{ "RightEdge", ni::eRectFrameFlags_RightEdge },
	{ "BottomEdge", ni::eRectFrameFlags_BottomEdge },
	{ "LeftEdge", ni::eRectFrameFlags_LeftEdge },
	{ "TopLeftCorner", ni::eRectFrameFlags_TopLeftCorner },
	{ "TopRightCorner", ni::eRectFrameFlags_TopRightCorner },
	{ "BottomLeftCorner", ni::eRectFrameFlags_BottomLeftCorner },
	{ "BottomRightCorner", ni::eRectFrameFlags_BottomRightCorner },
	{ "Center", ni::eRectFrameFlags_Center },
	{ "TopSide", ni::eRectFrameFlags_TopSide },
	{ "BottomSide", ni::eRectFrameFlags_BottomSide },
	{ "LeftSide", ni::eRectFrameFlags_LeftSide },
	{ "RightSide", ni::eRectFrameFlags_RightSide },
	{ "VerticalSides", ni::eRectFrameFlags_VerticalSides },
	{ "HorizontalSides", ni::eRectFrameFlags_HorizontalSides },
	{ "Edges", ni::eRectFrameFlags_Edges },
	{ "All", ni::eRectFrameFlags_All },
};
static const ni::sEnumDef Enum_eRectFrameFlags = {
	"eRectFrameFlags",
  niCountOf(Enum_eRectFrameFlags_Values), Enum_eRectFrameFlags_Values
};

	return &Enum_eRectFrameFlags;
}

// --- eListInterfacesFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eListInterfacesFlags() {

static const ni::sEnumValueDef Enum_eListInterfacesFlags_Values[] = {
	{ "All", ni::eListInterfacesFlags_All },
	{ "NoDynamic", ni::eListInterfacesFlags_NoDynamic },
	{ "DynamicOnly", ni::eListInterfacesFlags_DynamicOnly },
};
static const ni::sEnumDef Enum_eListInterfacesFlags = {
	"eListInterfacesFlags",
  niCountOf(Enum_eListInterfacesFlags_Values), Enum_eListInterfacesFlags_Values
};

	return &Enum_eListInterfacesFlags;
}

// --- eFileAttrFlags ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFileAttrFlags() {

static const ni::sEnumValueDef Enum_eFileAttrFlags_Values[] = {
	{ "File", ni::eFileAttrFlags_File },
	{ "Directory", ni::eFileAttrFlags_Directory },
	{ "Archive", ni::eFileAttrFlags_Archive },
	{ "ReadOnly", ni::eFileAttrFlags_ReadOnly },
	{ "Hidden", ni::eFileAttrFlags_Hidden },
	{ "System", ni::eFileAttrFlags_System },
	{ "Virtual", ni::eFileAttrFlags_Virtual },
	{ "Device", ni::eFileAttrFlags_Device },
	{ "DeviceFixed", ni::eFileAttrFlags_DeviceFixed },
	{ "DeviceRemovable", ni::eFileAttrFlags_DeviceRemovable },
	{ "DeviceRAM", ni::eFileAttrFlags_DeviceRAM },
	{ "DeviceRemote", ni::eFileAttrFlags_DeviceRemote },
	{ "DeviceFloppy", ni::eFileAttrFlags_DeviceFloppy },
	{ "DeviceCDRom", ni::eFileAttrFlags_DeviceCDRom },
	{ "DeviceReserved0", ni::eFileAttrFlags_DeviceReserved0 },
	{ "DeviceReserved1", ni::eFileAttrFlags_DeviceReserved1 },
	{ "DeviceReserved2", ni::eFileAttrFlags_DeviceReserved2 },
	{ "DeviceReserved3", ni::eFileAttrFlags_DeviceReserved3 },
	{ "DeviceReserved4", ni::eFileAttrFlags_DeviceReserved4 },
	{ "DeviceReserved5", ni::eFileAttrFlags_DeviceReserved5 },
	{ "DeviceReserved6", ni::eFileAttrFlags_DeviceReserved6 },
	{ "DeviceReserved7", ni::eFileAttrFlags_DeviceReserved7 },
	{ "DeviceReserved8", ni::eFileAttrFlags_DeviceReserved8 },
	{ "DeviceReserved9", ni::eFileAttrFlags_DeviceReserved9 },
	{ "DeviceReserved10", ni::eFileAttrFlags_DeviceReserved10 },
	{ "All", ni::eFileAttrFlags_All },
	{ "AllFiles", ni::eFileAttrFlags_AllFiles },
	{ "AllDirectories", ni::eFileAttrFlags_AllDirectories },
};
static const ni::sEnumDef Enum_eFileAttrFlags = {
	"eFileAttrFlags",
  niCountOf(Enum_eFileAttrFlags_Values), Enum_eFileAttrFlags_Values
};

	return &Enum_eFileAttrFlags;
}

// --- eFileTime ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFileTime() {

static const ni::sEnumValueDef Enum_eFileTime_Values[] = {
	{ "Creation", ni::eFileTime_Creation },
	{ "LastAccess", ni::eFileTime_LastAccess },
	{ "LastWrite", ni::eFileTime_LastWrite },
};
static const ni::sEnumDef Enum_eFileTime = {
	"eFileTime",
  niCountOf(Enum_eFileTime_Values), Enum_eFileTime_Values
};

	return &Enum_eFileTime;
}

// --- eFileOpenMode ---
niExportFunc(const ni::sEnumDef*) GetEnumDef_eFileOpenMode() {

static const ni::sEnumValueDef Enum_eFileOpenMode_Values[] = {
	{ "Read", ni::eFileOpenMode_Read },
	{ "Write", ni::eFileOpenMode_Write },
	{ "Append", ni::eFileOpenMode_Append },
	{ "Random", ni::eFileOpenMode_Random },
};
static const ni::sEnumDef Enum_eFileOpenMode = {
	"eFileOpenMode",
  niCountOf(Enum_eFileOpenMode_Values), Enum_eFileOpenMode_Values
};

	return &Enum_eFileOpenMode;
}
#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef


//////////////////////////////////////////////////////////////////////////////////////////////
// Constants definition
//////////////////////////////////////////////////////////////////////////////////////////////
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef
static const ni::sConstantDef ConstantDef_kfccSerializedObject = ni::sConstantDef(
  "kfccSerializedObject",
  ni::Var(kfccSerializedObject)
);
static const ni::sConstantDef ConstantDef_knTimeYearRange = ni::sConstantDef(
  "knTimeYearRange",
  ni::Var(knTimeYearRange)
);
static const ni::sConstantDef ConstantDef_knTimeSecsPerMinute = ni::sConstantDef(
  "knTimeSecsPerMinute",
  ni::Var(knTimeSecsPerMinute)
);
static const ni::sConstantDef ConstantDef_knTimeMinPerHour = ni::sConstantDef(
  "knTimeMinPerHour",
  ni::Var(knTimeMinPerHour)
);
static const ni::sConstantDef ConstantDef_knTimeSecsPerHour = ni::sConstantDef(
  "knTimeSecsPerHour",
  ni::Var(knTimeSecsPerHour)
);
static const ni::sConstantDef ConstantDef_knTimeHoursPerDay = ni::sConstantDef(
  "knTimeHoursPerDay",
  ni::Var(knTimeHoursPerDay)
);
static const ni::sConstantDef ConstantDef_knTimeMinPerDay = ni::sConstantDef(
  "knTimeMinPerDay",
  ni::Var(knTimeMinPerDay)
);
static const ni::sConstantDef ConstantDef_knTimeSecsPerDay = ni::sConstantDef(
  "knTimeSecsPerDay",
  ni::Var(knTimeSecsPerDay)
);
static const ni::sConstantDef ConstantDef_kFeatures = ni::sConstantDef(
  "kFeatures",
  ni::Var(kFeatures)
);
static const ni::sConstantDef ConstantDef_kTrue = ni::sConstantDef(
  "kTrue",
  ni::Var(kTrue)
);
static const ni::sConstantDef ConstantDef_kFalse = ni::sConstantDef(
  "kFalse",
  ni::Var(kFalse)
);
static const ni::sConstantDef ConstantDef_kInvalidHandle = ni::sConstantDef(
  "kInvalidHandle",
  ni::Var(kInvalidHandle)
);
static const ni::sConstantDef ConstantDef_kMaxI8 = ni::sConstantDef(
  "kMaxI8",
  ni::Var(kMaxI8)
);
static const ni::sConstantDef ConstantDef_kMinI8 = ni::sConstantDef(
  "kMinI8",
  ni::Var(kMinI8)
);
static const ni::sConstantDef ConstantDef_kMaxU8 = ni::sConstantDef(
  "kMaxU8",
  ni::Var(kMaxU8)
);
static const ni::sConstantDef ConstantDef_kMinU8 = ni::sConstantDef(
  "kMinU8",
  ni::Var(kMinU8)
);
static const ni::sConstantDef ConstantDef_kMaxI16 = ni::sConstantDef(
  "kMaxI16",
  ni::Var(kMaxI16)
);
static const ni::sConstantDef ConstantDef_kMinI16 = ni::sConstantDef(
  "kMinI16",
  ni::Var(kMinI16)
);
static const ni::sConstantDef ConstantDef_kMaxU16 = ni::sConstantDef(
  "kMaxU16",
  ni::Var(kMaxU16)
);
static const ni::sConstantDef ConstantDef_kMinU16 = ni::sConstantDef(
  "kMinU16",
  ni::Var(kMinU16)
);
static const ni::sConstantDef ConstantDef_kMaxI32 = ni::sConstantDef(
  "kMaxI32",
  ni::Var(kMaxI32)
);
static const ni::sConstantDef ConstantDef_kMinI32 = ni::sConstantDef(
  "kMinI32",
  ni::Var(kMinI32)
);
static const ni::sConstantDef ConstantDef_kMaxU32 = ni::sConstantDef(
  "kMaxU32",
  ni::Var(kMaxU32)
);
static const ni::sConstantDef ConstantDef_kMinU32 = ni::sConstantDef(
  "kMinU32",
  ni::Var(kMinU32)
);
static const ni::sConstantDef ConstantDef_kMaxI64 = ni::sConstantDef(
  "kMaxI64",
  ni::Var(kMaxI64)
);
static const ni::sConstantDef ConstantDef_kMinI64 = ni::sConstantDef(
  "kMinI64",
  ni::Var(kMinI64)
);
static const ni::sConstantDef ConstantDef_kMaxU64 = ni::sConstantDef(
  "kMaxU64",
  ni::Var(kMaxU64)
);
static const ni::sConstantDef ConstantDef_kMinU64 = ni::sConstantDef(
  "kMinU64",
  ni::Var(kMinU64)
);
static const ni::sConstantDef ConstantDef_kMaxF32 = ni::sConstantDef(
  "kMaxF32",
  ni::Var(kMaxF32)
);
static const ni::sConstantDef ConstantDef_kMinF32 = ni::sConstantDef(
  "kMinF32",
  ni::Var(kMinF32)
);
static const ni::sConstantDef ConstantDef_kEpsilonF32 = ni::sConstantDef(
  "kEpsilonF32",
  ni::Var(kEpsilonF32)
);
static const ni::sConstantDef ConstantDef_kMaxExpF32 = ni::sConstantDef(
  "kMaxExpF32",
  ni::Var(kMaxExpF32)
);
static const ni::sConstantDef ConstantDef_kMinExpF32 = ni::sConstantDef(
  "kMinExpF32",
  ni::Var(kMinExpF32)
);
static const ni::sConstantDef ConstantDef_kMaxF64 = ni::sConstantDef(
  "kMaxF64",
  ni::Var(kMaxF64)
);
static const ni::sConstantDef ConstantDef_kMinF64 = ni::sConstantDef(
  "kMinF64",
  ni::Var(kMinF64)
);
static const ni::sConstantDef ConstantDef_kEpsilonF64 = ni::sConstantDef(
  "kEpsilonF64",
  ni::Var(kEpsilonF64)
);
static const ni::sConstantDef ConstantDef_kMaxExpF64 = ni::sConstantDef(
  "kMaxExpF64",
  ni::Var(kMaxExpF64)
);
static const ni::sConstantDef ConstantDef_kMinExpF64 = ni::sConstantDef(
  "kMinExpF64",
  ni::Var(kMinExpF64)
);
static const ni::sConstantDef ConstantDef_knTypeStringMaxSizeInChar = ni::sConstantDef(
  "knTypeStringMaxSizeInChar",
  ni::Var(knTypeStringMaxSizeInChar)
);
static const ni::sConstantDef ConstantDef_knUUIDSize = ni::sConstantDef(
  "knUUIDSize",
  ni::Var(knUUIDSize)
);
static const ni::sConstantDef ConstantDef_kuuidZero = ni::sConstantDef(
  "kuuidZero",
  ni::Var(kuuidZero)
);
static const ni::sConstantDef ConstantDef_knMaxSizeOfTypeRetByValue = ni::sConstantDef(
  "knMaxSizeOfTypeRetByValue",
  ni::Var(knMaxSizeOfTypeRetByValue)
);
static const ni::sConstantDef ConstantDef_knTypeRawNumBits = ni::sConstantDef(
  "knTypeRawNumBits",
  ni::Var(knTypeRawNumBits)
);
static const ni::sConstantDef ConstantDef_knTypeMask = ni::sConstantDef(
  "knTypeMask",
  ni::Var(knTypeMask)
);
static const ni::sConstantDef ConstantDef_kfE = ni::sConstantDef(
  "kfE",
  ni::Var(kfE)
);
static const ni::sConstantDef ConstantDef_kPi = ni::sConstantDef(
  "kPi",
  ni::Var(kPi)
);
static const ni::sConstantDef ConstantDef_kPi2 = ni::sConstantDef(
  "kPi2",
  ni::Var(kPi2)
);
static const ni::sConstantDef ConstantDef_kPi4 = ni::sConstantDef(
  "kPi4",
  ni::Var(kPi4)
);
static const ni::sConstantDef ConstantDef_k2Pi = ni::sConstantDef(
  "k2Pi",
  ni::Var(k2Pi)
);
static const ni::sConstantDef ConstantDef_k1ByPi = ni::sConstantDef(
  "k1ByPi",
  ni::Var(k1ByPi)
);
static const ni::sConstantDef ConstantDef_kInfinity = ni::sConstantDef(
  "kInfinity",
  ni::Var(kInfinity)
);
static const ni::sConstantDef ConstantDef_kEpsilon = ni::sConstantDef(
  "kEpsilon",
  ni::Var(kEpsilon)
);
static const ni::sConstantDef ConstantDef_kvec2fZero = ni::sConstantDef(
  "kvec2fZero",
  ni::Var(kvec2fZero)
);
static const ni::sConstantDef ConstantDef_kvec2lZero = ni::sConstantDef(
  "kvec2lZero",
  ni::Var(kvec2lZero)
);
static const ni::sConstantDef ConstantDef_kvec3fZero = ni::sConstantDef(
  "kvec3fZero",
  ni::Var(kvec3fZero)
);
static const ni::sConstantDef ConstantDef_kvec3lZero = ni::sConstantDef(
  "kvec3lZero",
  ni::Var(kvec3lZero)
);
static const ni::sConstantDef ConstantDef_kvec4fZero = ni::sConstantDef(
  "kvec4fZero",
  ni::Var(kvec4fZero)
);
static const ni::sConstantDef ConstantDef_kvec4lZero = ni::sConstantDef(
  "kvec4lZero",
  ni::Var(kvec4lZero)
);
static const ni::sConstantDef ConstantDef_kmtxfZero = ni::sConstantDef(
  "kmtxfZero",
  ni::Var(kmtxfZero)
);
static const ni::sConstantDef ConstantDef_kmtxfIdentity = ni::sConstantDef(
  "kmtxfIdentity",
  ni::Var(kmtxfIdentity)
);
static const ni::sConstantDef ConstantDef_kNiCopyright = ni::sConstantDef(
  "kNiCopyright",
  ni::Var(kNiCopyright)
);
static const ni::sConstantDef ConstantDef_kbIsBigEndian = ni::sConstantDef(
  "kbIsBigEndian",
  ni::Var(kbIsBigEndian)
);
static const ni::sConstantDef ConstantDef_kbIsLittleEndian = ni::sConstantDef(
  "kbIsLittleEndian",
  ni::Var(kbIsLittleEndian)
);
static const ni::sConstantDef ConstantDef_kiidIUnknown = ni::sConstantDef(
  "kiidIUnknown",
  ni::Var(kiidIUnknown)
);

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef

//////////////////////////////////////////////////////////////////////////////////////////////
// GetModuleDef
//////////////////////////////////////////////////////////////////////////////////////////////
niExportFunc(const ni::iModuleDef*) GetModuleDef_niLang()
{
  static bool _initialized = false;
  if (!_initialized) {
    _initialized = true;
    niModuleDefImpl_GetModule_Register();
  }

//////////////////////////////////////////////////////////////////////////////////////////////
// Object types definition
//////////////////////////////////////////////////////////////////////////////////////////////
static const ni::sObjectTypeDef ObjectType__Lang("niLang.Lang",New_niLang_Lang);
static const ni::sObjectTypeDef ObjectType__CryptoRand("niLang.CryptoRand",New_niLang_CryptoRand);
static const ni::sObjectTypeDef ObjectType__CryptoHash("niLang.CryptoHash",New_niLang_CryptoHash);
static const ni::sObjectTypeDef ObjectType__Crypto("niLang.Crypto",New_niLang_Crypto);
static const ni::sObjectTypeDef ObjectType__Math("niLang.Math",New_niLang_Math);
static const ni::sObjectTypeDef ObjectType__Concurrent("niLang.Concurrent",New_niLang_Concurrent);
static const ni::sObjectTypeDef ObjectType__FilePatternRegex("niLang.FilePatternRegex",New_niLang_FilePatternRegex);
static const ni::sObjectTypeDef ObjectType__PCRE("niLang.PCRE",New_niLang_PCRE);
static const ni::sObjectTypeDef ObjectType__DataTable("niLang.DataTable",New_niLang_DataTable);
static const ni::sObjectTypeDef ObjectType__Console("niLang.Console",New_niLang_Console);
static const ni::sObjectTypeDef ObjectType__OSWindowGeneric("niLang.OSWindowGeneric",New_niLang_OSWindowGeneric);
static const ni::sObjectTypeDef ObjectType__Zip("niLang.Zip",New_niLang_Zip);
static const ni::sObjectTypeDef ObjectType__URLFileHandlerManifestFileSystem("niLang.URLFileHandlerManifestFileSystem",New_niLang_URLFileHandlerManifestFileSystem);
static const ni::sObjectTypeDef ObjectType__URLFileHandlerURL("niLang.URLFileHandlerURL",New_niLang_URLFileHandlerURL);
static const ni::sObjectTypeDef ObjectType__URLFileHandlerFileSystem("niLang.URLFileHandlerFileSystem",New_niLang_URLFileHandlerFileSystem);
static const ni::sObjectTypeDef ObjectType__URLFileHandlerZip("niLang.URLFileHandlerZip",New_niLang_URLFileHandlerZip);
static const ni::sObjectTypeDef ObjectType__URLFileHandlerPrefixed("niLang.URLFileHandlerPrefixed",New_niLang_URLFileHandlerPrefixed);


//////////////////////////////////////////////////////////////////////////////////////////////
// Module definition
//////////////////////////////////////////////////////////////////////////////////////////////
static const ni::sObjectTypeDef* ObjectTypes[] = {
  &ObjectType__Lang,
  &ObjectType__CryptoRand,
  &ObjectType__CryptoHash,
  &ObjectType__Crypto,
  &ObjectType__Math,
  &ObjectType__Concurrent,
  &ObjectType__FilePatternRegex,
  &ObjectType__PCRE,
  &ObjectType__DataTable,
  &ObjectType__Console,
  &ObjectType__OSWindowGeneric,
  &ObjectType__Zip,
  &ObjectType__URLFileHandlerManifestFileSystem,
  &ObjectType__URLFileHandlerURL,
  &ObjectType__URLFileHandlerFileSystem,
  &ObjectType__URLFileHandlerZip,
  &ObjectType__URLFileHandlerPrefixed,
};

#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
static const ni::sInterfaceDef* Interfaces[] = {
  GetInterfaceDef_iIterator(),
  GetInterfaceDef_iCollection(),
  GetInterfaceDef_iMutableCollection(),
  GetInterfaceDef_iRunnable(),
  GetInterfaceDef_iCallback(),
  GetInterfaceDef_iRunnableQueue(),
  GetInterfaceDef_iMessageHandler(),
  GetInterfaceDef_iMessageDesc(),
  GetInterfaceDef_iMessageQueue(),
  GetInterfaceDef_iFuture(),
  GetInterfaceDef_iFutureValue(),
  GetInterfaceDef_iExecutor(),
  GetInterfaceDef_iConcurrent(),
  GetInterfaceDef_iCommandSink(),
  GetInterfaceDef_iConsoleSink(),
  GetInterfaceDef_iConsole(),
#if niMinFeatures(15)
  GetInterfaceDef_iCryptoRand(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetInterfaceDef_iCrypto(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetInterfaceDef_iCryptoHash(),
#endif // niMinFeatures(15)
  GetInterfaceDef_iDataTableSink(),
  GetInterfaceDef_iDataTable(),
  GetInterfaceDef_iDataTableReadStack(),
  GetInterfaceDef_iDataTableWriteStack(),
  GetInterfaceDef_iDeviceResource(),
  GetInterfaceDef_iDeviceResourceManager(),
  GetInterfaceDef_iExpressionVariable(),
  GetInterfaceDef_iExpression(),
  GetInterfaceDef_iExpressionURLResolver(),
  GetInterfaceDef_iExpressionContext(),
  GetInterfaceDef_iFileEnumSink(),
  GetInterfaceDef_iFileBase(),
  GetInterfaceDef_iFile(),
  GetInterfaceDef_iFileMemory(),
  GetInterfaceDef_iURLFileHandler(),
  GetInterfaceDef_iBufferEncoder(),
  GetInterfaceDef_iBufferDecoder(),
  GetInterfaceDef_iFileSystemEnumerator(),
  GetInterfaceDef_iFileSystem(),
  GetInterfaceDef_iGameCtrl(),
  GetInterfaceDef_iHString(),
  GetInterfaceDef_iHStringCharIt(),
#if niMinFeatures(20)
  GetInterfaceDef_iJsonParserSink(),
#endif // niMinFeatures(20)
#if niMinFeatures(20)
  GetInterfaceDef_iJsonWriterSink(),
#endif // niMinFeatures(20)
#if niMinFeatures(20)
  GetInterfaceDef_iJsonWriter(),
#endif // niMinFeatures(20)
  GetInterfaceDef_iLang(),
  GetInterfaceDef_iMath(),
#if niMinFeatures(15)
  GetInterfaceDef_iOSProcess(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetInterfaceDef_iOSProcessEnumSink(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetInterfaceDef_iOSProcessManager(),
#endif // niMinFeatures(15)
  GetInterfaceDef_iOSGraphicsAPI(),
  GetInterfaceDef_iOSWindow(),
  GetInterfaceDef_iOSWindowGeneric(),
  GetInterfaceDef_iProfDraw(),
  GetInterfaceDef_iProf(),
  GetInterfaceDef_iRegex(),
#if niMinFeatures(15)
  GetInterfaceDef_iPCRE(),
#endif // niMinFeatures(15)
  GetInterfaceDef_iScriptingHost(),
  GetInterfaceDef_iSerializable(),
  GetInterfaceDef_iSinkList(),
  GetInterfaceDef_iStringTokenizer(),
  GetInterfaceDef_iTime(),
  GetInterfaceDef_iToString(),
#if niMinFeatures(20)
  GetInterfaceDef_iXmlParserSink(),
#endif // niMinFeatures(20)
  GetInterfaceDef_iZipArchWrite(),
  GetInterfaceDef_iZip(),
  GetInterfaceDef_iObjectTypeDef(),
  GetInterfaceDef_iModuleDef(),
};

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef

#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef
static const ni::sEnumDef* Enumerations[] = {
  GetEnumDef_Unnamed(),
  GetEnumDef_eDataTablePropertyType(),
  GetEnumDef_eDataTableCopyFlags(),
  GetEnumDef_eExpressionVariableType(),
  GetEnumDef_eExpressionVariableFlags(),
  GetEnumDef_eTextEncodingFormat(),
  GetEnumDef_eFileFlags(),
  GetEnumDef_eFileSystemRightsFlags(),
  GetEnumDef_eGameCtrlAxis(),
  GetEnumDef_eGameCtrlButton(),
#if niMinFeatures(20)
  GetEnumDef_eJsonType(),
#endif // niMinFeatures(20)
  GetEnumDef_eEnumToStringFlags(),
  GetEnumDef_eSystemMessage(),
  GetEnumDef_eClipboardType(),
  GetEnumDef_eClassify(),
#if niMinFeatures(15)
  GetEnumDef_eOSProcessSpawnFlags(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetEnumDef_eOSProcessFile(),
#endif // niMinFeatures(15)
  GetEnumDef_eKey(),
  GetEnumDef_eKeyMod(),
  GetEnumDef_ePointerButton(),
  GetEnumDef_ePointerAxis(),
  GetEnumDef_eGestureState(),
  GetEnumDef_eOSWindowMessage(),
  GetEnumDef_eOSWindowStyleFlags(),
  GetEnumDef_eOSWindowCreateFlags(),
  GetEnumDef_eOSWindowShowFlags(),
  GetEnumDef_eOSWindowZOrder(),
  GetEnumDef_eOSCursor(),
  GetEnumDef_eOSMonitorFlags(),
  GetEnumDef_eOSMessageBoxFlags(),
  GetEnumDef_eOSMessageBoxReturn(),
  GetEnumDef_eOSWindowSwitchReason(),
  GetEnumDef_eProfilerReportMode(),
#if niMinFeatures(15)
  GetEnumDef_ePCREOptionsFlags(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetEnumDef_ePCREError(),
#endif // niMinFeatures(15)
  GetEnumDef_eSerializeFlags(),
  GetEnumDef_eSerializeMode(),
  GetEnumDef_eStringTokenizerCharType(),
  GetEnumDef_eTimeZone(),
  GetEnumDef_eRawToStringEncoding(),
#if niMinFeatures(20)
  GetEnumDef_eXmlParserNodeType(),
#endif // niMinFeatures(20)
  GetEnumDef_eStrFindFlags(),
#if niMinFeatures(15)
  GetEnumDef_eUCPCategory(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetEnumDef_eUCPCharType(),
#endif // niMinFeatures(15)
#if niMinFeatures(15)
  GetEnumDef_eUCPScript(),
#endif // niMinFeatures(15)
  GetEnumDef_eTypeFlags(),
  GetEnumDef_eType(),
  GetEnumDef_eLogFlags(),
  GetEnumDef_ePlaneType(),
  GetEnumDef_eQuatSlerp(),
  GetEnumDef_eRectCorners(),
  GetEnumDef_eRectEdges(),
  GetEnumDef_eRectFrameFlags(),
  GetEnumDef_eListInterfacesFlags(),
  GetEnumDef_eFileAttrFlags(),
  GetEnumDef_eFileTime(),
  GetEnumDef_eFileOpenMode(),
};

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef

#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef
static const ni::sConstantDef* Constants[] = {
  &ConstantDef_kfccSerializedObject,
  &ConstantDef_knTimeYearRange,
  &ConstantDef_knTimeSecsPerMinute,
  &ConstantDef_knTimeMinPerHour,
  &ConstantDef_knTimeSecsPerHour,
  &ConstantDef_knTimeHoursPerDay,
  &ConstantDef_knTimeMinPerDay,
  &ConstantDef_knTimeSecsPerDay,
  &ConstantDef_kFeatures,
  &ConstantDef_kTrue,
  &ConstantDef_kFalse,
  &ConstantDef_kInvalidHandle,
  &ConstantDef_kMaxI8,
  &ConstantDef_kMinI8,
  &ConstantDef_kMaxU8,
  &ConstantDef_kMinU8,
  &ConstantDef_kMaxI16,
  &ConstantDef_kMinI16,
  &ConstantDef_kMaxU16,
  &ConstantDef_kMinU16,
  &ConstantDef_kMaxI32,
  &ConstantDef_kMinI32,
  &ConstantDef_kMaxU32,
  &ConstantDef_kMinU32,
  &ConstantDef_kMaxI64,
  &ConstantDef_kMinI64,
  &ConstantDef_kMaxU64,
  &ConstantDef_kMinU64,
  &ConstantDef_kMaxF32,
  &ConstantDef_kMinF32,
  &ConstantDef_kEpsilonF32,
  &ConstantDef_kMaxExpF32,
  &ConstantDef_kMinExpF32,
  &ConstantDef_kMaxF64,
  &ConstantDef_kMinF64,
  &ConstantDef_kEpsilonF64,
  &ConstantDef_kMaxExpF64,
  &ConstantDef_kMinExpF64,
  &ConstantDef_knTypeStringMaxSizeInChar,
  &ConstantDef_knUUIDSize,
  &ConstantDef_kuuidZero,
  &ConstantDef_knMaxSizeOfTypeRetByValue,
  &ConstantDef_knTypeRawNumBits,
  &ConstantDef_knTypeMask,
  &ConstantDef_kfE,
  &ConstantDef_kPi,
  &ConstantDef_kPi2,
  &ConstantDef_kPi4,
  &ConstantDef_k2Pi,
  &ConstantDef_k1ByPi,
  &ConstantDef_kInfinity,
  &ConstantDef_kEpsilon,
  &ConstantDef_kvec2fZero,
  &ConstantDef_kvec2lZero,
  &ConstantDef_kvec3fZero,
  &ConstantDef_kvec3lZero,
  &ConstantDef_kvec4fZero,
  &ConstantDef_kvec4lZero,
  &ConstantDef_kmtxfZero,
  &ConstantDef_kmtxfIdentity,
  &ConstantDef_kNiCopyright,
  &ConstantDef_kbIsBigEndian,
  &ConstantDef_kbIsLittleEndian,
  &ConstantDef_kiidIUnknown,
};

#endif // #if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef

static const ni::sModuleDef ModuleDef(
  "niLang",
  "1,0,0",
  "niLang module (Build Date: " __DATE__ ")",
  "niLang Authors",
  "(c) 2022 The niLang Authors",
  0, NULL,
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoInterfaceDef
  niCountOf(Interfaces), Interfaces,
#else
  0, NULL,
#endif
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoEnumDef
  niCountOf(Enumerations), Enumerations,
#else
  0, NULL,
#endif
#if !defined niConfig_OnlyObjectTypesIDL && !defined niConfig_NoConstDef
  niCountOf(Constants), Constants,
#else
  0, NULL,
#endif
  niCountOf(ObjectTypes), ObjectTypes
);

  return &ModuleDef;
} // End of GetModuleDef_niLang
} // end of namespace ni

/// EOF //////////////////////////////////////////////////////////////////////////////////////
#include <niLang/Utils/ModuleDefImpl_End.h>
