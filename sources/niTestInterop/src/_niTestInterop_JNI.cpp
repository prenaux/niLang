/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include "stdafx.h"

#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;



static const char *ni_classNames[9] = {
        "ni/niLang/IHString",
        "ni/niLang/IMutableCollection",
        "ni/niTestInterop/ITestInterop",
        "ni/niTestInterop/ITestInteropForEach",
        "ni/niTestInterop/ITestInteropObject",
        "ni/niTestInterop/ITestInteropSink",
        "ni/niTestInterop/STestInterop",
        "ni/types/IUnknown",
        "ni/types/Pointer" };
static jclass ni_classes[9] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

JNIEXPORT jint JNICALL JNI_OnLoad_niTestInterop(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnLoad(vm, (void**)&e, JNI_VERSION_1_4) == 0) {
        fprintf(stderr, "niJVM_OnLoad() failed !");
        return 0;
    }
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload_niTestInterop(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnUnload(vm, (void**)&e, JNI_VERSION_1_4) != JNI_OK) {
        fprintf(stderr, "niJVM_OnUnload() failed !");
        return;
    }
    for (int i = 0; i < 9; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}

#if !defined niLib
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    return JNI_OnLoad_niTestInterop(vm,reserved);
}
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {
    JNI_OnUnload_niTestInterop(vm,reserved);
}
#endif // defined niLib

/// Forward declarations ///
niExportFunc(ni::iTestInteropSink*) NewJNIWrapper_ni_iTestInteropSink(JNIEnv* e, jobject o);

/// Methods declarations ///

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInterop_createTestInteropObject(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTestInteropObject(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInterop_createTestInteropObjectPtr(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::Ptr<ni::iTestInteropObject> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->CreateTestInteropObjectPtr(p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInterop_featureSetEmbedded(JNIEnv *e, jobject o) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FeatureSetEmbedded();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInterop_featureSetLight(JNIEnv *e, jobject o) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->FeatureSetLight();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInterop_generateCrash(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tInt rvalue = pointer->GenerateCrash(p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInterop_getNumTestInteropObjects(JNIEnv *e, jobject o) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumTestInteropObjects();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInterop_getTestInteropObject(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInterop* pointer = niJVM_GetIUnknown(e,o,ni::iTestInterop);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTestInteropObject((ni::tSize)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInterop_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInterop>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iTestInterop), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInterop_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInterop>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 2), &niGetInterfaceUUID(ni::iTestInterop), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Object_1CObject(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ForEachObject_OnTestInteropSink_Object_CObject(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Object_1Object(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ForEachObject_OnTestInteropSink_Object_Object(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Object_1Object2(JNIEnv *e, jobject o, jobject p0, jint p1, jfloat p2) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ForEachObject_OnTestInteropSink_Object_Object2(pointer0, p1, p2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Object_1ObjectVec3f(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->ForEachObject_OnTestInteropSink_Object_ObjectVec3f(pointer0, niJVM_GetVec3f(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Var_1Var(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    ni::Var var_1 = niJVM_GetVar(e,p1);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->ForEachObject_OnTestInteropSink_Var_Var(pointer0, var_1);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Vec3f_1CObject(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ForEachObject_OnTestInteropSink_Vec3f_CObject(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Vec3f_1Object(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ForEachObject_OnTestInteropSink_Vec3f_Object(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Vec3f_1String(JNIEnv *e, jobject o, jobject p0, jstring p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->ForEachObject_OnTestInteropSink_Vec3f_String(pointer0, pointer1));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Void(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->ForEachObject_OnTestInteropSink_Void(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Void_1I32(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->ForEachObject_OnTestInteropSink_Void_I32(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Void_1I64(JNIEnv *e, jobject o, jobject p0, jlong p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->ForEachObject_OnTestInteropSink_Void_I64(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropForEach_forEachObject_1OnTestInteropSink_1Void_1Ptr(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTestInteropForEach* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropForEach);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropSink* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropSink*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    void* pointer1 = p1 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p1, _JVM->addressFieldID));
    NI_JVM_CPP_TRY {
        pointer->ForEachObject_OnTestInteropSink_Void_Ptr(pointer0, (ni::tPtr)pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTestInteropForEach* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropForEach>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iTestInteropForEach), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropForEach_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropForEach* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropForEach>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 3), &niGetInterfaceUUID(ni::iTestInteropForEach), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_func32(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15, jint p16, jint p17, jint p18, jint p19, jint p20, jint p21, jint p22, jint p23, jint p24, jint p25, jint p26, jint p27, jint p28, jint p29, jint p30, jint p31) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Func32(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_func33(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15, jint p16, jint p17, jint p18, jint p19, jint p20, jint p21, jint p22, jint p23, jint p24, jint p25, jint p26, jint p27, jint p28, jint p29, jint p30, jint p31, jint p32) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Func33(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_func48(JNIEnv *e, jobject o, jint p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6, jint p7, jint p8, jint p9, jint p10, jint p11, jint p12, jint p13, jint p14, jint p15, jint p16, jint p17, jint p18, jint p19, jint p20, jint p21, jint p22, jint p23, jint p24, jint p25, jint p26, jint p27, jint p28, jint p29, jint p30, jint p31, jint p32, jint p33, jint p34, jint p35, jint p36, jint p37, jint p38, jint p39) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->Func48(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niTestInterop_ITestInteropObject_getACharStrZ(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetACharStrZ());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getEnum(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        eTestInterop rvalue = pointer->GetEnum();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jfloat JNICALL Java_ni_niTestInterop_ITestInteropObject_getF32(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jfloat r = 0;
    NI_JVM_CPP_TRY {
        float rvalue = pointer->GetF32();
        r = (jfloat)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jdouble JNICALL Java_ni_niTestInterop_ITestInteropObject_getF64(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jdouble r = 0;
    NI_JVM_CPP_TRY {
        double rvalue = pointer->GetF64();
        r = (jdouble)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getFlags(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetFlags();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getHString(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iHString* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetHString();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iHString), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niTestInterop_ITestInteropObject_getI16(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->GetI16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getI32(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetI32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niTestInterop_ITestInteropObject_getI64(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetI64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niTestInterop_ITestInteropObject_getI8(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetI8();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getIndexedIUnknown(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIndexedIUnknown((ni::tSize)p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getIndexedTestInteropObject(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetIndexedTestInteropObject((ni::tSize)p0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getIndexedU32(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetIndexedU32((ni::tSize)p0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niTestInterop_ITestInteropObject_getIntPtr(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetIntPtr();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getMappedIUnknown(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iUnknown* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMappedIUnknown(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 7), &niGetInterfaceUUID(ni::iUnknown), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getMappedTestInteropObject(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetMappedTestInteropObject(pointer0);
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getMappedU32(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetMappedU32(pointer0);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getMatrixf(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewMatrixf(e,pointer->GetMatrixf());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getNumItems(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        ni::tSize rvalue = pointer->GetNumItems();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getPtr(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::tPtr rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetPtr();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 8));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niTestInterop_ITestInteropObject_getString(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetString());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niTestInterop_ITestInteropObject_getStringCRef(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetStringCRef());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getStringMap(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tStringCMap * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetStringMap();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(tStringCMap ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getTestInterop(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::sTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTestInterop();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 6));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getTestInteropConst(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::sTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTestInteropConst();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 6));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getTestInteropConstRef(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    const ni::sTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = &pointer->GetTestInteropConstRef();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 6));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getTestInteropObject(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetTestInteropObject();
        if (rpointer == pointer) {
            r = o;
        } else if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getTestInteropRef(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    ni::sTestInterop* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = &pointer->GetTestInteropRef();
        if (rpointer != NULL) {
            r = e->AllocObject(ni_getClass(e, 6));
            e->SetLongField(r, _JVM->addressFieldID, ptr_to_jlong(rpointer));
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jshort JNICALL Java_ni_niTestInterop_ITestInteropObject_getU16(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jshort r = 0;
    NI_JVM_CPP_TRY {
        short rvalue = pointer->GetU16();
        r = (jshort)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_ITestInteropObject_getU32(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetU32();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getU32Vec(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    tU32CVec * rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->GetU32Vec();
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(tU32CVec ), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niTestInterop_ITestInteropObject_getU64(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        jlong rvalue = pointer->GetU64();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jbyte JNICALL Java_ni_niTestInterop_ITestInteropObject_getU8(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jbyte r = 0;
    NI_JVM_CPP_TRY {
        signed char rvalue = pointer->GetU8();
        r = (jbyte)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jlong JNICALL Java_ni_niTestInterop_ITestInteropObject_getUIntPtr(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jlong r = 0;
    NI_JVM_CPP_TRY {
        ni::tIntPtr rvalue = pointer->GetUIntPtr();
        r = (jlong)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVar(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->GetVar();
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec2f(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2f(e,pointer->GetVec2f());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec2l(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec2i(e,pointer->GetVec2l());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec3f(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->GetVec3f());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec3l(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3i(e,pointer->GetVec3l());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec4f(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4f(e,pointer->GetVec4f());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_getVec4l(JNIEnv *e, jobject o) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec4i(e,pointer->GetVec4l());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropObject>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropObject_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropObject>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_readRawBuffer(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadRawBuffer((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_readRawBufferU32(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    int* pointer0 = (int*)lock_JBuffer0.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadRawBufferU32((ni::tU32*)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_readRawBufferVoid(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->ReadRawBufferVoid((void*)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setACharStrZ(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetACharStrZ(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setEnum(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetEnum((eTestInterop)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setF32(JNIEnv *e, jobject o, jfloat p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetF32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setF64(JNIEnv *e, jobject o, jdouble p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetF64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setFlags(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetFlags(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setHString(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iHString* pointer0 = p0 == NULL ? NULL : (ni::iHString*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetHString(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setI16(JNIEnv *e, jobject o, jshort p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetI16(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setI32(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetI32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setI64(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetI64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setI8(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetI8(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setIndexedIUnknown(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIndexedIUnknown((ni::tSize)p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setIndexedTestInteropObject(JNIEnv *e, jobject o, jint p0, jobject p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer1 = p1 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetIndexedTestInteropObject((ni::tSize)p0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setIndexedU32(JNIEnv *e, jobject o, jint p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIndexedU32((ni::tSize)p0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setIntPtr(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetIntPtr((ni::tIntPtr)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setMappedIUnknown(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iUnknown* pointer1 = p1 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetMappedIUnknown(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setMappedTestInteropObject(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iTestInteropObject* pointer1 = p1 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetMappedTestInteropObject(pointer0, pointer1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setMappedU32(JNIEnv *e, jobject o, jstring p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMappedU32(pointer0, p1);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setMatrixf(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetMatrixf(niJVM_GetMatrixf(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_setMatrixfValues(JNIEnv *e, jobject o, jfloat p0, jfloat p1, jfloat p2, jfloat p3, jfloat p4, jfloat p5, jfloat p6, jfloat p7, jfloat p8, jfloat p9, jfloat p10, jfloat p11, jfloat p12, jfloat p13, jfloat p14, jfloat p15) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->SetMatrixfValues(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setNumItems(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetNumItems((ni::tSize)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setPtr(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetPtr((ni::tPtr)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setString(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetString(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setStringCRef(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetStringCRef(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setStringMap(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetStringMap((tStringCMap *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setTestInterop(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sTestInterop* pointer0 = p0 == NULL ? NULL : (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    NI_JVM_CPP_TRY {
        pointer->SetTestInterop(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setTestInteropConst(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sTestInterop* pointer0 = p0 == NULL ? NULL : (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    NI_JVM_CPP_TRY {
        pointer->SetTestInteropConst(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setTestInteropConstRef(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sTestInterop* pointer0 = p0 == NULL ? NULL : (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    NI_JVM_CPP_TRY {
        pointer->SetTestInteropConstRef(*pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setTestInteropObject(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetTestInteropObject(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setTestInteropRef(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::sTestInterop* pointer0 = p0 == NULL ? NULL : (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jint position0 = p0 == NULL ? 0 : e->GetIntField(p0, _JVM->positionFieldID);
    pointer0 += position0;
    NI_JVM_CPP_TRY {
        pointer->SetTestInteropRef(*pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setU16(JNIEnv *e, jobject o, jshort p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetU16(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setU32(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetU32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setU32Vec(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::iMutableCollection* pointer0 = p0 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    NI_JVM_CPP_TRY {
        pointer->SetU32Vec((tU32CVec *)pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setU64(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetU64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setU8(JNIEnv *e, jobject o, jbyte p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetU8(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setUIntPtr(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUIntPtr((ni::tIntPtr)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVar(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    NI_JVM_CPP_TRY {
        pointer->SetVar(var_0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec2f(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec2f(niJVM_GetVec2f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec2l(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec2l(niJVM_GetVec2i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec3f(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec3f(niJVM_GetVec3f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec3l(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec3l(niJVM_GetVec3i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec4f(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec4f(niJVM_GetVec4f(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropObject_setVec4l(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetVec4l(niJVM_GetVec4i(e,p0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_writeRawBuffer(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    void* pointer0 = p0 == NULL ? NULL : (void*)jlong_to_ptr(e->GetLongField(p0, _JVM->addressFieldID));
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteRawBuffer((ni::tPtr)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_writeRawBufferU32(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    int* pointer0 = (int*)lock_JBuffer0.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteRawBufferU32((ni::tU32*)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jboolean JNICALL Java_ni_niTestInterop_ITestInteropObject_writeRawBufferVoid(JNIEnv *e, jobject o, jobject p0, jint p1) {
    ni::iTestInteropObject* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropObject);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    LockJBuffer lock_JBuffer0(e, p0);
    void* pointer0 = (void*)lock_JBuffer0.dataPtr;
    jboolean r = 0;
    NI_JVM_CPP_TRY {
        unsigned char rvalue = pointer->WriteRawBufferVoid((void*)pointer0, (ni::tSize)p1);
        r = (jboolean)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_impl(JNIEnv *e, jclass c, jobject p0) {
    jobject r = NULL;
    ni::iTestInteropSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = NewJNIWrapper_ni_iTestInteropSink(e,p0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iTestInteropSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Object_1CObject(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->OnTestInteropSink_Object_CObject(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Object_1Object(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->OnTestInteropSink_Object_Object(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Object_1Object2(JNIEnv *e, jobject o, jint p0, jfloat p1, jobject p2) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer2 = p2 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->OnTestInteropSink_Object_Object2(p0, p1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Object_1ObjectVec3f(JNIEnv *e, jobject o, jobject p0, jobject p1) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropObject* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->OnTestInteropSink_Object_ObjectVec3f(pointer0, niJVM_GetVec3f(e,p1));
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Var_1Var(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = 0;
    NI_JVM_CPP_TRY {
        ni::Var rvalue = pointer->OnTestInteropSink_Var_Var(var_0);
        r = niJVM_NewVar(e,rvalue);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Vec3f_1CObject(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->OnTestInteropSink_Vec3f_CObject(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Vec3f_1Object(JNIEnv *e, jobject o, jobject p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iTestInteropObject* pointer0 = p0 == NULL ? NULL : (ni::iTestInteropObject*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->OnTestInteropSink_Vec3f_Object(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Vec3f_1String(JNIEnv *e, jobject o, jstring p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jobject r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewVec3f(e,pointer->OnTestInteropSink_Vec3f_String(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Void(JNIEnv *e, jobject o) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnTestInteropSink_Void();
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Void_1I32(JNIEnv *e, jobject o, jint p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnTestInteropSink_Void_I32(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Void_1I64(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnTestInteropSink_Void_I64(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_ITestInteropSink_onTestInteropSink_1Void_1Ptr(JNIEnv *e, jobject o, jlong p0) {
    ni::iTestInteropSink* pointer = niJVM_GetIUnknown(e,o,ni::iTestInteropSink);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->OnTestInteropSink_Void_Ptr((ni::tIntPtr)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iTestInteropSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropSink>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iTestInteropSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_ITestInteropSink_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iTestInteropSink* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iTestInteropSink>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 5), &niGetInterfaceUUID(ni::iTestInteropSink), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

// JNI Wrapper Implementation for Java Class : ni.niTestInterop.ITestInteropSinkImpl
// Implement JNI Wrapper for ni::iTestInteropSink
struct JNI_ni_iTestInteropSink : public ni::cIUnknownImpl<iTestInteropSink> {
  jclass mClass;
  jobject mObject;
  mutable jmethodID mmOnTestInteropSink_Object_CObject;
  mutable jmethodID mmOnTestInteropSink_Object_Object;
  mutable jmethodID mmOnTestInteropSink_Object_Object2;
  mutable jmethodID mmOnTestInteropSink_Object_ObjectVec3f;
  mutable jmethodID mmOnTestInteropSink_Var_Var;
  mutable jmethodID mmOnTestInteropSink_Vec3f_CObject;
  mutable jmethodID mmOnTestInteropSink_Vec3f_Object;
  mutable jmethodID mmOnTestInteropSink_Vec3f_String;
  mutable jmethodID mmOnTestInteropSink_Void;
  mutable jmethodID mmOnTestInteropSink_Void_I32;
  mutable jmethodID mmOnTestInteropSink_Void_I64;
  mutable jmethodID mmOnTestInteropSink_Void_Ptr;

  JNI_ni_iTestInteropSink(JNIEnv* e, jobject o) {
    niAssert(e != NULL);
    niAssert(o != NULL);
    mClass = (jclass)e->NewGlobalRef(e->GetObjectClass(o));
    mObject = e->NewGlobalRef(o);
    NI_JVM_WRAPPER_REGISTER(e,o,this);
  }
  ~JNI_ni_iTestInteropSink() {
    this->Invalidate();
  }
  virtual ni::tBool __stdcall IsOK() const {
    return mObject != (jobject)NULL;
  }
  virtual void __stdcall Invalidate() {
    if (mObject == (jobject)NULL) return;
    JNIEnv* e = niJVM_GetCurrentEnv();
    niAssert(e != NULL);
    NI_JVM_WRAPPER_UNREGISTER(e,o,this);
    e->DeleteGlobalRef(mObject);
    e->DeleteGlobalRef(mClass);
    mObject = (jobject)NULL; mClass = (jclass)NULL;
  }

  // Method: OnTestInteropSink_Object_CObject -> (Lni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;
  virtual ni::iTestInteropObject* __stdcall OnTestInteropSink_Object_CObject(const ni::iTestInteropObject* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Object_CObject,onTestInteropSink_Object_CObject,"(Lni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;",(ni::iTestInteropObject*)NULL);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Object_CObject,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Object_CObject,onTestInteropSink_Object_CObject,(ni::iTestInteropObject*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iTestInteropObject);
  }
  // Method: OnTestInteropSink_Object_Object -> (Lni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;
  virtual ni::iTestInteropObject* __stdcall OnTestInteropSink_Object_Object(ni::iTestInteropObject* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Object_Object,onTestInteropSink_Object_Object,"(Lni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;",(ni::iTestInteropObject*)NULL);
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Object_Object,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Object_Object,onTestInteropSink_Object_Object,(ni::iTestInteropObject*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iTestInteropObject);
  }
  // Method: OnTestInteropSink_Object_Object2 -> (IFLni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;
  virtual ni::iTestInteropObject* __stdcall OnTestInteropSink_Object_Object2(ni::tU32 p0, ni::tF32 p1, ni::iTestInteropObject* p2) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Object_Object2,onTestInteropSink_Object_Object2,"(IFLni/niTestInterop/ITestInteropObject;)Lni/niTestInterop/ITestInteropObject;",(ni::iTestInteropObject*)NULL);
    jvalue args[3];
    args[0].i = p0;
    args[1].f = p1;
    jobject iu_p2 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p2);
    LocalJRef<jobject> jiu_p2(e,iu_p2);
    args[2].l = jiu_p2.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Object_Object2,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Object_Object2,onTestInteropSink_Object_Object2,(ni::iTestInteropObject*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iTestInteropObject);
  }
  // Method: OnTestInteropSink_Object_ObjectVec3f -> (Lni/niTestInterop/ITestInteropObject;Lni/types/Vec3f;)Lni/niTestInterop/ITestInteropObject;
  virtual ni::iTestInteropObject* __stdcall OnTestInteropSink_Object_ObjectVec3f(ni::iTestInteropObject* p0, const ni::sVec3f& p1) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Object_ObjectVec3f,onTestInteropSink_Object_ObjectVec3f,"(Lni/niTestInterop/ITestInteropObject;Lni/types/Vec3f;)Lni/niTestInterop/ITestInteropObject;",(ni::iTestInteropObject*)NULL);
    jvalue args[2];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject xt_p1 = niJVM_NewVec3f(e, p1);
    LocalJRef<jobject> jxt_p1(e,xt_p1);
    args[1].l = jxt_p1.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Object_ObjectVec3f,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Object_ObjectVec3f,onTestInteropSink_Object_ObjectVec3f,(ni::iTestInteropObject*)NULL);
    return niJVM_GetIUnknown(e,r,ni::iTestInteropObject);
  }
  // Method: OnTestInteropSink_Var_Var -> (Ljava/lang/Object;)Ljava/lang/Object;
  virtual ni::Var __stdcall OnTestInteropSink_Var_Var(const ni::Var& p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Var_Var,onTestInteropSink_Var_Var,"(Ljava/lang/Object;)Ljava/lang/Object;",niVarNull);
    jvalue args[1];
    jobject var_p0 = niJVM_NewVar(e, p0);
    LocalJRef<jobject> jvar_p0(e,var_p0);
    args[0].l = jvar_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Var_Var,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Var_Var,onTestInteropSink_Var_Var,niVarNull);
    ni::Var var_r = niJVM_GetVar(e,r);
return var_r;
  }
  // Method: OnTestInteropSink_Vec3f_CObject -> (Lni/niTestInterop/ITestInteropObject;)Lni/types/Vec3f;
  virtual ni::sVec3f __stdcall OnTestInteropSink_Vec3f_CObject(const ni::iTestInteropObject* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Vec3f_CObject,onTestInteropSink_Vec3f_CObject,"(Lni/niTestInterop/ITestInteropObject;)Lni/types/Vec3f;",ni::sVec3f::Zero());
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Vec3f_CObject,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Vec3f_CObject,onTestInteropSink_Vec3f_CObject,ni::sVec3f::Zero());
    return niJVM_GetVec3f(e,r);
  }
  // Method: OnTestInteropSink_Vec3f_Object -> (Lni/niTestInterop/ITestInteropObject;)Lni/types/Vec3f;
  virtual ni::sVec3f __stdcall OnTestInteropSink_Vec3f_Object(ni::iTestInteropObject* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Vec3f_Object,onTestInteropSink_Vec3f_Object,"(Lni/niTestInterop/ITestInteropObject;)Lni/types/Vec3f;",ni::sVec3f::Zero());
    jvalue args[1];
    jobject iu_p0 = niJVM_IUnknownNew(e, ni_getClass(e, 4), &niGetInterfaceUUID(ni::iTestInteropObject), p0);
    LocalJRef<jobject> jiu_p0(e,iu_p0);
    args[0].l = jiu_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Vec3f_Object,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Vec3f_Object,onTestInteropSink_Vec3f_Object,ni::sVec3f::Zero());
    return niJVM_GetVec3f(e,r);
  }
  // Method: OnTestInteropSink_Vec3f_String -> (Ljava/lang/String;)Lni/types/Vec3f;
  virtual ni::sVec3f __stdcall OnTestInteropSink_Vec3f_String(const ni::achar* p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Vec3f_String,onTestInteropSink_Vec3f_String,"(Ljava/lang/String;)Lni/types/Vec3f;",ni::sVec3f::Zero());
    jvalue args[1];
    LocalJString jstr_p0(e,p0);
    args[0].l = jstr_p0.o;
    jobject r = e->CallObjectMethodA(mObject,mmOnTestInteropSink_Vec3f_String,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Vec3f_String,onTestInteropSink_Vec3f_String,ni::sVec3f::Zero());
    return niJVM_GetVec3f(e,r);
  }
  // Method: OnTestInteropSink_Void -> ()V
  virtual void __stdcall OnTestInteropSink_Void() {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Void,onTestInteropSink_Void,"()V",;);
    jvalue* args = NULL;
    e->CallVoidMethodA(mObject,mmOnTestInteropSink_Void,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Void,onTestInteropSink_Void,;);
  }
  // Method: OnTestInteropSink_Void_I32 -> (I)V
  virtual void __stdcall OnTestInteropSink_Void_I32(ni::tI32 p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Void_I32,onTestInteropSink_Void_I32,"(I)V",;);
    jvalue args[1];
    args[0].i = p0;
    e->CallVoidMethodA(mObject,mmOnTestInteropSink_Void_I32,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Void_I32,onTestInteropSink_Void_I32,;);
  }
  // Method: OnTestInteropSink_Void_I64 -> (J)V
  virtual void __stdcall OnTestInteropSink_Void_I64(ni::tI64 p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Void_I64,onTestInteropSink_Void_I64,"(J)V",;);
    jvalue args[1];
    args[0].j = p0;
    e->CallVoidMethodA(mObject,mmOnTestInteropSink_Void_I64,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Void_I64,onTestInteropSink_Void_I64,;);
  }
  // Method: OnTestInteropSink_Void_Ptr -> (J)V
  virtual void __stdcall OnTestInteropSink_Void_Ptr(ni::tIntPtr p0) {
    NI_JVM_WRAPPER_METH_ENTER(ni,iTestInteropSink,OnTestInteropSink_Void_Ptr,onTestInteropSink_Void_Ptr,"(J)V",;);
    jvalue args[1];
    args[0].j = p0;
    e->CallVoidMethodA(mObject,mmOnTestInteropSink_Void_Ptr,args);
    NI_JVM_WRAPPER_METH_LEAVE(ni,iTestInteropSink,OnTestInteropSink_Void_Ptr,onTestInteropSink_Void_Ptr,;);
  }
};
niExportFunc(ni::iTestInteropSink*) NewJNIWrapper_ni_iTestInteropSink(JNIEnv* e, jobject o) {
  NI_JVM_WRAPPER_TRY_GET_EXISTING(ni,iTestInteropSink,e,o);
  return niNew JNI_ni_iTestInteropSink(e,o);
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_STestInterop_mfFloat__F(JNIEnv *e, jobject o, jfloat p0) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    pointer->mfFloat = p0;
}

JNIEXPORT jfloat JNICALL Java_ni_niTestInterop_STestInterop_mfFloat__(JNIEnv *e, jobject o) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jfloat r = 0;
    float rvalue = pointer->mfFloat;
    r = (jfloat)rvalue;
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_STestInterop_mnInt__I(JNIEnv *e, jobject o, jint p0) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    pointer->mnInt = p0;
}

JNIEXPORT jint JNICALL Java_ni_niTestInterop_STestInterop_mnInt__(JNIEnv *e, jobject o) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jint r = 0;
    int rvalue = pointer->mnInt;
    r = (jint)rvalue;
    return r;
}

JNIEXPORT void JNICALL Java_ni_niTestInterop_STestInterop_mvVec3__Lni_types_Vec3f_2(JNIEnv *e, jobject o, jobject p0) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    pointer->mvVec3 = niJVM_GetVec3f(e,p0);
}

JNIEXPORT jobject JNICALL Java_ni_niTestInterop_STestInterop_mvVec3__(JNIEnv *e, jobject o) {
    ni::sTestInterop* pointer = (ni::sTestInterop*)jlong_to_ptr(e->GetLongField(o, _JVM->addressFieldID));
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint position = e->GetIntField(o, _JVM->positionFieldID);
    pointer += position;
    jobject r = NULL;
    r = niJVM_NewVec3f(e,pointer->mvVec3);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
