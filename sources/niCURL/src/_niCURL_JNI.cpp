/* DO NOT EDIT THIS FILE - IT IS MACHINE GENERATED */
#include "stdafx.h"

#include <niLang/Utils/JNIUtils.h>
#include <niLang/Types.h>

#if !defined niJNI
#pragma message("# JNI: NOT Compiling")
#endif // niJNI

#ifdef niJNI
#pragma message("# JNI: Compiling")
extern "C" {
static sJVMContext* _JVM = NULL;



static const char *ni_classNames[2] = {
        "ni/niCURL/ICURL",
        "ni/niLang/IRunnable" };
static jclass ni_classes[2] = { NULL };

static jclass ni_getClass(JNIEnv *e, int i) {
    niAssert(i < niCountOf(ni_classes));
    if (ni_classes[i] == NULL) {
        jclass c = e->FindClass(ni_classNames[i]);
        if (c == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error loading class %s.", ni_classNames[i]);
            return NULL;
        }
        ni_classes[i] = (jclass)e->NewGlobalRef(c);
        if (ni_classes[i] == NULL || e->ExceptionCheck()) {
            fprintf(stderr, "Error creating global reference of class %s.", ni_classNames[i]);
            return NULL;
        }
    }
    return ni_classes[i];
}

JNIEXPORT jint JNICALL JNI_OnLoad_niCURL(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnLoad(vm, (void**)&e, JNI_VERSION_1_4) == 0) {
        fprintf(stderr, "niJVM_OnLoad() failed !");
        return 0;
    }
    _JVM = niJVM_GetContext();
    return e->GetVersion();
}

JNIEXPORT void JNICALL JNI_OnUnload_niCURL(JavaVM *vm, void *reserved) {
    JNIEnv* e;
    if (niJVM_OnUnload(vm, (void**)&e, JNI_VERSION_1_4) != JNI_OK) {
        fprintf(stderr, "niJVM_OnUnload() failed !");
        return;
    }
    for (int i = 0; i < 2; i++) {
        e->DeleteGlobalRef(ni_classes[i]);
    }
}

#if !defined niLib
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    return JNI_OnLoad_niCURL(vm,reserved);
}
JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {
    JNI_OnUnload_niCURL(vm,reserved);
}
#endif // defined niLib

/// Forward declarations ///

/// Methods declarations ///

JNIEXPORT jint JNICALL Java_ni_niCURL_ICURL_getConnectionTimeoutInSecs(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetConnectionTimeoutInSecs();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niCURL_ICURL_getHttpAuth(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        const eCURLHttpAuth rvalue = pointer->GetHttpAuth();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_getProtocols(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetProtocols());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niCURL_ICURL_getRequestTimeoutInSecs(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->GetRequestTimeoutInSecs();
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_getUserAgent(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetUserAgent());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_getUserName(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetUserName());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_getUserPass(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetUserPass());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_getVersion(JNIEnv *e, jobject o) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->GetVersion());
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_query__Ljava_lang_Object_2(JNIEnv *e, jclass c, jobject p0) {
    ni::Var var_0 = niJVM_GetVar(e,p0);
    jobject r = NULL;
    ni::iCURL* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCURL>(var_0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iCURL), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_query__Lni_types_IUnknown_2(JNIEnv *e, jclass c, jobject p0) {
    ni::iUnknown* pointer0 = p0 == NULL ? NULL : (ni::iUnknown*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::iCURL* rpointer;
    NI_JVM_CPP_TRY {
        rpointer = niJVM_QueryInterface<ni::iCURL>(pointer0);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 0), &niGetInterfaceUUID(ni::iCURL), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    return r;
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setConnectionTimeoutInSecs(JNIEnv *e, jobject o, jint p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetConnectionTimeoutInSecs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setHttpAuth(JNIEnv *e, jobject o, jint p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetHttpAuth((eCURLHttpAuth)p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setRequestTimeoutInSecs(JNIEnv *e, jobject o, jint p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    NI_JVM_CPP_TRY {
        pointer->SetRequestTimeoutInSecs(p0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setUserAgent(JNIEnv *e, jobject o, jstring p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUserAgent(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setUserName(JNIEnv *e, jobject o, jstring p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUserName(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT void JNICALL Java_ni_niCURL_ICURL_setUserPass(JNIEnv *e, jobject o, jstring p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    NI_JVM_CPP_TRY {
        pointer->SetUserPass(pointer0);
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_urlget(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jobject p3, jobject p4) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer4 = p4 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLGet(pointer0, pointer1, pointer2, pointer3, (const tStringCVec *)pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

JNIEXPORT jint JNICALL Java_ni_niCURL_ICURL_urlgetDataTable(JNIEnv *e, jobject o, jstring p0, jobject p1) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    ni::iDataTable* pointer1 = p1 == NULL ? NULL : (ni::iDataTable*)jlong_to_ptr(e->GetLongField(p1, _JVM->refCountedObjPtrFieldID));
    jint r = 0;
    NI_JVM_CPP_TRY {
        int rvalue = pointer->URLGetDataTable(pointer0, pointer1);
        r = (jint)rvalue;
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_urlgetMultiPart(JNIEnv *e, jobject o, jobject p0, jstring p1, jstring p2) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    const char *pointer2 = p2 == NULL ? NULL : e->GetStringUTFChars(p2, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLGetMultiPart(pointer0, pointer1, pointer2);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p2 != NULL) e->ReleaseStringUTFChars(p2, pointer2);
    return r;
}

JNIEXPORT jstring JNICALL Java_ni_niCURL_ICURL_urlgetString(JNIEnv *e, jobject o, jstring p0) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    const char *pointer0 = p0 == NULL ? NULL : e->GetStringUTFChars(p0, NULL);
    jstring r = NULL;
    NI_JVM_CPP_TRY {
        r = niJVM_NewString(e,pointer->URLGetString(pointer0));
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p0 != NULL) e->ReleaseStringUTFChars(p0, pointer0);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_urlpostFields(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jobject p3, jstring p4, jobject p5, jstring p6) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    const char *pointer4 = p4 == NULL ? NULL : e->GetStringUTFChars(p4, NULL);
    ni::iCollection* pointer5 = p5 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p5, _JVM->refCountedObjPtrFieldID));
    const char *pointer6 = p6 == NULL ? NULL : e->GetStringUTFChars(p6, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLPostFields(pointer0, pointer1, pointer2, pointer3, pointer4, (const tStringCVec *)pointer5, pointer6);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p4 != NULL) e->ReleaseStringUTFChars(p4, pointer4);
    if (p6 != NULL) e->ReleaseStringUTFChars(p6, pointer6);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_urlpostFile(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jobject p3, jobject p4, jobject p5, jstring p6) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer4 = p4 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    ni::iCollection* pointer5 = p5 == NULL ? NULL : (ni::iCollection*)jlong_to_ptr(e->GetLongField(p5, _JVM->refCountedObjPtrFieldID));
    const char *pointer6 = p6 == NULL ? NULL : e->GetStringUTFChars(p6, NULL);
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLPostFile(pointer0, pointer1, pointer2, pointer3, pointer4, (const tStringCVec *)pointer5, pointer6);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    if (p6 != NULL) e->ReleaseStringUTFChars(p6, pointer6);
    return r;
}

JNIEXPORT jobject JNICALL Java_ni_niCURL_ICURL_urlpostMultiPart(JNIEnv *e, jobject o, jobject p0, jstring p1, jobject p2, jobject p3, jobject p4) {
    ni::iCURL* pointer = niJVM_GetIUnknown(e,o,ni::iCURL);
    if (niJVM_CheckNull(e, (uintptr_t)pointer)) {
        return 0;
    }
    niAssume(pointer != NULL);
    ni::iMessageHandler* pointer0 = p0 == NULL ? NULL : (ni::iMessageHandler*)jlong_to_ptr(e->GetLongField(p0, _JVM->refCountedObjPtrFieldID));
    const char *pointer1 = p1 == NULL ? NULL : e->GetStringUTFChars(p1, NULL);
    ni::iFile* pointer2 = p2 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p2, _JVM->refCountedObjPtrFieldID));
    ni::iFile* pointer3 = p3 == NULL ? NULL : (ni::iFile*)jlong_to_ptr(e->GetLongField(p3, _JVM->refCountedObjPtrFieldID));
    ni::iMutableCollection* pointer4 = p4 == NULL ? NULL : (ni::iMutableCollection*)jlong_to_ptr(e->GetLongField(p4, _JVM->refCountedObjPtrFieldID));
    jobject r = NULL;
    ni::Ptr<ni::iRunnable> rpointer;
    NI_JVM_CPP_TRY {
        rpointer = pointer->URLPostMultiPart(pointer0, pointer1, pointer2, pointer3, (tStringCMap *)pointer4);
        if (niIsOK(rpointer)) {
            r = niJVM_IUnknownNew(e, ni_getClass(e, 1), &niGetInterfaceUUID(ni::iRunnable), rpointer);
        }
    } NI_JVM_CPP_CATCH_AND_HANDLE_EXCEPTION(e);
    if (p1 != NULL) e->ReleaseStringUTFChars(p1, pointer1);
    return r;
}

} // extern "C"
#endif // ifdef niJNI
