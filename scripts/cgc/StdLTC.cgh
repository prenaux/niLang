#pragma once
#ifndef __STDLTC_CGH_98E28F89_5BE9_418A_BDE2_2FE8030B19A5__
#define __STDLTC_CGH_98E28F89_5BE9_418A_BDE2_2FE8030B19A5__
// SPDX-FileCopyrightText: (c) 2022 The niLang Authors
// SPDX-License-Identifier: MIT

#include "StdSampler.cgh"
#include "StdUtils.cgh"

#define LTC_LUT_SIZE  64.0
#define LTC_LUT_SCALE ((LTC_LUT_SIZE - 1.0)/LTC_LUT_SIZE)
#define LTC_LUT_BIAS  (0.5/LTC_LUT_SIZE)

#define PI			3.141592653589793
#define SQRT2		1.414213562373095
#define INVSQRT2	0.707106781186548

struct Plane {
	vec3 o;
	vec3 n;
};

Plane MakePlane(vec3 o, vec3 n) {
  Plane p;
  p.o = o;
  p.n = n;
	return p;
}

struct Line {
	vec3 o;
	vec3 d; // normalized
};

Line MakeLine(vec3 o, vec3 d) {
  Line l;
  l.o = o;
  l.d = d;
	return l;
}

Line MakeLine2P(vec3 p0, vec3 p1) {
	return MakeLine(p0, normalize(p1 - p0));
}

vec3 Line_At(Line l, float t) {
	return l.o + t * l.d;
}

vec3 Line_ClosestPoint(Line l, vec3 p) {
	float t = dot(p - l.o, l.d);
	return Line_At(l, t);
}

vec3 Intersect(Line l, Plane plane) {
	// P : l.o + t * l.d
	//    dot(plane.n, P - plane.o) = 0
	// => t * dot(plane.n, l.d) + dot(plane.n, l.o - plane.o) = 0
	// => t = dot(plane.n, plane.o - l.o) / dot(plane.n, l.d)
	float t = dot(plane.n, plane.o - l.o) / dot(plane.n, l.d);
	return Line_At(l, t);
}

float IntersectT(Line ray, vec4 plane) {
  return -dot(plane, vec4(ray.o, 1.0))/dot(plane.xyz, ray.d);
}

float4 stdLTC_SampleLUT(StdSampler s, float2 uv) {
  uv = uv*LTC_LUT_SCALE + LTC_LUT_BIAS;
  return stdSampler_Tex2D(s, uv);
}

float3 stdLTC_IntegrateEdgeVec(float3 v1, float3 v2)
{
  float x = dot(v1, v2);
  float y = abs(x);

  float a = 0.8543985 + (0.4965155 + 0.0145206*y)*y;
  float b = 3.4175940 + (4.1616724 + y)*y;
  float v = a / b;

  float theta_sintheta = (x > 0.0) ? v : 0.5*inversesqrt(max(1.0 - x*x, 1e-7)) - v;

  return cross(v1, v2)*theta_sintheta;
}
float stdLTC_IntegrateEdge(float3 v1, float3 v2) {
  return stdLTC_IntegrateEdgeVec(v1, v2).z;
}

void stdLTC_ClipQuadToHorizon(inout float3 L[5], out int n)
{
  // detect clipping config
  int config = 0;
  if (L[0].z > 0.0) config += 1;
  if (L[1].z > 0.0) config += 2;
  if (L[2].z > 0.0) config += 4;
  if (L[3].z > 0.0) config += 8;

  // clip
  n = 0;

  if (config == 0)
  {
    // clip all
  }
  else if (config == 1) // V1 clip V2 V3 V4
  {
    n = 3;
    L[1] = -L[1].z * L[0] + L[0].z * L[1];
    L[2] = -L[3].z * L[0] + L[0].z * L[3];
  }
  else if (config == 2) // V2 clip V1 V3 V4
  {
    n = 3;
    L[0] = -L[0].z * L[1] + L[1].z * L[0];
    L[2] = -L[2].z * L[1] + L[1].z * L[2];
  }
  else if (config == 3) // V1 V2 clip V3 V4
  {
    n = 4;
    L[2] = -L[2].z * L[1] + L[1].z * L[2];
    L[3] = -L[3].z * L[0] + L[0].z * L[3];
  }
  else if (config == 4) // V3 clip V1 V2 V4
  {
    n = 3;
    L[0] = -L[3].z * L[2] + L[2].z * L[3];
    L[1] = -L[1].z * L[2] + L[2].z * L[1];
  }
  else if (config == 5) // V1 V3 clip V2 V4) impossible
  {
    n = 0;
  }
  else if (config == 6) // V2 V3 clip V1 V4
  {
    n = 4;
    L[0] = -L[0].z * L[1] + L[1].z * L[0];
    L[3] = -L[3].z * L[2] + L[2].z * L[3];
  }
  else if (config == 7) // V1 V2 V3 clip V4
  {
    n = 5;
    L[4] = -L[3].z * L[0] + L[0].z * L[3];
    L[3] = -L[3].z * L[2] + L[2].z * L[3];
  }
  else if (config == 8) // V4 clip V1 V2 V3
  {
    n = 3;
    L[0] = -L[0].z * L[3] + L[3].z * L[0];
    L[1] = -L[2].z * L[3] + L[3].z * L[2];
    L[2] =  L[3];
  }
  else if (config == 9) // V1 V4 clip V2 V3
  {
    n = 4;
    L[1] = -L[1].z * L[0] + L[0].z * L[1];
    L[2] = -L[2].z * L[3] + L[3].z * L[2];
  }
  else if (config == 10) // V2 V4 clip V1 V3) impossible
  {
    n = 0;
  }
  else if (config == 11) // V1 V2 V4 clip V3
  {
    n = 5;
    L[4] = L[3];
    L[3] = -L[2].z * L[3] + L[3].z * L[2];
    L[2] = -L[2].z * L[1] + L[1].z * L[2];
  }
  else if (config == 12) // V3 V4 clip V1 V2
  {
    n = 4;
    L[1] = -L[1].z * L[2] + L[2].z * L[1];
    L[0] = -L[0].z * L[3] + L[3].z * L[0];
  }
  else if (config == 13) // V1 V3 V4 clip V2
  {
    n = 5;
    L[4] = L[3];
    L[3] = L[2];
    L[2] = -L[1].z * L[2] + L[2].z * L[1];
    L[1] = -L[1].z * L[0] + L[0].z * L[1];
  }
  else if (config == 14) // V2 V3 V4 clip V1
  {
    n = 5;
    L[4] = -L[0].z * L[3] + L[3].z * L[0];
    L[0] = -L[0].z * L[1] + L[1].z * L[0];
  }
  else if (config == 15) // V1 V2 V3 V4
  {
    n = 4;
  }

  if (n == 3)
    L[3] = L[0];
  if (n == 4)
    L[4] = L[0];
}

vec3 stdLTC_SampleCookie(StdSampler cookie, vec3 p1_, vec3 p2_, vec3 p3_, vec3 p4_)
{
  if (!cookie.HasTexture) {
    return vec3(1,1,1);
  }
  else {
    // area light plane basis
    vec3 V1 = p2_ - p1_;
    vec3 V2 = p4_ - p1_;
    vec3 planeOrtho = (cross(V1, V2));
    float planeAreaSquared = dot(planeOrtho, planeOrtho);
    float planeDistxPlaneArea = dot(planeOrtho, p1_);
    // orthonormal projection of (0,0,0) in area light space
    vec3 P = planeDistxPlaneArea * planeOrtho / planeAreaSquared - p1_;    // find tex coords of P
    float dot_V1_V2 = dot(V1,V2);
    float inv_dot_V1_V1 = 1.0 / dot(V1, V1);
    vec3 V2_ = V2 - V1 * dot_V1_V2 * inv_dot_V1_V1;
    vec2 Puv;
    Puv.y = dot(V2_, P) / dot(V2_, V2_);
    Puv.x = dot(V1, P)*inv_dot_V1_V1 - dot_V1_V2*inv_dot_V1_V1*Puv.y ;    // LOD
    float d = abs(planeDistxPlaneArea) / pow(planeAreaSquared, 0.75);
    float r = 1.0/max(cookie.Res.x,cookie.Res.y);
    return stdSampler_Tex2DLod(cookie, float4(vec2(0.125, 0.125) + 0.75 * Puv, 0, log(r*d)/log(3.0))).rgb;
    // return stdSampler_Tex2DLod(cookie, float4(vec2(0.125, 0.125) + 0.75 * Puv, 0, log(2048.0*d)/log(3.0))).rgb;
    // return stdSampler_Tex2D(cookie, vec2(0.125, 0.125) + 0.75 * Puv).rgb;
  }
}

vec3 stdLTC_SampleCookie(StdSampler cookie, vec3 p1, vec3 p2, vec3 p3, vec3 p4, vec3 dir)
{
  if (!cookie.HasTexture)
    return vec3(1, 1, 1);

  // area light plane basis
  vec3 V1 = p2 - p1;
  vec3 V2 = p4 - p1;
  vec3 planeOrtho = cross(V1, V2);
  float planeAreaSquared = dot(planeOrtho, planeOrtho);

  Line ray;
  ray.o = vec3(0, 0, 0);
  ray.d = dir;
  vec4 plane = vec4(planeOrtho, -dot(planeOrtho, p1));
  float planeDist = IntersectT(ray, plane);

  vec3 P = planeDist*ray.d - p1;

  // find tex coords of P
  float dot_V1_V2 = dot(V1, V2);
  float inv_dot_V1_V1 = 1.0 / dot(V1, V1);
  vec3 V2_ = V2 - V1 * dot_V1_V2 * inv_dot_V1_V1;
  vec2 Puv;
  Puv.y = dot(V2_, P) / dot(V2_, V2_);
  Puv.x = dot(V1, P)*inv_dot_V1_V1 - dot_V1_V2*inv_dot_V1_V1*Puv.y;

  float d = abs(planeDist) / pow(planeAreaSquared, 0.25);

  float r = 1.0/min(cookie.Res.x,cookie.Res.y);
  float lod = log(r*d)/log(3.0);
  // lod = min(lod, 7.0);

  float lodA = floor(lod);
  float lodB = ceil(lod);
  float t = lod - lodA;
  vec3 a = stdSampler_Tex2DLod(cookie, float4(Puv, 0, lodA)).rgb;
  vec3 b = stdSampler_Tex2DLod(cookie, float4(Puv, 0, lodB)).rgb;
  return mix(a, b, t);
}

void stdLTC_InitPolygonFromQuad(out float3 L[5],
                                float3 N, float3 V,
                                float3 P, float3x3 Minv, float3 points[4]) {
  // construct orthonormal basis around N
  float3 T1 = normalize(V - N*dot(V,N));
  float3 T2 = cross(N,T1);

  // rotate area light in (T1, T2, N) basis
  Minv = mul(Minv, float3x3(T1, T2, N));

  // polygon (allocate 5 vertices for clipping)
  L[0] = mul(Minv, points[3] - P);
  L[1] = mul(Minv, points[2] - P);
  L[2] = mul(Minv, points[1] - P);
  L[3] = mul(Minv, points[0] - P);
  L[4] = L[3]; // HLSL compiler complains that the value hasn't been initialized
}

float3 stdLTC_EvaluateVSum(float3 L[5], float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], out bool behind)
{
  // integrate
  float sum = 0.0;

  float3 dir = points[0].xyz - P;
  float3 lightNormal = cross(points[3] - points[0], points[1] - points[0]);
  behind = (dot(dir, lightNormal) < 0.0);

  L[0] = normalize(L[0]);
  L[1] = normalize(L[1]);
  L[2] = normalize(L[2]);
  L[3] = normalize(L[3]);

  float3 vsum = float3(0.0,0.0,0.0);
  vsum += stdLTC_IntegrateEdgeVec(L[0], L[1]);
  vsum += stdLTC_IntegrateEdgeVec(L[1], L[2]);
  vsum += stdLTC_IntegrateEdgeVec(L[2], L[3]);
  vsum += stdLTC_IntegrateEdgeVec(L[3], L[0]);
  return vsum;
}

float3 stdLTC_EvaluateNoClip(StdSampler sampCookie, float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], bool twoSided)
{
  float3 L[5];
  stdLTC_InitPolygonFromQuad(L,N,V,P,Minv,points);
  bool behind;
  float3 vsum = stdLTC_EvaluateVSum(L,N,V,P,Minv,points,behind);
  float len = length(vsum);
  if (behind && !twoSided)
    len = 0.0;
  return float3(len,len,len) *
      stdLTC_SampleCookie(sampCookie,L[0],L[1],L[2],L[3],vsum/len)
      //stdLTC_SampleCookie(sampCookie,L[0],L[1],L[2],L[3])
      ;
}

float3 stdLTC_EvaluateClipLookup(StdSampler sampCookie, StdSampler aLTC2, float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], bool twoSided)
{
  float3 L[5];
  stdLTC_InitPolygonFromQuad(L,N,V,P,Minv,points);

  bool behind;
  float3 vsum = stdLTC_EvaluateVSum(L,N,V,P,Minv,points,behind);
  float len = length(vsum);
  float z = vsum.z/len;
  if (behind)
    z = -z;

  float2 uv = float2(z*0.5 + 0.5, len);
  float scale = stdLTC_SampleLUT(aLTC2, uv).w;
  float sum = len*scale;
  if (behind && !twoSided)
    sum = 0.0;

  return float3(sum, sum, sum) * stdLTC_SampleCookie(sampCookie,L[0],L[1],L[2],L[3]);
}

float3 stdLTC_EvaluateClipToHorizon(StdSampler sampCookie, float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], bool twoSided)
{
  float3 L[5];
  stdLTC_InitPolygonFromQuad(L,N,V,P,Minv,points);

  float sum = 0.0;
  int n;
  stdLTC_ClipQuadToHorizon(L, n);
  if (n != 0) {
    // project onto sphere
    L[0] = normalize(L[0]);
    L[1] = normalize(L[1]);
    L[2] = normalize(L[2]);
    L[3] = normalize(L[3]);
    L[4] = normalize(L[4]);

    // integrate
    sum += stdLTC_IntegrateEdge(L[0], L[1]);
    sum += stdLTC_IntegrateEdge(L[1], L[2]);
    sum += stdLTC_IntegrateEdge(L[2], L[3]);
    if (n >= 4)
      sum += stdLTC_IntegrateEdge(L[3], L[4]);
    if (n == 5)
      sum += stdLTC_IntegrateEdge(L[4], L[0]);

    sum = twoSided ? abs(sum) : max(0.0, sum);
  }

  return float3(sum, sum, sum) * stdLTC_SampleCookie(sampCookie,L[0],L[1],L[2],L[3]);;
}

#define LTC_CLIPPING_NONE 0
#define LTC_CLIPPING_LOOKUP 1 // Precision issue & just broken with OpenGL
#define LTC_CLIPPING_HORIZON 2

float3 stdLTC_Evaluate(StdSampler sampCookie, StdSampler aLTC2, float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], bool twoSided, int clipping) {
  if (clipping == LTC_CLIPPING_HORIZON) {
    return stdLTC_EvaluateClipToHorizon(sampCookie, N, V, P, Minv, points, twoSided);
  }
  else if (clipping == LTC_CLIPPING_LOOKUP) {
    return stdLTC_EvaluateClipLookup(sampCookie, aLTC2, N, V, P, Minv, points, twoSided);
  }
  else {
    return stdLTC_EvaluateNoClip(sampCookie, N, V, P, Minv, points, twoSided);
  }
}

// p0 BL, p1 BR, p2 TR, p3 TL
void AreaLight_Corners(vec3 aLightPosition, vec3 aLightDir, vec3 aLightHorizon, float2 aLightSize,
                       out vec3 p0, out vec3 p1, out vec3 p2, out vec3 p3) {
	float a = aLightSize.x * 0.5;
	float b = aLightSize.y * 0.5;
	vec3 verticle = cross(aLightDir, aLightHorizon);
	vec3 halfWidthVec = aLightHorizon * a;
	vec3 halfHeightVec = verticle * b;

	p0 = aLightPosition - halfHeightVec - halfWidthVec;
	p1 = aLightPosition - halfHeightVec + halfWidthVec;
	p2 = aLightPosition + halfHeightVec + halfWidthVec;
	p3 = aLightPosition + halfHeightVec - halfWidthVec;
}

vec3 AreaLight_Illuminance(vec3 aLightPosition, vec3 aLightDir, vec3 aLightHorizon, float2 aLightSize, vec3 vertex, vec3 norm) {
	vec3 fragToLight = aLightPosition - vertex;
	if (dot(-fragToLight, aLightDir) <= 0) {
		return vec3(0,0,0);
  }
  else {
    float dist2 = dot(fragToLight, fragToLight);
    float dist = sqrt(dist2);
    vec3 wi = fragToLight / dist;

    // rightPyramidSolidAngle
    float a = aLightSize.x * 0.5;
    float b = aLightSize.y * 0.5;
    float solidAngle = 4 * asin(a*b / sqrt((a*a + dist2) * (b*b + dist2)));

    vec3 p0, p1, p2, p3;
    AreaLight_Corners(aLightPosition, aLightDir, aLightHorizon, aLightSize, p0, p1, p2, p3);

    float illuminanceFactor = solidAngle * 0.2 * (
      max(0, dot(normalize(p0 - vertex), norm)) +
      max(0, dot(normalize(p1 - vertex), norm)) +
      max(0, dot(normalize(p2 - vertex), norm)) +
      max(0, dot(normalize(p3 - vertex), norm)) +
      max(0, dot(wi, norm)));

    return illuminanceFactor; // * light.luminance;
  }
}

vec3 AreaLight_MRP(vec3 aLightPosition, vec3 aLightDir, vec3 aLightHorizon, float2 aLightSize, vec3 vertex, vec3 R) {
	vec3 fragToLight = aLightPosition - vertex;

	// closest point
	// d0 : light dir
	// d1 : wi
	// d2 : R
	// d3 : a*d1 + b*d2
	// dot(d3, d0) = 0 --> b = - dot(d1, d0) * a / dot(d2, d0) = k * a
	//                 --> d3 = a * (d1 + k*d2)
	// dot(d3, d3) = r2 --> a2 = r2 / (d1 + k*d2)^2
	Line lineR = MakeLine(vertex, R);
	Plane planeDisk = MakePlane(aLightPosition, aLightDir);
	vec3 intersectP = Intersect(lineR, planeDisk);

	// get dist to border
	vec3 offset = intersectP - aLightPosition;
	float offsetLen2 = dot(offset, offset);
	float cosTheta = dot(aLightHorizon, offset / sqrt(offsetLen2));
	float cos2Theta = cosTheta * cosTheta;
	float tanPhi = aLightSize.y / aLightSize.x;
	float cos2Phi = 1 / (1 + tanPhi * tanPhi);
	float distToBorder2;
	if (cos2Theta > cos2Phi) {
		float distToBorder = aLightSize.x / 2 / cosTheta;
		distToBorder2 = distToBorder * distToBorder;
	}
	else {
		float sin2Theta = 1 - cos2Theta;
		distToBorder2 = aLightSize.y * aLightSize.y / 4 / sin2Theta;
	}

	vec3 d0 = aLightDir;
	vec3 d1 = -normalize(fragToLight);
	vec3 d2 = R;

	float curR2 = saturate(offsetLen2 / distToBorder2) * distToBorder2;
	float k = -dot(d1, d0) / dot(d2, d0);
	vec3 d1kd2 = d1 + k * d2;
	float a2 = curR2 / dot(d1kd2, d1kd2);
	float a = sqrt(a2);
	vec3 d3 = sign(dot(-R, d0)) * a * d1kd2;

	return aLightPosition + d3;
}

/// EOF //////////////////////////////////////////////////////////////////////////////////////
#endif // __STDLTC_CGH_98E28F89_5BE9_418A_BDE2_2FE8030B19A5__
